
MIDI_Commander_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08003000  08003000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006574  080031e4  080031e4  000031e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001560  08009758  08009758  00009758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb8  0800acb8  000101c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800acb8  0800acb8  000101c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800acb8  0800acb8  000101c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acb8  0800acb8  0000acb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acbc  0800acbc  0000acbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  0800acc0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  200001c0  0800ae80  000101c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001620  0800ae80  00011620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ca5  00000000  00000000  000101e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055a9  00000000  00000000  00034e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000129b6  00000000  00000000  0003a437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  0004cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a98  00000000  00000000  0004dc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d538  00000000  00000000  00050718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201db  00000000  00000000  0006dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099ed3  00000000  00000000  0008de2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127cfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ea0  00000000  00000000  00127d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080031e4 <__do_global_dtors_aux>:
 80031e4:	b510      	push	{r4, lr}
 80031e6:	4c05      	ldr	r4, [pc, #20]	; (80031fc <__do_global_dtors_aux+0x18>)
 80031e8:	7823      	ldrb	r3, [r4, #0]
 80031ea:	b933      	cbnz	r3, 80031fa <__do_global_dtors_aux+0x16>
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__do_global_dtors_aux+0x1c>)
 80031ee:	b113      	cbz	r3, 80031f6 <__do_global_dtors_aux+0x12>
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <__do_global_dtors_aux+0x20>)
 80031f2:	f3af 8000 	nop.w
 80031f6:	2301      	movs	r3, #1
 80031f8:	7023      	strb	r3, [r4, #0]
 80031fa:	bd10      	pop	{r4, pc}
 80031fc:	200001c0 	.word	0x200001c0
 8003200:	00000000 	.word	0x00000000
 8003204:	08009740 	.word	0x08009740

08003208 <frame_dummy>:
 8003208:	b508      	push	{r3, lr}
 800320a:	4b03      	ldr	r3, [pc, #12]	; (8003218 <frame_dummy+0x10>)
 800320c:	b11b      	cbz	r3, 8003216 <frame_dummy+0xe>
 800320e:	4903      	ldr	r1, [pc, #12]	; (800321c <frame_dummy+0x14>)
 8003210:	4803      	ldr	r0, [pc, #12]	; (8003220 <frame_dummy+0x18>)
 8003212:	f3af 8000 	nop.w
 8003216:	bd08      	pop	{r3, pc}
 8003218:	00000000 	.word	0x00000000
 800321c:	200001c4 	.word	0x200001c4
 8003220:	08009740 	.word	0x08009740

08003224 <display_init>:
#include <stdio.h>
#include "ssd1306.h"
#include "eeprom_midi_settings.h"


void display_init(void){
 8003224:	b508      	push	{r3, lr}
    ssd1306_Init();
 8003226:	f005 fd67 	bl	8008cf8 <ssd1306_Init>

    ssd1306_SetCursor(5,0);
 800322a:	2100      	movs	r1, #0
 800322c:	2005      	movs	r0, #5
 800322e:	f005 fd15 	bl	8008c5c <ssd1306_SetCursor>

    ssd1306_WriteString("*CUSTOM*", Font_11x18, White);
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <display_init+0x38>)
 8003234:	2301      	movs	r3, #1
 8003236:	ca06      	ldmia	r2, {r1, r2}
 8003238:	4809      	ldr	r0, [pc, #36]	; (8003260 <display_init+0x3c>)
 800323a:	f005 fcf3 	bl	8008c24 <ssd1306_WriteString>
    ssd1306_SetCursor(5, 22);
 800323e:	2116      	movs	r1, #22
 8003240:	2005      	movs	r0, #5
 8003242:	f005 fd0b 	bl	8008c5c <ssd1306_SetCursor>
    ssd1306_WriteString(FIRMWARE_VERSION, Font_7x10, White);
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <display_init+0x40>)
 8003248:	2301      	movs	r3, #1
 800324a:	ca06      	ldmia	r2, {r1, r2}
 800324c:	4806      	ldr	r0, [pc, #24]	; (8003268 <display_init+0x44>)
 800324e:	f005 fce9 	bl	8008c24 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
}
 8003252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ssd1306_UpdateScreen();
 8003256:	f005 bc0f 	b.w	8008a78 <ssd1306_UpdateScreen>
 800325a:	bf00      	nop
 800325c:	20000158 	.word	0x20000158
 8003260:	08009758 	.word	0x08009758
 8003264:	20000160 	.word	0x20000160
 8003268:	08009764 	.word	0x08009764

0800326c <display_setConfigName>:

void display_setConfigName(void){
 800326c:	b570      	push	{r4, r5, r6, lr}
    ssd1306_SetCursor(10, 34);
 800326e:	2122      	movs	r1, #34	; 0x22
 8003270:	200a      	movs	r0, #10
 8003272:	f005 fcf3 	bl	8008c5c <ssd1306_SetCursor>
 8003276:	2410      	movs	r4, #16
 8003278:	4d07      	ldr	r5, [pc, #28]	; (8003298 <display_setConfigName+0x2c>)
 800327a:	4e08      	ldr	r6, [pc, #32]	; (800329c <display_setConfigName+0x30>)
    for(int i=0; i<16; i++){
    	ssd1306_WriteChar(pGlobalSettings[16+i], Font_7x10, White);
 800327c:	2301      	movs	r3, #1
 800327e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003282:	6830      	ldr	r0, [r6, #0]
 8003284:	5d00      	ldrb	r0, [r0, r4]
 8003286:	441c      	add	r4, r3
 8003288:	f005 fc74 	bl	8008b74 <ssd1306_WriteChar>
    for(int i=0; i<16; i++){
 800328c:	2c20      	cmp	r4, #32
 800328e:	d1f5      	bne.n	800327c <display_setConfigName+0x10>
    }
    ssd1306_UpdateScreen();
}
 8003290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ssd1306_UpdateScreen();
 8003294:	f005 bbf0 	b.w	8008a78 <ssd1306_UpdateScreen>
 8003298:	20000160 	.word	0x20000160
 800329c:	20000618 	.word	0x20000618

080032a0 <display_setBankName>:


void display_setBankName(uint8_t bankNumber){
	uint8_t *pString = pBankStrings + (12 * bankNumber);
 80032a0:	4a16      	ldr	r2, [pc, #88]	; (80032fc <display_setBankName+0x5c>)
void display_setBankName(uint8_t bankNumber){
 80032a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t *pString = pBankStrings + (12 * bankNumber);
 80032a4:	6816      	ldr	r6, [r2, #0]
 80032a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1

	ssd1306_Fill(Black);
 80032aa:	2000      	movs	r0, #0
	uint8_t *pString = pBankStrings + (12 * bankNumber);
 80032ac:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	ssd1306_Fill(Black);
 80032b0:	f005 fbd4 	bl	8008a5c <ssd1306_Fill>


    ssd1306_SetCursor(30,20);
 80032b4:	2114      	movs	r1, #20
 80032b6:	201e      	movs	r0, #30
	uint8_t *pString = pBankStrings + (12 * bankNumber);
 80032b8:	4635      	mov	r5, r6
    ssd1306_SetCursor(30,20);
 80032ba:	f005 fccf 	bl	8008c5c <ssd1306_SetCursor>
    for(int i=0; i<4; i++){
 80032be:	4f10      	ldr	r7, [pc, #64]	; (8003300 <display_setBankName+0x60>)
 80032c0:	1d34      	adds	r4, r6, #4
    	ssd1306_WriteChar((char)*pString++, Font_11x18, White);
 80032c2:	f815 0b01 	ldrb.w	r0, [r5], #1
 80032c6:	2301      	movs	r3, #1
 80032c8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80032cc:	f005 fc52 	bl	8008b74 <ssd1306_WriteChar>
    for(int i=0; i<4; i++){
 80032d0:	42ac      	cmp	r4, r5
 80032d2:	d1f6      	bne.n	80032c2 <display_setBankName+0x22>
    }

    ssd1306_SetCursor(30,40);
 80032d4:	2128      	movs	r1, #40	; 0x28
 80032d6:	201e      	movs	r0, #30
 80032d8:	f005 fcc0 	bl	8008c5c <ssd1306_SetCursor>
    for(int i=0; i<8; i++){
 80032dc:	4d09      	ldr	r5, [pc, #36]	; (8003304 <display_setBankName+0x64>)
 80032de:	360c      	adds	r6, #12
    	ssd1306_WriteChar((char)*pString++, Font_7x10, White);
 80032e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80032e4:	2301      	movs	r3, #1
 80032e6:	e895 0006 	ldmia.w	r5, {r1, r2}
 80032ea:	f005 fc43 	bl	8008b74 <ssd1306_WriteChar>
    for(int i=0; i<8; i++){
 80032ee:	42a6      	cmp	r6, r4
 80032f0:	d1f6      	bne.n	80032e0 <display_setBankName+0x40>
    }

    ssd1306_UpdateScreen();
}
 80032f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ssd1306_UpdateScreen();
 80032f6:	f005 bbbf 	b.w	8008a78 <ssd1306_UpdateScreen>
 80032fa:	bf00      	nop
 80032fc:	20000614 	.word	0x20000614
 8003300:	20000158 	.word	0x20000158
 8003304:	20000160 	.word	0x20000160

08003308 <eeprom_load_settings>:
}

void eeprom_load_settings(void){
	uint16_t ee_byte_address = 0;
	// Load the complete EEPROM into RAM
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_mirror, 0x400, 100);
 8003308:	2164      	movs	r1, #100	; 0x64
 800330a:	f44f 6280 	mov.w	r2, #1024	; 0x400
void eeprom_load_settings(void){
 800330e:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_mirror, 0x400, 100);
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <eeprom_load_settings+0x3c>)
void eeprom_load_settings(void){
 8003312:	b085      	sub	sp, #20
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_mirror, 0x400, 100);
 8003314:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	2301      	movs	r3, #1
 800331e:	21a0      	movs	r1, #160	; 0xa0
 8003320:	4809      	ldr	r0, [pc, #36]	; (8003348 <eeprom_load_settings+0x40>)
 8003322:	f001 ff63 	bl	80051ec <HAL_I2C_Mem_Read>
	if(status != HAL_OK){
 8003326:	b100      	cbz	r0, 800332a <eeprom_load_settings+0x22>
	__NOP();
 8003328:	bf00      	nop
		eeprom_error();
	}

	pGlobalSettings = eeprom_mirror + 128;
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <eeprom_load_settings+0x44>)
 800332c:	4d08      	ldr	r5, [pc, #32]	; (8003350 <eeprom_load_settings+0x48>)
	pBankStrings = pGlobalSettings + 32;
 800332e:	4809      	ldr	r0, [pc, #36]	; (8003354 <eeprom_load_settings+0x4c>)
	pSwitchCmds = pBankStrings + 96;
 8003330:	4a09      	ldr	r2, [pc, #36]	; (8003358 <eeprom_load_settings+0x50>)
	pBankStrings = pGlobalSettings + 32;
 8003332:	f103 0420 	add.w	r4, r3, #32
	pSwitchCmds = pBankStrings + 96;
 8003336:	f103 0180 	add.w	r1, r3, #128	; 0x80
	pGlobalSettings = eeprom_mirror + 128;
 800333a:	602b      	str	r3, [r5, #0]
	pBankStrings = pGlobalSettings + 32;
 800333c:	6004      	str	r4, [r0, #0]
	pSwitchCmds = pBankStrings + 96;
 800333e:	6011      	str	r1, [r2, #0]
}
 8003340:	b005      	add	sp, #20
 8003342:	bd30      	pop	{r4, r5, pc}
 8003344:	20000620 	.word	0x20000620
 8003348:	20000a20 	.word	0x20000a20
 800334c:	200006a0 	.word	0x200006a0
 8003350:	20000618 	.word	0x20000618
 8003354:	20000614 	.word	0x20000614
 8003358:	2000061c 	.word	0x2000061c

0800335c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800335c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800335e:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003360:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003362:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003366:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003368:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
{
 800336c:	b097      	sub	sp, #92	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800336e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003370:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003374:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003378:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800337c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003380:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003384:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003388:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800338c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800338e:	9301      	str	r3, [sp, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003390:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003392:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003394:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003396:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003398:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800339a:	f003 f841 	bl	8006420 <HAL_RCC_OscConfig>
 800339e:	b108      	cbz	r0, 80033a4 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033a4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033aa:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033ac:	4621      	mov	r1, r4
 80033ae:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033b0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033b2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033b4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b6:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033b8:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033ba:	f003 fa73 	bl	80068a4 <HAL_RCC_ClockConfig>
 80033be:	4603      	mov	r3, r0
 80033c0:	b108      	cbz	r0, 80033c6 <SystemClock_Config+0x6a>
 80033c2:	b672      	cpsid	i
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80033c6:	2210      	movs	r2, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c8:	a806      	add	r0, sp, #24
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80033ca:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80033cc:	9206      	str	r2, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ce:	f003 fb29 	bl	8006a24 <HAL_RCCEx_PeriphCLKConfig>
 80033d2:	b108      	cbz	r0, 80033d8 <SystemClock_Config+0x7c>
 80033d4:	b672      	cpsid	i
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <SystemClock_Config+0x7a>
}
 80033d8:	b017      	add	sp, #92	; 0x5c
 80033da:	bd30      	pop	{r4, r5, pc}

080033dc <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	2400      	movs	r4, #0
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b088      	sub	sp, #32
  HAL_Init();
 80033e2:	f000 ff0b 	bl	80041fc <HAL_Init>
  SystemClock_Config();
 80033e6:	f7ff ffb9 	bl	800335c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ea:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80033ee:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f2:	4d67      	ldr	r5, [pc, #412]	; (8003590 <main+0x1b4>)
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 80033f4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f6:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 80033f8:	f44f 4130 	mov.w	r1, #45056	; 0xb000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fc:	f043 0310 	orr.w	r3, r3, #16
 8003400:	61ab      	str	r3, [r5, #24]
 8003402:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 8003404:	4863      	ldr	r0, [pc, #396]	; (8003594 <main+0x1b8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800340e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003410:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003412:	f043 0320 	orr.w	r3, r3, #32
 8003416:	61ab      	str	r3, [r5, #24]
 8003418:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003426:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = SW_B_Pin;
 8003428:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	61ab      	str	r3, [r5, #24]
 8003432:	69ab      	ldr	r3, [r5, #24]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800343c:	69ab      	ldr	r3, [r5, #24]
 800343e:	f043 0308 	orr.w	r3, r3, #8
 8003442:	61ab      	str	r3, [r5, #24]
 8003444:	69ab      	ldr	r3, [r5, #24]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 800344e:	f001 fb47 	bl	8004ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_D_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8003452:	4622      	mov	r2, r4
 8003454:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003458:	484f      	ldr	r0, [pc, #316]	; (8003598 <main+0x1bc>)
 800345a:	f001 fb41 	bl	8004ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_E_Pin|LED_5_Pin|LED_4_Pin|LED_3_Pin
 800345e:	4622      	mov	r2, r4
 8003460:	f245 011e 	movw	r1, #20510	; 0x501e
 8003464:	484d      	ldr	r0, [pc, #308]	; (800359c <main+0x1c0>)
 8003466:	f001 fb3b 	bl	8004ae0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_C_Pin|LED_B_Pin|USB_ID_Pin;
 800346a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346e:	4849      	ldr	r0, [pc, #292]	; (8003594 <main+0x1b8>)
 8003470:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003472:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003478:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347c:	f001 fa02 	bl	8004884 <HAL_GPIO_Init>
  HAL_GPIO_Init(SW_B_GPIO_Port, &GPIO_InitStruct);
 8003480:	4844      	ldr	r0, [pc, #272]	; (8003594 <main+0x1b8>)
 8003482:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003484:	e9cd 4605 	strd	r4, r6, [sp, #20]
  GPIO_InitStruct.Pin = SW_B_Pin;
 8003488:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(SW_B_GPIO_Port, &GPIO_InitStruct);
 800348a:	f001 f9fb 	bl	8004884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_C_Pin|SW_D_Pin|SW_E_Pin|SW_2_Pin
 800348e:	f248 4351 	movw	r3, #33873	; 0x8451
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003492:	4841      	ldr	r0, [pc, #260]	; (8003598 <main+0x1bc>)
 8003494:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_C_Pin|SW_D_Pin|SW_E_Pin|SW_2_Pin
 8003496:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003498:	e9cd 4605 	strd	r4, r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	f001 f9f2 	bl	8004884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_D_Pin|LED_2_Pin;
 80034a0:	f44f 7390 	mov.w	r3, #288	; 0x120
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a4:	483c      	ldr	r0, [pc, #240]	; (8003598 <main+0x1bc>)
 80034a6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_D_Pin|LED_2_Pin;
 80034a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	e9cd 6405 	strd	r6, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	f001 f9e7 	bl	8004884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_E_Pin|LED_5_Pin|LED_4_Pin|LED_3_Pin
 80034b6:	f245 031e 	movw	r3, #20510	; 0x501e
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ba:	4838      	ldr	r0, [pc, #224]	; (800359c <main+0x1c0>)
 80034bc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_E_Pin|LED_5_Pin|LED_4_Pin|LED_3_Pin
 80034be:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	e9cd 6405 	strd	r6, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c8:	f001 f9dc 	bl	8004884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_5_Pin|SW_4_Pin|SW_3_Pin|SW_A_Pin;
 80034cc:	f24a 4320 	movw	r3, #42016	; 0xa420
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d0:	4832      	ldr	r0, [pc, #200]	; (800359c <main+0x1c0>)
 80034d2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_5_Pin|SW_4_Pin|SW_3_Pin|SW_A_Pin;
 80034d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d6:	e9cd 4605 	strd	r4, r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	f001 f9d3 	bl	8004884 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034de:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80034e0:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034e2:	4333      	orrs	r3, r6
 80034e4:	616b      	str	r3, [r5, #20]
 80034e6:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80034e8:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034ea:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80034ec:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034ee:	9304      	str	r3, [sp, #16]
 80034f0:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80034f2:	f000 fecb 	bl	800428c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80034f6:	2011      	movs	r0, #17
 80034f8:	f000 ff00 	bl	80042fc <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 31250;
 80034fc:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003500:	230c      	movs	r3, #12
  huart2.Instance = USART2;
 8003502:	4827      	ldr	r0, [pc, #156]	; (80035a0 <main+0x1c4>)
 8003504:	4927      	ldr	r1, [pc, #156]	; (80035a4 <main+0x1c8>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003506:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800350a:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.BaudRate = 31250;
 800350e:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003512:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003514:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003516:	f003 fb47 	bl	8006ba8 <HAL_UART_Init>
 800351a:	b108      	cbz	r0, 8003520 <main+0x144>
 800351c:	b672      	cpsid	i
  while (1)
 800351e:	e7fe      	b.n	800351e <main+0x142>
  hi2c1.Instance = I2C1;
 8003520:	4603      	mov	r3, r0
 8003522:	4921      	ldr	r1, [pc, #132]	; (80035a8 <main+0x1cc>)
 8003524:	4821      	ldr	r0, [pc, #132]	; (80035ac <main+0x1d0>)
  hi2c1.Init.ClockSpeed = 400000;
 8003526:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <main+0x1d4>)
  hi2c1.Init.OwnAddress1 = 0;
 8003528:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800352c:	e9c0 7304 	strd	r7, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003530:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.ClockSpeed = 400000;
 8003534:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003538:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800353a:	f001 fcf1 	bl	8004f20 <HAL_I2C_Init>
 800353e:	4604      	mov	r4, r0
 8003540:	bb20      	cbnz	r0, 800358c <main+0x1b0>
  MX_USB_DEVICE_Init();
 8003542:	f005 fd33 	bl	8008fac <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(USB_ID_GPIO_Port, USB_ID_Pin, GPIO_PIN_RESET);
 8003546:	4622      	mov	r2, r4
 8003548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800354c:	4811      	ldr	r0, [pc, #68]	; (8003594 <main+0x1b8>)
 800354e:	f001 fac7 	bl	8004ae0 <HAL_GPIO_WritePin>
  display_init();
 8003552:	f7ff fe67 	bl	8003224 <display_init>
  eeprom_load_settings();
 8003556:	f7ff fed7 	bl	8003308 <eeprom_load_settings>
  display_setConfigName();
 800355a:	f7ff fe87 	bl	800326c <display_setConfigName>
  sw_led_init();
 800355e:	f000 fbcb 	bl	8003cf8 <sw_led_init>
  HAL_Delay(1000);
 8003562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003566:	f000 fe6d 	bl	8004244 <HAL_Delay>
  HAL_GPIO_WritePin(USB_ID_GPIO_Port, USB_ID_Pin, GPIO_PIN_SET);
 800356a:	4632      	mov	r2, r6
 800356c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003570:	4808      	ldr	r0, [pc, #32]	; (8003594 <main+0x1b8>)
 8003572:	f001 fab5 	bl	8004ae0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8003576:	20c8      	movs	r0, #200	; 0xc8
 8003578:	f000 fe64 	bl	8004244 <HAL_Delay>
  f_sys_config_complete = 1; // Don't scan switch changes until everything is init'd
 800357c:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <main+0x1d8>)
  display_setBankName(0);
 800357e:	4620      	mov	r0, r4
  f_sys_config_complete = 1; // Don't scan switch changes until everything is init'd
 8003580:	701e      	strb	r6, [r3, #0]
  display_setBankName(0);
 8003582:	f7ff fe8d 	bl	80032a0 <display_setBankName>
	  handleSwitches();
 8003586:	f000 fd11 	bl	8003fac <handleSwitches>
  while (1)
 800358a:	e7fc      	b.n	8003586 <main+0x1aa>
 800358c:	b672      	cpsid	i
  while (1)
 800358e:	e7fe      	b.n	800358e <main+0x1b2>
 8003590:	40021000 	.word	0x40021000
 8003594:	40011000 	.word	0x40011000
 8003598:	40010800 	.word	0x40010800
 800359c:	40010c00 	.word	0x40010c00
 80035a0:	20000ab8 	.word	0x20000ab8
 80035a4:	40004400 	.word	0x40004400
 80035a8:	40005400 	.word	0x40005400
 80035ac:	20000a20 	.word	0x20000a20
 80035b0:	00061a80 	.word	0x00061a80
 80035b4:	200001dc 	.word	0x200001dc

080035b8 <Error_Handler>:
 80035b8:	b672      	cpsid	i
 80035ba:	e7fe      	b.n	80035ba <Error_Handler+0x2>

080035bc <midiCmd_get_cmd_toggle>:
	return -1;
}

uint8_t midiCmd_get_cmd_toggle(uint8_t *pRom){
// Toggle state is always stored in the most significant bit of the second cmd byte
	return *(pRom+1) & 0x80;
 80035bc:	7840      	ldrb	r0, [r0, #1]
}
 80035be:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80035c2:	4770      	bx	lr

080035c4 <midiCmd_get_delay>:

/*
 * Returns the delay time to note or pitch bend off in ms
 */
uint32_t midiCmd_get_delay(uint8_t *pRom){
	return (uint32_t)*(pRom+3) * 10;
 80035c4:	78c0      	ldrb	r0, [r0, #3]
 80035c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 80035ca:	0040      	lsls	r0, r0, #1
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop

080035d0 <midi_serial_start_next_dma>:

void midi_serial_start_next_dma(void){
 80035d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t buffer_to_transmit = 0xFF;
	// Find the next buffer ready for transmit
	for(int i=0; i<4; i++){
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 80035d4:	4e0e      	ldr	r6, [pc, #56]	; (8003610 <midi_serial_start_next_dma+0x40>)
 80035d6:	4d0f      	ldr	r5, [pc, #60]	; (8003614 <midi_serial_start_next_dma+0x44>)
 80035d8:	7831      	ldrb	r1, [r6, #0]
 80035da:	1c4b      	adds	r3, r1, #1
 80035dc:	3105      	adds	r1, #5
 80035de:	f003 0403 	and.w	r4, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] != 0){
 80035e2:	5d2a      	ldrb	r2, [r5, r4]
 80035e4:	3301      	adds	r3, #1
 80035e6:	b91a      	cbnz	r2, 80035f0 <midi_serial_start_next_dma+0x20>
	for(int i=0; i<4; i++){
 80035e8:	4299      	cmp	r1, r3
 80035ea:	d1f8      	bne.n	80035de <midi_serial_start_next_dma+0xe>
				midi_uart_out_buffer_bytes_to_tx[buffer_to_transmit]) != HAL_OK)
			;
		last_transmitted_buffer = buffer_to_transmit;
	}

}
 80035ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		while(HAL_UART_Transmit_DMA(&huart2, midi_uart_out_buffer[buffer_to_transmit],
 80035f0:	4f09      	ldr	r7, [pc, #36]	; (8003618 <midi_serial_start_next_dma+0x48>)
 80035f2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800361c <midi_serial_start_next_dma+0x4c>
 80035f6:	eb07 1704 	add.w	r7, r7, r4, lsl #4
 80035fa:	e000      	b.n	80035fe <midi_serial_start_next_dma+0x2e>
 80035fc:	5d2a      	ldrb	r2, [r5, r4]
 80035fe:	4639      	mov	r1, r7
 8003600:	4640      	mov	r0, r8
 8003602:	f003 fb01 	bl	8006c08 <HAL_UART_Transmit_DMA>
 8003606:	2800      	cmp	r0, #0
 8003608:	d1f8      	bne.n	80035fc <midi_serial_start_next_dma+0x2c>
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 800360a:	7034      	strb	r4, [r6, #0]
}
 800360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003610:	20000000 	.word	0x20000000
 8003614:	200001e0 	.word	0x200001e0
 8003618:	20000afc 	.word	0x20000afc
 800361c:	20000ab8 	.word	0x20000ab8

08003620 <HAL_UART_TxCpltCallback>:
	// nothing to be done.
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == huart2.Instance){
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_UART_TxCpltCallback+0x1c>)
 8003622:	6802      	ldr	r2, [r0, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d000      	beq.n	800362c <HAL_UART_TxCpltCallback+0xc>
		// last sent buffer is complete, start another transfer.
		midi_uart_out_buffer_bytes_to_tx[last_transmitted_buffer] = 0;
		midi_serial_start_next_dma();
	}
}
 800362a:	4770      	bx	lr
		midi_uart_out_buffer_bytes_to_tx[last_transmitted_buffer] = 0;
 800362c:	2100      	movs	r1, #0
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <HAL_UART_TxCpltCallback+0x20>)
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_UART_TxCpltCallback+0x24>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	54d1      	strb	r1, [r2, r3]
		midi_serial_start_next_dma();
 8003636:	f7ff bfcb 	b.w	80035d0 <midi_serial_start_next_dma>
 800363a:	bf00      	nop
 800363c:	20000ab8 	.word	0x20000ab8
 8003640:	20000000 	.word	0x20000000
 8003644:	200001e0 	.word	0x200001e0

08003648 <midiCmd_send_stop_command>:

int8_t midiCmd_send_stop_command(void){
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <midiCmd_send_stop_command+0x5c>)
 800364e:	4d16      	ldr	r5, [pc, #88]	; (80036a8 <midiCmd_send_stop_command+0x60>)
 8003650:	7819      	ldrb	r1, [r3, #0]
 8003652:	1c4b      	adds	r3, r1, #1
 8003654:	3105      	adds	r1, #5
 8003656:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 800365a:	5cac      	ldrb	r4, [r5, r2]
 800365c:	3301      	adds	r3, #1
 800365e:	b12c      	cbz	r4, 800366c <midiCmd_send_stop_command+0x24>
	for(int i=0; i<4; i++){
 8003660:	428b      	cmp	r3, r1
 8003662:	d1f8      	bne.n	8003656 <midiCmd_send_stop_command+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8003664:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 8003666:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 800366a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = CIN_SINGLE_BYTE;
 800366c:	260f      	movs	r6, #15
	*(usbBuf++) = 0xFC; // Start byte
 800366e:	23fc      	movs	r3, #252	; 0xfc
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 8003670:	2101      	movs	r1, #1
	*(usbBuf++) = CIN_SINGLE_BYTE;
 8003672:	480e      	ldr	r0, [pc, #56]	; (80036ac <midiCmd_send_stop_command+0x64>)
	*serialBuf = 0xFC;
 8003674:	4f0e      	ldr	r7, [pc, #56]	; (80036b0 <midiCmd_send_stop_command+0x68>)
	*(usbBuf++) = CIN_SINGLE_BYTE;
 8003676:	7006      	strb	r6, [r0, #0]
	*serialBuf = 0xFC;
 8003678:	0116      	lsls	r6, r2, #4
	*(usbBuf++) = 0; // Pad
 800367a:	7084      	strb	r4, [r0, #2]
	*(usbBuf++) = 0; // Pad
 800367c:	70c4      	strb	r4, [r0, #3]
	*(usbBuf++) = 0xFC; // Start byte
 800367e:	7043      	strb	r3, [r0, #1]
	*serialBuf = 0xFC;
 8003680:	55bb      	strb	r3, [r7, r6]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 8003682:	54a9      	strb	r1, [r5, r2]
 8003684:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 8003686:	2104      	movs	r1, #4
 8003688:	f005 fd30 	bl	80090ec <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <midiCmd_send_stop_command+0x6c>)
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	2b20      	cmp	r3, #32
 8003694:	d001      	beq.n	800369a <midiCmd_send_stop_command+0x52>
	return 0;
 8003696:	4620      	mov	r0, r4
}
 8003698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		midi_serial_start_next_dma();
 800369a:	f7ff ff99 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 800369e:	4620      	mov	r0, r4
 80036a0:	e7fa      	b.n	8003698 <midiCmd_send_stop_command+0x50>
 80036a2:	bf00      	nop
 80036a4:	20000000 	.word	0x20000000
 80036a8:	200001e0 	.word	0x200001e0
 80036ac:	20000b3c 	.word	0x20000b3c
 80036b0:	20000afc 	.word	0x20000afc
 80036b4:	20000ab8 	.word	0x20000ab8

080036b8 <midiCmd_send_byte_serial>:

/*
 * Send a single byte message just through to the serial midi port.
 * This is to transfer start/stop/sync messages through from the USB to the midi port
 */
void midiCmd_send_byte_serial(uint8_t byteMessage){
 80036b8:	b430      	push	{r4, r5}
  __ASM volatile ("cpsid i" : : : "memory");
 80036ba:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <midiCmd_send_byte_serial+0x44>)
 80036be:	4d10      	ldr	r5, [pc, #64]	; (8003700 <midiCmd_send_byte_serial+0x48>)
 80036c0:	7819      	ldrb	r1, [r3, #0]
 80036c2:	1c4b      	adds	r3, r1, #1
 80036c4:	3105      	adds	r1, #5
 80036c6:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 80036ca:	5cac      	ldrb	r4, [r5, r2]
 80036cc:	3301      	adds	r3, #1
 80036ce:	b124      	cbz	r4, 80036da <midiCmd_send_byte_serial+0x22>
	for(int i=0; i<4; i++){
 80036d0:	428b      	cmp	r3, r1
 80036d2:	d1f8      	bne.n	80036c6 <midiCmd_send_byte_serial+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 80036d4:	b662      	cpsie	i
	*serialBuf = byteMessage;
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
	__enable_irq();

	midi_serial_transmit();
}
 80036d6:	bc30      	pop	{r4, r5}
 80036d8:	4770      	bx	lr
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 80036da:	2401      	movs	r4, #1
	*serialBuf = byteMessage;
 80036dc:	4909      	ldr	r1, [pc, #36]	; (8003704 <midiCmd_send_byte_serial+0x4c>)
 80036de:	0113      	lsls	r3, r2, #4
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 80036e0:	54ac      	strb	r4, [r5, r2]
	*serialBuf = byteMessage;
 80036e2:	54c8      	strb	r0, [r1, r3]
 80036e4:	b662      	cpsie	i
	if(huart2.gState == HAL_UART_STATE_READY){
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <midiCmd_send_byte_serial+0x50>)
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d001      	beq.n	80036f4 <midiCmd_send_byte_serial+0x3c>
}
 80036f0:	bc30      	pop	{r4, r5}
 80036f2:	4770      	bx	lr
 80036f4:	bc30      	pop	{r4, r5}
		midi_serial_start_next_dma();
 80036f6:	f7ff bf6b 	b.w	80035d0 <midi_serial_start_next_dma>
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000
 8003700:	200001e0 	.word	0x200001e0
 8003704:	20000afc 	.word	0x20000afc
 8003708:	20000ab8 	.word	0x20000ab8

0800370c <midiCmd_send_start_command>:

int8_t midiCmd_send_start_command(void){
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800370e:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <midiCmd_send_start_command+0x5c>)
 8003712:	4d16      	ldr	r5, [pc, #88]	; (800376c <midiCmd_send_start_command+0x60>)
 8003714:	7819      	ldrb	r1, [r3, #0]
 8003716:	1c4b      	adds	r3, r1, #1
 8003718:	3105      	adds	r1, #5
 800371a:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 800371e:	5cac      	ldrb	r4, [r5, r2]
 8003720:	3301      	adds	r3, #1
 8003722:	b12c      	cbz	r4, 8003730 <midiCmd_send_start_command+0x24>
	for(int i=0; i<4; i++){
 8003724:	428b      	cmp	r3, r1
 8003726:	d1f8      	bne.n	800371a <midiCmd_send_start_command+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8003728:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 800372a:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 800372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = CIN_SINGLE_BYTE;
 8003730:	260f      	movs	r6, #15
	*(usbBuf++) = 0xFA; // Start byte
 8003732:	23fa      	movs	r3, #250	; 0xfa
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 8003734:	2101      	movs	r1, #1
	*(usbBuf++) = CIN_SINGLE_BYTE;
 8003736:	480e      	ldr	r0, [pc, #56]	; (8003770 <midiCmd_send_start_command+0x64>)
	*serialBuf = 0xFA;
 8003738:	4f0e      	ldr	r7, [pc, #56]	; (8003774 <midiCmd_send_start_command+0x68>)
	*(usbBuf++) = CIN_SINGLE_BYTE;
 800373a:	7006      	strb	r6, [r0, #0]
	*serialBuf = 0xFA;
 800373c:	0116      	lsls	r6, r2, #4
	*(usbBuf++) = 0; // Pad
 800373e:	7084      	strb	r4, [r0, #2]
	*(usbBuf++) = 0; // Pad
 8003740:	70c4      	strb	r4, [r0, #3]
	*(usbBuf++) = 0xFA; // Start byte
 8003742:	7043      	strb	r3, [r0, #1]
	*serialBuf = 0xFA;
 8003744:	55bb      	strb	r3, [r7, r6]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 8003746:	54a9      	strb	r1, [r5, r2]
 8003748:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 800374a:	2104      	movs	r1, #4
 800374c:	f005 fcce 	bl	80090ec <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <midiCmd_send_start_command+0x6c>)
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	2b20      	cmp	r3, #32
 8003758:	d001      	beq.n	800375e <midiCmd_send_start_command+0x52>
	return 0;
 800375a:	4620      	mov	r0, r4
}
 800375c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		midi_serial_start_next_dma();
 800375e:	f7ff ff37 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 8003762:	4620      	mov	r0, r4
 8003764:	e7fa      	b.n	800375c <midiCmd_send_start_command+0x50>
 8003766:	bf00      	nop
 8003768:	20000000 	.word	0x20000000
 800376c:	200001e0 	.word	0x200001e0
 8003770:	20000b3c 	.word	0x20000b3c
 8003774:	20000afc 	.word	0x20000afc
 8003778:	20000ab8 	.word	0x20000ab8

0800377c <midiCmd_send_pb_command_from_rom>:


int8_t midiCmd_send_pb_command_from_rom(uint8_t *pRom, uint8_t on_off){
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800377e:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003780:	4b21      	ldr	r3, [pc, #132]	; (8003808 <midiCmd_send_pb_command_from_rom+0x8c>)
 8003782:	4e22      	ldr	r6, [pc, #136]	; (800380c <midiCmd_send_pb_command_from_rom+0x90>)
 8003784:	781c      	ldrb	r4, [r3, #0]
 8003786:	1c63      	adds	r3, r4, #1
 8003788:	3405      	adds	r4, #5
 800378a:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 800378e:	5cb5      	ldrb	r5, [r6, r2]
 8003790:	3301      	adds	r3, #1
 8003792:	b12d      	cbz	r5, 80037a0 <midiCmd_send_pb_command_from_rom+0x24>
	for(int i=0; i<4; i++){
 8003794:	42a3      	cmp	r3, r4
 8003796:	d1f8      	bne.n	800378a <midiCmd_send_pb_command_from_rom+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8003798:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 800379a:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 800379e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = CIN_PITCHBEND_CHANGE;
 80037a0:	230e      	movs	r3, #14
 80037a2:	4c1b      	ldr	r4, [pc, #108]	; (8003810 <midiCmd_send_pb_command_from_rom+0x94>)
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80037a4:	4d1b      	ldr	r5, [pc, #108]	; (8003814 <midiCmd_send_pb_command_from_rom+0x98>)
	*(usbBuf++) = CIN_PITCHBEND_CHANGE;
 80037a6:	7023      	strb	r3, [r4, #0]
	*(usbBuf++) = 0xE0| (pRom[0] & 0xF); // Channel
 80037a8:	7803      	ldrb	r3, [r0, #0]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80037aa:	eb05 1702 	add.w	r7, r5, r2, lsl #4
	*(usbBuf++) = 0xE0| (pRom[0] & 0xF); // Channel
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	f063 031f 	orn	r3, r3, #31
 80037b6:	7063      	strb	r3, [r4, #1]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80037b8:	ea4f 1c02 	mov.w	ip, r2, lsl #4
	*(usbBuf++) = on_off ? (pRom[1] & 0x7F) : 0x0; // PB LSB
 80037bc:	b9b9      	cbnz	r1, 80037ee <midiCmd_send_pb_command_from_rom+0x72>
	*(usbBuf++) = on_off ? (pRom[2] & 0x7F) : (0X2000 >> 7) & 0X7f; // PB MSB
 80037be:	2340      	movs	r3, #64	; 0x40
	*(usbBuf++) = on_off ? (pRom[1] & 0x7F) : 0x0; // PB LSB
 80037c0:	70a1      	strb	r1, [r4, #2]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 80037c2:	f04f 0e03 	mov.w	lr, #3
	memcpy(serialBuf, (usbBuf-3), 3);
 80037c6:	4814      	ldr	r0, [pc, #80]	; (8003818 <midiCmd_send_pb_command_from_rom+0x9c>)
	*(usbBuf++) = on_off ? (pRom[2] & 0x7F) : (0X2000 >> 7) & 0X7f; // PB MSB
 80037c8:	70e3      	strb	r3, [r4, #3]
	memcpy(serialBuf, (usbBuf-3), 3);
 80037ca:	f830 1901 	ldrh.w	r1, [r0], #-1
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 80037ce:	f806 e002 	strb.w	lr, [r6, r2]
	memcpy(serialBuf, (usbBuf-3), 3);
 80037d2:	f82c 1005 	strh.w	r1, [ip, r5]
 80037d6:	70bb      	strb	r3, [r7, #2]
 80037d8:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 80037da:	2104      	movs	r1, #4
 80037dc:	f005 fc86 	bl	80090ec <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <midiCmd_send_pb_command_from_rom+0xa0>)
 80037e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d009      	beq.n	80037fe <midiCmd_send_pb_command_from_rom+0x82>
	return 0;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = on_off ? (pRom[1] & 0x7F) : 0x0; // PB LSB
 80037ee:	7843      	ldrb	r3, [r0, #1]
 80037f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f4:	70a3      	strb	r3, [r4, #2]
	*(usbBuf++) = on_off ? (pRom[2] & 0x7F) : (0X2000 >> 7) & 0X7f; // PB MSB
 80037f6:	7883      	ldrb	r3, [r0, #2]
 80037f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037fc:	e7e1      	b.n	80037c2 <midiCmd_send_pb_command_from_rom+0x46>
		midi_serial_start_next_dma();
 80037fe:	f7ff fee7 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 8003802:	2000      	movs	r0, #0
}
 8003804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000
 800380c:	200001e0 	.word	0x200001e0
 8003810:	20000b3c 	.word	0x20000b3c
 8003814:	20000afc 	.word	0x20000afc
 8003818:	20000b3d 	.word	0x20000b3d
 800381c:	20000ab8 	.word	0x20000ab8

08003820 <midiCmd_send_note_command_from_rom>:

int8_t midiCmd_send_note_command_from_rom(uint8_t *pRom, uint8_t on_off){
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8003822:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003824:	4b29      	ldr	r3, [pc, #164]	; (80038cc <midiCmd_send_note_command_from_rom+0xac>)
 8003826:	4e2a      	ldr	r6, [pc, #168]	; (80038d0 <midiCmd_send_note_command_from_rom+0xb0>)
 8003828:	781c      	ldrb	r4, [r3, #0]
 800382a:	1c63      	adds	r3, r4, #1
 800382c:	3405      	adds	r4, #5
 800382e:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 8003832:	5cb5      	ldrb	r5, [r6, r2]
 8003834:	3301      	adds	r3, #1
 8003836:	b12d      	cbz	r5, 8003844 <midiCmd_send_note_command_from_rom+0x24>
	for(int i=0; i<4; i++){
 8003838:	429c      	cmp	r4, r3
 800383a:	d1f8      	bne.n	800382e <midiCmd_send_note_command_from_rom+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 800383c:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 800383e:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 8003842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 8003844:	4d23      	ldr	r5, [pc, #140]	; (80038d4 <midiCmd_send_note_command_from_rom+0xb4>)
 8003846:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 800384a:	eb05 1702 	add.w	r7, r5, r2, lsl #4
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 800384e:	bb29      	cbnz	r1, 800389c <midiCmd_send_note_command_from_rom+0x7c>
	*(usbBuf) = (on_off) ? 0x90 : 0x80; // Note on/off
 8003850:	2480      	movs	r4, #128	; 0x80
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 8003852:	f04f 0e08 	mov.w	lr, #8
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <midiCmd_send_note_command_from_rom+0xb8>)
	*(usbBuf) = (on_off) ? 0x90 : 0x80; // Note on/off
 8003858:	705c      	strb	r4, [r3, #1]
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 800385a:	f883 e000 	strb.w	lr, [r3]
	*(usbBuf++) |= pRom[0] & 0xF; // Channel
 800385e:	7804      	ldrb	r4, [r0, #0]
 8003860:	f004 040f 	and.w	r4, r4, #15
 8003864:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8003868:	705c      	strb	r4, [r3, #1]
	*(usbBuf++) = pRom[1] & 0x7F; // Note Number
 800386a:	7840      	ldrb	r0, [r0, #1]
 800386c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003870:	7098      	strb	r0, [r3, #2]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 8003872:	2403      	movs	r4, #3
	memcpy(serialBuf, (usbBuf-3), 3);
 8003874:	4819      	ldr	r0, [pc, #100]	; (80038dc <midiCmd_send_note_command_from_rom+0xbc>)
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : 0; // Velocity
 8003876:	70d9      	strb	r1, [r3, #3]
	memcpy(serialBuf, (usbBuf-3), 3);
 8003878:	7883      	ldrb	r3, [r0, #2]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 800387a:	54b4      	strb	r4, [r6, r2]
	memcpy(serialBuf, (usbBuf-3), 3);
 800387c:	8802      	ldrh	r2, [r0, #0]
 800387e:	f82c 2005 	strh.w	r2, [ip, r5]
 8003882:	70bb      	strb	r3, [r7, #2]
 8003884:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 8003886:	2104      	movs	r1, #4
 8003888:	3801      	subs	r0, #1
 800388a:	f005 fc2f 	bl	80090ec <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 800388e:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <midiCmd_send_note_command_from_rom+0xc0>)
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	2b20      	cmp	r3, #32
 8003896:	d014      	beq.n	80038c2 <midiCmd_send_note_command_from_rom+0xa2>
	return 0;
 8003898:	2000      	movs	r0, #0
}
 800389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf) = (on_off) ? 0x90 : 0x80; // Note on/off
 800389c:	2190      	movs	r1, #144	; 0x90
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 800389e:	2409      	movs	r4, #9
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <midiCmd_send_note_command_from_rom+0xb8>)
	*(usbBuf) = (on_off) ? 0x90 : 0x80; // Note on/off
 80038a2:	7059      	strb	r1, [r3, #1]
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 80038a4:	701c      	strb	r4, [r3, #0]
	*(usbBuf++) |= pRom[0] & 0xF; // Channel
 80038a6:	7801      	ldrb	r1, [r0, #0]
 80038a8:	f001 010f 	and.w	r1, r1, #15
 80038ac:	f061 016f 	orn	r1, r1, #111	; 0x6f
 80038b0:	7059      	strb	r1, [r3, #1]
	*(usbBuf++) = pRom[1] & 0x7F; // Note Number
 80038b2:	7841      	ldrb	r1, [r0, #1]
 80038b4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80038b8:	7099      	strb	r1, [r3, #2]
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : 0; // Velocity
 80038ba:	7881      	ldrb	r1, [r0, #2]
 80038bc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80038c0:	e7d7      	b.n	8003872 <midiCmd_send_note_command_from_rom+0x52>
		midi_serial_start_next_dma();
 80038c2:	f7ff fe85 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 80038c6:	2000      	movs	r0, #0
}
 80038c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000000 	.word	0x20000000
 80038d0:	200001e0 	.word	0x200001e0
 80038d4:	20000afc 	.word	0x20000afc
 80038d8:	20000b3c 	.word	0x20000b3c
 80038dc:	20000b3d 	.word	0x20000b3d
 80038e0:	20000ab8 	.word	0x20000ab8

080038e4 <midiCmd_send_cc_command_from_rom>:

int8_t midiCmd_send_cc_command_from_rom(uint8_t *pRom, uint8_t on_off){
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Check switch off value is valid, else no off value will be sent
	if(!on_off){
 80038e6:	b919      	cbnz	r1, 80038f0 <midiCmd_send_cc_command_from_rom+0xc>
		if(pRom[3] > 0x7F)
 80038e8:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	db3c      	blt.n	800396a <midiCmd_send_cc_command_from_rom+0x86>
  __ASM volatile ("cpsid i" : : : "memory");
 80038f0:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 80038f2:	4b21      	ldr	r3, [pc, #132]	; (8003978 <midiCmd_send_cc_command_from_rom+0x94>)
 80038f4:	4e21      	ldr	r6, [pc, #132]	; (800397c <midiCmd_send_cc_command_from_rom+0x98>)
 80038f6:	781c      	ldrb	r4, [r3, #0]
 80038f8:	1c63      	adds	r3, r4, #1
 80038fa:	3405      	adds	r4, #5
 80038fc:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 8003900:	5cb5      	ldrb	r5, [r6, r2]
 8003902:	3301      	adds	r3, #1
 8003904:	b12d      	cbz	r5, 8003912 <midiCmd_send_cc_command_from_rom+0x2e>
	for(int i=0; i<4; i++){
 8003906:	42a3      	cmp	r3, r4
 8003908:	d1f8      	bne.n	80038fc <midiCmd_send_cc_command_from_rom+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 800390a:	b662      	cpsie	i

	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 8003910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = CIN_CONTROL_CHANGE;
 8003912:	230b      	movs	r3, #11
 8003914:	4c1a      	ldr	r4, [pc, #104]	; (8003980 <midiCmd_send_cc_command_from_rom+0x9c>)
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 8003916:	4d1b      	ldr	r5, [pc, #108]	; (8003984 <midiCmd_send_cc_command_from_rom+0xa0>)
	*(usbBuf++) = CIN_CONTROL_CHANGE;
 8003918:	7023      	strb	r3, [r4, #0]
	*(usbBuf++) = 0xB0 | (pRom[0] & 0xF); // CC and Channel
 800391a:	7803      	ldrb	r3, [r0, #0]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 800391c:	eb05 1702 	add.w	r7, r5, r2, lsl #4
	*(usbBuf++) = 0xB0 | (pRom[0] & 0xF); // CC and Channel
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003928:	7063      	strb	r3, [r4, #1]
	*(usbBuf++) = pRom[1] & 0x7F; // CC Number
 800392a:	7843      	ldrb	r3, [r0, #1]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 800392c:	ea4f 1c02 	mov.w	ip, r2, lsl #4
	*(usbBuf++) = pRom[1] & 0x7F; // CC Number
 8003930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003934:	70a3      	strb	r3, [r4, #2]
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : pRom[3] & 0x7F; // Value
 8003936:	b9d1      	cbnz	r1, 800396e <midiCmd_send_cc_command_from_rom+0x8a>
 8003938:	78c3      	ldrb	r3, [r0, #3]
 800393a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 800393e:	f04f 0e03 	mov.w	lr, #3
	memcpy(serialBuf, (usbBuf-3), 3);
 8003942:	4811      	ldr	r0, [pc, #68]	; (8003988 <midiCmd_send_cc_command_from_rom+0xa4>)
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : pRom[3] & 0x7F; // Value
 8003944:	70e3      	strb	r3, [r4, #3]
	memcpy(serialBuf, (usbBuf-3), 3);
 8003946:	f830 1901 	ldrh.w	r1, [r0], #-1
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 800394a:	f806 e002 	strb.w	lr, [r6, r2]
	memcpy(serialBuf, (usbBuf-3), 3);
 800394e:	f82c 1005 	strh.w	r1, [ip, r5]
 8003952:	70bb      	strb	r3, [r7, #2]
 8003954:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 8003956:	2104      	movs	r1, #4
 8003958:	f005 fbc8 	bl	80090ec <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <midiCmd_send_cc_command_from_rom+0xa8>)
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	2b20      	cmp	r3, #32
 8003964:	d101      	bne.n	800396a <midiCmd_send_cc_command_from_rom+0x86>
		midi_serial_start_next_dma();
 8003966:	f7ff fe33 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 800396a:	2000      	movs	r0, #0
}
 800396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : pRom[3] & 0x7F; // Value
 800396e:	7883      	ldrb	r3, [r0, #2]
 8003970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003974:	e7e3      	b.n	800393e <midiCmd_send_cc_command_from_rom+0x5a>
 8003976:	bf00      	nop
 8003978:	20000000 	.word	0x20000000
 800397c:	200001e0 	.word	0x200001e0
 8003980:	20000b3c 	.word	0x20000b3c
 8003984:	20000afc 	.word	0x20000afc
 8003988:	20000b3d 	.word	0x20000b3d
 800398c:	20000ab8 	.word	0x20000ab8

08003990 <midiCmd_send_pc_command_from_rom>:


int8_t midiCmd_send_pc_command_from_rom(uint8_t *pRom){
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8003992:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003994:	4b37      	ldr	r3, [pc, #220]	; (8003a74 <midiCmd_send_pc_command_from_rom+0xe4>)
 8003996:	4f38      	ldr	r7, [pc, #224]	; (8003a78 <midiCmd_send_pc_command_from_rom+0xe8>)
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	1c53      	adds	r3, r2, #1
 800399c:	3205      	adds	r2, #5
 800399e:	f003 0503 	and.w	r5, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 80039a2:	5d7c      	ldrb	r4, [r7, r5]
 80039a4:	3301      	adds	r3, #1
 80039a6:	b12c      	cbz	r4, 80039b4 <midiCmd_send_pc_command_from_rom+0x24>
	for(int i=0; i<4; i++){
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d1f8      	bne.n	800399e <midiCmd_send_pc_command_from_rom+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 80039ac:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 80039ae:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 80039b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(pRom[2] < 0x80){ // Bank Select MSB
 80039b4:	f990 3002 	ldrsb.w	r3, [r0, #2]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80039b8:	4e30      	ldr	r6, [pc, #192]	; (8003a7c <midiCmd_send_pc_command_from_rom+0xec>)
	if(pRom[2] < 0x80){ // Bank Select MSB
 80039ba:	2b00      	cmp	r3, #0
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80039bc:	eb06 1c05 	add.w	ip, r6, r5, lsl #4
 80039c0:	ea4f 1e05 	mov.w	lr, r5, lsl #4
	if(pRom[2] < 0x80){ // Bank Select MSB
 80039c4:	da3b      	bge.n	8003a3e <midiCmd_send_pc_command_from_rom+0xae>
	uint8_t *usbBuf = midi_usb_assembly_buffer;
 80039c6:	492e      	ldr	r1, [pc, #184]	; (8003a80 <midiCmd_send_pc_command_from_rom+0xf0>)
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80039c8:	4662      	mov	r2, ip
	uint8_t *usbBuf = midi_usb_assembly_buffer;
 80039ca:	460b      	mov	r3, r1
	if(pRom[3] < 0x80){ // Bank Select LSB
 80039cc:	f990 4003 	ldrsb.w	r4, [r0, #3]
 80039d0:	2c00      	cmp	r4, #0
 80039d2:	db11      	blt.n	80039f8 <midiCmd_send_pc_command_from_rom+0x68>
		*(usbBuf++) = CIN_CONTROL_CHANGE;
 80039d4:	240b      	movs	r4, #11
		*(usbBuf++) = MIDI_PC_BANK_SELECT_LSB;
 80039d6:	2620      	movs	r6, #32
		*(usbBuf++) = CIN_CONTROL_CHANGE;
 80039d8:	701c      	strb	r4, [r3, #0]
		*(usbBuf++) = 0xB0 | (pRom[0] & 0xF);
 80039da:	7804      	ldrb	r4, [r0, #0]
		*(usbBuf++) = MIDI_PC_BANK_SELECT_LSB;
 80039dc:	709e      	strb	r6, [r3, #2]
		*(usbBuf++) = 0xB0 | (pRom[0] & 0xF);
 80039de:	f004 040f 	and.w	r4, r4, #15
 80039e2:	f064 044f 	orn	r4, r4, #79	; 0x4f
 80039e6:	705c      	strb	r4, [r3, #1]
		*(usbBuf++) = pRom[3];
 80039e8:	78c4      	ldrb	r4, [r0, #3]
		memcpy(serialBuf, (usbBuf-3), 3);
 80039ea:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		*(usbBuf++) = pRom[3];
 80039ee:	70dc      	strb	r4, [r3, #3]
		memcpy(serialBuf, (usbBuf-3), 3);
 80039f0:	7094      	strb	r4, [r2, #2]
 80039f2:	8016      	strh	r6, [r2, #0]
		*(usbBuf++) = pRom[3];
 80039f4:	3304      	adds	r3, #4
		serialBuf += 3;
 80039f6:	3203      	adds	r2, #3
	*(usbBuf++) = CIN_PROGRAM_CHANGE;
 80039f8:	240c      	movs	r4, #12
	*(usbBuf++) = 0; // must pad USB packets to 32b
 80039fa:	2600      	movs	r6, #0
	*(usbBuf++) = CIN_PROGRAM_CHANGE;
 80039fc:	701c      	strb	r4, [r3, #0]
	*(usbBuf++) = 0xC0 | (pRom[0] & 0xF);
 80039fe:	7804      	ldrb	r4, [r0, #0]
 8003a00:	f004 040f 	and.w	r4, r4, #15
 8003a04:	f064 043f 	orn	r4, r4, #63	; 0x3f
 8003a08:	705c      	strb	r4, [r3, #1]
	*(usbBuf++) = pRom[1] & 0x7F;
 8003a0a:	7840      	ldrb	r0, [r0, #1]
	*(usbBuf++) = 0; // must pad USB packets to 32b
 8003a0c:	70de      	strb	r6, [r3, #3]
	*(usbBuf++) = pRom[1] & 0x7F;
 8003a0e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003a12:	7098      	strb	r0, [r3, #2]
	memcpy(serialBuf, (usbBuf-3), 2);
 8003a14:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 8003a18:	f822 0b02 	strh.w	r0, [r2], #2
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 8003a1c:	eba2 020c 	sub.w	r2, r2, ip
 8003a20:	557a      	strb	r2, [r7, r5]
 8003a22:	b662      	cpsie	i
	*(usbBuf++) = 0; // must pad USB packets to 32b
 8003a24:	3304      	adds	r3, #4
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
 8003a26:	1a59      	subs	r1, r3, r1
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 8003a28:	4815      	ldr	r0, [pc, #84]	; (8003a80 <midiCmd_send_pc_command_from_rom+0xf0>)
 8003a2a:	b2c9      	uxtb	r1, r1
 8003a2c:	f005 fb5e 	bl	80090ec <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <midiCmd_send_pc_command_from_rom+0xf4>)
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d017      	beq.n	8003a6a <midiCmd_send_pc_command_from_rom+0xda>
	return 0;
 8003a3a:	4630      	mov	r0, r6
}
 8003a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*(usbBuf++) = CIN_CONTROL_CHANGE;
 8003a3e:	230b      	movs	r3, #11
 8003a40:	490f      	ldr	r1, [pc, #60]	; (8003a80 <midiCmd_send_pc_command_from_rom+0xf0>)
		serialBuf += 3;
 8003a42:	f10c 0203 	add.w	r2, ip, #3
		*(usbBuf++) = CIN_CONTROL_CHANGE;
 8003a46:	700b      	strb	r3, [r1, #0]
		*(usbBuf++) = 0xB0 | (pRom[0] & 0xF);
 8003a48:	7803      	ldrb	r3, [r0, #0]
		*(usbBuf++) = MIDI_PC_BANK_SELECT_MSB;
 8003a4a:	708c      	strb	r4, [r1, #2]
		*(usbBuf++) = 0xB0 | (pRom[0] & 0xF);
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003a54:	704b      	strb	r3, [r1, #1]
		memcpy(serialBuf, (usbBuf-3), 3);
 8003a56:	f8b1 4001 	ldrh.w	r4, [r1, #1]
		*(usbBuf++) = pRom[2];
 8003a5a:	7883      	ldrb	r3, [r0, #2]
		memcpy(serialBuf, (usbBuf-3), 3);
 8003a5c:	f82e 4006 	strh.w	r4, [lr, r6]
		*(usbBuf++) = pRom[2];
 8003a60:	70cb      	strb	r3, [r1, #3]
		memcpy(serialBuf, (usbBuf-3), 3);
 8003a62:	f88c 3002 	strb.w	r3, [ip, #2]
		*(usbBuf++) = pRom[2];
 8003a66:	1d0b      	adds	r3, r1, #4
 8003a68:	e7b0      	b.n	80039cc <midiCmd_send_pc_command_from_rom+0x3c>
		midi_serial_start_next_dma();
 8003a6a:	f7ff fdb1 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 8003a6e:	4630      	mov	r0, r6
}
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000000 	.word	0x20000000
 8003a78:	200001e0 	.word	0x200001e0
 8003a7c:	20000afc 	.word	0x20000afc
 8003a80:	20000b3c 	.word	0x20000b3c
 8003a84:	20000ab8 	.word	0x20000ab8

08003a88 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_MspInit+0x3c>)
{
 8003a8a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a8c:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a8e:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	619a      	str	r2, [r3, #24]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	f002 0201 	and.w	r2, r2, #1
 8003a9c:	9200      	str	r2, [sp, #0]
 8003a9e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003aa6:	61da      	str	r2, [r3, #28]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ab2:	684b      	ldr	r3, [r1, #4]
 8003ab4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003abc:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003abe:	b002      	add	sp, #8
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40010000 	.word	0x40010000

08003acc <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	2300      	movs	r3, #0
{
 8003ace:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 8003ad0:	6801      	ldr	r1, [r0, #0]
 8003ad2:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_I2C_MspInit+0x58>)
{
 8003ad4:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 8003ad6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003adc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ae2:	b007      	add	sp, #28
 8003ae4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ae6:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ae8:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aea:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aec:	4c0e      	ldr	r4, [pc, #56]	; (8003b28 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aee:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af0:	69a3      	ldr	r3, [r4, #24]
 8003af2:	f043 0308 	orr.w	r3, r3, #8
 8003af6:	61a3      	str	r3, [r4, #24]
 8003af8:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003afa:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b02:	480a      	ldr	r0, [pc, #40]	; (8003b2c <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b04:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b06:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b08:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0a:	f000 febb 	bl	8004884 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b0e:	69e3      	ldr	r3, [r4, #28]
 8003b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b14:	61e3      	str	r3, [r4, #28]
 8003b16:	69e3      	ldr	r3, [r4, #28]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	9b01      	ldr	r3, [sp, #4]
}
 8003b20:	b007      	add	sp, #28
 8003b22:	bd30      	pop	{r4, r5, pc}
 8003b24:	40005400 	.word	0x40005400
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40010c00 	.word	0x40010c00

08003b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b30:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b32:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8003b34:	6802      	ldr	r2, [r0, #0]
 8003b36:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <HAL_UART_MspInit+0xa4>)
{
 8003b38:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8003b3a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003b40:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART2)
 8003b44:	d001      	beq.n	8003b4a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b46:	b006      	add	sp, #24
 8003b48:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	4605      	mov	r5, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b50:	2603      	movs	r6, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b52:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b5c:	61da      	str	r2, [r3, #28]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003b64:	9200      	str	r2, [sp, #0]
 8003b66:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	619a      	str	r2, [r3, #24]
 8003b6e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b70:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b72:	400b      	ands	r3, r1
 8003b74:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b76:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7a:	4817      	ldr	r0, [pc, #92]	; (8003bd8 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b7e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b80:	f000 fe80 	bl	8004884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b84:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b86:	4814      	ldr	r0, [pc, #80]	; (8003bd8 <HAL_UART_MspInit+0xa8>)
 8003b88:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b8c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	f000 fe77 	bl	8004884 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b96:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b98:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003b9a:	4e10      	ldr	r6, [pc, #64]	; (8003bdc <HAL_UART_MspInit+0xac>)
 8003b9c:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <HAL_UART_MspInit+0xb0>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b9e:	4630      	mov	r0, r6
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ba0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ba4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ba8:	6071      	str	r1, [r6, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003baa:	60b4      	str	r4, [r6, #8]
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003bac:	6032      	str	r2, [r6, #0]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bae:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003bb0:	f000 fbca 	bl	8004348 <HAL_DMA_Init>
 8003bb4:	b958      	cbnz	r0, 8003bce <HAL_UART_MspInit+0x9e>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2026      	movs	r0, #38	; 0x26
 8003bba:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003bbc:	636e      	str	r6, [r5, #52]	; 0x34
 8003bbe:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bc0:	f000 fb64 	bl	800428c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bc4:	2026      	movs	r0, #38	; 0x26
 8003bc6:	f000 fb99 	bl	80042fc <HAL_NVIC_EnableIRQ>
}
 8003bca:	b006      	add	sp, #24
 8003bcc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003bce:	f7ff fcf3 	bl	80035b8 <Error_Handler>
 8003bd2:	e7f0      	b.n	8003bb6 <HAL_UART_MspInit+0x86>
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40010800 	.word	0x40010800
 8003bdc:	20000a74 	.word	0x20000a74
 8003be0:	40020080 	.word	0x40020080

08003be4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003be4:	e7fe      	b.n	8003be4 <NMI_Handler>
 8003be6:	bf00      	nop

08003be8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be8:	e7fe      	b.n	8003be8 <HardFault_Handler>
 8003bea:	bf00      	nop

08003bec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bec:	e7fe      	b.n	8003bec <MemManage_Handler>
 8003bee:	bf00      	nop

08003bf0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf0:	e7fe      	b.n	8003bf0 <BusFault_Handler>
 8003bf2:	bf00      	nop

08003bf4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf4:	e7fe      	b.n	8003bf4 <UsageFault_Handler>
 8003bf6:	bf00      	nop

08003bf8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop

08003bfc <DebugMon_Handler>:
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop

08003c00 <PendSV_Handler>:
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop

08003c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c06:	f000 fb0b 	bl	8004220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  sw_scan();

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sw_scan();
 8003c0e:	f000 b815 	b.w	8003c3c <sw_scan>
 8003c12:	bf00      	nop

08003c14 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <DMA1_Channel7_IRQHandler+0x8>)
 8003c16:	f000 bce1 	b.w	80045dc <HAL_DMA_IRQHandler>
 8003c1a:	bf00      	nop
 8003c1c:	20000a74 	.word	0x20000a74

08003c20 <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003c20:	4801      	ldr	r0, [pc, #4]	; (8003c28 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 8003c22:	f001 bcf1 	b.w	8005608 <HAL_PCD_IRQHandler>
 8003c26:	bf00      	nop
 8003c28:	20001334 	.word	0x20001334

08003c2c <USB_LP_CAN1_RX0_IRQHandler>:
 8003c2c:	f7ff bff8 	b.w	8003c20 <USB_HP_CAN1_TX_IRQHandler>

08003c30 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <USART2_IRQHandler+0x8>)
 8003c32:	f003 b8e9 	b.w	8006e08 <HAL_UART_IRQHandler>
 8003c36:	bf00      	nop
 8003c38:	20000ab8 	.word	0x20000ab8

08003c3c <sw_scan>:
 *
 * Switch changes are then handled in the main loop.
 */
void sw_scan(void){

	if(!f_sys_config_complete){
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <sw_scan+0x90>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d041      	beq.n	8003cc8 <sw_scan+0x8c>
		return;
	}

	if(debounce_counter){
 8003c44:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <sw_scan+0x94>)
 8003c46:	7813      	ldrb	r3, [r2, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d138      	bne.n	8003cbe <sw_scan+0x82>
		debounce_counter--;
		return;
	}

	/* PORTA input pins */
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <sw_scan+0x98>)
void sw_scan(void){
 8003c4e:	b4f0      	push	{r4, r5, r6, r7}
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c50:	689b      	ldr	r3, [r3, #8]
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c52:	4c21      	ldr	r4, [pc, #132]	; (8003cd8 <sw_scan+0x9c>)
 8003c54:	4821      	ldr	r0, [pc, #132]	; (8003cdc <sw_scan+0xa0>)
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c56:	f423 43f7 	bic.w	r3, r3, #31616	; 0x7b80
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c5a:	8821      	ldrh	r1, [r4, #0]
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c60:	8805      	ldrh	r5, [r0, #0]
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c62:	b29b      	uxth	r3, r3
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c64:	4059      	eors	r1, r3
 8003c66:	4329      	orrs	r1, r5
 8003c68:	b289      	uxth	r1, r1
	port_A_previous_state = current_port_A;

	/* PORTB input pins */
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c6a:	4d1d      	ldr	r5, [pc, #116]	; (8003ce0 <sw_scan+0xa4>)
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c6c:	8001      	strh	r1, [r0, #0]
	port_A_previous_state = current_port_A;
 8003c6e:	8023      	strh	r3, [r4, #0]
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c70:	68ab      	ldr	r3, [r5, #8]
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c72:	4d1c      	ldr	r5, [pc, #112]	; (8003ce4 <sw_scan+0xa8>)
 8003c74:	4c1c      	ldr	r4, [pc, #112]	; (8003ce8 <sw_scan+0xac>)
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c76:	f423 43b7 	bic.w	r3, r3, #23424	; 0x5b80
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c7a:	8829      	ldrh	r1, [r5, #0]
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c7c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c80:	8826      	ldrh	r6, [r4, #0]
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c82:	b29b      	uxth	r3, r3
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c84:	4059      	eors	r1, r3
 8003c86:	4331      	orrs	r1, r6
	port_B_previous_state = current_port_B;

	/* PORTC input pins */
	uint16_t current_port_C = GPIOC->IDR & SW_PORTC_MASK;
 8003c88:	4f18      	ldr	r7, [pc, #96]	; (8003cec <sw_scan+0xb0>)
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c8a:	b289      	uxth	r1, r1
 8003c8c:	8021      	strh	r1, [r4, #0]
	port_C_switches_changed |= current_port_C  ^ port_C_previous_state;
 8003c8e:	4e18      	ldr	r6, [pc, #96]	; (8003cf0 <sw_scan+0xb4>)
	uint16_t current_port_C = GPIOC->IDR & SW_PORTC_MASK;
 8003c90:	68b9      	ldr	r1, [r7, #8]
	port_B_previous_state = current_port_B;
 8003c92:	802b      	strh	r3, [r5, #0]
	port_C_switches_changed |= current_port_C  ^ port_C_previous_state;
 8003c94:	4d17      	ldr	r5, [pc, #92]	; (8003cf4 <sw_scan+0xb8>)
 8003c96:	8833      	ldrh	r3, [r6, #0]
 8003c98:	882f      	ldrh	r7, [r5, #0]
	uint16_t current_port_C = GPIOC->IDR & SW_PORTC_MASK;
 8003c9a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
	port_C_switches_changed |= current_port_C  ^ port_C_previous_state;
 8003c9e:	404b      	eors	r3, r1
 8003ca0:	433b      	orrs	r3, r7
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	802b      	strh	r3, [r5, #0]
	port_C_previous_state = current_port_C;

	if(port_A_switches_changed | port_B_switches_changed | port_C_switches_changed){
 8003ca6:	8800      	ldrh	r0, [r0, #0]
 8003ca8:	8823      	ldrh	r3, [r4, #0]
	port_C_previous_state = current_port_C;
 8003caa:	8031      	strh	r1, [r6, #0]
	if(port_A_switches_changed | port_B_switches_changed | port_C_switches_changed){
 8003cac:	8829      	ldrh	r1, [r5, #0]
 8003cae:	4303      	orrs	r3, r0
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b10b      	cbz	r3, 8003cba <sw_scan+0x7e>
		debounce_counter = 10; // 10ms debounce delay
 8003cb6:	230a      	movs	r3, #10
 8003cb8:	7013      	strb	r3, [r2, #0]
		return;
	}

}
 8003cba:	bcf0      	pop	{r4, r5, r6, r7}
 8003cbc:	4770      	bx	lr
		debounce_counter--;
 8003cbe:	7813      	ldrb	r3, [r2, #0]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	7013      	strb	r3, [r2, #0]
		return;
 8003cc6:	4770      	bx	lr
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	200001dc 	.word	0x200001dc
 8003cd0:	200001e4 	.word	0x200001e4
 8003cd4:	40010800 	.word	0x40010800
 8003cd8:	200000a4 	.word	0x200000a4
 8003cdc:	200001e6 	.word	0x200001e6
 8003ce0:	40010c00 	.word	0x40010c00
 8003ce4:	200000a6 	.word	0x200000a6
 8003ce8:	200001e8 	.word	0x200001e8
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	200000a8 	.word	0x200000a8
 8003cf4:	200001ea 	.word	0x200001ea

08003cf8 <sw_led_init>:
}


void sw_led_init(void){
	// Scan all commands in EEPROM, and build the table of whether the LED should toggle with the switch, or be momentary
	for(int page=0; page<8; page++){
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	220c      	movs	r2, #12
void sw_led_init(void){
 8003cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d00:	b083      	sub	sp, #12
	for(int page=0; page<8; page++){
 8003d02:	e9cd 3200 	strd	r3, r2, [sp]
 8003d06:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8003dbc <sw_led_init+0xc4>
 8003d0a:	4e28      	ldr	r6, [pc, #160]	; (8003dac <sw_led_init+0xb4>)
		for(int sw=0; sw<8; sw++){
			// Clear the toggle bit
			a_sw_obj[sw].led_cmd_toggle &= ~(1<<page);
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	9b00      	ldr	r3, [sp, #0]
 8003d10:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003dc0 <sw_led_init+0xc8>
 8003d14:	fa02 f503 	lsl.w	r5, r2, r3
 8003d18:	b26d      	sxtb	r5, r5
 8003d1a:	43ef      	mvns	r7, r5
 8003d1c:	46c1      	mov	r9, r8
 8003d1e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8003d22:	f899 0013 	ldrb.w	r0, [r9, #19]
 8003d26:	f1aa 040c 	sub.w	r4, sl, #12
 8003d2a:	4038      	ands	r0, r7
 8003d2c:	f889 0013 	strb.w	r0, [r9, #19]
	return pSwitchCmds + (MIDI_ROM_KEY_STRIDE * sw) + (MIDI_ROM_CMD_SIZE * cmd) + (MIDI_ROM_KEY_STRIDE * 8 * page);
 8003d30:	f8db 0000 	ldr.w	r0, [fp]

			for(int cmd=0; cmd<3; cmd++){
				uint8_t *pCmd = getRomPointer(page, sw, cmd);
				if(midiCmd_get_cmd_toggle(pCmd)){
 8003d34:	4420      	add	r0, r4
 8003d36:	f7ff fc41 	bl	80035bc <midiCmd_get_cmd_toggle>
			for(int cmd=0; cmd<3; cmd++){
 8003d3a:	3404      	adds	r4, #4
				if(midiCmd_get_cmd_toggle(pCmd)){
 8003d3c:	b120      	cbz	r0, 8003d48 <sw_led_init+0x50>
					a_sw_obj[sw].led_cmd_toggle |= (1<<page);
 8003d3e:	f899 0013 	ldrb.w	r0, [r9, #19]
 8003d42:	4328      	orrs	r0, r5
 8003d44:	f889 0013 	strb.w	r0, [r9, #19]
			for(int cmd=0; cmd<3; cmd++){
 8003d48:	45a2      	cmp	sl, r4
 8003d4a:	d1f1      	bne.n	8003d30 <sw_led_init+0x38>
		for(int sw=0; sw<8; sw++){
 8003d4c:	f109 0914 	add.w	r9, r9, #20
 8003d50:	45b1      	cmp	r9, r6
 8003d52:	f10a 0a0c 	add.w	sl, sl, #12
 8003d56:	d1e4      	bne.n	8003d22 <sw_led_init+0x2a>
	for(int page=0; page<8; page++){
 8003d58:	9b00      	ldr	r3, [sp, #0]
 8003d5a:	9a01      	ldr	r2, [sp, #4]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	3260      	adds	r2, #96	; 0x60
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	9201      	str	r2, [sp, #4]
 8003d66:	d1d1      	bne.n	8003d0c <sw_led_init+0x14>
			}
		}
	}

	// Init all delayed cmds to off
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003d68:	2300      	movs	r3, #0
		delayed_cmds[i].systick_timout = UINT32_MAX;
 8003d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6e:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <sw_led_init+0xb8>)
 8003d70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003d74:	3301      	adds	r3, #1
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d1fa      	bne.n	8003d70 <sw_led_init+0x78>
	}

	// Init all the LEDs to the off state
	for(int i = 0; i<8; i++){
		HAL_GPIO_WritePin(a_sw_obj[i].led_gpio_port, a_sw_obj[i].led_gpio_pin, GPIO_PIN_SET);
 8003d7a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8003d7e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f108 0814 	add.w	r8, r8, #20
 8003d88:	f000 feaa 	bl	8004ae0 <HAL_GPIO_WritePin>
	for(int i = 0; i<8; i++){
 8003d8c:	45b0      	cmp	r8, r6
 8003d8e:	d1f4      	bne.n	8003d7a <sw_led_init+0x82>
	}
	HAL_GPIO_WritePin(SW_5_GPIO_Port, SW_5_Pin, GPIO_PIN_SET);
 8003d90:	2201      	movs	r2, #1
 8003d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d96:	4807      	ldr	r0, [pc, #28]	; (8003db4 <sw_led_init+0xbc>)
 8003d98:	f000 fea2 	bl	8004ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW_E_GPIO_Port, SW_E_Pin, GPIO_PIN_SET);
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	2140      	movs	r1, #64	; 0x40
 8003da0:	4805      	ldr	r0, [pc, #20]	; (8003db8 <sw_led_init+0xc0>)


}
 8003da2:	b003      	add	sp, #12
 8003da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(SW_E_GPIO_Port, SW_E_Pin, GPIO_PIN_SET);
 8003da8:	f000 be9a 	b.w	8004ae0 <HAL_GPIO_WritePin>
 8003dac:	200000a4 	.word	0x200000a4
 8003db0:	20000b4c 	.word	0x20000b4c
 8003db4:	40010c00 	.word	0x40010c00
 8003db8:	40010800 	.word	0x40010800
 8003dbc:	2000061c 	.word	0x2000061c
 8003dc0:	20000004 	.word	0x20000004

08003dc4 <handleDelayedCmds>:
	}

	return -1;
}

void handleDelayedCmds(void){
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
				midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_OFF);
				break;
			default:
				break;
			}
			delayed_cmds[i].systick_timout = UINT32_MAX;
 8003dc6:	f04f 37ff 	mov.w	r7, #4294967295
 8003dca:	4c0f      	ldr	r4, [pc, #60]	; (8003e08 <handleDelayedCmds+0x44>)
 8003dcc:	f504 7680 	add.w	r6, r4, #256	; 0x100
		if(delayed_cmds[i].systick_timout < HAL_GetTick()){
 8003dd0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8003dd4:	f000 fa30 	bl	8004238 <HAL_GetTick>
 8003dd8:	4285      	cmp	r5, r0
 8003dda:	d211      	bcs.n	8003e00 <handleDelayedCmds+0x3c>
			uint8_t* pRom = delayed_cmds[i].pRomCmd;
 8003ddc:	6825      	ldr	r5, [r4, #0]
			switch(*pRom & 0xF0){
 8003dde:	782b      	ldrb	r3, [r5, #0]
 8003de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de4:	2b90      	cmp	r3, #144	; 0x90
 8003de6:	d005      	beq.n	8003df4 <handleDelayedCmds+0x30>
 8003de8:	2be0      	cmp	r3, #224	; 0xe0
 8003dea:	d107      	bne.n	8003dfc <handleDelayedCmds+0x38>
				midiCmd_send_pb_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003dec:	2100      	movs	r1, #0
 8003dee:	4628      	mov	r0, r5
 8003df0:	f7ff fcc4 	bl	800377c <midiCmd_send_pb_command_from_rom>
				midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003df4:	4628      	mov	r0, r5
 8003df6:	2100      	movs	r1, #0
 8003df8:	f7ff fd12 	bl	8003820 <midiCmd_send_note_command_from_rom>
			delayed_cmds[i].systick_timout = UINT32_MAX;
 8003dfc:	f844 7c04 	str.w	r7, [r4, #-4]
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003e00:	3408      	adds	r4, #8
 8003e02:	42b4      	cmp	r4, r6
 8003e04:	d1e4      	bne.n	8003dd0 <handleDelayedCmds+0xc>
		}
	}
}
 8003e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e08:	20000b50 	.word	0x20000b50

08003e0c <setCmdDurationDelay>:

// Sets the cmd point to switch off and the delay timeout into the delayed cmds table
void setCmdDurationDelay(uint8_t *pRom){
 8003e0c:	b570      	push	{r4, r5, r6, lr}
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003e0e:	2400      	movs	r4, #0
void setCmdDurationDelay(uint8_t *pRom){
 8003e10:	4606      	mov	r6, r0
 8003e12:	4d0b      	ldr	r5, [pc, #44]	; (8003e40 <setCmdDurationDelay+0x34>)
 8003e14:	e002      	b.n	8003e1c <setCmdDurationDelay+0x10>
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003e16:	3401      	adds	r4, #1
 8003e18:	2c20      	cmp	r4, #32
 8003e1a:	d010      	beq.n	8003e3e <setCmdDurationDelay+0x32>
		if(delayed_cmds[i].systick_timout == UINT32_MAX){
 8003e1c:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8003e20:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 8003e24:	3301      	adds	r3, #1
 8003e26:	d1f6      	bne.n	8003e16 <setCmdDurationDelay+0xa>
	int slot = get_available_delayed_cmd_slot();
	if(slot >= 0){
		delayed_cmds[slot].pRomCmd = pRom;
 8003e28:	6056      	str	r6, [r2, #4]
		delayed_cmds[slot].systick_timout = HAL_GetTick() + midiCmd_get_delay(pRom);
 8003e2a:	f000 fa05 	bl	8004238 <HAL_GetTick>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4630      	mov	r0, r6
 8003e32:	461e      	mov	r6, r3
 8003e34:	f7ff fbc6 	bl	80035c4 <midiCmd_get_delay>
 8003e38:	4406      	add	r6, r0
 8003e3a:	f845 6034 	str.w	r6, [r5, r4, lsl #3]
	}
}
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	20000b4c 	.word	0x20000b4c

08003e44 <handleCmdSwDown>:

void handleCmdSwDown(uint8_t *pRom, uint8_t toggleState){
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	7803      	ldrb	r3, [r0, #0]
 8003e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	switch(*pRom & 0xF0){
 8003e4c:	2bc0      	cmp	r3, #192	; 0xc0
 8003e4e:	d026      	beq.n	8003e9e <handleCmdSwDown+0x5a>
 8003e50:	4604      	mov	r4, r0
 8003e52:	460d      	mov	r5, r1
 8003e54:	d80c      	bhi.n	8003e70 <handleCmdSwDown+0x2c>
 8003e56:	2b90      	cmp	r3, #144	; 0x90
 8003e58:	d015      	beq.n	8003e86 <handleCmdSwDown+0x42>
 8003e5a:	2bb0      	cmp	r3, #176	; 0xb0
 8003e5c:	d11e      	bne.n	8003e9c <handleCmdSwDown+0x58>
	case CMD_PC_NIBBLE:
		midiCmd_send_pc_command_from_rom(pRom);
		break;
	case CMD_CC_NIBBLE:
		if(midiCmd_get_cmd_toggle(pRom)){
 8003e5e:	f7ff fbad 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003e62:	b330      	cbz	r0, 8003eb2 <handleCmdSwDown+0x6e>
			midiCmd_send_cc_command_from_rom(pRom, toggleState);
 8003e64:	4629      	mov	r1, r5
 8003e66:	4620      	mov	r0, r4
	case CMD_STOP_NIBBLE:
		break;
	default:
		break;
	}
}
 8003e68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			midiCmd_send_cc_command_from_rom(pRom, toggleState);
 8003e6c:	f7ff bd3a 	b.w	80038e4 <midiCmd_send_cc_command_from_rom>
	switch(*pRom & 0xF0){
 8003e70:	2be0      	cmp	r3, #224	; 0xe0
 8003e72:	d113      	bne.n	8003e9c <handleCmdSwDown+0x58>
		if(midiCmd_get_cmd_toggle(pRom)){
 8003e74:	f7ff fba2 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003e78:	b308      	cbz	r0, 8003ebe <handleCmdSwDown+0x7a>
			midiCmd_send_pb_command_from_rom(pRom, toggleState);
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	4620      	mov	r0, r4
}
 8003e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			midiCmd_send_pb_command_from_rom(pRom, toggleState);
 8003e82:	f7ff bc7b 	b.w	800377c <midiCmd_send_pb_command_from_rom>
		if(midiCmd_get_cmd_toggle(pRom)){
 8003e86:	f7ff fb99 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003e8a:	b960      	cbnz	r0, 8003ea6 <handleCmdSwDown+0x62>
			midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_ON);
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f7ff fcc6 	bl	8003820 <midiCmd_send_note_command_from_rom>
			if(midiCmd_get_delay(pRom) != 0){
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7ff fb95 	bl	80035c4 <midiCmd_get_delay>
 8003e9a:	b9c8      	cbnz	r0, 8003ed0 <handleCmdSwDown+0x8c>
}
 8003e9c:	bd38      	pop	{r3, r4, r5, pc}
 8003e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		midiCmd_send_pc_command_from_rom(pRom);
 8003ea2:	f7ff bd75 	b.w	8003990 <midiCmd_send_pc_command_from_rom>
			midiCmd_send_note_command_from_rom(pRom, toggleState);
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	4620      	mov	r0, r4
}
 8003eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			midiCmd_send_note_command_from_rom(pRom, toggleState);
 8003eae:	f7ff bcb7 	b.w	8003820 <midiCmd_send_note_command_from_rom>
			midiCmd_send_cc_command_from_rom(pRom, MIDI_CONTROL_ON);
 8003eb2:	4620      	mov	r0, r4
}
 8003eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			midiCmd_send_cc_command_from_rom(pRom, MIDI_CONTROL_ON);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	f7ff bd13 	b.w	80038e4 <midiCmd_send_cc_command_from_rom>
			midiCmd_send_pb_command_from_rom(pRom, MIDI_CONTROL_ON);
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f7ff fc5b 	bl	800377c <midiCmd_send_pb_command_from_rom>
			if(midiCmd_get_delay(pRom) != 0){
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7ff fb7c 	bl	80035c4 <midiCmd_get_delay>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d0e5      	beq.n	8003e9c <handleCmdSwDown+0x58>
				setCmdDurationDelay(pRom);
 8003ed0:	4620      	mov	r0, r4
}
 8003ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				setCmdDurationDelay(pRom);
 8003ed6:	f7ff bf99 	b.w	8003e0c <setCmdDurationDelay>
 8003eda:	bf00      	nop

08003edc <handleCmdSwUp>:

void handleCmdSwUp(uint8_t *pRom, uint8_t toggleState){
 8003edc:	b510      	push	{r4, lr}
 8003ede:	7803      	ldrb	r3, [r0, #0]
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	switch(*pRom & 0xF0){
 8003ee6:	2b90      	cmp	r3, #144	; 0x90
 8003ee8:	d01f      	beq.n	8003f2a <handleCmdSwUp+0x4e>
 8003eea:	d907      	bls.n	8003efc <handleCmdSwUp+0x20>
 8003eec:	2bb0      	cmp	r3, #176	; 0xb0
 8003eee:	d02b      	beq.n	8003f48 <handleCmdSwUp+0x6c>
 8003ef0:	2be0      	cmp	r3, #224	; 0xe0
 8003ef2:	d102      	bne.n	8003efa <handleCmdSwUp+0x1e>
		if(!midiCmd_get_cmd_toggle(pRom)){
			midiCmd_send_cc_command_from_rom(pRom, MIDI_CONTROL_OFF);
		}
		break;
	case CMD_PB_NIBBLE:
		if(!midiCmd_get_cmd_toggle(pRom)){
 8003ef4:	f7ff fb62 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003ef8:	b140      	cbz	r0, 8003f0c <handleCmdSwUp+0x30>
		midiCmd_send_stop_command();
		break;
	default:
		break;
	}
}
 8003efa:	bd10      	pop	{r4, pc}
	switch(*pRom & 0xF0){
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d010      	beq.n	8003f22 <handleCmdSwUp+0x46>
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d1fa      	bne.n	8003efa <handleCmdSwUp+0x1e>
}
 8003f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		midiCmd_send_stop_command();
 8003f08:	f7ff bb9e 	b.w	8003648 <midiCmd_send_stop_command>
			if(midiCmd_get_delay(pRom) == 0){
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f7ff fb59 	bl	80035c4 <midiCmd_get_delay>
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d1f1      	bne.n	8003efa <handleCmdSwUp+0x1e>
				midiCmd_send_pb_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f16:	4601      	mov	r1, r0
 8003f18:	4620      	mov	r0, r4
}
 8003f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				midiCmd_send_pb_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f1e:	f7ff bc2d 	b.w	800377c <midiCmd_send_pb_command_from_rom>
}
 8003f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		midiCmd_send_start_command();
 8003f26:	f7ff bbf1 	b.w	800370c <midiCmd_send_start_command>
		if(!midiCmd_get_cmd_toggle(pRom)){
 8003f2a:	f7ff fb47 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d1e3      	bne.n	8003efa <handleCmdSwUp+0x1e>
			if(midiCmd_get_delay(pRom) == 0){
 8003f32:	4620      	mov	r0, r4
 8003f34:	f7ff fb46 	bl	80035c4 <midiCmd_get_delay>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d1de      	bne.n	8003efa <handleCmdSwUp+0x1e>
				midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f3c:	4601      	mov	r1, r0
 8003f3e:	4620      	mov	r0, r4
}
 8003f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f44:	f7ff bc6c 	b.w	8003820 <midiCmd_send_note_command_from_rom>
		if(!midiCmd_get_cmd_toggle(pRom)){
 8003f48:	f7ff fb38 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d1d4      	bne.n	8003efa <handleCmdSwUp+0x1e>
			midiCmd_send_cc_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f50:	4601      	mov	r1, r0
 8003f52:	4620      	mov	r0, r4
}
 8003f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			midiCmd_send_cc_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f58:	f7ff bcc4 	b.w	80038e4 <midiCmd_send_cc_command_from_rom>

08003f5c <updateLedsOnBankChange>:
	GPIO_PinState pinState = (state) ? GPIO_PIN_RESET : GPIO_PIN_SET;
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);

}

void updateLedsOnBankChange(void){
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	4c11      	ldr	r4, [pc, #68]	; (8003fa4 <updateLedsOnBankChange+0x48>)
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8003f60:	2701      	movs	r7, #1
 8003f62:	4e11      	ldr	r6, [pc, #68]	; (8003fa8 <updateLedsOnBankChange+0x4c>)
 8003f64:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8003f68:	e00c      	b.n	8003f84 <updateLedsOnBankChange+0x28>
	return sw->switch_toggle_state & (1 << switch_current_page);
 8003f6a:	7ca3      	ldrb	r3, [r4, #18]
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8003f6c:	8a21      	ldrh	r1, [r4, #16]
	GPIO_PinState pinState = (state) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8003f6e:	4203      	tst	r3, r0
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8003f70:	bf08      	it	eq
 8003f72:	2201      	moveq	r2, #1
 8003f74:	68e0      	ldr	r0, [r4, #12]
 8003f76:	bf18      	it	ne
 8003f78:	2200      	movne	r2, #0
 8003f7a:	3414      	adds	r4, #20
 8003f7c:	f000 fdb0 	bl	8004ae0 <HAL_GPIO_WritePin>
	for(int i=0; i<8; i++){
 8003f80:	42ac      	cmp	r4, r5
 8003f82:	d00e      	beq.n	8003fa2 <updateLedsOnBankChange+0x46>
		if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003f84:	7832      	ldrb	r2, [r6, #0]
 8003f86:	7ce3      	ldrb	r3, [r4, #19]
	return sw->switch_toggle_state & (1 << switch_current_page);
 8003f88:	fa07 f002 	lsl.w	r0, r7, r2
		if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003f8c:	4113      	asrs	r3, r2
 8003f8e:	07db      	lsls	r3, r3, #31
 8003f90:	d4eb      	bmi.n	8003f6a <updateLedsOnBankChange+0xe>
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8003f92:	8a21      	ldrh	r1, [r4, #16]
 8003f94:	68e0      	ldr	r0, [r4, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	3414      	adds	r4, #20
 8003f9a:	f000 fda1 	bl	8004ae0 <HAL_GPIO_WritePin>
	for(int i=0; i<8; i++){
 8003f9e:	42ac      	cmp	r4, r5
 8003fa0:	d1f0      	bne.n	8003f84 <updateLedsOnBankChange+0x28>
			setLed(i,get_sw_toggle_stage(&a_sw_obj[i]));
		} else {
			setLed(i,RESET);
		}
	}
}
 8003fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa4:	20000004 	.word	0x20000004
 8003fa8:	200001ec 	.word	0x200001ec

08003fac <handleSwitches>:

void handleSwitches(void){
 8003fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	// The Command switches
	for(int i=0; i<8; i++){
 8003fb0:	2500      	movs	r5, #0
	return sw->switch_toggle_state & (1 << switch_current_page);
 8003fb2:	2701      	movs	r7, #1
 8003fb4:	4c61      	ldr	r4, [pc, #388]	; (800413c <handleSwitches+0x190>)
								get_sw_toggle_stage(&a_sw_obj[i]));
					}
				}else {
					// Switch up
					// Clear the LED if it's not toggling.
					if(!(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page))){
 8003fb6:	4e62      	ldr	r6, [pc, #392]	; (8004140 <handleSwitches+0x194>)
 8003fb8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8004154 <handleSwitches+0x1a8>
 8003fbc:	e004      	b.n	8003fc8 <handleSwitches+0x1c>
	for(int i=0; i<8; i++){
 8003fbe:	3501      	adds	r5, #1
 8003fc0:	2d08      	cmp	r5, #8
 8003fc2:	f104 0414 	add.w	r4, r4, #20
 8003fc6:	d040      	beq.n	800404a <handleSwitches+0x9e>
		if(*a_sw_obj[i].pSwChangeState & a_sw_obj[i].sw_gpio_pin){
 8003fc8:	68a3      	ldr	r3, [r4, #8]
 8003fca:	88a2      	ldrh	r2, [r4, #4]
 8003fcc:	8819      	ldrh	r1, [r3, #0]
 8003fce:	420a      	tst	r2, r1
 8003fd0:	d0f5      	beq.n	8003fbe <handleSwitches+0x12>
				*a_sw_obj[i].pSwChangeState &= ~a_sw_obj[i].sw_gpio_pin;
 8003fd2:	8819      	ldrh	r1, [r3, #0]
				if(!HAL_GPIO_ReadPin(a_sw_obj[i].sw_gpio_port, a_sw_obj[i].sw_gpio_pin)){
 8003fd4:	6820      	ldr	r0, [r4, #0]
				*a_sw_obj[i].pSwChangeState &= ~a_sw_obj[i].sw_gpio_pin;
 8003fd6:	b289      	uxth	r1, r1
 8003fd8:	ea21 0202 	bic.w	r2, r1, r2
 8003fdc:	801a      	strh	r2, [r3, #0]
				if(!HAL_GPIO_ReadPin(a_sw_obj[i].sw_gpio_port, a_sw_obj[i].sw_gpio_pin)){
 8003fde:	88a1      	ldrh	r1, [r4, #4]
 8003fe0:	f000 fd78 	bl	8004ad4 <HAL_GPIO_ReadPin>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d13c      	bne.n	8004062 <handleSwitches+0xb6>
	sw->switch_toggle_state ^= (1 << switch_current_page);
 8003fe8:	7830      	ldrb	r0, [r6, #0]
 8003fea:	7ca3      	ldrb	r3, [r4, #18]
					if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003fec:	7ce2      	ldrb	r2, [r4, #19]
	sw->switch_toggle_state ^= (1 << switch_current_page);
 8003fee:	fa07 f100 	lsl.w	r1, r7, r0
 8003ff2:	b249      	sxtb	r1, r1
 8003ff4:	404b      	eors	r3, r1
					if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003ff6:	4102      	asrs	r2, r0
	sw->switch_toggle_state ^= (1 << switch_current_page);
 8003ff8:	b25b      	sxtb	r3, r3
					if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003ffa:	f012 0201 	ands.w	r2, r2, #1
	sw->switch_toggle_state ^= (1 << switch_current_page);
 8003ffe:	74a3      	strb	r3, [r4, #18]
					if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8004000:	d003      	beq.n	800400a <handleSwitches+0x5e>
	GPIO_PinState pinState = (state) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8004002:	4219      	tst	r1, r3
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8004004:	bf0c      	ite	eq
 8004006:	2201      	moveq	r2, #1
 8004008:	2200      	movne	r2, #0
 800400a:	8a21      	ldrh	r1, [r4, #16]
 800400c:	68e0      	ldr	r0, [r4, #12]
 800400e:	f000 fd67 	bl	8004ae0 <HAL_GPIO_WritePin>
	for(int i=0; i<8; i++){
 8004012:	f04f 0900 	mov.w	r9, #0
						handleCmdSwDown(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 8004016:	7832      	ldrb	r2, [r6, #0]
 8004018:	f8d8 0000 	ldr.w	r0, [r8]
 800401c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	return sw->switch_toggle_state & (1 << switch_current_page);
 8004020:	7ca1      	ldrb	r1, [r4, #18]
						handleCmdSwDown(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 8004022:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004026:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	return sw->switch_toggle_state & (1 << switch_current_page);
 800402a:	fa07 f202 	lsl.w	r2, r7, r2
 800402e:	f109 0904 	add.w	r9, r9, #4
						handleCmdSwDown(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 8004032:	4418      	add	r0, r3
 8004034:	4011      	ands	r1, r2
 8004036:	f7ff ff05 	bl	8003e44 <handleCmdSwDown>
					for(int j=0; j<3; j++){
 800403a:	f1b9 0f0c 	cmp.w	r9, #12
 800403e:	d1ea      	bne.n	8004016 <handleSwitches+0x6a>
	for(int i=0; i<8; i++){
 8004040:	3501      	adds	r5, #1
 8004042:	2d08      	cmp	r5, #8
 8004044:	f104 0414 	add.w	r4, r4, #20
 8004048:	d1be      	bne.n	8003fc8 <handleSwitches+0x1c>
				}
			}

	}

	handleDelayedCmds();
 800404a:	f7ff febb 	bl	8003dc4 <handleDelayedCmds>

	// The bank change switches
	if(port_A_switches_changed & SW_E_Pin){
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <handleSwitches+0x198>)
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	0651      	lsls	r1, r2, #25
 8004054:	d448      	bmi.n	80040e8 <handleSwitches+0x13c>
		} else {
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
		}
	}

	if(port_B_switches_changed & SW_5_Pin){
 8004056:	4b3c      	ldr	r3, [pc, #240]	; (8004148 <handleSwitches+0x19c>)
 8004058:	881a      	ldrh	r2, [r3, #0]
 800405a:	0552      	lsls	r2, r2, #21
 800405c:	d425      	bmi.n	80040aa <handleSwitches+0xfe>
			}
		} else {
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
		}
	}
}
 800405e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if(!(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page))){
 8004062:	7832      	ldrb	r2, [r6, #0]
 8004064:	7ce3      	ldrb	r3, [r4, #19]
 8004066:	4113      	asrs	r3, r2
 8004068:	07d8      	lsls	r0, r3, #31
 800406a:	d517      	bpl.n	800409c <handleSwitches+0xf0>
	for(int i=0; i<8; i++){
 800406c:	f04f 0900 	mov.w	r9, #0
						handleCmdSwUp(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 8004070:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 8004074:	f8d8 3000 	ldr.w	r3, [r8]
	return sw->switch_toggle_state & (1 << switch_current_page);
 8004078:	7ca1      	ldrb	r1, [r4, #18]
						handleCmdSwUp(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 800407a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800407e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
	return sw->switch_toggle_state & (1 << switch_current_page);
 8004082:	fa07 f202 	lsl.w	r2, r7, r2
 8004086:	f109 0904 	add.w	r9, r9, #4
						handleCmdSwUp(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 800408a:	4418      	add	r0, r3
 800408c:	4011      	ands	r1, r2
 800408e:	f7ff ff25 	bl	8003edc <handleCmdSwUp>
					for(int j=0; j<3; j++){
 8004092:	f1b9 0f0c 	cmp.w	r9, #12
 8004096:	d092      	beq.n	8003fbe <handleSwitches+0x12>
 8004098:	7832      	ldrb	r2, [r6, #0]
 800409a:	e7e9      	b.n	8004070 <handleSwitches+0xc4>
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 800409c:	2201      	movs	r2, #1
 800409e:	8a21      	ldrh	r1, [r4, #16]
 80040a0:	68e0      	ldr	r0, [r4, #12]
 80040a2:	f000 fd1d 	bl	8004ae0 <HAL_GPIO_WritePin>
 80040a6:	7832      	ldrb	r2, [r6, #0]
}
 80040a8:	e7e0      	b.n	800406c <handleSwitches+0xc0>
		port_B_switches_changed &= ~SW_5_Pin;
 80040aa:	881a      	ldrh	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin)){
 80040ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
		port_B_switches_changed &= ~SW_5_Pin;
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	0412      	lsls	r2, r2, #16
 80040b6:	0c12      	lsrs	r2, r2, #16
		if(!HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin)){
 80040b8:	4824      	ldr	r0, [pc, #144]	; (800414c <handleSwitches+0x1a0>)
		port_B_switches_changed &= ~SW_5_Pin;
 80040ba:	801a      	strh	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin)){
 80040bc:	f000 fd0a 	bl	8004ad4 <HAL_GPIO_ReadPin>
 80040c0:	4602      	mov	r2, r0
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d132      	bne.n	800412c <handleSwitches+0x180>
			if(switch_current_page < 7){
 80040c6:	4c1e      	ldr	r4, [pc, #120]	; (8004140 <handleSwitches+0x194>)
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 80040c8:	2104      	movs	r1, #4
 80040ca:	4820      	ldr	r0, [pc, #128]	; (800414c <handleSwitches+0x1a0>)
 80040cc:	f000 fd08 	bl	8004ae0 <HAL_GPIO_WritePin>
			if(switch_current_page < 7){
 80040d0:	7823      	ldrb	r3, [r4, #0]
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d8c3      	bhi.n	800405e <handleSwitches+0xb2>
				switch_current_page++;
 80040d6:	3301      	adds	r3, #1
 80040d8:	7023      	strb	r3, [r4, #0]
				updateLedsOnBankChange();
 80040da:	f7ff ff3f 	bl	8003f5c <updateLedsOnBankChange>
				display_setBankName(switch_current_page);
 80040de:	7820      	ldrb	r0, [r4, #0]
}
 80040e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
				display_setBankName(switch_current_page);
 80040e4:	f7ff b8dc 	b.w	80032a0 <display_setBankName>
		port_A_switches_changed &= ~SW_E_Pin;
 80040e8:	881a      	ldrh	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(SW_E_GPIO_Port, SW_E_Pin)){
 80040ea:	2140      	movs	r1, #64	; 0x40
		port_A_switches_changed &= ~SW_E_Pin;
 80040ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f0:	0412      	lsls	r2, r2, #16
 80040f2:	0c12      	lsrs	r2, r2, #16
		if(!HAL_GPIO_ReadPin(SW_E_GPIO_Port, SW_E_Pin)){
 80040f4:	4816      	ldr	r0, [pc, #88]	; (8004150 <handleSwitches+0x1a4>)
		port_A_switches_changed &= ~SW_E_Pin;
 80040f6:	801a      	strh	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(SW_E_GPIO_Port, SW_E_Pin)){
 80040f8:	f000 fcec 	bl	8004ad4 <HAL_GPIO_ReadPin>
 80040fc:	4602      	mov	r2, r0
 80040fe:	b978      	cbnz	r0, 8004120 <handleSwitches+0x174>
			if(switch_current_page > 0){
 8004100:	4c0f      	ldr	r4, [pc, #60]	; (8004140 <handleSwitches+0x194>)
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 8004102:	2102      	movs	r1, #2
 8004104:	4811      	ldr	r0, [pc, #68]	; (800414c <handleSwitches+0x1a0>)
 8004106:	f000 fceb 	bl	8004ae0 <HAL_GPIO_WritePin>
			if(switch_current_page > 0){
 800410a:	7823      	ldrb	r3, [r4, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0a2      	beq.n	8004056 <handleSwitches+0xaa>
				switch_current_page--;
 8004110:	3b01      	subs	r3, #1
 8004112:	7023      	strb	r3, [r4, #0]
				updateLedsOnBankChange();
 8004114:	f7ff ff22 	bl	8003f5c <updateLedsOnBankChange>
				display_setBankName(switch_current_page);
 8004118:	7820      	ldrb	r0, [r4, #0]
 800411a:	f7ff f8c1 	bl	80032a0 <display_setBankName>
 800411e:	e79a      	b.n	8004056 <handleSwitches+0xaa>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8004120:	2201      	movs	r2, #1
 8004122:	2102      	movs	r1, #2
 8004124:	4809      	ldr	r0, [pc, #36]	; (800414c <handleSwitches+0x1a0>)
 8004126:	f000 fcdb 	bl	8004ae0 <HAL_GPIO_WritePin>
 800412a:	e794      	b.n	8004056 <handleSwitches+0xaa>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 800412c:	2201      	movs	r2, #1
}
 800412e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 8004132:	2104      	movs	r1, #4
 8004134:	4805      	ldr	r0, [pc, #20]	; (800414c <handleSwitches+0x1a0>)
 8004136:	f000 bcd3 	b.w	8004ae0 <HAL_GPIO_WritePin>
 800413a:	bf00      	nop
 800413c:	20000004 	.word	0x20000004
 8004140:	200001ec 	.word	0x200001ec
 8004144:	200001e6 	.word	0x200001e6
 8004148:	200001e8 	.word	0x200001e8
 800414c:	40010c00 	.word	0x40010c00
 8004150:	40010800 	.word	0x40010800
 8004154:	2000061c 	.word	0x2000061c

08004158 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8004158:	4b01      	ldr	r3, [pc, #4]	; (8004160 <SystemInit+0x8>)
 800415a:	4a02      	ldr	r2, [pc, #8]	; (8004164 <SystemInit+0xc>)
 800415c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00
 8004164:	08003000 	.word	0x08003000

08004168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004168:	480c      	ldr	r0, [pc, #48]	; (800419c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800416a:	490d      	ldr	r1, [pc, #52]	; (80041a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800416c:	4a0d      	ldr	r2, [pc, #52]	; (80041a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800416e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004170:	e002      	b.n	8004178 <LoopCopyDataInit>

08004172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004176:	3304      	adds	r3, #4

08004178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800417a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800417c:	d3f9      	bcc.n	8004172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800417e:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004180:	4c0a      	ldr	r4, [pc, #40]	; (80041ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8004182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004184:	e001      	b.n	800418a <LoopFillZerobss>

08004186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004188:	3204      	adds	r2, #4

0800418a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800418a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800418c:	d3fb      	bcc.n	8004186 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800418e:	f7ff ffe3 	bl	8004158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004192:	f005 fab1 	bl	80096f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004196:	f7ff f921 	bl	80033dc <main>
  bx lr
 800419a:	4770      	bx	lr
  ldr r0, =_sdata
 800419c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041a0:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 80041a4:	0800acc0 	.word	0x0800acc0
  ldr r2, =_sbss
 80041a8:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 80041ac:	20001620 	.word	0x20001620

080041b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041b0:	e7fe      	b.n	80041b0 <ADC1_2_IRQHandler>
	...

080041b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ba:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <HAL_InitTick+0x3c>)
{
 80041bc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041be:	7811      	ldrb	r1, [r2, #0]
 80041c0:	4a0c      	ldr	r2, [pc, #48]	; (80041f4 <HAL_InitTick+0x40>)
 80041c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	fbb2 f0f3 	udiv	r0, r2, r3
 80041cc:	f000 f8a4 	bl	8004318 <HAL_SYSTICK_Config>
 80041d0:	b908      	cbnz	r0, 80041d6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041d2:	2d0f      	cmp	r5, #15
 80041d4:	d901      	bls.n	80041da <HAL_InitTick+0x26>
    return HAL_ERROR;
 80041d6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80041d8:	bd38      	pop	{r3, r4, r5, pc}
 80041da:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041dc:	4602      	mov	r2, r0
 80041de:	4629      	mov	r1, r5
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	f000 f852 	bl	800428c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_InitTick+0x44>)
 80041ea:	4620      	mov	r0, r4
 80041ec:	601d      	str	r5, [r3, #0]
}
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	200000b0 	.word	0x200000b0
 80041f4:	200000ac 	.word	0x200000ac
 80041f8:	200000b4 	.word	0x200000b4

080041fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041fc:	4a07      	ldr	r2, [pc, #28]	; (800421c <HAL_Init+0x20>)
{
 80041fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004200:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004202:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004204:	f043 0310 	orr.w	r3, r3, #16
 8004208:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800420a:	f000 f82d 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800420e:	2000      	movs	r0, #0
 8004210:	f7ff ffd0 	bl	80041b4 <HAL_InitTick>
  HAL_MspInit();
 8004214:	f7ff fc38 	bl	8003a88 <HAL_MspInit>
}
 8004218:	2000      	movs	r0, #0
 800421a:	bd08      	pop	{r3, pc}
 800421c:	40022000 	.word	0x40022000

08004220 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004220:	4a03      	ldr	r2, [pc, #12]	; (8004230 <HAL_IncTick+0x10>)
 8004222:	4b04      	ldr	r3, [pc, #16]	; (8004234 <HAL_IncTick+0x14>)
 8004224:	6811      	ldr	r1, [r2, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	440b      	add	r3, r1
 800422a:	6013      	str	r3, [r2, #0]
}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000c4c 	.word	0x20000c4c
 8004234:	200000b0 	.word	0x200000b0

08004238 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004238:	4b01      	ldr	r3, [pc, #4]	; (8004240 <HAL_GetTick+0x8>)
 800423a:	6818      	ldr	r0, [r3, #0]
}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000c4c 	.word	0x20000c4c

08004244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7ff fff6 	bl	8004238 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800424c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800424e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004250:	d002      	beq.n	8004258 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_Delay+0x20>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004258:	f7ff ffee 	bl	8004238 <HAL_GetTick>
 800425c:	1b40      	subs	r0, r0, r5
 800425e:	42a0      	cmp	r0, r4
 8004260:	d3fa      	bcc.n	8004258 <HAL_Delay+0x14>
  {
  }
}
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200000b0 	.word	0x200000b0

08004268 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004268:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800426c:	4a06      	ldr	r2, [pc, #24]	; (8004288 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800426e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004270:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004272:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004276:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004278:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800427a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800427e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004282:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800428e:	b430      	push	{r4, r5}
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004296:	f1c3 0507 	rsb	r5, r3, #7
 800429a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a0:	bf28      	it	cs
 80042a2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a4:	2c06      	cmp	r4, #6
 80042a6:	d919      	bls.n	80042dc <HAL_NVIC_SetPriority+0x50>
 80042a8:	f04f 34ff 	mov.w	r4, #4294967295
 80042ac:	3b03      	subs	r3, #3
 80042ae:	409c      	lsls	r4, r3
 80042b0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b4:	f04f 34ff 	mov.w	r4, #4294967295
 80042b8:	40ac      	lsls	r4, r5
 80042ba:	ea21 0104 	bic.w	r1, r1, r4
 80042be:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80042c0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80042c6:	db0c      	blt.n	80042e2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c8:	0109      	lsls	r1, r1, #4
 80042ca:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80042ce:	b2c9      	uxtb	r1, r1
 80042d0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80042d4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80042d8:	bc30      	pop	{r4, r5}
 80042da:	4770      	bx	lr
 80042dc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042de:	4613      	mov	r3, r2
 80042e0:	e7e8      	b.n	80042b4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_NVIC_SetPriority+0x6c>)
 80042e4:	f000 000f 	and.w	r0, r0, #15
 80042e8:	0109      	lsls	r1, r1, #4
 80042ea:	b2c9      	uxtb	r1, r1
 80042ec:	4403      	add	r3, r0
 80042ee:	7619      	strb	r1, [r3, #24]
 80042f0:	bc30      	pop	{r4, r5}
 80042f2:	4770      	bx	lr
 80042f4:	e000ed00 	.word	0xe000ed00
 80042f8:	e000ecfc 	.word	0xe000ecfc

080042fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80042fc:	2800      	cmp	r0, #0
 80042fe:	db07      	blt.n	8004310 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004300:	2301      	movs	r3, #1
 8004302:	f000 011f 	and.w	r1, r0, #31
 8004306:	4a03      	ldr	r2, [pc, #12]	; (8004314 <HAL_NVIC_EnableIRQ+0x18>)
 8004308:	408b      	lsls	r3, r1
 800430a:	0940      	lsrs	r0, r0, #5
 800430c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	e000e100 	.word	0xe000e100

08004318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004318:	3801      	subs	r0, #1
 800431a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800431e:	d20d      	bcs.n	800433c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004320:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004322:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004324:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004326:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432a:	4c06      	ldr	r4, [pc, #24]	; (8004344 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800432c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004332:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8004334:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004336:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004338:	6019      	str	r1, [r3, #0]
 800433a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800433c:	2001      	movs	r0, #1
 800433e:	4770      	bx	lr
 8004340:	e000e010 	.word	0xe000e010
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004348:	2800      	cmp	r0, #0
 800434a:	d036      	beq.n	80043ba <HAL_DMA_Init+0x72>
 800434c:	4603      	mov	r3, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800434e:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <HAL_DMA_Init+0x78>)
 8004350:	6800      	ldr	r0, [r0, #0]
{
 8004352:	b470      	push	{r4, r5, r6}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004354:	4290      	cmp	r0, r2
 8004356:	d925      	bls.n	80043a4 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004358:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <HAL_DMA_Init+0x7c>)
 800435a:	491b      	ldr	r1, [pc, #108]	; (80043c8 <HAL_DMA_Init+0x80>)
 800435c:	4402      	add	r2, r0
 800435e:	fba1 1202 	umull	r1, r2, r1, r2
    hdma->DmaBaseAddress = DMA2;
 8004362:	491a      	ldr	r1, [pc, #104]	; (80043cc <HAL_DMA_Init+0x84>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004364:	0912      	lsrs	r2, r2, #4
 8004366:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 8004368:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800436c:	e9d3 2601 	ldrd	r2, r6, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004370:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004374:	2400      	movs	r4, #0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004376:	68d9      	ldr	r1, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004378:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800437a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437c:	e9d3 6104 	ldrd	r6, r1, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004380:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004382:	699e      	ldr	r6, [r3, #24]
 8004384:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8004386:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004388:	4332      	orrs	r2, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 800438a:	69de      	ldr	r6, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800438c:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004390:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004392:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8004396:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8004398:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 800439a:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 800439c:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800439e:	639c      	str	r4, [r3, #56]	; 0x38
}
 80043a0:	bc70      	pop	{r4, r5, r6}
 80043a2:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043a4:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <HAL_DMA_Init+0x88>)
 80043a6:	4908      	ldr	r1, [pc, #32]	; (80043c8 <HAL_DMA_Init+0x80>)
 80043a8:	4402      	add	r2, r0
 80043aa:	fba1 1202 	umull	r1, r2, r1, r2
    hdma->DmaBaseAddress = DMA1;
 80043ae:	4909      	ldr	r1, [pc, #36]	; (80043d4 <HAL_DMA_Init+0x8c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043b0:	0912      	lsrs	r2, r2, #4
 80043b2:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80043b4:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
 80043b8:	e7d8      	b.n	800436c <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 80043ba:	2001      	movs	r0, #1
}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40020407 	.word	0x40020407
 80043c4:	bffdfbf8 	.word	0xbffdfbf8
 80043c8:	cccccccd 	.word	0xcccccccd
 80043cc:	40020400 	.word	0x40020400
 80043d0:	bffdfff8 	.word	0xbffdfff8
 80043d4:	40020000 	.word	0x40020000

080043d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d8:	b4f0      	push	{r4, r5, r6, r7}
 80043da:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043dc:	f890 0020 	ldrb.w	r0, [r0, #32]
 80043e0:	2801      	cmp	r0, #1
 80043e2:	d038      	beq.n	8004456 <HAL_DMA_Start_IT+0x7e>
 80043e4:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043e6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 80043ea:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ee:	42a8      	cmp	r0, r5
 80043f0:	d005      	beq.n	80043fe <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80043f2:	2300      	movs	r3, #0
 80043f4:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80043f8:	2002      	movs	r0, #2
  }    
  return status;
}
 80043fa:	bcf0      	pop	{r4, r5, r6, r7}
 80043fc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80043fe:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004400:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 8004402:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8004404:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004408:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800440a:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800440c:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800440e:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 8004410:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004414:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004416:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004418:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800441a:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 800441c:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 800441e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004420:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004422:	bf0b      	itete	eq
 8004424:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004426:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004428:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800442a:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800442c:	b153      	cbz	r3, 8004444 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	f043 030e 	orr.w	r3, r3, #14
 8004434:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8004436:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	602b      	str	r3, [r5, #0]
}
 8004440:	bcf0      	pop	{r4, r5, r6, r7}
 8004442:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	f023 0304 	bic.w	r3, r3, #4
 800444a:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	f043 030a 	orr.w	r3, r3, #10
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	e7ef      	b.n	8004436 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8004456:	2002      	movs	r0, #2
}
 8004458:	bcf0      	pop	{r4, r5, r6, r7}
 800445a:	4770      	bx	lr

0800445c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800445c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8004460:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004462:	2a02      	cmp	r2, #2
 8004464:	d006      	beq.n	8004474 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004466:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8004468:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800446a:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800446c:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8004470:	2001      	movs	r0, #1
}
 8004472:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004474:	2101      	movs	r1, #1
{
 8004476:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8004478:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800447e:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004480:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004482:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004484:	f024 040e 	bic.w	r4, r4, #14
 8004488:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800448a:	6814      	ldr	r4, [r2, #0]
  return status; 
 800448c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800448e:	f024 0401 	bic.w	r4, r4, #1
 8004492:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004496:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8004498:	841d      	strh	r5, [r3, #32]
}
 800449a:	bc70      	pop	{r4, r5, r6}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop

080044a0 <HAL_DMA_Abort_IT>:
{  
 80044a0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044a2:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 80044a6:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044a8:	2a02      	cmp	r2, #2
 80044aa:	d003      	beq.n	80044b4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ac:	2204      	movs	r2, #4
    status = HAL_ERROR;
 80044ae:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80044b2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b4:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044b6:	4845      	ldr	r0, [pc, #276]	; (80045cc <HAL_DMA_Abort_IT+0x12c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b8:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044ba:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044bc:	f021 010e 	bic.w	r1, r1, #14
 80044c0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80044c2:	6811      	ldr	r1, [r2, #0]
 80044c4:	f021 0101 	bic.w	r1, r1, #1
 80044c8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044ca:	4941      	ldr	r1, [pc, #260]	; (80045d0 <HAL_DMA_Abort_IT+0x130>)
 80044cc:	d924      	bls.n	8004518 <HAL_DMA_Abort_IT+0x78>
 80044ce:	428a      	cmp	r2, r1
 80044d0:	d055      	beq.n	800457e <HAL_DMA_Abort_IT+0xde>
 80044d2:	3114      	adds	r1, #20
 80044d4:	428a      	cmp	r2, r1
 80044d6:	d05e      	beq.n	8004596 <HAL_DMA_Abort_IT+0xf6>
 80044d8:	3114      	adds	r1, #20
 80044da:	428a      	cmp	r2, r1
 80044dc:	d05d      	beq.n	800459a <HAL_DMA_Abort_IT+0xfa>
 80044de:	3114      	adds	r1, #20
 80044e0:	428a      	cmp	r2, r1
 80044e2:	d053      	beq.n	800458c <HAL_DMA_Abort_IT+0xec>
 80044e4:	3114      	adds	r1, #20
 80044e6:	428a      	cmp	r2, r1
 80044e8:	d060      	beq.n	80045ac <HAL_DMA_Abort_IT+0x10c>
 80044ea:	3114      	adds	r1, #20
 80044ec:	428a      	cmp	r2, r1
 80044ee:	d063      	beq.n	80045b8 <HAL_DMA_Abort_IT+0x118>
 80044f0:	4282      	cmp	r2, r0
 80044f2:	d067      	beq.n	80045c4 <HAL_DMA_Abort_IT+0x124>
 80044f4:	f501 7167 	add.w	r1, r1, #924	; 0x39c
 80044f8:	428a      	cmp	r2, r1
 80044fa:	d040      	beq.n	800457e <HAL_DMA_Abort_IT+0xde>
 80044fc:	3114      	adds	r1, #20
 80044fe:	428a      	cmp	r2, r1
 8004500:	d049      	beq.n	8004596 <HAL_DMA_Abort_IT+0xf6>
 8004502:	3114      	adds	r1, #20
 8004504:	428a      	cmp	r2, r1
 8004506:	d048      	beq.n	800459a <HAL_DMA_Abort_IT+0xfa>
 8004508:	3114      	adds	r1, #20
 800450a:	428a      	cmp	r2, r1
 800450c:	bf14      	ite	ne
 800450e:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8004512:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8004516:	e033      	b.n	8004580 <HAL_DMA_Abort_IT+0xe0>
 8004518:	428a      	cmp	r2, r1
 800451a:	d022      	beq.n	8004562 <HAL_DMA_Abort_IT+0xc2>
 800451c:	3114      	adds	r1, #20
 800451e:	428a      	cmp	r2, r1
 8004520:	d037      	beq.n	8004592 <HAL_DMA_Abort_IT+0xf2>
 8004522:	3114      	adds	r1, #20
 8004524:	428a      	cmp	r2, r1
 8004526:	d03b      	beq.n	80045a0 <HAL_DMA_Abort_IT+0x100>
 8004528:	3114      	adds	r1, #20
 800452a:	428a      	cmp	r2, r1
 800452c:	d02b      	beq.n	8004586 <HAL_DMA_Abort_IT+0xe6>
 800452e:	3114      	adds	r1, #20
 8004530:	428a      	cmp	r2, r1
 8004532:	d038      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x106>
 8004534:	3114      	adds	r1, #20
 8004536:	428a      	cmp	r2, r1
 8004538:	d03b      	beq.n	80045b2 <HAL_DMA_Abort_IT+0x112>
 800453a:	4282      	cmp	r2, r0
 800453c:	d03f      	beq.n	80045be <HAL_DMA_Abort_IT+0x11e>
 800453e:	f501 7167 	add.w	r1, r1, #924	; 0x39c
 8004542:	428a      	cmp	r2, r1
 8004544:	d00d      	beq.n	8004562 <HAL_DMA_Abort_IT+0xc2>
 8004546:	3114      	adds	r1, #20
 8004548:	428a      	cmp	r2, r1
 800454a:	d022      	beq.n	8004592 <HAL_DMA_Abort_IT+0xf2>
 800454c:	3114      	adds	r1, #20
 800454e:	428a      	cmp	r2, r1
 8004550:	d026      	beq.n	80045a0 <HAL_DMA_Abort_IT+0x100>
 8004552:	3114      	adds	r1, #20
 8004554:	428a      	cmp	r2, r1
 8004556:	bf14      	ite	ne
 8004558:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 800455c:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8004560:	e000      	b.n	8004564 <HAL_DMA_Abort_IT+0xc4>
 8004562:	2201      	movs	r2, #1
 8004564:	491b      	ldr	r1, [pc, #108]	; (80045d4 <HAL_DMA_Abort_IT+0x134>)
 8004566:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004568:	f44f 7180 	mov.w	r1, #256	; 0x100
    if(hdma->XferAbortCallback != NULL)
 800456c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800456e:	8419      	strh	r1, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8004570:	b11a      	cbz	r2, 800457a <HAL_DMA_Abort_IT+0xda>
      hdma->XferAbortCallback(hdma);
 8004572:	4618      	mov	r0, r3
 8004574:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2000      	movs	r0, #0
}
 8004578:	bd08      	pop	{r3, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800457a:	4610      	mov	r0, r2
}
 800457c:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800457e:	2201      	movs	r2, #1
 8004580:	4915      	ldr	r1, [pc, #84]	; (80045d8 <HAL_DMA_Abort_IT+0x138>)
 8004582:	604a      	str	r2, [r1, #4]
 8004584:	e7f0      	b.n	8004568 <HAL_DMA_Abort_IT+0xc8>
 8004586:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800458a:	e7eb      	b.n	8004564 <HAL_DMA_Abort_IT+0xc4>
 800458c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004590:	e7f6      	b.n	8004580 <HAL_DMA_Abort_IT+0xe0>
 8004592:	2210      	movs	r2, #16
 8004594:	e7e6      	b.n	8004564 <HAL_DMA_Abort_IT+0xc4>
 8004596:	2210      	movs	r2, #16
 8004598:	e7f2      	b.n	8004580 <HAL_DMA_Abort_IT+0xe0>
 800459a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800459e:	e7ef      	b.n	8004580 <HAL_DMA_Abort_IT+0xe0>
 80045a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045a4:	e7de      	b.n	8004564 <HAL_DMA_Abort_IT+0xc4>
 80045a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045aa:	e7db      	b.n	8004564 <HAL_DMA_Abort_IT+0xc4>
 80045ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045b0:	e7e6      	b.n	8004580 <HAL_DMA_Abort_IT+0xe0>
 80045b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045b6:	e7d5      	b.n	8004564 <HAL_DMA_Abort_IT+0xc4>
 80045b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045bc:	e7e0      	b.n	8004580 <HAL_DMA_Abort_IT+0xe0>
 80045be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c2:	e7cf      	b.n	8004564 <HAL_DMA_Abort_IT+0xc4>
 80045c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c8:	e7da      	b.n	8004580 <HAL_DMA_Abort_IT+0xe0>
 80045ca:	bf00      	nop
 80045cc:	40020080 	.word	0x40020080
 80045d0:	40020008 	.word	0x40020008
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40020400 	.word	0x40020400

080045dc <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045dc:	2204      	movs	r2, #4
{
 80045de:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045e0:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045e4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80045e6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045e8:	408a      	lsls	r2, r1
 80045ea:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80045ec:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045ee:	d042      	beq.n	8004676 <HAL_DMA_IRQHandler+0x9a>
 80045f0:	076a      	lsls	r2, r5, #29
 80045f2:	d540      	bpl.n	8004676 <HAL_DMA_IRQHandler+0x9a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	0691      	lsls	r1, r2, #26
 80045f8:	d403      	bmi.n	8004602 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f022 0204 	bic.w	r2, r2, #4
 8004600:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004602:	4a9b      	ldr	r2, [pc, #620]	; (8004870 <HAL_DMA_IRQHandler+0x294>)
 8004604:	499b      	ldr	r1, [pc, #620]	; (8004874 <HAL_DMA_IRQHandler+0x298>)
 8004606:	4293      	cmp	r3, r2
 8004608:	f240 8090 	bls.w	800472c <HAL_DMA_IRQHandler+0x150>
 800460c:	428b      	cmp	r3, r1
 800460e:	f000 80ee 	beq.w	80047ee <HAL_DMA_IRQHandler+0x212>
 8004612:	3114      	adds	r1, #20
 8004614:	428b      	cmp	r3, r1
 8004616:	f000 80f2 	beq.w	80047fe <HAL_DMA_IRQHandler+0x222>
 800461a:	3114      	adds	r1, #20
 800461c:	428b      	cmp	r3, r1
 800461e:	f000 80e1 	beq.w	80047e4 <HAL_DMA_IRQHandler+0x208>
 8004622:	3114      	adds	r1, #20
 8004624:	428b      	cmp	r3, r1
 8004626:	f000 80f5 	beq.w	8004814 <HAL_DMA_IRQHandler+0x238>
 800462a:	3114      	adds	r1, #20
 800462c:	428b      	cmp	r3, r1
 800462e:	f000 80fd 	beq.w	800482c <HAL_DMA_IRQHandler+0x250>
 8004632:	3114      	adds	r1, #20
 8004634:	428b      	cmp	r3, r1
 8004636:	f000 8102 	beq.w	800483e <HAL_DMA_IRQHandler+0x262>
 800463a:	4293      	cmp	r3, r2
 800463c:	f000 810b 	beq.w	8004856 <HAL_DMA_IRQHandler+0x27a>
 8004640:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8004644:	4293      	cmp	r3, r2
 8004646:	f000 80d2 	beq.w	80047ee <HAL_DMA_IRQHandler+0x212>
 800464a:	3214      	adds	r2, #20
 800464c:	4293      	cmp	r3, r2
 800464e:	f000 80d6 	beq.w	80047fe <HAL_DMA_IRQHandler+0x222>
 8004652:	3214      	adds	r2, #20
 8004654:	4293      	cmp	r3, r2
 8004656:	f000 80c5 	beq.w	80047e4 <HAL_DMA_IRQHandler+0x208>
 800465a:	3214      	adds	r2, #20
 800465c:	4293      	cmp	r3, r2
 800465e:	bf14      	ite	ne
 8004660:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8004664:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8004668:	4a83      	ldr	r2, [pc, #524]	; (8004878 <HAL_DMA_IRQHandler+0x29c>)
 800466a:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800466c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d15a      	bne.n	8004728 <HAL_DMA_IRQHandler+0x14c>
}
 8004672:	bc70      	pop	{r4, r5, r6}
 8004674:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004676:	2202      	movs	r2, #2
 8004678:	408a      	lsls	r2, r1
 800467a:	4222      	tst	r2, r4
 800467c:	d03f      	beq.n	80046fe <HAL_DMA_IRQHandler+0x122>
 800467e:	07aa      	lsls	r2, r5, #30
 8004680:	d53d      	bpl.n	80046fe <HAL_DMA_IRQHandler+0x122>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	0691      	lsls	r1, r2, #26
 8004686:	d406      	bmi.n	8004696 <HAL_DMA_IRQHandler+0xba>
      hdma->State = HAL_DMA_STATE_READY;
 8004688:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	f022 020a 	bic.w	r2, r2, #10
 8004690:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004692:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004696:	4a76      	ldr	r2, [pc, #472]	; (8004870 <HAL_DMA_IRQHandler+0x294>)
 8004698:	4976      	ldr	r1, [pc, #472]	; (8004874 <HAL_DMA_IRQHandler+0x298>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d96d      	bls.n	800477a <HAL_DMA_IRQHandler+0x19e>
 800469e:	428b      	cmp	r3, r1
 80046a0:	f000 80a7 	beq.w	80047f2 <HAL_DMA_IRQHandler+0x216>
 80046a4:	3114      	adds	r1, #20
 80046a6:	428b      	cmp	r3, r1
 80046a8:	f000 8097 	beq.w	80047da <HAL_DMA_IRQHandler+0x1fe>
 80046ac:	3114      	adds	r1, #20
 80046ae:	428b      	cmp	r3, r1
 80046b0:	f000 80a7 	beq.w	8004802 <HAL_DMA_IRQHandler+0x226>
 80046b4:	3114      	adds	r1, #20
 80046b6:	428b      	cmp	r3, r1
 80046b8:	f000 80af 	beq.w	800481a <HAL_DMA_IRQHandler+0x23e>
 80046bc:	3114      	adds	r1, #20
 80046be:	428b      	cmp	r3, r1
 80046c0:	f000 80ba 	beq.w	8004838 <HAL_DMA_IRQHandler+0x25c>
 80046c4:	3114      	adds	r1, #20
 80046c6:	428b      	cmp	r3, r1
 80046c8:	f000 80c2 	beq.w	8004850 <HAL_DMA_IRQHandler+0x274>
 80046cc:	4293      	cmp	r3, r2
 80046ce:	f000 80cb 	beq.w	8004868 <HAL_DMA_IRQHandler+0x28c>
 80046d2:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	f000 808b 	beq.w	80047f2 <HAL_DMA_IRQHandler+0x216>
 80046dc:	3214      	adds	r2, #20
 80046de:	4293      	cmp	r3, r2
 80046e0:	d07b      	beq.n	80047da <HAL_DMA_IRQHandler+0x1fe>
 80046e2:	3214      	adds	r2, #20
 80046e4:	4293      	cmp	r3, r2
 80046e6:	f000 808c 	beq.w	8004802 <HAL_DMA_IRQHandler+0x226>
 80046ea:	3214      	adds	r2, #20
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bf14      	ite	ne
 80046f0:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 80046f4:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80046f8:	4b5f      	ldr	r3, [pc, #380]	; (8004878 <HAL_DMA_IRQHandler+0x29c>)
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	e062      	b.n	80047c4 <HAL_DMA_IRQHandler+0x1e8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80046fe:	2208      	movs	r2, #8
 8004700:	408a      	lsls	r2, r1
 8004702:	4222      	tst	r2, r4
 8004704:	d0b5      	beq.n	8004672 <HAL_DMA_IRQHandler+0x96>
 8004706:	072a      	lsls	r2, r5, #28
 8004708:	d5b3      	bpl.n	8004672 <HAL_DMA_IRQHandler+0x96>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800470a:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 800470c:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004710:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004712:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004716:	f022 020e 	bic.w	r2, r2, #14
 800471a:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 800471c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800471e:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004720:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8004722:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0a4      	beq.n	8004672 <HAL_DMA_IRQHandler+0x96>
}
 8004728:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800472a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800472c:	428b      	cmp	r3, r1
 800472e:	d05c      	beq.n	80047ea <HAL_DMA_IRQHandler+0x20e>
 8004730:	3114      	adds	r1, #20
 8004732:	428b      	cmp	r3, r1
 8004734:	d061      	beq.n	80047fa <HAL_DMA_IRQHandler+0x21e>
 8004736:	3114      	adds	r1, #20
 8004738:	428b      	cmp	r3, r1
 800473a:	d050      	beq.n	80047de <HAL_DMA_IRQHandler+0x202>
 800473c:	3114      	adds	r1, #20
 800473e:	428b      	cmp	r3, r1
 8004740:	d065      	beq.n	800480e <HAL_DMA_IRQHandler+0x232>
 8004742:	3114      	adds	r1, #20
 8004744:	428b      	cmp	r3, r1
 8004746:	d06e      	beq.n	8004826 <HAL_DMA_IRQHandler+0x24a>
 8004748:	3114      	adds	r1, #20
 800474a:	428b      	cmp	r3, r1
 800474c:	d07a      	beq.n	8004844 <HAL_DMA_IRQHandler+0x268>
 800474e:	4293      	cmp	r3, r2
 8004750:	f000 8084 	beq.w	800485c <HAL_DMA_IRQHandler+0x280>
 8004754:	4a49      	ldr	r2, [pc, #292]	; (800487c <HAL_DMA_IRQHandler+0x2a0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d047      	beq.n	80047ea <HAL_DMA_IRQHandler+0x20e>
 800475a:	3214      	adds	r2, #20
 800475c:	4293      	cmp	r3, r2
 800475e:	d04c      	beq.n	80047fa <HAL_DMA_IRQHandler+0x21e>
 8004760:	3214      	adds	r2, #20
 8004762:	4293      	cmp	r3, r2
 8004764:	d03b      	beq.n	80047de <HAL_DMA_IRQHandler+0x202>
 8004766:	3214      	adds	r2, #20
 8004768:	4293      	cmp	r3, r2
 800476a:	bf14      	ite	ne
 800476c:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8004770:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8004774:	4a42      	ldr	r2, [pc, #264]	; (8004880 <HAL_DMA_IRQHandler+0x2a4>)
 8004776:	6053      	str	r3, [r2, #4]
 8004778:	e778      	b.n	800466c <HAL_DMA_IRQHandler+0x90>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800477a:	428b      	cmp	r3, r1
 800477c:	d03b      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x21a>
 800477e:	3114      	adds	r1, #20
 8004780:	428b      	cmp	r3, r1
 8004782:	d028      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x1fa>
 8004784:	3114      	adds	r1, #20
 8004786:	428b      	cmp	r3, r1
 8004788:	d03e      	beq.n	8004808 <HAL_DMA_IRQHandler+0x22c>
 800478a:	3114      	adds	r1, #20
 800478c:	428b      	cmp	r3, r1
 800478e:	d047      	beq.n	8004820 <HAL_DMA_IRQHandler+0x244>
 8004790:	3114      	adds	r1, #20
 8004792:	428b      	cmp	r3, r1
 8004794:	d04d      	beq.n	8004832 <HAL_DMA_IRQHandler+0x256>
 8004796:	3114      	adds	r1, #20
 8004798:	428b      	cmp	r3, r1
 800479a:	d056      	beq.n	800484a <HAL_DMA_IRQHandler+0x26e>
 800479c:	4293      	cmp	r3, r2
 800479e:	d060      	beq.n	8004862 <HAL_DMA_IRQHandler+0x286>
 80047a0:	4a36      	ldr	r2, [pc, #216]	; (800487c <HAL_DMA_IRQHandler+0x2a0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d027      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x21a>
 80047a6:	3214      	adds	r2, #20
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d014      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x1fa>
 80047ac:	3214      	adds	r2, #20
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d02a      	beq.n	8004808 <HAL_DMA_IRQHandler+0x22c>
 80047b2:	3214      	adds	r2, #20
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bf14      	ite	ne
 80047b8:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 80047bc:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80047c0:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_DMA_IRQHandler+0x2a4>)
 80047c2:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80047c4:	2200      	movs	r2, #0
    if(hdma->XferCpltCallback != NULL)
 80047c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    __HAL_UNLOCK(hdma);
 80047c8:	f880 2020 	strb.w	r2, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f43f af50 	beq.w	8004672 <HAL_DMA_IRQHandler+0x96>
}
 80047d2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80047d4:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80047d6:	2220      	movs	r2, #32
 80047d8:	e7f2      	b.n	80047c0 <HAL_DMA_IRQHandler+0x1e4>
 80047da:	2220      	movs	r2, #32
 80047dc:	e78c      	b.n	80046f8 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80047de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e2:	e7c7      	b.n	8004774 <HAL_DMA_IRQHandler+0x198>
 80047e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e8:	e73e      	b.n	8004668 <HAL_DMA_IRQHandler+0x8c>
 80047ea:	2304      	movs	r3, #4
 80047ec:	e7c2      	b.n	8004774 <HAL_DMA_IRQHandler+0x198>
 80047ee:	2304      	movs	r3, #4
 80047f0:	e73a      	b.n	8004668 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80047f2:	2202      	movs	r2, #2
 80047f4:	e780      	b.n	80046f8 <HAL_DMA_IRQHandler+0x11c>
 80047f6:	2202      	movs	r2, #2
 80047f8:	e7e2      	b.n	80047c0 <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80047fa:	2340      	movs	r3, #64	; 0x40
 80047fc:	e7ba      	b.n	8004774 <HAL_DMA_IRQHandler+0x198>
 80047fe:	2340      	movs	r3, #64	; 0x40
 8004800:	e732      	b.n	8004668 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004806:	e777      	b.n	80046f8 <HAL_DMA_IRQHandler+0x11c>
 8004808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480c:	e7d8      	b.n	80047c0 <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800480e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004812:	e7af      	b.n	8004774 <HAL_DMA_IRQHandler+0x198>
 8004814:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004818:	e726      	b.n	8004668 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800481a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800481e:	e76b      	b.n	80046f8 <HAL_DMA_IRQHandler+0x11c>
 8004820:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004824:	e7cc      	b.n	80047c0 <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004826:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800482a:	e7a3      	b.n	8004774 <HAL_DMA_IRQHandler+0x198>
 800482c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004830:	e71a      	b.n	8004668 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004832:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004836:	e7c3      	b.n	80047c0 <HAL_DMA_IRQHandler+0x1e4>
 8004838:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800483c:	e75c      	b.n	80046f8 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800483e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004842:	e711      	b.n	8004668 <HAL_DMA_IRQHandler+0x8c>
 8004844:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004848:	e794      	b.n	8004774 <HAL_DMA_IRQHandler+0x198>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800484a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800484e:	e7b7      	b.n	80047c0 <HAL_DMA_IRQHandler+0x1e4>
 8004850:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004854:	e750      	b.n	80046f8 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004856:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800485a:	e705      	b.n	8004668 <HAL_DMA_IRQHandler+0x8c>
 800485c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004860:	e788      	b.n	8004774 <HAL_DMA_IRQHandler+0x198>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004866:	e7ab      	b.n	80047c0 <HAL_DMA_IRQHandler+0x1e4>
 8004868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800486c:	e744      	b.n	80046f8 <HAL_DMA_IRQHandler+0x11c>
 800486e:	bf00      	nop
 8004870:	40020080 	.word	0x40020080
 8004874:	40020008 	.word	0x40020008
 8004878:	40020400 	.word	0x40020400
 800487c:	40020408 	.word	0x40020408
 8004880:	40020000 	.word	0x40020000

08004884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004888:	680c      	ldr	r4, [r1, #0]
{
 800488a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800488c:	2c00      	cmp	r4, #0
 800488e:	f000 80a2 	beq.w	80049d6 <HAL_GPIO_Init+0x152>
  uint32_t config = 0x00u;
 8004892:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004894:	f8df c228 	ldr.w	ip, [pc, #552]	; 8004ac0 <HAL_GPIO_Init+0x23c>
  uint32_t position = 0x00u;
 8004898:	4633      	mov	r3, r6
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800489a:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8004ac4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800489e:	4f82      	ldr	r7, [pc, #520]	; (8004aa8 <HAL_GPIO_Init+0x224>)
      switch (GPIO_Init->Mode)
 80048a0:	f8df e224 	ldr.w	lr, [pc, #548]	; 8004ac8 <HAL_GPIO_Init+0x244>
 80048a4:	e004      	b.n	80048b0 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80048a6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048a8:	fa34 f203 	lsrs.w	r2, r4, r3
 80048ac:	f000 8093 	beq.w	80049d6 <HAL_GPIO_Init+0x152>
    ioposition = (0x01uL << position);
 80048b0:	2201      	movs	r2, #1
 80048b2:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80048b4:	ea32 0904 	bics.w	r9, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048b8:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 80048bc:	d1f3      	bne.n	80048a6 <HAL_GPIO_Init+0x22>
      switch (GPIO_Init->Mode)
 80048be:	684c      	ldr	r4, [r1, #4]
 80048c0:	2c12      	cmp	r4, #18
 80048c2:	f200 808b 	bhi.w	80049dc <HAL_GPIO_Init+0x158>
 80048c6:	2c12      	cmp	r4, #18
 80048c8:	d80c      	bhi.n	80048e4 <HAL_GPIO_Init+0x60>
 80048ca:	e8df f004 	tbb	[pc, r4]
 80048ce:	c693      	.short	0xc693
 80048d0:	0b0b0ac3 	.word	0x0b0b0ac3
 80048d4:	0b0b0b0b 	.word	0x0b0b0b0b
 80048d8:	0b0b0b0b 	.word	0x0b0b0b0b
 80048dc:	c00b0b0b 	.word	0xc00b0b0b
 80048e0:	bd          	.byte	0xbd
 80048e1:	00          	.byte	0x00
 80048e2:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048e4:	2dff      	cmp	r5, #255	; 0xff
 80048e6:	f200 808c 	bhi.w	8004a02 <HAL_GPIO_Init+0x17e>
 80048ea:	4681      	mov	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048ec:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048f0:	240f      	movs	r4, #15
 80048f2:	f8d9 2000 	ldr.w	r2, [r9]
 80048f6:	fa04 fb0a 	lsl.w	fp, r4, sl
 80048fa:	ea22 020b 	bic.w	r2, r2, fp
 80048fe:	fa06 fa0a 	lsl.w	sl, r6, sl
 8004902:	ea42 020a 	orr.w	r2, r2, sl
 8004906:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800490a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800490e:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8004912:	f000 8097 	beq.w	8004a44 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004916:	f8dc a018 	ldr.w	sl, [ip, #24]
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	f04a 0a01 	orr.w	sl, sl, #1
 8004922:	f8cc a018 	str.w	sl, [ip, #24]
 8004926:	f8dc a018 	ldr.w	sl, [ip, #24]
 800492a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800492e:	f00a 0a01 	and.w	sl, sl, #1
 8004932:	f8cd a00c 	str.w	sl, [sp, #12]
 8004936:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800493a:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800493e:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004942:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004946:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800494a:	fa04 f40a 	lsl.w	r4, r4, sl
 800494e:	ea2b 0404 	bic.w	r4, fp, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004952:	4540      	cmp	r0, r8
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004954:	9401      	str	r4, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004956:	d01b      	beq.n	8004990 <HAL_GPIO_Init+0x10c>
 8004958:	4c54      	ldr	r4, [pc, #336]	; (8004aac <HAL_GPIO_Init+0x228>)
 800495a:	42a0      	cmp	r0, r4
 800495c:	f000 8088 	beq.w	8004a70 <HAL_GPIO_Init+0x1ec>
 8004960:	4c53      	ldr	r4, [pc, #332]	; (8004ab0 <HAL_GPIO_Init+0x22c>)
 8004962:	42a0      	cmp	r0, r4
 8004964:	d07b      	beq.n	8004a5e <HAL_GPIO_Init+0x1da>
 8004966:	4c53      	ldr	r4, [pc, #332]	; (8004ab4 <HAL_GPIO_Init+0x230>)
 8004968:	42a0      	cmp	r0, r4
 800496a:	f000 808a 	beq.w	8004a82 <HAL_GPIO_Init+0x1fe>
 800496e:	4c52      	ldr	r4, [pc, #328]	; (8004ab8 <HAL_GPIO_Init+0x234>)
 8004970:	42a0      	cmp	r0, r4
 8004972:	f000 808f 	beq.w	8004a94 <HAL_GPIO_Init+0x210>
 8004976:	4c51      	ldr	r4, [pc, #324]	; (8004abc <HAL_GPIO_Init+0x238>)
 8004978:	42a0      	cmp	r0, r4
 800497a:	bf0c      	ite	eq
 800497c:	f04f 0b05 	moveq.w	fp, #5
 8004980:	f04f 0b06 	movne.w	fp, #6
 8004984:	9c01      	ldr	r4, [sp, #4]
 8004986:	fa0b fa0a 	lsl.w	sl, fp, sl
 800498a:	ea44 040a 	orr.w	r4, r4, sl
 800498e:	9401      	str	r4, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8004990:	9c01      	ldr	r4, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004992:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8004996:	6094      	str	r4, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	bf14      	ite	ne
 800499c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800499e:	43aa      	biceq	r2, r5
 80049a0:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80049a2:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049a4:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80049a8:	bf14      	ite	ne
 80049aa:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049ac:	43aa      	biceq	r2, r5
 80049ae:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80049b0:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049b2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80049b6:	bf14      	ite	ne
 80049b8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049ba:	43aa      	biceq	r2, r5
 80049bc:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049be:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80049c2:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049c4:	d03b      	beq.n	8004a3e <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->FTSR, iocurrent);
 80049c6:	4315      	orrs	r5, r2
 80049c8:	60fd      	str	r5, [r7, #12]
 80049ca:	680c      	ldr	r4, [r1, #0]
	position++;
 80049cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ce:	fa34 f203 	lsrs.w	r2, r4, r3
 80049d2:	f47f af6d 	bne.w	80048b0 <HAL_GPIO_Init+0x2c>
  }
}
 80049d6:	b005      	add	sp, #20
 80049d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80049dc:	4574      	cmp	r4, lr
 80049de:	d009      	beq.n	80049f4 <HAL_GPIO_Init+0x170>
 80049e0:	d916      	bls.n	8004a10 <HAL_GPIO_Init+0x18c>
 80049e2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8004acc <HAL_GPIO_Init+0x248>
 80049e6:	454c      	cmp	r4, r9
 80049e8:	d004      	beq.n	80049f4 <HAL_GPIO_Init+0x170>
 80049ea:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80049ee:	454c      	cmp	r4, r9
 80049f0:	f47f af78 	bne.w	80048e4 <HAL_GPIO_Init+0x60>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049f4:	688c      	ldr	r4, [r1, #8]
 80049f6:	b9dc      	cbnz	r4, 8004a30 <HAL_GPIO_Init+0x1ac>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80049f8:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049fa:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80049fe:	f67f af74 	bls.w	80048ea <HAL_GPIO_Init+0x66>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a02:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8004a06:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a0a:	f100 0904 	add.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a0e:	e76f      	b.n	80048f0 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8004a10:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8004ad0 <HAL_GPIO_Init+0x24c>
 8004a14:	454c      	cmp	r4, r9
 8004a16:	d0ed      	beq.n	80049f4 <HAL_GPIO_Init+0x170>
 8004a18:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8004a1c:	454c      	cmp	r4, r9
 8004a1e:	d0e9      	beq.n	80049f4 <HAL_GPIO_Init+0x170>
 8004a20:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8004a24:	454c      	cmp	r4, r9
 8004a26:	f47f af5d 	bne.w	80048e4 <HAL_GPIO_Init+0x60>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a2a:	688c      	ldr	r4, [r1, #8]
 8004a2c:	2c00      	cmp	r4, #0
 8004a2e:	d0e3      	beq.n	80049f8 <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a30:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a32:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8004a36:	bf0c      	ite	eq
 8004a38:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8004a3a:	6142      	strne	r2, [r0, #20]
 8004a3c:	e752      	b.n	80048e4 <HAL_GPIO_Init+0x60>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a3e:	ea22 0505 	bic.w	r5, r2, r5
 8004a42:	60fd      	str	r5, [r7, #12]
 8004a44:	680c      	ldr	r4, [r1, #0]
 8004a46:	e72e      	b.n	80048a6 <HAL_GPIO_Init+0x22>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a48:	68ce      	ldr	r6, [r1, #12]
 8004a4a:	360c      	adds	r6, #12
          break;
 8004a4c:	e74a      	b.n	80048e4 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a4e:	68ce      	ldr	r6, [r1, #12]
 8004a50:	3604      	adds	r6, #4
          break;
 8004a52:	e747      	b.n	80048e4 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a54:	68ce      	ldr	r6, [r1, #12]
 8004a56:	3608      	adds	r6, #8
          break;
 8004a58:	e744      	b.n	80048e4 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a5a:	68ce      	ldr	r6, [r1, #12]
          break;
 8004a5c:	e742      	b.n	80048e4 <HAL_GPIO_Init+0x60>
 8004a5e:	f04f 0b02 	mov.w	fp, #2
 8004a62:	9c01      	ldr	r4, [sp, #4]
 8004a64:	fa0b fa0a 	lsl.w	sl, fp, sl
 8004a68:	ea44 040a 	orr.w	r4, r4, sl
 8004a6c:	9401      	str	r4, [sp, #4]
 8004a6e:	e78f      	b.n	8004990 <HAL_GPIO_Init+0x10c>
 8004a70:	f04f 0b01 	mov.w	fp, #1
 8004a74:	9c01      	ldr	r4, [sp, #4]
 8004a76:	fa0b fa0a 	lsl.w	sl, fp, sl
 8004a7a:	ea44 040a 	orr.w	r4, r4, sl
 8004a7e:	9401      	str	r4, [sp, #4]
 8004a80:	e786      	b.n	8004990 <HAL_GPIO_Init+0x10c>
 8004a82:	f04f 0b03 	mov.w	fp, #3
 8004a86:	9c01      	ldr	r4, [sp, #4]
 8004a88:	fa0b fa0a 	lsl.w	sl, fp, sl
 8004a8c:	ea44 040a 	orr.w	r4, r4, sl
 8004a90:	9401      	str	r4, [sp, #4]
 8004a92:	e77d      	b.n	8004990 <HAL_GPIO_Init+0x10c>
 8004a94:	f04f 0b04 	mov.w	fp, #4
 8004a98:	9c01      	ldr	r4, [sp, #4]
 8004a9a:	fa0b fa0a 	lsl.w	sl, fp, sl
 8004a9e:	ea44 040a 	orr.w	r4, r4, sl
 8004aa2:	9401      	str	r4, [sp, #4]
 8004aa4:	e774      	b.n	8004990 <HAL_GPIO_Init+0x10c>
 8004aa6:	bf00      	nop
 8004aa8:	40010400 	.word	0x40010400
 8004aac:	40010c00 	.word	0x40010c00
 8004ab0:	40011000 	.word	0x40011000
 8004ab4:	40011400 	.word	0x40011400
 8004ab8:	40011800 	.word	0x40011800
 8004abc:	40011c00 	.word	0x40011c00
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40010800 	.word	0x40010800
 8004ac8:	10220000 	.word	0x10220000
 8004acc:	10310000 	.word	0x10310000
 8004ad0:	10120000 	.word	0x10120000

08004ad4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ad4:	6883      	ldr	r3, [r0, #8]
 8004ad6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004ad8:	bf14      	ite	ne
 8004ada:	2001      	movne	r0, #1
 8004adc:	2000      	moveq	r0, #0
 8004ade:	4770      	bx	lr

08004ae0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ae0:	b902      	cbnz	r2, 8004ae4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ae2:	0409      	lsls	r1, r1, #16
 8004ae4:	6101      	str	r1, [r0, #16]
  }
}
 8004ae6:	4770      	bx	lr

08004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	4681      	mov	r9, r0
 8004aee:	460e      	mov	r6, r1
 8004af0:	4617      	mov	r7, r2
 8004af2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af4:	f8d9 4000 	ldr.w	r4, [r9]
 8004af8:	e004      	b.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004afa:	6965      	ldr	r5, [r4, #20]
 8004afc:	056a      	lsls	r2, r5, #21
 8004afe:	d409      	bmi.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b00:	1c7b      	adds	r3, r7, #1
 8004b02:	d121      	bne.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b04:	6960      	ldr	r0, [r4, #20]
 8004b06:	ea26 0000 	bic.w	r0, r6, r0
 8004b0a:	b280      	uxth	r0, r0
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d1f4      	bne.n	8004afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8004b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b14:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b16:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b1a:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b22:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b24:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b26:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b2a:	f889 103d 	strb.w	r1, [r9, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2e:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b32:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004b36:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8004b3e:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b40:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
}
 8004b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b48:	f7ff fb76 	bl	8004238 <HAL_GetTick>
 8004b4c:	eba0 0008 	sub.w	r0, r0, r8
 8004b50:	42b8      	cmp	r0, r7
 8004b52:	d801      	bhi.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	d1cd      	bne.n	8004af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b58:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b5a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b60:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b64:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b68:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        return HAL_ERROR;
 8004b6c:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004b72:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b76:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        return HAL_ERROR;
 8004b7a:	e7c9      	b.n	8004b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x28>

08004b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b7c:	b530      	push	{r4, r5, lr}
 8004b7e:	4604      	mov	r4, r0
 8004b80:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b82:	6820      	ldr	r0, [r4, #0]
 8004b84:	6943      	ldr	r3, [r0, #20]
 8004b86:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004b8a:	d130      	bne.n	8004bee <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b8c:	6945      	ldr	r5, [r0, #20]
 8004b8e:	056d      	lsls	r5, r5, #21
 8004b90:	d41b      	bmi.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	1c4b      	adds	r3, r1, #1
 8004b94:	d0f6      	beq.n	8004b84 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	e9cd 1200 	strd	r1, r2, [sp]
 8004b9a:	f7ff fb4d 	bl	8004238 <HAL_GetTick>
 8004b9e:	9a01      	ldr	r2, [sp, #4]
 8004ba0:	9900      	ldr	r1, [sp, #0]
 8004ba2:	1a80      	subs	r0, r0, r2
 8004ba4:	4288      	cmp	r0, r1
 8004ba6:	d801      	bhi.n	8004bac <I2C_WaitOnTXEFlagUntilTimeout+0x30>
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d1ea      	bne.n	8004b82 <I2C_WaitOnTXEFlagUntilTimeout+0x6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bac:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bae:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bb0:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bb6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004bbc:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004bc2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bc6:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004bc8:	e00f      	b.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x6e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bca:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bce:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd0:	6141      	str	r1, [r0, #20]
      return HAL_ERROR;
 8004bd2:	2001      	movs	r0, #1
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd4:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bde:	6c22      	ldr	r2, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be4:	f042 0204 	orr.w	r2, r2, #4
 8004be8:	6422      	str	r2, [r4, #64]	; 0x40
}
 8004bea:	b003      	add	sp, #12
 8004bec:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8004bee:	2000      	movs	r0, #0
}
 8004bf0:	b003      	add	sp, #12
 8004bf2:	bd30      	pop	{r4, r5, pc}

08004bf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bfc:	e008      	b.n	8004c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bfe:	6962      	ldr	r2, [r4, #20]
 8004c00:	06d2      	lsls	r2, r2, #27
 8004c02:	d41b      	bmi.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c04:	f7ff fb18 	bl	8004238 <HAL_GetTick>
 8004c08:	1bc0      	subs	r0, r0, r7
 8004c0a:	42a8      	cmp	r0, r5
 8004c0c:	d807      	bhi.n	8004c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8004c0e:	b135      	cbz	r5, 8004c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c10:	6834      	ldr	r4, [r6, #0]
 8004c12:	6963      	ldr	r3, [r4, #20]
 8004c14:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004c18:	d0f1      	beq.n	8004bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
  return HAL_OK;
 8004c1a:	2000      	movs	r0, #0
}
 8004c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c1e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c20:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c22:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c24:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c28:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c2e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c32:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004c36:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c38:	6433      	str	r3, [r6, #64]	; 0x40
}
 8004c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3c:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c40:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c42:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c44:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c46:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c4e:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004c50:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      return HAL_ERROR;
 8004c54:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c56:	6432      	str	r2, [r6, #64]	; 0x40
}
 8004c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c5a:	bf00      	nop

08004c5c <I2C_WaitOnFlagUntilTimeout>:
{
 8004c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c60:	460d      	mov	r5, r1
 8004c62:	4681      	mov	r9, r0
 8004c64:	4617      	mov	r7, r2
 8004c66:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c68:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8004c6c:	f8d9 3000 	ldr.w	r3, [r9]
 8004c70:	e001      	b.n	8004c76 <I2C_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8004c72:	1c72      	adds	r2, r6, #1
 8004c74:	d10f      	bne.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c76:	f1b8 0f01 	cmp.w	r8, #1
 8004c7a:	bf0c      	ite	eq
 8004c7c:	695c      	ldreq	r4, [r3, #20]
 8004c7e:	699c      	ldrne	r4, [r3, #24]
 8004c80:	ea25 0404 	bic.w	r4, r5, r4
 8004c84:	b2a4      	uxth	r4, r4
 8004c86:	fab4 f484 	clz	r4, r4
 8004c8a:	0964      	lsrs	r4, r4, #5
 8004c8c:	42bc      	cmp	r4, r7
 8004c8e:	d0f0      	beq.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x16>
  return HAL_OK;
 8004c90:	2000      	movs	r0, #0
}
 8004c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7ff facf 	bl	8004238 <HAL_GetTick>
 8004c9a:	9b08      	ldr	r3, [sp, #32]
 8004c9c:	1ac0      	subs	r0, r0, r3
 8004c9e:	42b0      	cmp	r0, r6
 8004ca0:	d801      	bhi.n	8004ca6 <I2C_WaitOnFlagUntilTimeout+0x4a>
 8004ca2:	2e00      	cmp	r6, #0
 8004ca4:	d1e2      	bne.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ca6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ca8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004caa:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cae:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cb2:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cb6:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cba:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cbc:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004cc0:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cc4:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        return HAL_ERROR;
 8004cc8:	e7e3      	b.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x36>
 8004cca:	bf00      	nop

08004ccc <I2C_RequestMemoryWrite>:
{
 8004ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cd0:	4690      	mov	r8, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd2:	6802      	ldr	r2, [r0, #0]
{
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd8:	6813      	ldr	r3, [r2, #0]
{
 8004cda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004cdc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce2:	6013      	str	r3, [r2, #0]
{
 8004ce4:	460d      	mov	r5, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce6:	4633      	mov	r3, r6
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cee:	9700      	str	r7, [sp, #0]
{
 8004cf0:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf2:	f7ff ffb3 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf6:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf8:	bb20      	cbnz	r0, 8004d44 <I2C_RequestMemoryWrite+0x78>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cfa:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004cfe:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d00:	4632      	mov	r2, r6
 8004d02:	463b      	mov	r3, r7
 8004d04:	4620      	mov	r0, r4
 8004d06:	4923      	ldr	r1, [pc, #140]	; (8004d94 <I2C_RequestMemoryWrite+0xc8>)
 8004d08:	f7ff feee 	bl	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d0c:	b118      	cbz	r0, 8004d16 <I2C_RequestMemoryWrite+0x4a>
    return HAL_ERROR;
 8004d0e:	2001      	movs	r0, #1
}
 8004d10:	b005      	add	sp, #20
 8004d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	9003      	str	r0, [sp, #12]
 8004d1a:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1c:	463a      	mov	r2, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1e:	9103      	str	r1, [sp, #12]
 8004d20:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d22:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d24:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d26:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d28:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d2a:	f7ff ff27 	bl	8004b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d2e:	bb30      	cbnz	r0, 8004d7e <I2C_RequestMemoryWrite+0xb2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d30:	f1b9 0f01 	cmp.w	r9, #1
 8004d34:	d114      	bne.n	8004d60 <I2C_RequestMemoryWrite+0x94>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	fa5f f288 	uxtb.w	r2, r8
 8004d3c:	611a      	str	r2, [r3, #16]
}
 8004d3e:	b005      	add	sp, #20
 8004d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	05db      	lsls	r3, r3, #23
 8004d48:	d506      	bpl.n	8004d58 <I2C_RequestMemoryWrite+0x8c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8004d4e:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d50:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004d52:	b005      	add	sp, #20
 8004d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_TIMEOUT;
 8004d58:	2003      	movs	r0, #3
}
 8004d5a:	b005      	add	sp, #20
 8004d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d60:	6820      	ldr	r0, [r4, #0]
 8004d62:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8004d66:	6103      	str	r3, [r0, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d68:	463a      	mov	r2, r7
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f7ff ff05 	bl	8004b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d72:	b920      	cbnz	r0, 8004d7e <I2C_RequestMemoryWrite+0xb2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	fa5f f388 	uxtb.w	r3, r8
 8004d7a:	6113      	str	r3, [r2, #16]
 8004d7c:	e7c8      	b.n	8004d10 <I2C_RequestMemoryWrite+0x44>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d1c4      	bne.n	8004d0e <I2C_RequestMemoryWrite+0x42>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8004d86:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	6813      	ldr	r3, [r2, #0]
 8004d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e7be      	b.n	8004d10 <I2C_RequestMemoryWrite+0x44>
 8004d92:	bf00      	nop
 8004d94:	00010002 	.word	0x00010002

08004d98 <I2C_RequestMemoryRead>:
{
 8004d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9c:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	6802      	ldr	r2, [r0, #0]
{
 8004da0:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	6813      	ldr	r3, [r2, #0]
{
 8004da4:	460d      	mov	r5, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004daa:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dac:	6811      	ldr	r1, [r2, #0]
{
 8004dae:	b084      	sub	sp, #16
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004db4:	6011      	str	r1, [r2, #0]
{
 8004db6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dba:	4633      	mov	r3, r6
 8004dbc:	9100      	str	r1, [sp, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8004dc4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc6:	f7ff ff49 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dca:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d145      	bne.n	8004e5c <I2C_RequestMemoryRead+0xc4>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dd0:	f005 02fe 	and.w	r2, r5, #254	; 0xfe
 8004dd4:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	4632      	mov	r2, r6
 8004dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ddc:	4931      	ldr	r1, [pc, #196]	; (8004ea4 <I2C_RequestMemoryRead+0x10c>)
 8004dde:	f7ff fe83 	bl	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004de2:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004de4:	b118      	cbz	r0, 8004dee <I2C_RequestMemoryRead+0x56>
    return HAL_ERROR;
 8004de6:	2001      	movs	r0, #1
}
 8004de8:	b004      	add	sp, #16
 8004dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	9003      	str	r0, [sp, #12]
 8004df2:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df6:	9103      	str	r1, [sp, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfa:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfc:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e00:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e02:	f7ff febb 	bl	8004b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d132      	bne.n	8004e70 <I2C_RequestMemoryRead+0xd8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e0a:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e10:	d13c      	bne.n	8004e8c <I2C_RequestMemoryRead+0xf4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e12:	b2ff      	uxtb	r7, r7
 8004e14:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff feae 	bl	8004b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e20:	4602      	mov	r2, r0
 8004e22:	bb28      	cbnz	r0, 8004e70 <I2C_RequestMemoryRead+0xd8>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e24:	6820      	ldr	r0, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e26:	4633      	mov	r3, r6
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e28:	6801      	ldr	r1, [r0, #0]
 8004e2a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004e2e:	6001      	str	r1, [r0, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004e32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e36:	9000      	str	r0, [sp, #0]
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f7ff ff0f 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e3e:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e40:	b960      	cbnz	r0, 8004e5c <I2C_RequestMemoryRead+0xc4>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e42:	f045 0501 	orr.w	r5, r5, #1
 8004e46:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e48:	4632      	mov	r2, r6
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e4e:	4915      	ldr	r1, [pc, #84]	; (8004ea4 <I2C_RequestMemoryRead+0x10c>)
 8004e50:	f7ff fe4a 	bl	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8004e54:	3800      	subs	r0, #0
 8004e56:	bf18      	it	ne
 8004e58:	2001      	movne	r0, #1
 8004e5a:	e7c5      	b.n	8004de8 <I2C_RequestMemoryRead+0x50>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	05db      	lsls	r3, r3, #23
 8004e60:	d510      	bpl.n	8004e84 <I2C_RequestMemoryRead+0xec>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e62:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8004e66:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e68:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004e6a:	b004      	add	sp, #16
 8004e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d1b7      	bne.n	8004de6 <I2C_RequestMemoryRead+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e76:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 8004e78:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7a:	6813      	ldr	r3, [r2, #0]
 8004e7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e7b1      	b.n	8004de8 <I2C_RequestMemoryRead+0x50>
    return HAL_TIMEOUT;
 8004e84:	2003      	movs	r0, #3
}
 8004e86:	b004      	add	sp, #16
 8004e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e8c:	0a3a      	lsrs	r2, r7, #8
 8004e8e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e90:	4631      	mov	r1, r6
 8004e92:	4620      	mov	r0, r4
 8004e94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e96:	f7ff fe71 	bl	8004b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d1e8      	bne.n	8004e70 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	e7b7      	b.n	8004e12 <I2C_RequestMemoryRead+0x7a>
 8004ea2:	bf00      	nop
 8004ea4:	00010002 	.word	0x00010002

08004ea8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004ea8:	b530      	push	{r4, r5, lr}
 8004eaa:	4604      	mov	r4, r0
 8004eac:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	6943      	ldr	r3, [r0, #20]
 8004eb2:	f013 0304 	ands.w	r3, r3, #4
 8004eb6:	d130      	bne.n	8004f1a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb8:	6945      	ldr	r5, [r0, #20]
 8004eba:	056d      	lsls	r5, r5, #21
 8004ebc:	d41b      	bmi.n	8004ef6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8004ebe:	1c4b      	adds	r3, r1, #1
 8004ec0:	d0f6      	beq.n	8004eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	e9cd 1200 	strd	r1, r2, [sp]
 8004ec6:	f7ff f9b7 	bl	8004238 <HAL_GetTick>
 8004eca:	9a01      	ldr	r2, [sp, #4]
 8004ecc:	9900      	ldr	r1, [sp, #0]
 8004ece:	1a80      	subs	r0, r0, r2
 8004ed0:	4288      	cmp	r0, r1
 8004ed2:	d801      	bhi.n	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x30>
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	d1ea      	bne.n	8004eae <I2C_WaitOnBTFFlagUntilTimeout+0x6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ed8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eda:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004edc:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ede:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ee2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004ee8:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004eea:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004eee:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ef2:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004ef4:	e00f      	b.n	8004f16 <I2C_WaitOnBTFFlagUntilTimeout+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004efa:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004efc:	6141      	str	r1, [r0, #20]
      return HAL_ERROR;
 8004efe:	2001      	movs	r0, #1
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f00:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004f0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f10:	f042 0204 	orr.w	r2, r2, #4
 8004f14:	6422      	str	r2, [r4, #64]	; 0x40
}
 8004f16:	b003      	add	sp, #12
 8004f18:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8004f1a:	2000      	movs	r0, #0
}
 8004f1c:	b003      	add	sp, #12
 8004f1e:	bd30      	pop	{r4, r5, pc}

08004f20 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004f20:	2800      	cmp	r0, #0
 8004f22:	f000 80b5 	beq.w	8005090 <HAL_I2C_Init+0x170>
{
 8004f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8094 	beq.w	8005060 <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f38:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004f3a:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f56:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f58:	f001 fd44 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f5c:	6865      	ldr	r5, [r4, #4]
 8004f5e:	4b4d      	ldr	r3, [pc, #308]	; (8005094 <HAL_I2C_Init+0x174>)
 8004f60:	429d      	cmp	r5, r3
 8004f62:	d84c      	bhi.n	8004ffe <HAL_I2C_Init+0xde>
 8004f64:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <HAL_I2C_Init+0x178>)
 8004f66:	4298      	cmp	r0, r3
 8004f68:	d978      	bls.n	800505c <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f6a:	1e42      	subs	r2, r0, #1
 8004f6c:	006d      	lsls	r5, r5, #1
 8004f6e:	fbb2 f2f5 	udiv	r2, r2, r5
 8004f72:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 8004f76:	4949      	ldr	r1, [pc, #292]	; (800509c <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f78:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004f7a:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f7e:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f80:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f82:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004f86:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 8004f8a:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f8c:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8004f8e:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f90:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004f94:	3001      	adds	r0, #1
 8004f96:	4308      	orrs	r0, r1
 8004f98:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f9a:	69d9      	ldr	r1, [r3, #28]
 8004f9c:	4232      	tst	r2, r6
 8004f9e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004fa2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004fa6:	d160      	bne.n	800506a <HAL_I2C_Init+0x14a>
 8004fa8:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004faa:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004fac:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8004fb8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004fbc:	4302      	orrs	r2, r0
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fc2:	6899      	ldr	r1, [r3, #8]
 8004fc4:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8004fc8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004fcc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004fd0:	4302      	orrs	r2, r0
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fd6:	68d9      	ldr	r1, [r3, #12]
 8004fd8:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8004fdc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004fe0:	4302      	orrs	r2, r0
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004fe6:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004fe8:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff0:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff6:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff8:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8004ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ffe:	4b28      	ldr	r3, [pc, #160]	; (80050a0 <HAL_I2C_Init+0x180>)
 8005000:	4298      	cmp	r0, r3
 8005002:	d92b      	bls.n	800505c <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005004:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8005008:	4e24      	ldr	r6, [pc, #144]	; (800509c <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800500a:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800500c:	fba6 2600 	umull	r2, r6, r6, r0
 8005010:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005012:	fb01 f102 	mul.w	r1, r1, r2
 8005016:	4f23      	ldr	r7, [pc, #140]	; (80050a4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005018:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800501a:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800501e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005022:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8005026:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005028:	6a1a      	ldr	r2, [r3, #32]
 800502a:	0989      	lsrs	r1, r1, #6
 800502c:	3101      	adds	r1, #1
 800502e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005032:	4311      	orrs	r1, r2
 8005034:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	68a6      	ldr	r6, [r4, #8]
 800503a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800503e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005042:	b9ae      	cbnz	r6, 8005070 <HAL_I2C_Init+0x150>
 8005044:	3801      	subs	r0, #1
 8005046:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800504a:	fbb0 f2f2 	udiv	r2, r0, r2
 800504e:	3201      	adds	r2, #1
 8005050:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005054:	b1d2      	cbz	r2, 800508c <HAL_I2C_Init+0x16c>
 8005056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800505a:	e7a6      	b.n	8004faa <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 800505c:	2001      	movs	r0, #1
}
 800505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005060:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005064:	f7fe fd32 	bl	8003acc <HAL_I2C_MspInit>
 8005068:	e766      	b.n	8004f38 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800506a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800506e:	e79c      	b.n	8004faa <HAL_I2C_Init+0x8a>
 8005070:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8005074:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8005078:	1e42      	subs	r2, r0, #1
 800507a:	fbb2 f2f5 	udiv	r2, r2, r5
 800507e:	3201      	adds	r2, #1
 8005080:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005084:	b112      	cbz	r2, 800508c <HAL_I2C_Init+0x16c>
 8005086:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800508a:	e78e      	b.n	8004faa <HAL_I2C_Init+0x8a>
 800508c:	2201      	movs	r2, #1
 800508e:	e78c      	b.n	8004faa <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8005090:	2001      	movs	r0, #1
}
 8005092:	4770      	bx	lr
 8005094:	000186a0 	.word	0x000186a0
 8005098:	001e847f 	.word	0x001e847f
 800509c:	431bde83 	.word	0x431bde83
 80050a0:	003d08ff 	.word	0x003d08ff
 80050a4:	10624dd3 	.word	0x10624dd3

080050a8 <HAL_I2C_Mem_Write>:
{
 80050a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ac:	4604      	mov	r4, r0
 80050ae:	b082      	sub	sp, #8
 80050b0:	4699      	mov	r9, r3
 80050b2:	460f      	mov	r7, r1
 80050b4:	4690      	mov	r8, r2
 80050b6:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80050ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80050bc:	f7ff f8bc 	bl	8004238 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d003      	beq.n	80050d0 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80050c8:	2002      	movs	r0, #2
}
 80050ca:	b002      	add	sp, #8
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050d0:	4605      	mov	r5, r0
 80050d2:	9000      	str	r0, [sp, #0]
 80050d4:	2319      	movs	r3, #25
 80050d6:	2201      	movs	r2, #1
 80050d8:	4620      	mov	r0, r4
 80050da:	4943      	ldr	r1, [pc, #268]	; (80051e8 <HAL_I2C_Mem_Write+0x140>)
 80050dc:	f7ff fdbe 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d1f1      	bne.n	80050c8 <HAL_I2C_Mem_Write+0x20>
    __HAL_LOCK(hi2c);
 80050e4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d0ed      	beq.n	80050c8 <HAL_I2C_Mem_Write+0x20>
 80050ec:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ee:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hi2c);
 80050f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050f4:	6813      	ldr	r3, [r2, #0]
 80050f6:	07db      	lsls	r3, r3, #31
 80050f8:	d566      	bpl.n	80051c8 <HAL_I2C_Mem_Write+0x120>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050fa:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050fe:	2000      	movs	r0, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005100:	f04f 0e21 	mov.w	lr, #33	; 0x21
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005104:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005106:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005108:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800510c:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800510e:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005112:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005116:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005118:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800511c:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005120:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 8005122:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005124:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 8005128:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800512a:	4642      	mov	r2, r8
 800512c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005130:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005132:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005136:	4620      	mov	r0, r4
 8005138:	f7ff fdc8 	bl	8004ccc <I2C_RequestMemoryWrite>
 800513c:	2800      	cmp	r0, #0
 800513e:	d13f      	bne.n	80051c0 <HAL_I2C_Mem_Write+0x118>
    while (hi2c->XferSize > 0U)
 8005140:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005142:	b353      	cbz	r3, 800519a <HAL_I2C_Mem_Write+0xf2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005144:	462a      	mov	r2, r5
 8005146:	4631      	mov	r1, r6
 8005148:	4620      	mov	r0, r4
 800514a:	f7ff fd17 	bl	8004b7c <I2C_WaitOnTXEFlagUntilTimeout>
 800514e:	2800      	cmp	r0, #0
 8005150:	d13f      	bne.n	80051d2 <HAL_I2C_Mem_Write+0x12a>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005152:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005154:	6820      	ldr	r0, [r4, #0]
 8005156:	4639      	mov	r1, r7
 8005158:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 800515c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005160:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8005162:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005164:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->XferCount--;
 8005168:	3b01      	subs	r3, #1
 800516a:	b29b      	uxth	r3, r3
 800516c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800516e:	f8d0 e014 	ldr.w	lr, [r0, #20]
      hi2c->XferSize--;
 8005172:	b293      	uxth	r3, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005174:	f01e 0f04 	tst.w	lr, #4
      hi2c->pBuffPtr++;
 8005178:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800517a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800517c:	d0e1      	beq.n	8005142 <HAL_I2C_Mem_Write+0x9a>
 800517e:	b163      	cbz	r3, 800519a <HAL_I2C_Mem_Write+0xf2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005180:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 8005182:	f1ac 0302 	sub.w	r3, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005186:	6102      	str	r2, [r0, #16]
        hi2c->XferCount--;
 8005188:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800518a:	b29b      	uxth	r3, r3
        hi2c->XferCount--;
 800518c:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 800518e:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8005190:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8005192:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005194:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005196:	8562      	strh	r2, [r4, #42]	; 0x2a
 8005198:	e7d3      	b.n	8005142 <HAL_I2C_Mem_Write+0x9a>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519a:	462a      	mov	r2, r5
 800519c:	4631      	mov	r1, r6
 800519e:	4620      	mov	r0, r4
 80051a0:	f7ff fe82 	bl	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout>
 80051a4:	b9a8      	cbnz	r0, 80051d2 <HAL_I2C_Mem_Write+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80051a6:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051b0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80051b2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80051b6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ba:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80051be:	e784      	b.n	80050ca <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80051c0:	2001      	movs	r0, #1
}
 80051c2:	b002      	add	sp, #8
 80051c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 80051c8:	6813      	ldr	r3, [r2, #0]
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e793      	b.n	80050fa <HAL_I2C_Mem_Write+0x52>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d1f3      	bne.n	80051c0 <HAL_I2C_Mem_Write+0x118>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 80051da:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051dc:	6813      	ldr	r3, [r2, #0]
 80051de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	e771      	b.n	80050ca <HAL_I2C_Mem_Write+0x22>
 80051e6:	bf00      	nop
 80051e8:	00100002 	.word	0x00100002

080051ec <HAL_I2C_Mem_Read>:
{
 80051ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80051f2:	2500      	movs	r5, #0
{
 80051f4:	b088      	sub	sp, #32
 80051f6:	4699      	mov	r9, r3
 80051f8:	460e      	mov	r6, r1
 80051fa:	4690      	mov	r8, r2
 80051fc:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8005200:	9f12      	ldr	r7, [sp, #72]	; 0x48
  __IO uint32_t count = 0U;
 8005202:	9503      	str	r5, [sp, #12]
  uint32_t tickstart = HAL_GetTick();
 8005204:	f7ff f818 	bl	8004238 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005208:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800520c:	2b20      	cmp	r3, #32
 800520e:	d004      	beq.n	800521a <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8005210:	2602      	movs	r6, #2
}
 8005212:	4630      	mov	r0, r6
 8005214:	b008      	add	sp, #32
 8005216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800521a:	4605      	mov	r5, r0
 800521c:	9000      	str	r0, [sp, #0]
 800521e:	2319      	movs	r3, #25
 8005220:	2201      	movs	r2, #1
 8005222:	4620      	mov	r0, r4
 8005224:	49a0      	ldr	r1, [pc, #640]	; (80054a8 <HAL_I2C_Mem_Read+0x2bc>)
 8005226:	f7ff fd19 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 800522a:	2800      	cmp	r0, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 800522e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d0ec      	beq.n	8005210 <HAL_I2C_Mem_Read+0x24>
 8005236:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005238:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hi2c);
 800523a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	07d9      	lsls	r1, r3, #31
 8005242:	d53a      	bpl.n	80052ba <HAL_I2C_Mem_Read+0xce>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005244:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005248:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800524c:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800524e:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005250:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005252:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005256:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005258:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800525c:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005260:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005262:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005266:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800526a:	4631      	mov	r1, r6
    hi2c->pBuffPtr    = pData;
 800526c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800526e:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 8005272:	6266      	str	r6, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005274:	4642      	mov	r2, r8
 8005276:	e9cd 7500 	strd	r7, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800527a:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800527c:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005280:	4620      	mov	r0, r4
 8005282:	f7ff fd89 	bl	8004d98 <I2C_RequestMemoryRead>
 8005286:	4606      	mov	r6, r0
 8005288:	2800      	cmp	r0, #0
 800528a:	f040 8094 	bne.w	80053b6 <HAL_I2C_Mem_Read+0x1ca>
    if (hi2c->XferSize == 0U)
 800528e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005290:	b9c3      	cbnz	r3, 80052c4 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	9004      	str	r0, [sp, #16]
 8005296:	695a      	ldr	r2, [r3, #20]
 8005298:	9204      	str	r2, [sp, #16]
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	9204      	str	r2, [sp, #16]
 800529e:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a6:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80052ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80052b8:	e7ab      	b.n	8005212 <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 80052ba:	6813      	ldr	r3, [r2, #0]
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e7bf      	b.n	8005244 <HAL_I2C_Mem_Read+0x58>
    else if (hi2c->XferSize == 1U)
 80052c4:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c6:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 80052c8:	f000 80f6 	beq.w	80054b8 <HAL_I2C_Mem_Read+0x2cc>
    else if (hi2c->XferSize == 2U)
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d077      	beq.n	80053c0 <HAL_I2C_Mem_Read+0x1d4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d0:	6811      	ldr	r1, [r2, #0]
 80052d2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80052d6:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d8:	9007      	str	r0, [sp, #28]
 80052da:	6951      	ldr	r1, [r2, #20]
 80052dc:	9107      	str	r1, [sp, #28]
 80052de:	6992      	ldr	r2, [r2, #24]
 80052e0:	9207      	str	r2, [sp, #28]
 80052e2:	9a07      	ldr	r2, [sp, #28]
      if (hi2c->XferSize <= 3U)
 80052e4:	2b03      	cmp	r3, #3
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052e6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80054ac <HAL_I2C_Mem_Read+0x2c0>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80052ea:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80054b0 <HAL_I2C_Mem_Read+0x2c4>
 80052ee:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80054b4 <HAL_I2C_Mem_Read+0x2c8>
      if (hi2c->XferSize <= 3U)
 80052f2:	d835      	bhi.n	8005360 <HAL_I2C_Mem_Read+0x174>
        if (hi2c->XferSize == 1U)
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	f000 80b9 	beq.w	800546c <HAL_I2C_Mem_Read+0x280>
        else if (hi2c->XferSize == 2U)
 80052fa:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	463b      	mov	r3, r7
 8005302:	4641      	mov	r1, r8
 8005304:	4620      	mov	r0, r4
 8005306:	9500      	str	r5, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8005308:	d170      	bne.n	80053ec <HAL_I2C_Mem_Read+0x200>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800530a:	f7ff fca7 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 800530e:	2800      	cmp	r0, #0
 8005310:	d151      	bne.n	80053b6 <HAL_I2C_Mem_Read+0x1ca>
  __ASM volatile ("cpsid i" : : : "memory");
 8005312:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005316:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8005324:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005326:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005328:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800532a:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800532c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800532e:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8005330:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8005332:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005334:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005336:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005338:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800533e:	6912      	ldr	r2, [r2, #16]
 8005340:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8005342:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005344:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005346:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8005348:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 800534a:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800534c:	3101      	adds	r1, #1
          hi2c->XferCount--;
 800534e:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8005350:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8005352:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8005354:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005356:	8523      	strh	r3, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0a5      	beq.n	80052a8 <HAL_I2C_Mem_Read+0xbc>
      if (hi2c->XferSize <= 3U)
 800535c:	2b03      	cmp	r3, #3
 800535e:	d9c9      	bls.n	80052f4 <HAL_I2C_Mem_Read+0x108>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005360:	462a      	mov	r2, r5
 8005362:	4639      	mov	r1, r7
 8005364:	4620      	mov	r0, r4
 8005366:	f7ff fc45 	bl	8004bf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800536a:	bb20      	cbnz	r0, 80053b6 <HAL_I2C_Mem_Read+0x1ca>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005370:	6912      	ldr	r2, [r2, #16]
 8005372:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8005374:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005376:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8005378:	3a01      	subs	r2, #1
 800537a:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800537c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800537e:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005380:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8005382:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005384:	3b01      	subs	r3, #1
 8005386:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8005388:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800538c:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 800538e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005390:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005394:	d5e0      	bpl.n	8005358 <HAL_I2C_Mem_Read+0x16c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005396:	690b      	ldr	r3, [r1, #16]
 8005398:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 800539a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800539c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800539e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80053a0:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 80053a2:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 80053a4:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 80053a6:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 80053a8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80053aa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80053ac:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80053ae:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1d3      	bne.n	800535c <HAL_I2C_Mem_Read+0x170>
 80053b4:	e778      	b.n	80052a8 <HAL_I2C_Mem_Read+0xbc>
      return HAL_ERROR;
 80053b6:	2601      	movs	r6, #1
}
 80053b8:	4630      	mov	r0, r6
 80053ba:	b008      	add	sp, #32
 80053bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053c0:	6813      	ldr	r3, [r2, #0]
 80053c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053c6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053c8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	9006      	str	r0, [sp, #24]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	9206      	str	r2, [sp, #24]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	9206      	str	r2, [sp, #24]
 80053d6:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80053e0:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80053e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f47f af7d 	bne.w	80052e4 <HAL_I2C_Mem_Read+0xf8>
 80053ea:	e75d      	b.n	80052a8 <HAL_I2C_Mem_Read+0xbc>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053ec:	f7ff fc36 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d1e0      	bne.n	80053b6 <HAL_I2C_Mem_Read+0x1ca>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053fe:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	6822      	ldr	r2, [r4, #0]
 8005402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005404:	6912      	ldr	r2, [r2, #16]
 8005406:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005408:	f8da 3000 	ldr.w	r3, [sl]
          hi2c->XferCount--;
 800540c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800540e:	08db      	lsrs	r3, r3, #3
 8005410:	fba9 1303 	umull	r1, r3, r9, r3
          hi2c->XferSize--;
 8005414:	8d20      	ldrh	r0, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005416:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005418:	0a1b      	lsrs	r3, r3, #8
          hi2c->XferCount--;
 800541a:	3a01      	subs	r2, #1
 800541c:	b292      	uxth	r2, r2
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800541e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8005422:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005424:	3801      	subs	r0, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005426:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->pBuffPtr++;
 800542a:	1c4a      	adds	r2, r1, #1
 800542c:	6262      	str	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800542e:	8520      	strh	r0, [r4, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005430:	9303      	str	r3, [sp, #12]
 8005432:	e003      	b.n	800543c <HAL_I2C_Mem_Read+0x250>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	0752      	lsls	r2, r2, #29
 800543a:	d423      	bmi.n	8005484 <HAL_I2C_Mem_Read+0x298>
            count--;
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	3b01      	subs	r3, #1
 8005440:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8005442:	9b03      	ldr	r3, [sp, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f5      	bne.n	8005434 <HAL_I2C_Mem_Read+0x248>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005448:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800544a:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005450:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005454:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005456:	f042 0220 	orr.w	r2, r2, #32
 800545a:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800545c:	b662      	cpsie	i
              return HAL_ERROR;
 800545e:	2601      	movs	r6, #1
}
 8005460:	4630      	mov	r0, r6
              __HAL_UNLOCK(hi2c);
 8005462:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005466:	b008      	add	sp, #32
 8005468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546c:	462a      	mov	r2, r5
 800546e:	4639      	mov	r1, r7
 8005470:	4620      	mov	r0, r4
 8005472:	f7ff fbbf 	bl	8004bf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005476:	2800      	cmp	r0, #0
 8005478:	d19d      	bne.n	80053b6 <HAL_I2C_Mem_Read+0x1ca>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800547e:	6912      	ldr	r2, [r2, #16]
 8005480:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005482:	e78a      	b.n	800539a <HAL_I2C_Mem_Read+0x1ae>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	704b      	strb	r3, [r1, #1]
          hi2c->XferCount--;
 8005490:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005492:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005494:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005496:	3b01      	subs	r3, #1
 8005498:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800549a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800549c:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800549e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80054a0:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80054a2:	8522      	strh	r2, [r4, #40]	; 0x28
 80054a4:	e748      	b.n	8005338 <HAL_I2C_Mem_Read+0x14c>
 80054a6:	bf00      	nop
 80054a8:	00100002 	.word	0x00100002
 80054ac:	00010004 	.word	0x00010004
 80054b0:	200000ac 	.word	0x200000ac
 80054b4:	14f8b589 	.word	0x14f8b589
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b8:	6813      	ldr	r3, [r2, #0]
 80054ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054be:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054c0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	9005      	str	r0, [sp, #20]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	9205      	str	r2, [sp, #20]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	9205      	str	r2, [sp, #20]
 80054ce:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054d8:	b662      	cpsie	i
}
 80054da:	e782      	b.n	80053e2 <HAL_I2C_Mem_Read+0x1f6>

080054dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d072      	beq.n	80055ca <HAL_PCD_Init+0xee>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054e4:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80054e8:	4605      	mov	r5, r0
 80054ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d066      	beq.n	80055c0 <HAL_PCD_Init+0xe4>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054f2:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054f4:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 80054f6:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80054fa:	6828      	ldr	r0, [r5, #0]
 80054fc:	f001 fdc4 	bl	8007088 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005500:	f856 cb10 	ldr.w	ip, [r6], #16
 8005504:	466c      	mov	r4, sp
 8005506:	4637      	mov	r7, r6
 8005508:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800550a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	1d2f      	adds	r7, r5, #4
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	4660      	mov	r0, ip
 8005514:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005518:	f001 fda4 	bl	8007064 <USB_CoreInit>
 800551c:	4604      	mov	r4, r0
 800551e:	b130      	cbz	r0, 800552e <HAL_PCD_Init+0x52>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8005520:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005522:	2302      	movs	r3, #2
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8005524:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005526:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
}
 800552a:	b007      	add	sp, #28
 800552c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800552e:	4601      	mov	r1, r0
 8005530:	6828      	ldr	r0, [r5, #0]
 8005532:	f001 fdb3 	bl	800709c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005536:	6868      	ldr	r0, [r5, #4]
 8005538:	b350      	cbz	r0, 8005590 <HAL_PCD_Init+0xb4>
 800553a:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800553c:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005540:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8005542:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005546:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800554a:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 800554e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005552:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005554:	fa5f f28c 	uxtb.w	r2, ip
 8005558:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 800555a:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800555e:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005562:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8005566:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005568:	d3eb      	bcc.n	8005542 <HAL_PCD_Init+0x66>
    hpcd->OUT_ep[i].is_in = 0U;
 800556a:	2200      	movs	r2, #0
 800556c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005570:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005574:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8005576:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557a:	b2cc      	uxtb	r4, r1
 800557c:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800557e:	e9c3 225e 	strd	r2, r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8005582:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005586:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800558a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800558e:	d3ed      	bcc.n	800556c <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005590:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005592:	466c      	mov	r4, sp
 8005594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005596:	6836      	ldr	r6, [r6, #0]
 8005598:	6828      	ldr	r0, [r5, #0]
 800559a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800559e:	6026      	str	r6, [r4, #0]
 80055a0:	f001 fd7e 	bl	80070a0 <USB_DevInit>
 80055a4:	4604      	mov	r4, r0
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d1ba      	bne.n	8005520 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 80055aa:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80055ac:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 80055b0:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80055b2:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80055b6:	f002 fd8b 	bl	80080d0 <USB_DevDisconnect>
}
 80055ba:	4620      	mov	r0, r4
 80055bc:	b007      	add	sp, #28
 80055be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80055c0:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80055c4:	f003 ff6a 	bl	800949c <HAL_PCD_MspInit>
 80055c8:	e793      	b.n	80054f2 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80055ca:	2401      	movs	r4, #1
}
 80055cc:	4620      	mov	r0, r4
 80055ce:	b007      	add	sp, #28
 80055d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d2:	bf00      	nop

080055d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80055d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80055d6:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d011      	beq.n	8005602 <HAL_PCD_Start+0x2e>
 80055de:	4604      	mov	r4, r0
 80055e0:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 80055e2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80055e4:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80055e8:	f001 fd44 	bl	8007074 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80055ec:	4629      	mov	r1, r5
 80055ee:	4620      	mov	r0, r4
 80055f0:	f004 f880 	bl	80096f4 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	f002 fd69 	bl	80080cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055fa:	2000      	movs	r0, #0
 80055fc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8005600:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005602:	2002      	movs	r0, #2
}
 8005604:	bd38      	pop	{r3, r4, r5, pc}
 8005606:	bf00      	nop

08005608 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	4605      	mov	r5, r0
 800560e:	b085      	sub	sp, #20
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005610:	6800      	ldr	r0, [r0, #0]
 8005612:	f002 fd5f 	bl	80080d4 <USB_ReadInterrupts>
 8005616:	0400      	lsls	r0, r0, #16
 8005618:	f100 80e1 	bmi.w	80057de <HAL_PCD_IRQHandler+0x1d6>
 800561c:	6828      	ldr	r0, [r5, #0]
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800561e:	f002 fd59 	bl	80080d4 <USB_ReadInterrupts>
 8005622:	0542      	lsls	r2, r0, #21
 8005624:	f100 80bd 	bmi.w	80057a2 <HAL_PCD_IRQHandler+0x19a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005628:	6828      	ldr	r0, [r5, #0]
 800562a:	f002 fd53 	bl	80080d4 <USB_ReadInterrupts>
 800562e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005632:	6828      	ldr	r0, [r5, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005634:	d007      	beq.n	8005646 <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005636:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800563a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563e:	041b      	lsls	r3, r3, #16
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005646:	f002 fd45 	bl	80080d4 <USB_ReadInterrupts>
 800564a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800564e:	6828      	ldr	r0, [r5, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005650:	d11f      	bne.n	8005692 <HAL_PCD_IRQHandler+0x8a>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005652:	f002 fd3f 	bl	80080d4 <USB_ReadInterrupts>
 8005656:	04c3      	lsls	r3, r0, #19
 8005658:	d427      	bmi.n	80056aa <HAL_PCD_IRQHandler+0xa2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800565a:	6828      	ldr	r0, [r5, #0]
 800565c:	f002 fd3a 	bl	80080d4 <USB_ReadInterrupts>
 8005660:	0507      	lsls	r7, r0, #20
 8005662:	d443      	bmi.n	80056ec <HAL_PCD_IRQHandler+0xe4>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005664:	6828      	ldr	r0, [r5, #0]
 8005666:	f002 fd35 	bl	80080d4 <USB_ReadInterrupts>
 800566a:	0582      	lsls	r2, r0, #22
 800566c:	f100 808c 	bmi.w	8005788 <HAL_PCD_IRQHandler+0x180>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005670:	6828      	ldr	r0, [r5, #0]
 8005672:	f002 fd2f 	bl	80080d4 <USB_ReadInterrupts>
 8005676:	05c3      	lsls	r3, r0, #23
 8005678:	d508      	bpl.n	800568c <HAL_PCD_IRQHandler+0x84>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800567a:	682a      	ldr	r2, [r5, #0]
 800567c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005684:	041b      	lsls	r3, r3, #16
 8005686:	0c1b      	lsrs	r3, r3, #16
 8005688:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800568c:	b005      	add	sp, #20
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005692:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80056a2:	f002 fd17 	bl	80080d4 <USB_ReadInterrupts>
 80056a6:	04c3      	lsls	r3, r0, #19
 80056a8:	d5d7      	bpl.n	800565a <HAL_PCD_IRQHandler+0x52>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80056aa:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80056ac:	4628      	mov	r0, r5
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80056ae:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80056b2:	f023 0304 	bic.w	r3, r3, #4
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80056be:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80056c2:	f023 0308 	bic.w	r3, r3, #8
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	0c1b      	lsrs	r3, r3, #16
 80056ca:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80056ce:	f003 ff4d 	bl	800956c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80056d2:	6828      	ldr	r0, [r5, #0]
 80056d4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80056d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056dc:	041b      	lsls	r3, r3, #16
 80056de:	0c1b      	lsrs	r3, r3, #16
 80056e0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80056e4:	f002 fcf6 	bl	80080d4 <USB_ReadInterrupts>
 80056e8:	0507      	lsls	r7, r0, #20
 80056ea:	d5bb      	bpl.n	8005664 <HAL_PCD_IRQHandler+0x5c>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80056ec:	6829      	ldr	r1, [r5, #0]
 80056ee:	f1ad 0302 	sub.w	r3, sp, #2
 80056f2:	460c      	mov	r4, r1
 80056f4:	460e      	mov	r6, r1
 80056f6:	461a      	mov	r2, r3
 80056f8:	f10d 000e 	add.w	r0, sp, #14
 80056fc:	f836 7b04 	ldrh.w	r7, [r6], #4
 8005700:	f822 7f02 	strh.w	r7, [r2, #2]!
    for (i = 0U; i < 8U; i++)
 8005704:	4290      	cmp	r0, r2
 8005706:	d1f9      	bne.n	80056fc <HAL_PCD_IRQHandler+0xf4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005708:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 800570c:	b292      	uxth	r2, r2
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005716:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 800571a:	f022 0201 	bic.w	r2, r2, #1
 800571e:	0412      	lsls	r2, r2, #16
 8005720:	0c12      	lsrs	r2, r2, #16
 8005722:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005726:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 800572a:	0556      	lsls	r6, r2, #21
 800572c:	d5fb      	bpl.n	8005726 <HAL_PCD_IRQHandler+0x11e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800572e:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 8005732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005736:	0412      	lsls	r2, r2, #16
 8005738:	0c12      	lsrs	r2, r2, #16
 800573a:	f8a1 2044 	strh.w	r2, [r1, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800573e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 8005742:	4298      	cmp	r0, r3
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005744:	f824 2b04 	strh.w	r2, [r4], #4
    for (i = 0U; i < 8U; i++)
 8005748:	d1f9      	bne.n	800573e <HAL_PCD_IRQHandler+0x136>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800574a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800574e:	4628      	mov	r0, r5
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005750:	b29b      	uxth	r3, r3
 8005752:	f043 0308 	orr.w	r3, r3, #8
 8005756:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800575a:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 800575e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800576a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 800576e:	b29b      	uxth	r3, r3
 8005770:	f043 0304 	orr.w	r3, r3, #4
 8005774:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005778:	f003 fee8 	bl	800954c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800577c:	6828      	ldr	r0, [r5, #0]
 800577e:	f002 fca9 	bl	80080d4 <USB_ReadInterrupts>
 8005782:	0582      	lsls	r2, r0, #22
 8005784:	f57f af74 	bpl.w	8005670 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005788:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_SOFCallback(hpcd);
 800578a:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800578c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	0c1b      	lsrs	r3, r3, #16
 8005798:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800579c:	f003 fec0 	bl	8009520 <HAL_PCD_SOFCallback>
 80057a0:	e766      	b.n	8005670 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80057a2:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResetCallback(hpcd);
 80057a4:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80057a6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80057aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80057b6:	f003 feb7 	bl	8009528 <HAL_PCD_ResetCallback>
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80057ba:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 80057be:	2b01      	cmp	r3, #1
 80057c0:	f43f af32 	beq.w	8005628 <HAL_PCD_IRQHandler+0x20>
  hpcd->USB_Address = address;
 80057c4:	2400      	movs	r4, #0
  __HAL_LOCK(hpcd);
 80057c6:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057c8:	4621      	mov	r1, r4
 80057ca:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80057cc:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80057d0:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057d4:	f002 fc74 	bl	80080c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057d8:	f885 42a8 	strb.w	r4, [r5, #680]	; 0x2a8

  return HAL_OK;
 80057dc:	e724      	b.n	8005628 <HAL_PCD_IRQHandler+0x20>
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80057de:	682c      	ldr	r4, [r5, #0]
 80057e0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80057e4:	4620      	mov	r0, r4
 80057e6:	0419      	lsls	r1, r3, #16
 80057e8:	f57f af19 	bpl.w	800561e <HAL_PCD_IRQHandler+0x16>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80057ec:	f8df a9a8 	ldr.w	sl, [pc, #2472]	; 8006198 <HAL_PCD_IRQHandler+0xb90>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80057f0:	f8df b9a8 	ldr.w	fp, [pc, #2472]	; 800619c <HAL_PCD_IRQHandler+0xb94>
    wIstr = hpcd->Instance->ISTR;
 80057f4:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 80057f8:	b2a1      	uxth	r1, r4
    if (epindex == 0U)
 80057fa:	f014 040f 	ands.w	r4, r4, #15
 80057fe:	d164      	bne.n	80058ca <HAL_PCD_IRQHandler+0x2c2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005800:	f011 0110 	ands.w	r1, r1, #16
 8005804:	f000 8174 	beq.w	8005af0 <HAL_PCD_IRQHandler+0x4e8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005808:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800580a:	f411 6400 	ands.w	r4, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800580e:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005810:	f040 819b 	bne.w	8005b4a <HAL_PCD_IRQHandler+0x542>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005814:	041a      	lsls	r2, r3, #16
 8005816:	d406      	bmi.n	8005826 <HAL_PCD_IRQHandler+0x21e>
 8005818:	4602      	mov	r2, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800581a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800581e:	0419      	lsls	r1, r3, #16
 8005820:	d4e8      	bmi.n	80057f4 <HAL_PCD_IRQHandler+0x1ec>
 8005822:	4610      	mov	r0, r2
 8005824:	e6fb      	b.n	800561e <HAL_PCD_IRQHandler+0x16>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005826:	f640 738f 	movw	r3, #3983	; 0xf8f
 800582a:	8802      	ldrh	r2, [r0, #0]
 800582c:	4013      	ands	r3, r2
 800582e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005832:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005834:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005838:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 800583c:	b29b      	uxth	r3, r3
 800583e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005842:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005846:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800584a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800584e:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005852:	b193      	cbz	r3, 800587a <HAL_PCD_IRQHandler+0x272>
 8005854:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8005858:	b179      	cbz	r1, 800587a <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800585a:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 800585e:	f002 fc4f 	bl	8008100 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8005862:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8005866:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800586a:	4628      	mov	r0, r5
            ep->xfer_buff += ep->xfer_count;
 800586c:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800586e:	4621      	mov	r1, r4
            ep->xfer_buff += ep->xfer_count;
 8005870:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005874:	f003 fe40 	bl	80094f8 <HAL_PCD_DataOutStageCallback>
 8005878:	6828      	ldr	r0, [r5, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800587a:	8803      	ldrh	r3, [r0, #0]
 800587c:	4602      	mov	r2, r0
 800587e:	051b      	lsls	r3, r3, #20
 8005880:	d4cb      	bmi.n	800581a <HAL_PCD_IRQHandler+0x212>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005882:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005886:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 800588a:	b29b      	uxth	r3, r3
 800588c:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8005890:	2900      	cmp	r1, #0
 8005892:	f040 8253 	bne.w	8005d3c <HAL_PCD_IRQHandler+0x734>
 8005896:	5ae1      	ldrh	r1, [r4, r3]
 8005898:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800589c:	0409      	lsls	r1, r1, #16
 800589e:	0c09      	lsrs	r1, r1, #16
 80058a0:	52e1      	strh	r1, [r4, r3]
 80058a2:	5ae1      	ldrh	r1, [r4, r3]
 80058a4:	b289      	uxth	r1, r1
 80058a6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80058aa:	52e1      	strh	r1, [r4, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80058ac:	8803      	ldrh	r3, [r0, #0]
 80058ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	041b      	lsls	r3, r3, #16
 80058b8:	0c1b      	lsrs	r3, r3, #16
 80058ba:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80058be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c6:	8003      	strh	r3, [r0, #0]
 80058c8:	e7a7      	b.n	800581a <HAL_PCD_IRQHandler+0x212>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80058ca:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80058ce:	00a6      	lsls	r6, r4, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058d0:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80058d2:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058d6:	f100 809f 	bmi.w	8005a18 <HAL_PCD_IRQHandler+0x410>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80058da:	f018 0f80 	tst.w	r8, #128	; 0x80
 80058de:	d09b      	beq.n	8005818 <HAL_PCD_IRQHandler+0x210>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80058e0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80058e4:	1937      	adds	r7, r6, r4
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	ea03 030a 	and.w	r3, r3, sl
 80058ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80058f4:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 80058f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80058fc:	4602      	mov	r2, r0
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80058fe:	2b03      	cmp	r3, #3
 8005900:	f000 80cd 	beq.w	8005a9e <HAL_PCD_IRQHandler+0x496>
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80ca 	beq.w	8005a9e <HAL_PCD_IRQHandler+0x496>
 800590a:	2b02      	cmp	r3, #2
 800590c:	d103      	bne.n	8005916 <HAL_PCD_IRQHandler+0x30e>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800590e:	f418 7f80 	tst.w	r8, #256	; 0x100
 8005912:	f000 80c4 	beq.w	8005a9e <HAL_PCD_IRQHandler+0x496>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005916:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800591a:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800591e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005922:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005924:	f000 8193 	beq.w	8005c4e <HAL_PCD_IRQHandler+0x646>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005928:	3302      	adds	r3, #2
 800592a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800592e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (ep->xfer_len > TxByteNbre)
 8005932:	eb06 0c04 	add.w	ip, r6, r4
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005936:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 800593a:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 800593e:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005942:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8005946:	459e      	cmp	lr, r3
 8005948:	f240 82a3 	bls.w	8005e92 <HAL_PCD_IRQHandler+0x88a>
      ep->xfer_len -= TxByteNbre;
 800594c:	ebae 0e03 	sub.w	lr, lr, r3
 8005950:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8005954:	f1be 0f00 	cmp.w	lr, #0
 8005958:	f000 829e 	beq.w	8005e98 <HAL_PCD_IRQHandler+0x890>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800595c:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8005960:	d00f      	beq.n	8005982 <HAL_PCD_IRQHandler+0x37a>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005962:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8005966:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 800596a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800596e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8005972:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005976:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 800597a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800597e:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005982:	eb06 0c04 	add.w	ip, r6, r4
 8005986:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 800598a:	f89c 104c 	ldrb.w	r1, [ip, #76]	; 0x4c
 800598e:	2901      	cmp	r1, #1
 8005990:	f040 826f 	bne.w	8005e72 <HAL_PCD_IRQHandler+0x86a>
        if (ep->xfer_len_db >= ep->maxpacket)
 8005994:	e9dc 2811 	ldrd	r2, r8, [ip, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8005998:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800599c:	f8dc e038 	ldr.w	lr, [ip, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80059a0:	4419      	add	r1, r3
        ep->xfer_count += TxByteNbre;
 80059a2:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 80059a4:	45f0      	cmp	r8, lr
        ep->xfer_buff += TxByteNbre;
 80059a6:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80059aa:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80059ae:	f0c0 8345 	bcc.w	800603c <HAL_PCD_IRQHandler+0xa34>
          ep->xfer_len_db -= len;
 80059b2:	eba8 030e 	sub.w	r3, r8, lr
 80059b6:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80059ba:	fa1f f38e 	uxth.w	r3, lr
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059be:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80059c2:	2a00      	cmp	r2, #0
 80059c4:	f040 8329 	bne.w	800601a <HAL_PCD_IRQHandler+0xa12>
 80059c8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80059cc:	f897 8028 	ldrb.w	r8, [r7, #40]	; 0x28
 80059d0:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 80059d4:	b292      	uxth	r2, r2
 80059d6:	4494      	add	ip, r2
 80059d8:	eb0c 1908 	add.w	r9, ip, r8, lsl #4
 80059dc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80059e0:	f1be 0f00 	cmp.w	lr, #0
 80059e4:	f040 83a7 	bne.w	8006136 <HAL_PCD_IRQHandler+0xb2e>
 80059e8:	f83c 2008 	ldrh.w	r2, [ip, r8]
 80059ec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80059f0:	0412      	lsls	r2, r2, #16
 80059f2:	0c12      	lsrs	r2, r2, #16
 80059f4:	f82c 2008 	strh.w	r2, [ip, r8]
 80059f8:	f83c 2008 	ldrh.w	r2, [ip, r8]
 80059fc:	b292      	uxth	r2, r2
 80059fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a02:	f82c 2008 	strh.w	r2, [ip, r8]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a06:	1932      	adds	r2, r6, r4
 8005a08:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005a0c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8005a0e:	f002 fb67 	bl	80080e0 <USB_WritePMA>
 8005a12:	6828      	ldr	r0, [r5, #0]
 8005a14:	4602      	mov	r2, r0
 8005a16:	e22c      	b.n	8005e72 <HAL_PCD_IRQHandler+0x86a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a18:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a1c:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8005a20:	1931      	adds	r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a22:	4013      	ands	r3, r2
 8005a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a28:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8005a2c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005a30:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f040 80ab 	bne.w	8005b90 <HAL_PCD_IRQHandler+0x588>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a3a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005a3e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3306      	adds	r3, #6
 8005a46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a4a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005a4e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8005a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (count != 0U)
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 80e9 	bne.w	8005c2e <HAL_PCD_IRQHandler+0x626>
 8005a5c:	461f      	mov	r7, r3
        ep->xfer_count += count;
 8005a5e:	1931      	adds	r1, r6, r4
 8005a60:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 8005a64:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8005a68:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
        ep->xfer_count += count;
 8005a6c:	4438      	add	r0, r7
 8005a6e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a72:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
        ep->xfer_buff += count;
 8005a76:	443a      	add	r2, r7
        ep->xfer_count += count;
 8005a78:	00c9      	lsls	r1, r1, #3
        ep->xfer_buff += count;
 8005a7a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a7e:	b120      	cbz	r0, 8005a8a <HAL_PCD_IRQHandler+0x482>
 8005a80:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8005a84:	42bb      	cmp	r3, r7
 8005a86:	f240 80da 	bls.w	8005c3e <HAL_PCD_IRQHandler+0x636>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a8a:	1933      	adds	r3, r6, r4
 8005a8c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005a90:	4628      	mov	r0, r5
 8005a92:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8005a96:	f003 fd2f 	bl	80094f8 <HAL_PCD_DataOutStageCallback>
 8005a9a:	6828      	ldr	r0, [r5, #0]
 8005a9c:	e71d      	b.n	80058da <HAL_PCD_IRQHandler+0x2d2>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a9e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005aa2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8005aae:	4426      	add	r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ab0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005ab4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8005ab8:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8005abc:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	f240 8097 	bls.w	8005bf6 <HAL_PCD_IRQHandler+0x5ee>
            ep->xfer_len -= TxByteNbre;
 8005ac8:	1ad2      	subs	r2, r2, r3
 8005aca:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8005acc:	2a00      	cmp	r2, #0
 8005ace:	f000 8094 	beq.w	8005bfa <HAL_PCD_IRQHandler+0x5f2>
            ep->xfer_buff += TxByteNbre;
 8005ad2:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8005ad4:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8005ad6:	3401      	adds	r4, #1
            ep->xfer_buff += TxByteNbre;
 8005ad8:	441f      	add	r7, r3
        ep = &hpcd->IN_ep[epindex];
 8005ada:	eb04 0484 	add.w	r4, r4, r4, lsl #2
            ep->xfer_count += TxByteNbre;
 8005ade:	4413      	add	r3, r2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ae0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
            ep->xfer_buff += TxByteNbre;
 8005ae4:	63f7      	str	r7, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8005ae6:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ae8:	f001 fd66 	bl	80075b8 <USB_EPStartXfer>
 8005aec:	6828      	ldr	r0, [r5, #0]
 8005aee:	e693      	b.n	8005818 <HAL_PCD_IRQHandler+0x210>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005af0:	8803      	ldrh	r3, [r0, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	ea03 030a 	and.w	r3, r3, sl
 8005af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afc:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005afe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005b02:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b0c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8005b10:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8005b14:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8005b1a:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005b1c:	646b      	str	r3, [r5, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005b1e:	4628      	mov	r0, r5
        ep->xfer_buff += ep->xfer_count;
 8005b20:	63ea      	str	r2, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005b22:	f003 fcf3 	bl	800950c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005b26:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0de      	beq.n	8005aec <HAL_PCD_IRQHandler+0x4e4>
 8005b2e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1db      	bne.n	8005aec <HAL_PCD_IRQHandler+0x4e4>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005b34:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8005b38:	6828      	ldr	r0, [r5, #0]
 8005b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b3e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8005b42:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8005b44:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8005b48:	e667      	b.n	800581a <HAL_PCD_IRQHandler+0x212>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b4a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005b4e:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b58:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005b5c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b60:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8005b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b68:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b6c:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8005b70:	f002 fac6 	bl	8008100 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b78:	682a      	ldr	r2, [r5, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005b7a:	4628      	mov	r0, r5
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b7c:	8811      	ldrh	r1, [r2, #0]
 8005b7e:	400b      	ands	r3, r1
 8005b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b84:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005b86:	f003 fcb1 	bl	80094ec <HAL_PCD_SetupStageCallback>
 8005b8a:	6828      	ldr	r0, [r5, #0]
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	e644      	b.n	800581a <HAL_PCD_IRQHandler+0x212>
          if (ep->type == EP_TYPE_BULK)
 8005b90:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	f000 80dc 	beq.w	8005d52 <HAL_PCD_IRQHandler+0x74a>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b9a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8005b9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	0c1b      	lsrs	r3, r3, #16
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bb6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005bba:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8005bbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bc2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bc6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005bca:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005bcc:	d01b      	beq.n	8005c06 <HAL_PCD_IRQHandler+0x5fe>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bce:	3302      	adds	r3, #2
 8005bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bd4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005bd8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8005bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f43f af3b 	beq.w	8005a5c <HAL_PCD_IRQHandler+0x454>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005be6:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8005bea:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005bee:	461f      	mov	r7, r3
 8005bf0:	f002 fa86 	bl	8008100 <USB_ReadPMA>
 8005bf4:	e733      	b.n	8005a5e <HAL_PCD_IRQHandler+0x456>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005c00:	f003 fc84 	bl	800950c <HAL_PCD_DataInStageCallback>
 8005c04:	e772      	b.n	8005aec <HAL_PCD_IRQHandler+0x4e4>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c06:	3306      	adds	r3, #6
 8005c08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005c10:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8005c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f43f af1f 	beq.w	8005a5c <HAL_PCD_IRQHandler+0x454>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c1e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005c22:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005c26:	461f      	mov	r7, r3
 8005c28:	f002 fa6a 	bl	8008100 <USB_ReadPMA>
 8005c2c:	e717      	b.n	8005a5e <HAL_PCD_IRQHandler+0x456>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005c2e:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8005c32:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005c36:	461f      	mov	r7, r3
 8005c38:	f002 fa62 	bl	8008100 <USB_ReadPMA>
 8005c3c:	e70f      	b.n	8005a5e <HAL_PCD_IRQHandler+0x456>
        ep = &hpcd->OUT_ep[epindex];
 8005c3e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005c42:	6828      	ldr	r0, [r5, #0]
 8005c44:	4429      	add	r1, r5
 8005c46:	f001 fcb7 	bl	80075b8 <USB_EPStartXfer>
 8005c4a:	6828      	ldr	r0, [r5, #0]
 8005c4c:	e645      	b.n	80058da <HAL_PCD_IRQHandler+0x2d2>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005c52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (ep->xfer_len >= TxByteNbre)
 8005c56:	eb06 0e04 	add.w	lr, r6, r4
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c5a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8005c5e:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8005c62:	f8de 9040 	ldr.w	r9, [lr, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8005c6a:	4599      	cmp	r9, r3
 8005c6c:	f0c0 80b4 	bcc.w	8005dd8 <HAL_PCD_IRQHandler+0x7d0>
      ep->xfer_len -= TxByteNbre;
 8005c70:	eba9 0903 	sub.w	r9, r9, r3
 8005c74:	f8ce 9040 	str.w	r9, [lr, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8005c78:	f1b9 0f00 	cmp.w	r9, #0
 8005c7c:	f000 80ae 	beq.w	8005ddc <HAL_PCD_IRQHandler+0x7d4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c80:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8005c84:	d10f      	bne.n	8005ca6 <HAL_PCD_IRQHandler+0x69e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c86:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8005c8a:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8005c8e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8005c92:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8005c96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c9a:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8005c9e:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8005ca2:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005ca6:	eb06 0c04 	add.w	ip, r6, r4
 8005caa:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8005cae:	f89c 104c 	ldrb.w	r1, [ip, #76]	; 0x4c
 8005cb2:	2901      	cmp	r1, #1
 8005cb4:	f040 80dd 	bne.w	8005e72 <HAL_PCD_IRQHandler+0x86a>
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cb8:	e9dc 2811 	ldrd	r2, r8, [ip, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8005cbc:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cc0:	f8dc e038 	ldr.w	lr, [ip, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8005cc4:	4419      	add	r1, r3
        ep->xfer_count += TxByteNbre;
 8005cc6:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cc8:	45f0      	cmp	r8, lr
        ep->xfer_buff += TxByteNbre;
 8005cca:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8005cce:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cd2:	f0c0 81dc 	bcc.w	800608e <HAL_PCD_IRQHandler+0xa86>
          ep->xfer_len_db -= len;
 8005cd6:	eba8 030e 	sub.w	r3, r8, lr
 8005cda:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 8005cde:	fa1f f38e 	uxth.w	r3, lr
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ce2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	f040 81c0 	bne.w	800606c <HAL_PCD_IRQHandler+0xa64>
 8005cec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005cf0:	f897 8028 	ldrb.w	r8, [r7, #40]	; 0x28
 8005cf4:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	4494      	add	ip, r2
 8005cfc:	eb0c 1908 	add.w	r9, ip, r8, lsl #4
 8005d00:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005d04:	f1be 0f00 	cmp.w	lr, #0
 8005d08:	f040 81ed 	bne.w	80060e6 <HAL_PCD_IRQHandler+0xade>
 8005d0c:	f83c 2008 	ldrh.w	r2, [ip, r8]
 8005d10:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005d14:	0412      	lsls	r2, r2, #16
 8005d16:	0c12      	lsrs	r2, r2, #16
 8005d18:	f82c 2008 	strh.w	r2, [ip, r8]
 8005d1c:	f83c 2008 	ldrh.w	r2, [ip, r8]
 8005d20:	b292      	uxth	r2, r2
 8005d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d26:	f82c 2008 	strh.w	r2, [ip, r8]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d2a:	1932      	adds	r2, r6, r4
 8005d2c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d30:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005d32:	f002 f9d5 	bl	80080e0 <USB_WritePMA>
 8005d36:	6828      	ldr	r0, [r5, #0]
 8005d38:	4602      	mov	r2, r0
 8005d3a:	e09a      	b.n	8005e72 <HAL_PCD_IRQHandler+0x86a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005d3c:	293e      	cmp	r1, #62	; 0x3e
 8005d3e:	f200 80e6 	bhi.w	8005f0e <HAL_PCD_IRQHandler+0x906>
 8005d42:	084e      	lsrs	r6, r1, #1
 8005d44:	07cf      	lsls	r7, r1, #31
 8005d46:	bf48      	it	mi
 8005d48:	3601      	addmi	r6, #1
 8005d4a:	02b1      	lsls	r1, r6, #10
 8005d4c:	b289      	uxth	r1, r1
 8005d4e:	52e1      	strh	r1, [r4, r3]
 8005d50:	e5ac      	b.n	80058ac <HAL_PCD_IRQHandler+0x2a4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d52:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d56:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d5a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8005d5e:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d60:	f000 80e0 	beq.w	8005f24 <HAL_PCD_IRQHandler+0x91c>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d64:	3302      	adds	r3, #2
 8005d66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005d6e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8005d72:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8005d7a:	459c      	cmp	ip, r3
 8005d7c:	461f      	mov	r7, r3
 8005d7e:	f0c0 8122 	bcc.w	8005fc6 <HAL_PCD_IRQHandler+0x9be>
      ep->xfer_len -= count;
 8005d82:	ebac 0c03 	sub.w	ip, ip, r3
 8005d86:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8005d8a:	f1bc 0f00 	cmp.w	ip, #0
 8005d8e:	f000 811e 	beq.w	8005fce <HAL_PCD_IRQHandler+0x9c6>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d92:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005d96:	d012      	beq.n	8005dbe <HAL_PCD_IRQHandler+0x7b6>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005d98:	1932      	adds	r2, r6, r4
 8005d9a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d9e:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 8005da2:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8005da6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005daa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005dae:	0412      	lsls	r2, r2, #16
 8005db0:	0c12      	lsrs	r2, r2, #16
 8005db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005db6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005dba:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f43f ae4c 	beq.w	8005a5c <HAL_PCD_IRQHandler+0x454>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005dc4:	1931      	adds	r1, r6, r4
 8005dc6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005dca:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8005dce:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005dd2:	f002 f995 	bl	8008100 <USB_ReadPMA>
 8005dd6:	e642      	b.n	8005a5e <HAL_PCD_IRQHandler+0x456>
 8005dd8:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ddc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f040 80d7 	bne.w	8005f94 <HAL_PCD_IRQHandler+0x98c>
 8005de6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005dea:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005dee:	b292      	uxth	r2, r2
 8005df0:	0109      	lsls	r1, r1, #4
 8005df2:	4413      	add	r3, r2
 8005df4:	5a5a      	ldrh	r2, [r3, r1]
 8005df6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005dfa:	0412      	lsls	r2, r2, #16
 8005dfc:	0c12      	lsrs	r2, r2, #16
 8005dfe:	525a      	strh	r2, [r3, r1]
 8005e00:	5a5a      	ldrh	r2, [r3, r1]
 8005e02:	b292      	uxth	r2, r2
 8005e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e08:	525a      	strh	r2, [r3, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e0a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f040 811b 	bne.w	800604a <HAL_PCD_IRQHandler+0xa42>
 8005e14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005e18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8005e22:	4419      	add	r1, r3
 8005e24:	0112      	lsls	r2, r2, #4
 8005e26:	5a8b      	ldrh	r3, [r1, r2]
 8005e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	0c1b      	lsrs	r3, r3, #16
 8005e30:	528b      	strh	r3, [r1, r2]
 8005e32:	5a8b      	ldrh	r3, [r1, r2]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3a:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005e42:	f003 fb63 	bl	800950c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e46:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e4a:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e4c:	f47f af74 	bne.w	8005d38 <HAL_PCD_IRQHandler+0x730>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e50:	4602      	mov	r2, r0
 8005e52:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005e56:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e72:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005e76:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	ea03 030b 	and.w	r3, r3, fp
 8005e80:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8005e90:	e4c3      	b.n	800581a <HAL_PCD_IRQHandler+0x212>
 8005e92:	2300      	movs	r3, #0
 8005e94:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e98:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 8086 	bne.w	8005fae <HAL_PCD_IRQHandler+0x9a6>
 8005ea2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005ea6:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005eaa:	b292      	uxth	r2, r2
 8005eac:	0109      	lsls	r1, r1, #4
 8005eae:	4413      	add	r3, r2
 8005eb0:	5a5a      	ldrh	r2, [r3, r1]
 8005eb2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005eb6:	0412      	lsls	r2, r2, #16
 8005eb8:	0c12      	lsrs	r2, r2, #16
 8005eba:	525a      	strh	r2, [r3, r1]
 8005ebc:	5a5a      	ldrh	r2, [r3, r1]
 8005ebe:	b292      	uxth	r2, r2
 8005ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec4:	525a      	strh	r2, [r3, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ec6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 80e6 	bne.w	800609c <HAL_PCD_IRQHandler+0xa94>
 8005ed0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005ed4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8005ede:	441a      	add	r2, r3
 8005ee0:	0109      	lsls	r1, r1, #4
 8005ee2:	5a8b      	ldrh	r3, [r1, r2]
 8005ee4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ee8:	041b      	lsls	r3, r3, #16
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	528b      	strh	r3, [r1, r2]
 8005eee:	5a8b      	ldrh	r3, [r1, r2]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef6:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005efe:	f003 fb05 	bl	800950c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f02:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005f06:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f08:	d1a2      	bne.n	8005e50 <HAL_PCD_IRQHandler+0x848>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	e7b1      	b.n	8005e72 <HAL_PCD_IRQHandler+0x86a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005f0e:	094e      	lsrs	r6, r1, #5
 8005f10:	06c9      	lsls	r1, r1, #27
 8005f12:	49a0      	ldr	r1, [pc, #640]	; (8006194 <HAL_PCD_IRQHandler+0xb8c>)
 8005f14:	bf08      	it	eq
 8005f16:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005f1a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005f1e:	b289      	uxth	r1, r1
 8005f20:	52e1      	strh	r1, [r4, r3]
 8005f22:	e4c3      	b.n	80058ac <HAL_PCD_IRQHandler+0x2a4>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f24:	3306      	adds	r3, #6
 8005f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f2a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005f2e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8005f32:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8005f3a:	459e      	cmp	lr, r3
 8005f3c:	461f      	mov	r7, r3
 8005f3e:	d357      	bcc.n	8005ff0 <HAL_PCD_IRQHandler+0x9e8>
      ep->xfer_len -= count;
 8005f40:	ebae 0e03 	sub.w	lr, lr, r3
 8005f44:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8005f48:	f1be 0f00 	cmp.w	lr, #0
 8005f4c:	d052      	beq.n	8005ff4 <HAL_PCD_IRQHandler+0x9ec>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005f4e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005f52:	d112      	bne.n	8005f7a <HAL_PCD_IRQHandler+0x972>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005f54:	1932      	adds	r2, r6, r4
 8005f56:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005f5a:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 8005f5e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8005f62:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005f66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f6a:	0412      	lsls	r2, r2, #16
 8005f6c:	0c12      	lsrs	r2, r2, #16
 8005f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f72:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005f76:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f43f ad6e 	beq.w	8005a5c <HAL_PCD_IRQHandler+0x454>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f80:	1931      	adds	r1, r6, r4
 8005f82:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005f86:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005f8a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005f8e:	f002 f8b7 	bl	8008100 <USB_ReadPMA>
 8005f92:	e564      	b.n	8005a5e <HAL_PCD_IRQHandler+0x456>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	f47f af51 	bne.w	8005e3c <HAL_PCD_IRQHandler+0x834>
 8005f9a:	2400      	movs	r4, #0
 8005f9c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005fa0:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005fa4:	b292      	uxth	r2, r2
 8005fa6:	0109      	lsls	r1, r1, #4
 8005fa8:	4413      	add	r3, r2
 8005faa:	525c      	strh	r4, [r3, r1]
 8005fac:	e72d      	b.n	8005e0a <HAL_PCD_IRQHandler+0x802>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d1a2      	bne.n	8005ef8 <HAL_PCD_IRQHandler+0x8f0>
 8005fb2:	2400      	movs	r4, #0
 8005fb4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005fb8:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005fbc:	b292      	uxth	r2, r2
 8005fbe:	0109      	lsls	r1, r1, #4
 8005fc0:	4413      	add	r3, r2
 8005fc2:	525c      	strh	r4, [r3, r1]
 8005fc4:	e77f      	b.n	8005ec6 <HAL_PCD_IRQHandler+0x8be>
 8005fc6:	f04f 0c00 	mov.w	ip, #0
 8005fca:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005fce:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8005fd2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005fd6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005fda:	0409      	lsls	r1, r1, #16
 8005fdc:	0c09      	lsrs	r1, r1, #16
 8005fde:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8005fe2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005fe6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005fea:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8005fee:	e6d0      	b.n	8005d92 <HAL_PCD_IRQHandler+0x78a>
 8005ff0:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ff4:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8005ff8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005ffc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006000:	0409      	lsls	r1, r1, #16
 8006002:	0c09      	lsrs	r1, r1, #16
 8006004:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8006008:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800600c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006010:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8006014:	e79b      	b.n	8005f4e <HAL_PCD_IRQHandler+0x946>
 8006016:	fa1f f388 	uxth.w	r3, r8
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800601a:	2a01      	cmp	r2, #1
 800601c:	f47f acf3 	bne.w	8005a06 <HAL_PCD_IRQHandler+0x3fe>
 8006020:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006024:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8006028:	fa1f fe82 	uxth.w	lr, r2
 800602c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8006030:	4472      	add	r2, lr
 8006032:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8006036:	f82c 3002 	strh.w	r3, [ip, r2]
 800603a:	e4e4      	b.n	8005a06 <HAL_PCD_IRQHandler+0x3fe>
        else if (ep->xfer_len_db == 0U)
 800603c:	f1b8 0f00 	cmp.w	r8, #0
 8006040:	d162      	bne.n	8006108 <HAL_PCD_IRQHandler+0xb00>
          ep->xfer_fill_db = 0U;
 8006042:	469e      	mov	lr, r3
 8006044:	f88c 804c 	strb.w	r8, [ip, #76]	; 0x4c
 8006048:	e4b9      	b.n	80059be <HAL_PCD_IRQHandler+0x3b6>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800604a:	2b01      	cmp	r3, #1
 800604c:	f47f aef6 	bne.w	8005e3c <HAL_PCD_IRQHandler+0x834>
 8006050:	2400      	movs	r4, #0
 8006052:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006056:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800605a:	b299      	uxth	r1, r3
 800605c:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8006060:	440b      	add	r3, r1
 8006062:	0112      	lsls	r2, r2, #4
 8006064:	52d4      	strh	r4, [r2, r3]
 8006066:	e6e9      	b.n	8005e3c <HAL_PCD_IRQHandler+0x834>
 8006068:	fa1f f388 	uxth.w	r3, r8
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800606c:	2a01      	cmp	r2, #1
 800606e:	f47f ae5c 	bne.w	8005d2a <HAL_PCD_IRQHandler+0x722>
 8006072:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006076:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 800607a:	fa1f fe82 	uxth.w	lr, r2
 800607e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8006082:	4472      	add	r2, lr
 8006084:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8006088:	f82c 3002 	strh.w	r3, [ip, r2]
 800608c:	e64d      	b.n	8005d2a <HAL_PCD_IRQHandler+0x722>
        else if (ep->xfer_len_db == 0U)
 800608e:	f1b8 0f00 	cmp.w	r8, #0
 8006092:	d112      	bne.n	80060ba <HAL_PCD_IRQHandler+0xab2>
          ep->xfer_fill_db = 0U;
 8006094:	469e      	mov	lr, r3
 8006096:	f88c 804c 	strb.w	r8, [ip, #76]	; 0x4c
 800609a:	e622      	b.n	8005ce2 <HAL_PCD_IRQHandler+0x6da>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800609c:	2b01      	cmp	r3, #1
 800609e:	f47f af2b 	bne.w	8005ef8 <HAL_PCD_IRQHandler+0x8f0>
 80060a2:	2400      	movs	r4, #0
 80060a4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80060a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060ac:	b291      	uxth	r1, r2
 80060ae:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80060b2:	440a      	add	r2, r1
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	52d4      	strh	r4, [r2, r3]
 80060b8:	e71e      	b.n	8005ef8 <HAL_PCD_IRQHandler+0x8f0>
          ep->xfer_len_db = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80060c0:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060c4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80060c8:	2a00      	cmp	r2, #0
 80060ca:	d1cd      	bne.n	8006068 <HAL_PCD_IRQHandler+0xa60>
 80060cc:	46c6      	mov	lr, r8
 80060ce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80060d2:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80060dc:	441a      	add	r2, r3
 80060de:	eb02 190c 	add.w	r9, r2, ip, lsl #4
 80060e2:	fa1f f388 	uxth.w	r3, r8
 80060e6:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 80060ea:	d835      	bhi.n	8006158 <HAL_PCD_IRQHandler+0xb50>
 80060ec:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80060f0:	f01e 0f01 	tst.w	lr, #1
 80060f4:	bf18      	it	ne
 80060f6:	f10c 0c01 	addne.w	ip, ip, #1
 80060fa:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80060fe:	fa1f fc8c 	uxth.w	ip, ip
 8006102:	f8a9 c000 	strh.w	ip, [r9]
 8006106:	e610      	b.n	8005d2a <HAL_PCD_IRQHandler+0x722>
          ep->xfer_fill_db = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800610e:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006112:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006116:	2a00      	cmp	r2, #0
 8006118:	f47f af7d 	bne.w	8006016 <HAL_PCD_IRQHandler+0xa0e>
 800611c:	46c6      	mov	lr, r8
 800611e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006122:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8006126:	b29b      	uxth	r3, r3
 8006128:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800612c:	441a      	add	r2, r3
 800612e:	eb02 190c 	add.w	r9, r2, ip, lsl #4
 8006132:	fa1f f388 	uxth.w	r3, r8
 8006136:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 800613a:	d81c      	bhi.n	8006176 <HAL_PCD_IRQHandler+0xb6e>
 800613c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8006140:	f01e 0f01 	tst.w	lr, #1
 8006144:	bf18      	it	ne
 8006146:	f10c 0c01 	addne.w	ip, ip, #1
 800614a:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800614e:	fa1f fc8c 	uxth.w	ip, ip
 8006152:	f8a9 c000 	strh.w	ip, [r9]
 8006156:	e456      	b.n	8005a06 <HAL_PCD_IRQHandler+0x3fe>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006158:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
 800615c:	4a0d      	ldr	r2, [pc, #52]	; (8006194 <HAL_PCD_IRQHandler+0xb8c>)
 800615e:	f01e 0f1f 	tst.w	lr, #31
 8006162:	bf08      	it	eq
 8006164:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006168:	ea42 2c8c 	orr.w	ip, r2, ip, lsl #10
 800616c:	fa1f fc8c 	uxth.w	ip, ip
 8006170:	f8a9 c000 	strh.w	ip, [r9]
 8006174:	e5d9      	b.n	8005d2a <HAL_PCD_IRQHandler+0x722>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006176:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
 800617a:	4a06      	ldr	r2, [pc, #24]	; (8006194 <HAL_PCD_IRQHandler+0xb8c>)
 800617c:	f01e 0f1f 	tst.w	lr, #31
 8006180:	bf08      	it	eq
 8006182:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006186:	ea42 2c8c 	orr.w	ip, r2, ip, lsl #10
 800618a:	fa1f fc8c 	uxth.w	ip, ip
 800618e:	f8a9 c000 	strh.w	ip, [r9]
 8006192:	e438      	b.n	8005a06 <HAL_PCD_IRQHandler+0x3fe>
 8006194:	ffff8000 	.word	0xffff8000
 8006198:	ffff8f0f 	.word	0xffff8f0f
 800619c:	ffff8fbf 	.word	0xffff8fbf

080061a0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80061a0:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 80061a4:	2a01      	cmp	r2, #1
 80061a6:	d00d      	beq.n	80061c4 <HAL_PCD_SetAddress+0x24>
 80061a8:	2201      	movs	r2, #1
{
 80061aa:	b510      	push	{r4, lr}
 80061ac:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 80061ae:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80061b2:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061b6:	6800      	ldr	r0, [r0, #0]
 80061b8:	f001 ff82 	bl	80080c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061bc:	2000      	movs	r0, #0
 80061be:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80061c2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80061c4:	2002      	movs	r0, #2
}
 80061c6:	4770      	bx	lr

080061c8 <HAL_PCD_EP_Open>:
{
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	4606      	mov	r6, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80061cc:	0608      	lsls	r0, r1, #24
 80061ce:	d423      	bmi.n	8006218 <HAL_PCD_EP_Open+0x50>
    ep->is_in = 0U;
 80061d0:	2400      	movs	r4, #0
 80061d2:	f001 0507 	and.w	r5, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061d6:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80061da:	00c0      	lsls	r0, r0, #3
 80061dc:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 80061e0:	4430      	add	r0, r6
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061e2:	4431      	add	r1, r6
    ep->is_in = 0U;
 80061e4:	f880 4169 	strb.w	r4, [r0, #361]	; 0x169
  if (ep->is_in != 0U)
 80061e8:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061ea:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 80061ec:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80061ee:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80061f0:	b100      	cbz	r0, 80061f4 <HAL_PCD_EP_Open+0x2c>
    ep->tx_fifo_num = ep->num;
 80061f2:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80061f4:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80061f6:	bf04      	itt	eq
 80061f8:	2300      	moveq	r3, #0
 80061fa:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80061fc:	f896 32a8 	ldrb.w	r3, [r6, #680]	; 0x2a8
 8006200:	2b01      	cmp	r3, #1
 8006202:	d013      	beq.n	800622c <HAL_PCD_EP_Open+0x64>
 8006204:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006206:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 8006208:	f886 32a8 	strb.w	r3, [r6, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800620c:	f000 ff5c 	bl	80070c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006210:	2000      	movs	r0, #0
 8006212:	f886 02a8 	strb.w	r0, [r6, #680]	; 0x2a8
}
 8006216:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 1U;
 8006218:	2001      	movs	r0, #1
 800621a:	f001 0507 	and.w	r5, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800621e:	182c      	adds	r4, r5, r0
 8006220:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006224:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
    ep->is_in = 1U;
 8006228:	7048      	strb	r0, [r1, #1]
 800622a:	e7dd      	b.n	80061e8 <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 800622c:	2002      	movs	r0, #2
}
 800622e:	bd70      	pop	{r4, r5, r6, pc}

08006230 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8006230:	060b      	lsls	r3, r1, #24
{
 8006232:	b510      	push	{r4, lr}
 8006234:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8006236:	d41a      	bmi.n	800626e <HAL_PCD_EP_Close+0x3e>
    ep->is_in = 0U;
 8006238:	2000      	movs	r0, #0
 800623a:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800623e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006242:	00d2      	lsls	r2, r2, #3
 8006244:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8006248:	4421      	add	r1, r4
    ep->is_in = 0U;
 800624a:	4422      	add	r2, r4
 800624c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006250:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8006252:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006256:	2b01      	cmp	r3, #1
 8006258:	d017      	beq.n	800628a <HAL_PCD_EP_Close+0x5a>
 800625a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800625c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800625e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006262:	f001 f8b3 	bl	80073cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006266:	2000      	movs	r0, #0
 8006268:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800626c:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800626e:	2201      	movs	r2, #1
 8006270:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006274:	1899      	adds	r1, r3, r2
 8006276:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800627a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800627e:	704a      	strb	r2, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006280:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8006282:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006286:	2b01      	cmp	r3, #1
 8006288:	d1e7      	bne.n	800625a <HAL_PCD_EP_Close+0x2a>
 800628a:	2002      	movs	r0, #2
}
 800628c:	bd10      	pop	{r4, pc}
 800628e:	bf00      	nop

08006290 <HAL_PCD_EP_Receive>:
{
 8006290:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 8006292:	2600      	movs	r6, #0
 8006294:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8006298:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800629c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  ep->xfer_len = len;
 80062a0:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062a4:	6800      	ldr	r0, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062a6:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062aa:	f504 71b4 	add.w	r1, r4, #360	; 0x168
  ep->xfer_count = 0U;
 80062ae:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 80062b2:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062b6:	f001 f97f 	bl	80075b8 <USB_EPStartXfer>
}
 80062ba:	4630      	mov	r0, r6
 80062bc:	bd70      	pop	{r4, r5, r6, pc}
 80062be:	bf00      	nop

080062c0 <HAL_PCD_EP_Transmit>:
{
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep->xfer_fill_db = 1U;
 80062c2:	2701      	movs	r7, #1
  ep->xfer_count = 0U;
 80062c4:	2600      	movs	r6, #0
 80062c6:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 80062ca:	eb05 0485 	add.w	r4, r5, r5, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ce:	19e9      	adds	r1, r5, r7
  ep->xfer_buff = pBuf;
 80062d0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80062dc:	63e2      	str	r2, [r4, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062de:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 80062e0:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_len_db = len;
 80062e2:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->num = ep_addr & EP_ADDR_MSK;
 80062e4:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 80062e8:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
  ep->is_in = 1U;
 80062ec:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 80062f0:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062f2:	f001 f961 	bl	80075b8 <USB_EPStartXfer>
}
 80062f6:	4630      	mov	r0, r6
 80062f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062fa:	bf00      	nop

080062fc <HAL_PCD_EP_SetStall>:
{
 80062fc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062fe:	6843      	ldr	r3, [r0, #4]
 8006300:	f001 0507 	and.w	r5, r1, #7
 8006304:	429d      	cmp	r5, r3
 8006306:	d82d      	bhi.n	8006364 <HAL_PCD_EP_SetStall+0x68>
  if ((0x80U & ep_addr) == 0x80U)
 8006308:	060b      	lsls	r3, r1, #24
 800630a:	4604      	mov	r4, r0
 800630c:	d41a      	bmi.n	8006344 <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 0U;
 800630e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8006310:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006314:	00c9      	lsls	r1, r1, #3
    ep->is_in = 0U;
 8006316:	1863      	adds	r3, r4, r1
 8006318:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 800631c:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 800631e:	f501 72b4 	add.w	r2, r1, #360	; 0x168
 8006322:	18a1      	adds	r1, r4, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 8006324:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006326:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006328:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800632c:	429a      	cmp	r2, r3
 800632e:	d017      	beq.n	8006360 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006330:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006332:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006336:	f001 fe43 	bl	8007fc0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800633a:	b1ad      	cbz	r5, 8006368 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 800633c:	2000      	movs	r0, #0
 800633e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8006342:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8006344:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006346:	18e9      	adds	r1, r5, r3
 8006348:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800634c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8006350:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8006352:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006354:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006356:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006358:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800635c:	429a      	cmp	r2, r3
 800635e:	d1e7      	bne.n	8006330 <HAL_PCD_EP_SetStall+0x34>
 8006360:	2002      	movs	r0, #2
}
 8006362:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006364:	2001      	movs	r0, #1
}
 8006366:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800636e:	f001 feb5 	bl	80080dc <USB_EP0_OutStart>
 8006372:	e7e3      	b.n	800633c <HAL_PCD_EP_SetStall+0x40>

08006374 <HAL_PCD_EP_ClrStall>:
{
 8006374:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006376:	6843      	ldr	r3, [r0, #4]
 8006378:	f001 020f 	and.w	r2, r1, #15
 800637c:	429a      	cmp	r2, r3
 800637e:	d831      	bhi.n	80063e4 <HAL_PCD_EP_ClrStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 8006380:	060b      	lsls	r3, r1, #24
 8006382:	4604      	mov	r4, r0
 8006384:	d41c      	bmi.n	80063c0 <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 0U;
 8006386:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8006388:	2500      	movs	r5, #0
 800638a:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800638e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006392:	00d2      	lsls	r2, r2, #3
 8006394:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8006398:	4421      	add	r1, r4
    ep->is_in = 0U;
 800639a:	4422      	add	r2, r4
 800639c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80063a0:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80063a2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80063a4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d019      	beq.n	80063e0 <HAL_PCD_EP_ClrStall+0x6c>
 80063ac:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063ae:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80063b0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063b4:	f001 fe2c 	bl	8008010 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063b8:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 80063bc:	4628      	mov	r0, r5
}
 80063be:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80063c0:	2201      	movs	r2, #1
  ep->is_stall = 0U;
 80063c2:	2500      	movs	r5, #0
 80063c4:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063c8:	1899      	adds	r1, r3, r2
 80063ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80063ce:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80063d2:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063d4:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80063d6:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80063d8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d1e5      	bne.n	80063ac <HAL_PCD_EP_ClrStall+0x38>
 80063e0:	2002      	movs	r0, #2
}
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80063e4:	2001      	movs	r0, #1
}
 80063e6:	bd38      	pop	{r3, r4, r5, pc}

080063e8 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80063e8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80063ec:	d00b      	beq.n	8006406 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063ee:	f001 0107 	and.w	r1, r1, #7
 80063f2:	3101      	adds	r1, #1
 80063f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80063f8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80063fc:	b95a      	cbnz	r2, 8006416 <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80063fe:	2000      	movs	r0, #0
    ep->doublebuffer = 0U;
 8006400:	730a      	strb	r2, [r1, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8006402:	80cb      	strh	r3, [r1, #6]
}
 8006404:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8006406:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800640a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800640e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 8006412:	2a00      	cmp	r2, #0
 8006414:	d0f3      	beq.n	80063fe <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 8006416:	2201      	movs	r2, #1
}
 8006418:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800641a:	608b      	str	r3, [r1, #8]
    ep->doublebuffer = 1U;
 800641c:	730a      	strb	r2, [r1, #12]
}
 800641e:	4770      	bx	lr

08006420 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006420:	2800      	cmp	r0, #0
 8006422:	f000 81c3 	beq.w	80067ac <HAL_RCC_OscConfig+0x38c>
{
 8006426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800642a:	6803      	ldr	r3, [r0, #0]
 800642c:	4604      	mov	r4, r0
 800642e:	07dd      	lsls	r5, r3, #31
{
 8006430:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006432:	d535      	bpl.n	80064a0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006434:	49a6      	ldr	r1, [pc, #664]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 8006436:	684a      	ldr	r2, [r1, #4]
 8006438:	f002 020c 	and.w	r2, r2, #12
 800643c:	2a04      	cmp	r2, #4
 800643e:	f000 80ef 	beq.w	8006620 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006442:	684a      	ldr	r2, [r1, #4]
 8006444:	f002 020c 	and.w	r2, r2, #12
 8006448:	2a08      	cmp	r2, #8
 800644a:	f000 80e5 	beq.w	8006618 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800644e:	6863      	ldr	r3, [r4, #4]
 8006450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006454:	d010      	beq.n	8006478 <HAL_RCC_OscConfig+0x58>
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 810d 	beq.w	8006676 <HAL_RCC_OscConfig+0x256>
 800645c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006460:	f000 818f 	beq.w	8006782 <HAL_RCC_OscConfig+0x362>
 8006464:	4b9a      	ldr	r3, [pc, #616]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	e004      	b.n	8006482 <HAL_RCC_OscConfig+0x62>
 8006478:	4a95      	ldr	r2, [pc, #596]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006480:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006482:	f7fd fed9 	bl	8004238 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006486:	4e92      	ldr	r6, [pc, #584]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8006488:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648a:	e005      	b.n	8006498 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800648c:	f7fd fed4 	bl	8004238 <HAL_GetTick>
 8006490:	1b40      	subs	r0, r0, r5
 8006492:	2864      	cmp	r0, #100	; 0x64
 8006494:	f200 80eb 	bhi.w	800666e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006498:	6833      	ldr	r3, [r6, #0]
 800649a:	039a      	lsls	r2, r3, #14
 800649c:	d5f6      	bpl.n	800648c <HAL_RCC_OscConfig+0x6c>
 800649e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a0:	079f      	lsls	r7, r3, #30
 80064a2:	d528      	bpl.n	80064f6 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064a4:	4a8a      	ldr	r2, [pc, #552]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 80064a6:	6851      	ldr	r1, [r2, #4]
 80064a8:	f011 0f0c 	tst.w	r1, #12
 80064ac:	f000 808e 	beq.w	80065cc <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064b0:	6851      	ldr	r1, [r2, #4]
 80064b2:	f001 010c 	and.w	r1, r1, #12
 80064b6:	2908      	cmp	r1, #8
 80064b8:	f000 8084 	beq.w	80065c4 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 8125 	beq.w	800670e <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c4:	2201      	movs	r2, #1
 80064c6:	4b83      	ldr	r3, [pc, #524]	; (80066d4 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c8:	4e81      	ldr	r6, [pc, #516]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 80064ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80064cc:	f7fd feb4 	bl	8004238 <HAL_GetTick>
 80064d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d2:	e005      	b.n	80064e0 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d4:	f7fd feb0 	bl	8004238 <HAL_GetTick>
 80064d8:	1b40      	subs	r0, r0, r5
 80064da:	2802      	cmp	r0, #2
 80064dc:	f200 80c7 	bhi.w	800666e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e0:	6833      	ldr	r3, [r6, #0]
 80064e2:	0798      	lsls	r0, r3, #30
 80064e4:	d5f6      	bpl.n	80064d4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e6:	6833      	ldr	r3, [r6, #0]
 80064e8:	6962      	ldr	r2, [r4, #20]
 80064ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80064ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80064f2:	6033      	str	r3, [r6, #0]
 80064f4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064f6:	071a      	lsls	r2, r3, #28
 80064f8:	d41f      	bmi.n	800653a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064fa:	075d      	lsls	r5, r3, #29
 80064fc:	d541      	bpl.n	8006582 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064fe:	4b74      	ldr	r3, [pc, #464]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	00d0      	lsls	r0, r2, #3
 8006504:	d57d      	bpl.n	8006602 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8006506:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006508:	4b73      	ldr	r3, [pc, #460]	; (80066d8 <HAL_RCC_OscConfig+0x2b8>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	05d1      	lsls	r1, r2, #23
 800650e:	f140 809d 	bpl.w	800664c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	2b01      	cmp	r3, #1
 8006516:	f000 810b 	beq.w	8006730 <HAL_RCC_OscConfig+0x310>
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80c5 	beq.w	80066aa <HAL_RCC_OscConfig+0x28a>
 8006520:	2b05      	cmp	r3, #5
 8006522:	4b6b      	ldr	r3, [pc, #428]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	f000 8139 	beq.w	800679c <HAL_RCC_OscConfig+0x37c>
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	621a      	str	r2, [r3, #32]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	f022 0204 	bic.w	r2, r2, #4
 8006536:	621a      	str	r2, [r3, #32]
 8006538:	e0ff      	b.n	800673a <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800653a:	69a3      	ldr	r3, [r4, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d050      	beq.n	80065e2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8006540:	2201      	movs	r2, #1
 8006542:	4b66      	ldr	r3, [pc, #408]	; (80066dc <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006544:	4e62      	ldr	r6, [pc, #392]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8006546:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006548:	f7fd fe76 	bl	8004238 <HAL_GetTick>
 800654c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654e:	e005      	b.n	800655c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006550:	f7fd fe72 	bl	8004238 <HAL_GetTick>
 8006554:	1b40      	subs	r0, r0, r5
 8006556:	2802      	cmp	r0, #2
 8006558:	f200 8089 	bhi.w	800666e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800655c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800655e:	079b      	lsls	r3, r3, #30
 8006560:	d5f6      	bpl.n	8006550 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006562:	4b5f      	ldr	r3, [pc, #380]	; (80066e0 <HAL_RCC_OscConfig+0x2c0>)
 8006564:	4a5f      	ldr	r2, [pc, #380]	; (80066e4 <HAL_RCC_OscConfig+0x2c4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	fba2 2303 	umull	r2, r3, r2, r3
 800656c:	0a5b      	lsrs	r3, r3, #9
 800656e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006570:	bf00      	nop
  }
  while (Delay --);
 8006572:	9b01      	ldr	r3, [sp, #4]
 8006574:	1e5a      	subs	r2, r3, #1
 8006576:	9201      	str	r2, [sp, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f9      	bne.n	8006570 <HAL_RCC_OscConfig+0x150>
 800657c:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800657e:	075d      	lsls	r5, r3, #29
 8006580:	d4bd      	bmi.n	80064fe <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006582:	69e0      	ldr	r0, [r4, #28]
 8006584:	b1d0      	cbz	r0, 80065bc <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006586:	4d52      	ldr	r5, [pc, #328]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 8006588:	686a      	ldr	r2, [r5, #4]
 800658a:	f002 020c 	and.w	r2, r2, #12
 800658e:	2a08      	cmp	r2, #8
 8006590:	f000 80e6 	beq.w	8006760 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006594:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006596:	f04f 0100 	mov.w	r1, #0
 800659a:	4a53      	ldr	r2, [pc, #332]	; (80066e8 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800659c:	f000 8108 	beq.w	80067b0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 80065a0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80065a2:	f7fd fe49 	bl	8004238 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80065a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065aa:	e004      	b.n	80065b6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ac:	f7fd fe44 	bl	8004238 <HAL_GetTick>
 80065b0:	1b40      	subs	r0, r0, r5
 80065b2:	2802      	cmp	r0, #2
 80065b4:	d85b      	bhi.n	800666e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	019b      	lsls	r3, r3, #6
 80065ba:	d4f7      	bmi.n	80065ac <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 80065bc:	2000      	movs	r0, #0
}
 80065be:	b002      	add	sp, #8
 80065c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065c4:	6852      	ldr	r2, [r2, #4]
 80065c6:	03d6      	lsls	r6, r2, #15
 80065c8:	f53f af78 	bmi.w	80064bc <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065cc:	4a40      	ldr	r2, [pc, #256]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	0795      	lsls	r5, r2, #30
 80065d2:	d52f      	bpl.n	8006634 <HAL_RCC_OscConfig+0x214>
 80065d4:	6922      	ldr	r2, [r4, #16]
 80065d6:	2a01      	cmp	r2, #1
 80065d8:	d02c      	beq.n	8006634 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80065da:	2001      	movs	r0, #1
}
 80065dc:	b002      	add	sp, #8
 80065de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80065e2:	4a3e      	ldr	r2, [pc, #248]	; (80066dc <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e4:	4e3a      	ldr	r6, [pc, #232]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 80065e6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80065e8:	f7fd fe26 	bl	8004238 <HAL_GetTick>
 80065ec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ee:	e004      	b.n	80065fa <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065f0:	f7fd fe22 	bl	8004238 <HAL_GetTick>
 80065f4:	1b40      	subs	r0, r0, r5
 80065f6:	2802      	cmp	r0, #2
 80065f8:	d839      	bhi.n	800666e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065fc:	079f      	lsls	r7, r3, #30
 80065fe:	d4f7      	bmi.n	80065f0 <HAL_RCC_OscConfig+0x1d0>
 8006600:	e7bc      	b.n	800657c <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006602:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8006604:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006606:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800660a:	61da      	str	r2, [r3, #28]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8006616:	e777      	b.n	8006508 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006618:	684a      	ldr	r2, [r1, #4]
 800661a:	03d0      	lsls	r0, r2, #15
 800661c:	f57f af17 	bpl.w	800644e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006620:	4a2b      	ldr	r2, [pc, #172]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	0391      	lsls	r1, r2, #14
 8006626:	f57f af3b 	bpl.w	80064a0 <HAL_RCC_OscConfig+0x80>
 800662a:	6862      	ldr	r2, [r4, #4]
 800662c:	2a00      	cmp	r2, #0
 800662e:	f47f af37 	bne.w	80064a0 <HAL_RCC_OscConfig+0x80>
 8006632:	e7d2      	b.n	80065da <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006634:	4926      	ldr	r1, [pc, #152]	; (80066d0 <HAL_RCC_OscConfig+0x2b0>)
 8006636:	6960      	ldr	r0, [r4, #20]
 8006638:	680a      	ldr	r2, [r1, #0]
 800663a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800663e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8006642:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006644:	071a      	lsls	r2, r3, #28
 8006646:	f57f af58 	bpl.w	80064fa <HAL_RCC_OscConfig+0xda>
 800664a:	e776      	b.n	800653a <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800664c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664e:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006654:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006656:	f7fd fdef 	bl	8004238 <HAL_GetTick>
 800665a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	05da      	lsls	r2, r3, #23
 8006660:	f53f af57 	bmi.w	8006512 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006664:	f7fd fde8 	bl	8004238 <HAL_GetTick>
 8006668:	1b80      	subs	r0, r0, r6
 800666a:	2864      	cmp	r0, #100	; 0x64
 800666c:	d9f6      	bls.n	800665c <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 800666e:	2003      	movs	r0, #3
}
 8006670:	b002      	add	sp, #8
 8006672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800667a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800667e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006680:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006682:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800668e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006690:	f7fd fdd2 	bl	8004238 <HAL_GetTick>
 8006694:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006696:	e004      	b.n	80066a2 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006698:	f7fd fdce 	bl	8004238 <HAL_GetTick>
 800669c:	1b40      	subs	r0, r0, r5
 800669e:	2864      	cmp	r0, #100	; 0x64
 80066a0:	d8e5      	bhi.n	800666e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a2:	6833      	ldr	r3, [r6, #0]
 80066a4:	039b      	lsls	r3, r3, #14
 80066a6:	d4f7      	bmi.n	8006698 <HAL_RCC_OscConfig+0x278>
 80066a8:	e6f9      	b.n	800649e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80066b2:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b4:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	621a      	str	r2, [r3, #32]
 80066bc:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066be:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066c2:	f022 0204 	bic.w	r2, r2, #4
 80066c6:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80066c8:	f7fd fdb6 	bl	8004238 <HAL_GetTick>
 80066cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ce:	e012      	b.n	80066f6 <HAL_RCC_OscConfig+0x2d6>
 80066d0:	40021000 	.word	0x40021000
 80066d4:	42420000 	.word	0x42420000
 80066d8:	40007000 	.word	0x40007000
 80066dc:	42420480 	.word	0x42420480
 80066e0:	200000ac 	.word	0x200000ac
 80066e4:	10624dd3 	.word	0x10624dd3
 80066e8:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ec:	f7fd fda4 	bl	8004238 <HAL_GetTick>
 80066f0:	1b80      	subs	r0, r0, r6
 80066f2:	4540      	cmp	r0, r8
 80066f4:	d8bb      	bhi.n	800666e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	0798      	lsls	r0, r3, #30
 80066fa:	d4f7      	bmi.n	80066ec <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	f43f af40 	beq.w	8006582 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006702:	4a44      	ldr	r2, [pc, #272]	; (8006814 <HAL_RCC_OscConfig+0x3f4>)
 8006704:	69d3      	ldr	r3, [r2, #28]
 8006706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800670a:	61d3      	str	r3, [r2, #28]
 800670c:	e739      	b.n	8006582 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800670e:	4a42      	ldr	r2, [pc, #264]	; (8006818 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006710:	4e40      	ldr	r6, [pc, #256]	; (8006814 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8006712:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006714:	f7fd fd90 	bl	8004238 <HAL_GetTick>
 8006718:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800671a:	e004      	b.n	8006726 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800671c:	f7fd fd8c 	bl	8004238 <HAL_GetTick>
 8006720:	1b40      	subs	r0, r0, r5
 8006722:	2802      	cmp	r0, #2
 8006724:	d8a3      	bhi.n	800666e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006726:	6833      	ldr	r3, [r6, #0]
 8006728:	0799      	lsls	r1, r3, #30
 800672a:	d4f7      	bmi.n	800671c <HAL_RCC_OscConfig+0x2fc>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	e6e2      	b.n	80064f6 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006730:	4a38      	ldr	r2, [pc, #224]	; (8006814 <HAL_RCC_OscConfig+0x3f4>)
 8006732:	6a13      	ldr	r3, [r2, #32]
 8006734:	f043 0301 	orr.w	r3, r3, #1
 8006738:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800673a:	f7fd fd7d 	bl	8004238 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006742:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006744:	4f33      	ldr	r7, [pc, #204]	; (8006814 <HAL_RCC_OscConfig+0x3f4>)
 8006746:	e004      	b.n	8006752 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006748:	f7fd fd76 	bl	8004238 <HAL_GetTick>
 800674c:	1b80      	subs	r0, r0, r6
 800674e:	4540      	cmp	r0, r8
 8006750:	d88d      	bhi.n	800666e <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	079b      	lsls	r3, r3, #30
 8006756:	d5f7      	bpl.n	8006748 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8006758:	2d00      	cmp	r5, #0
 800675a:	f43f af12 	beq.w	8006582 <HAL_RCC_OscConfig+0x162>
 800675e:	e7d0      	b.n	8006702 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006760:	2801      	cmp	r0, #1
 8006762:	f43f af2c 	beq.w	80065be <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8006766:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006768:	6a22      	ldr	r2, [r4, #32]
 800676a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800676e:	4291      	cmp	r1, r2
 8006770:	f47f af33 	bne.w	80065da <HAL_RCC_OscConfig+0x1ba>
 8006774:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006776:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800677a:	1a18      	subs	r0, r3, r0
 800677c:	bf18      	it	ne
 800677e:	2001      	movne	r0, #1
 8006780:	e71d      	b.n	80065be <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006786:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e672      	b.n	8006482 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800679c:	f042 0204 	orr.w	r2, r2, #4
 80067a0:	621a      	str	r2, [r3, #32]
 80067a2:	6a1a      	ldr	r2, [r3, #32]
 80067a4:	f042 0201 	orr.w	r2, r2, #1
 80067a8:	621a      	str	r2, [r3, #32]
 80067aa:	e7c6      	b.n	800673a <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 80067ac:	2001      	movs	r0, #1
}
 80067ae:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 80067b0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80067b2:	f7fd fd41 	bl	8004238 <HAL_GetTick>
 80067b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b8:	e005      	b.n	80067c6 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ba:	f7fd fd3d 	bl	8004238 <HAL_GetTick>
 80067be:	1b80      	subs	r0, r0, r6
 80067c0:	2802      	cmp	r0, #2
 80067c2:	f63f af54 	bhi.w	800666e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c6:	682b      	ldr	r3, [r5, #0]
 80067c8:	0199      	lsls	r1, r3, #6
 80067ca:	d4f6      	bmi.n	80067ba <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067cc:	6a23      	ldr	r3, [r4, #32]
 80067ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d2:	d105      	bne.n	80067e0 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067d4:	686a      	ldr	r2, [r5, #4]
 80067d6:	68a1      	ldr	r1, [r4, #8]
 80067d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80067dc:	430a      	orrs	r2, r1
 80067de:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80067e0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067e2:	4d0c      	ldr	r5, [pc, #48]	; (8006814 <HAL_RCC_OscConfig+0x3f4>)
 80067e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80067e6:	686a      	ldr	r2, [r5, #4]
 80067e8:	430b      	orrs	r3, r1
 80067ea:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80067ee:	490b      	ldr	r1, [pc, #44]	; (800681c <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067f0:	4313      	orrs	r3, r2
 80067f2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80067f4:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 80067f6:	f7fd fd1f 	bl	8004238 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067fa:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80067fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067fe:	e005      	b.n	800680c <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006800:	f7fd fd1a 	bl	8004238 <HAL_GetTick>
 8006804:	1b40      	subs	r0, r0, r5
 8006806:	2802      	cmp	r0, #2
 8006808:	f63f af31 	bhi.w	800666e <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	019a      	lsls	r2, r3, #6
 8006810:	d5f6      	bpl.n	8006800 <HAL_RCC_OscConfig+0x3e0>
 8006812:	e6d3      	b.n	80065bc <HAL_RCC_OscConfig+0x19c>
 8006814:	40021000 	.word	0x40021000
 8006818:	42420000 	.word	0x42420000
 800681c:	42420060 	.word	0x42420060

08006820 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006820:	f240 2201 	movw	r2, #513	; 0x201
{
 8006824:	b410      	push	{r4}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006826:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <HAL_RCC_GetSysClockFreq+0x70>)
{
 8006828:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800682a:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800682c:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006832:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8006836:	4917      	ldr	r1, [pc, #92]	; (8006894 <HAL_RCC_GetSysClockFreq+0x74>)
 8006838:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800683a:	f002 030c 	and.w	r3, r2, #12
 800683e:	2b04      	cmp	r3, #4
 8006840:	d01b      	beq.n	800687a <HAL_RCC_GetSysClockFreq+0x5a>
 8006842:	2b08      	cmp	r3, #8
 8006844:	d115      	bne.n	8006872 <HAL_RCC_GetSysClockFreq+0x52>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006846:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800684a:	4423      	add	r3, r4
 800684c:	f813 4c10 	ldrb.w	r4, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006850:	03d3      	lsls	r3, r2, #15
 8006852:	d516      	bpl.n	8006882 <HAL_RCC_GetSysClockFreq+0x62>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006854:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006856:	4810      	ldr	r0, [pc, #64]	; (8006898 <HAL_RCC_GetSysClockFreq+0x78>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006858:	aa06      	add	r2, sp, #24
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800685a:	fb00 f004 	mul.w	r0, r0, r4
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800685e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8006862:	4413      	add	r3, r2
 8006864:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006868:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800686c:	b007      	add	sp, #28
 800686e:	bc10      	pop	{r4}
 8006870:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 8006872:	480a      	ldr	r0, [pc, #40]	; (800689c <HAL_RCC_GetSysClockFreq+0x7c>)
}
 8006874:	b007      	add	sp, #28
 8006876:	bc10      	pop	{r4}
 8006878:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800687a:	4807      	ldr	r0, [pc, #28]	; (8006898 <HAL_RCC_GetSysClockFreq+0x78>)
}
 800687c:	b007      	add	sp, #28
 800687e:	bc10      	pop	{r4}
 8006880:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006882:	4807      	ldr	r0, [pc, #28]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x80>)
 8006884:	fb00 f004 	mul.w	r0, r0, r4
}
 8006888:	b007      	add	sp, #28
 800688a:	bc10      	pop	{r4}
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	08009784 	.word	0x08009784
 8006894:	40021000 	.word	0x40021000
 8006898:	00b71b00 	.word	0x00b71b00
 800689c:	007a1200 	.word	0x007a1200
 80068a0:	003d0900 	.word	0x003d0900

080068a4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80068a4:	2800      	cmp	r0, #0
 80068a6:	f000 808c 	beq.w	80069c2 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068aa:	4a49      	ldr	r2, [pc, #292]	; (80069d0 <HAL_RCC_ClockConfig+0x12c>)
{
 80068ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068b0:	6813      	ldr	r3, [r2, #0]
 80068b2:	4604      	mov	r4, r0
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	428b      	cmp	r3, r1
 80068ba:	460d      	mov	r5, r1
 80068bc:	d20c      	bcs.n	80068d8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	f023 0307 	bic.w	r3, r3, #7
 80068c4:	430b      	orrs	r3, r1
 80068c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c8:	6813      	ldr	r3, [r2, #0]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	428b      	cmp	r3, r1
 80068d0:	d002      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80068d2:	2001      	movs	r0, #1
}
 80068d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	0798      	lsls	r0, r3, #30
 80068dc:	d514      	bpl.n	8006908 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068de:	0759      	lsls	r1, r3, #29
 80068e0:	d504      	bpl.n	80068ec <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068e2:	493c      	ldr	r1, [pc, #240]	; (80069d4 <HAL_RCC_ClockConfig+0x130>)
 80068e4:	684a      	ldr	r2, [r1, #4]
 80068e6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80068ea:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ec:	071a      	lsls	r2, r3, #28
 80068ee:	d504      	bpl.n	80068fa <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068f0:	4938      	ldr	r1, [pc, #224]	; (80069d4 <HAL_RCC_ClockConfig+0x130>)
 80068f2:	684a      	ldr	r2, [r1, #4]
 80068f4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80068f8:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068fa:	4936      	ldr	r1, [pc, #216]	; (80069d4 <HAL_RCC_ClockConfig+0x130>)
 80068fc:	68a0      	ldr	r0, [r4, #8]
 80068fe:	684a      	ldr	r2, [r1, #4]
 8006900:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006904:	4302      	orrs	r2, r0
 8006906:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006908:	07df      	lsls	r7, r3, #31
 800690a:	d520      	bpl.n	800694e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800690e:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006910:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006912:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006914:	d057      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006916:	2a02      	cmp	r2, #2
 8006918:	d050      	beq.n	80069bc <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691a:	0799      	lsls	r1, r3, #30
 800691c:	d5d9      	bpl.n	80068d2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800691e:	4e2d      	ldr	r6, [pc, #180]	; (80069d4 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006920:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006924:	6873      	ldr	r3, [r6, #4]
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	4313      	orrs	r3, r2
 800692c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800692e:	f7fd fc83 	bl	8004238 <HAL_GetTick>
 8006932:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006934:	e004      	b.n	8006940 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006936:	f7fd fc7f 	bl	8004238 <HAL_GetTick>
 800693a:	1bc0      	subs	r0, r0, r7
 800693c:	4540      	cmp	r0, r8
 800693e:	d845      	bhi.n	80069cc <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006940:	6873      	ldr	r3, [r6, #4]
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	f003 030c 	and.w	r3, r3, #12
 8006948:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800694c:	d1f3      	bne.n	8006936 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800694e:	4a20      	ldr	r2, [pc, #128]	; (80069d0 <HAL_RCC_ClockConfig+0x12c>)
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	42ab      	cmp	r3, r5
 8006958:	d909      	bls.n	800696e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	f023 0307 	bic.w	r3, r3, #7
 8006960:	432b      	orrs	r3, r5
 8006962:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006964:	6813      	ldr	r3, [r2, #0]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	42ab      	cmp	r3, r5
 800696c:	d1b1      	bne.n	80068d2 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	075a      	lsls	r2, r3, #29
 8006972:	d506      	bpl.n	8006982 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006974:	4917      	ldr	r1, [pc, #92]	; (80069d4 <HAL_RCC_ClockConfig+0x130>)
 8006976:	68e0      	ldr	r0, [r4, #12]
 8006978:	684a      	ldr	r2, [r1, #4]
 800697a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800697e:	4302      	orrs	r2, r0
 8006980:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006982:	071b      	lsls	r3, r3, #28
 8006984:	d507      	bpl.n	8006996 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006986:	4a13      	ldr	r2, [pc, #76]	; (80069d4 <HAL_RCC_ClockConfig+0x130>)
 8006988:	6921      	ldr	r1, [r4, #16]
 800698a:	6853      	ldr	r3, [r2, #4]
 800698c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006990:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006994:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006996:	f7ff ff43 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 800699a:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <HAL_RCC_ClockConfig+0x130>)
 800699c:	4a0e      	ldr	r2, [pc, #56]	; (80069d8 <HAL_RCC_ClockConfig+0x134>)
 800699e:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 80069a0:	490e      	ldr	r1, [pc, #56]	; (80069dc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80069a6:	5cd3      	ldrb	r3, [r2, r3]
 80069a8:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <HAL_RCC_ClockConfig+0x13c>)
 80069aa:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 80069ae:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069b0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80069b2:	f7fd fbff 	bl	80041b4 <HAL_InitTick>
  return HAL_OK;
 80069b6:	2000      	movs	r0, #0
}
 80069b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069bc:	0198      	lsls	r0, r3, #6
 80069be:	d4ae      	bmi.n	800691e <HAL_RCC_ClockConfig+0x7a>
 80069c0:	e787      	b.n	80068d2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80069c2:	2001      	movs	r0, #1
}
 80069c4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c6:	039e      	lsls	r6, r3, #14
 80069c8:	d4a9      	bmi.n	800691e <HAL_RCC_ClockConfig+0x7a>
 80069ca:	e782      	b.n	80068d2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80069cc:	2003      	movs	r0, #3
 80069ce:	e781      	b.n	80068d4 <HAL_RCC_ClockConfig+0x30>
 80069d0:	40022000 	.word	0x40022000
 80069d4:	40021000 	.word	0x40021000
 80069d8:	0800976c 	.word	0x0800976c
 80069dc:	200000b4 	.word	0x200000b4
 80069e0:	200000ac 	.word	0x200000ac

080069e4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069e4:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80069e6:	4905      	ldr	r1, [pc, #20]	; (80069fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80069e8:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80069ea:	4a05      	ldr	r2, [pc, #20]	; (8006a00 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80069f0:	5ccb      	ldrb	r3, [r1, r3]
 80069f2:	6810      	ldr	r0, [r2, #0]
}
 80069f4:	40d8      	lsrs	r0, r3
 80069f6:	4770      	bx	lr
 80069f8:	40021000 	.word	0x40021000
 80069fc:	0800977c 	.word	0x0800977c
 8006a00:	200000ac 	.word	0x200000ac

08006a04 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a04:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006a06:	4905      	ldr	r1, [pc, #20]	; (8006a1c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006a08:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8006a0a:	4a05      	ldr	r2, [pc, #20]	; (8006a20 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a0c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006a10:	5ccb      	ldrb	r3, [r1, r3]
 8006a12:	6810      	ldr	r0, [r2, #0]
}
 8006a14:	40d8      	lsrs	r0, r3
 8006a16:	4770      	bx	lr
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	0800977c 	.word	0x0800977c
 8006a20:	200000ac 	.word	0x200000ac

08006a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a28:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a2a:	6800      	ldr	r0, [r0, #0]
{
 8006a2c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a2e:	07c3      	lsls	r3, r0, #31
 8006a30:	d52a      	bpl.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a32:	4b39      	ldr	r3, [pc, #228]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006a34:	69da      	ldr	r2, [r3, #28]
 8006a36:	00d7      	lsls	r7, r2, #3
 8006a38:	d53d      	bpl.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3a:	4b38      	ldr	r3, [pc, #224]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 8006a3c:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	05d6      	lsls	r6, r2, #23
 8006a42:	d546      	bpl.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a44:	4e34      	ldr	r6, [pc, #208]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006a46:	6a33      	ldr	r3, [r6, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a48:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006a4c:	d00f      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006a4e:	6861      	ldr	r1, [r4, #4]
 8006a50:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d00b      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a58:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a5a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a5c:	6a33      	ldr	r3, [r6, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a5e:	4a30      	ldr	r2, [pc, #192]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a64:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a66:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a68:	6231      	str	r1, [r6, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a6a:	07d9      	lsls	r1, r3, #31
 8006a6c:	d445      	bmi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8006a6e:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a70:	4a29      	ldr	r2, [pc, #164]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006a72:	6a13      	ldr	r3, [r2, #32]
 8006a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a7c:	b11d      	cbz	r5, 8006a86 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a7e:	69d3      	ldr	r3, [r2, #28]
 8006a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a84:	61d3      	str	r3, [r2, #28]
 8006a86:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a88:	0783      	lsls	r3, r0, #30
 8006a8a:	d506      	bpl.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a8c:	4922      	ldr	r1, [pc, #136]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006a8e:	68a3      	ldr	r3, [r4, #8]
 8006a90:	684a      	ldr	r2, [r1, #4]
 8006a92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a96:	431a      	orrs	r2, r3
 8006a98:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a9a:	f010 0010 	ands.w	r0, r0, #16
 8006a9e:	d007      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006aa0:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006aa2:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006aa4:	6961      	ldr	r1, [r4, #20]
 8006aa6:	6853      	ldr	r3, [r2, #4]
 8006aa8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006aac:	430b      	orrs	r3, r1
 8006aae:	6053      	str	r3, [r2, #4]
}
 8006ab0:	b002      	add	sp, #8
 8006ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ab6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8006ab8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006abe:	61da      	str	r2, [r3, #28]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aca:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	05d6      	lsls	r6, r2, #23
 8006ad0:	d4b8      	bmi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ad2:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad4:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ada:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006adc:	f7fd fbac 	bl	8004238 <HAL_GetTick>
 8006ae0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	05d8      	lsls	r0, r3, #23
 8006ae6:	d4ad      	bmi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae8:	f7fd fba6 	bl	8004238 <HAL_GetTick>
 8006aec:	1b83      	subs	r3, r0, r6
 8006aee:	2b64      	cmp	r3, #100	; 0x64
 8006af0:	d9f7      	bls.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8006af2:	2003      	movs	r0, #3
}
 8006af4:	b002      	add	sp, #8
 8006af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8006afa:	f7fd fb9d 	bl	8004238 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afe:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006b02:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b04:	e004      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xec>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b06:	f7fd fb97 	bl	8004238 <HAL_GetTick>
 8006b0a:	1bc0      	subs	r0, r0, r7
 8006b0c:	4540      	cmp	r0, r8
 8006b0e:	d8f0      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b10:	6a33      	ldr	r3, [r6, #32]
 8006b12:	079a      	lsls	r2, r3, #30
 8006b14:	d5f7      	bpl.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006b16:	e7aa      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	40007000 	.word	0x40007000
 8006b20:	42420440 	.word	0x42420440

08006b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b28:	6803      	ldr	r3, [r0, #0]
 8006b2a:	68c0      	ldr	r0, [r0, #12]
 8006b2c:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b2e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b30:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006b34:	4301      	orrs	r1, r0
 8006b36:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006b38:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b3a:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006b3e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b42:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8006b44:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b48:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8006b52:	4913      	ldr	r1, [pc, #76]	; (8006ba0 <UART_SetConfig+0x7c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b58:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8006b5a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b5c:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8006b5e:	d01b      	beq.n	8006b98 <UART_SetConfig+0x74>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b60:	f7ff ff40 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 8006b64:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b66:	6862      	ldr	r2, [r4, #4]
 8006b68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b6c:	0092      	lsls	r2, r2, #2
 8006b6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b76:	2264      	movs	r2, #100	; 0x64
 8006b78:	480a      	ldr	r0, [pc, #40]	; (8006ba4 <UART_SetConfig+0x80>)
 8006b7a:	6824      	ldr	r4, [r4, #0]
 8006b7c:	fba0 5103 	umull	r5, r1, r0, r3
 8006b80:	0949      	lsrs	r1, r1, #5
 8006b82:	fb02 3311 	mls	r3, r2, r1, r3
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	3332      	adds	r3, #50	; 0x32
 8006b8a:	fba0 2303 	umull	r2, r3, r0, r3
 8006b8e:	0109      	lsls	r1, r1, #4
 8006b90:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8006b94:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b98:	f7ff ff34 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	e7e2      	b.n	8006b66 <UART_SetConfig+0x42>
 8006ba0:	40013800 	.word	0x40013800
 8006ba4:	51eb851f 	.word	0x51eb851f

08006ba8 <HAL_UART_Init>:
  if (huart == NULL)
 8006ba8:	b360      	cbz	r0, 8006c04 <HAL_UART_Init+0x5c>
{
 8006baa:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006bac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006bb6:	b303      	cbz	r3, 8006bfa <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8006bb8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006bba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006bbc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006bc0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8006bc2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8006bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bc8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006bca:	f7ff ffab 	bl	8006b24 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bce:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006bd0:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd2:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8006bd4:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bde:	695a      	ldr	r2, [r3, #20]
 8006be0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006be4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bec:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bee:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bf0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8006bf8:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8006bfa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006bfe:	f7fc ff97 	bl	8003b30 <HAL_UART_MspInit>
 8006c02:	e7d9      	b.n	8006bb8 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8006c04:	2001      	movs	r0, #1
}
 8006c06:	4770      	bx	lr

08006c08 <HAL_UART_Transmit_DMA>:
{
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8006c0c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8006c10:	2820      	cmp	r0, #32
 8006c12:	d12b      	bne.n	8006c6c <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8006c14:	b341      	cbz	r1, 8006c68 <HAL_UART_Transmit_DMA+0x60>
 8006c16:	b33a      	cbz	r2, 8006c68 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8006c18:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8006c1c:	2801      	cmp	r0, #1
 8006c1e:	d025      	beq.n	8006c6c <HAL_UART_Transmit_DMA+0x64>
 8006c20:	2601      	movs	r6, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c22:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c24:	2721      	movs	r7, #33	; 0x21
    huart->TxXferCount = Size;
 8006c26:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 8006c28:	84a2      	strh	r2, [r4, #36]	; 0x24
    __HAL_LOCK(huart);
 8006c2a:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c30:	4613      	mov	r3, r2
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c32:	4e0f      	ldr	r6, [pc, #60]	; (8006c70 <HAL_UART_Transmit_DMA+0x68>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c34:	4a0f      	ldr	r2, [pc, #60]	; (8006c74 <HAL_UART_Transmit_DMA+0x6c>)
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c36:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 8006c38:	6221      	str	r1, [r4, #32]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c3e:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c40:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c42:	4e0d      	ldr	r6, [pc, #52]	; (8006c78 <HAL_UART_Transmit_DMA+0x70>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c44:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8006c46:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c48:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c4a:	3204      	adds	r2, #4
 8006c4c:	f7fd fbc4 	bl	80043d8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c54:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8006c56:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c58:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8006c5a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c5e:	695a      	ldr	r2, [r3, #20]
 8006c60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c64:	615a      	str	r2, [r3, #20]
}
 8006c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8006c68:	2001      	movs	r0, #1
}
 8006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006c6c:	2002      	movs	r0, #2
}
 8006c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c70:	08006c7d 	.word	0x08006c7d
 8006c74:	08006cad 	.word	0x08006cad
 8006c78:	08006cc1 	.word	0x08006cc1

08006c7c <UART_DMATransmitCplt>:
{
 8006c7c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c7e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c80:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f013 0320 	ands.w	r3, r3, #32
 8006c88:	d10a      	bne.n	8006ca0 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c8a:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8006c8c:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c8e:	6953      	ldr	r3, [r2, #20]
 8006c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c94:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c96:	68d3      	ldr	r3, [r2, #12]
 8006c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c9c:	60d3      	str	r3, [r2, #12]
}
 8006c9e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006ca0:	f7fc fcbe 	bl	8003620 <HAL_UART_TxCpltCallback>
}
 8006ca4:	bd08      	pop	{r3, pc}
 8006ca6:	bf00      	nop

08006ca8 <HAL_UART_TxHalfCpltCallback>:
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop

08006cac <UART_DMATxHalfCplt>:
{
 8006cac:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006cae:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006cb0:	f7ff fffa 	bl	8006ca8 <HAL_UART_TxHalfCpltCallback>
}
 8006cb4:	bd08      	pop	{r3, pc}
 8006cb6:	bf00      	nop

08006cb8 <HAL_UART_RxCpltCallback>:
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop

08006cbc <HAL_UART_ErrorCallback>:
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop

08006cc0 <UART_DMAError>:
{
 8006cc0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cc2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cc4:	6803      	ldr	r3, [r0, #0]
 8006cc6:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cc8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8006ccc:	2a21      	cmp	r2, #33	; 0x21
 8006cce:	d00b      	beq.n	8006ce8 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd0:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006cd2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8006cd6:	2a22      	cmp	r2, #34	; 0x22
 8006cd8:	d016      	beq.n	8006d08 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cda:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006cdc:	f043 0310 	orr.w	r3, r3, #16
 8006ce0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8006ce2:	f7ff ffeb 	bl	8006cbc <HAL_UART_ErrorCallback>
}
 8006ce6:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ce8:	0609      	lsls	r1, r1, #24
 8006cea:	d5f1      	bpl.n	8006cd0 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8006cec:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8006cee:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8006cf0:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006cf8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006cfa:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfe:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d00:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8006d04:	2a22      	cmp	r2, #34	; 0x22
 8006d06:	d1e8      	bne.n	8006cda <UART_DMAError+0x1a>
 8006d08:	064a      	lsls	r2, r1, #25
 8006d0a:	d5e6      	bpl.n	8006cda <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d16:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d18:	695a      	ldr	r2, [r3, #20]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006d22:	2a01      	cmp	r2, #1
 8006d24:	d103      	bne.n	8006d2e <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	f022 0210 	bic.w	r2, r2, #16
 8006d2c:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d30:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006d32:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d36:	6303      	str	r3, [r0, #48]	; 0x30
}
 8006d38:	e7cf      	b.n	8006cda <UART_DMAError+0x1a>
 8006d3a:	bf00      	nop

08006d3c <UART_DMAAbortOnError>:
{
 8006d3c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8006d3e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d40:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8006d42:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d44:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006d46:	f7ff ffb9 	bl	8006cbc <HAL_UART_ErrorCallback>
}
 8006d4a:	bd08      	pop	{r3, pc}

08006d4c <HAL_UARTEx_RxEventCallback>:
}
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop

08006d50 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d50:	6883      	ldr	r3, [r0, #8]
 8006d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d56:	d03b      	beq.n	8006dd0 <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d58:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d02f      	beq.n	8006dbe <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d5e:	6803      	ldr	r3, [r0, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d66:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8006d68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8006d6e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8006d76:	bb4b      	cbnz	r3, 8006dcc <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006d78:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8006d7a:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d7c:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006d7e:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d80:	68d1      	ldr	r1, [r2, #12]
 8006d82:	f021 0120 	bic.w	r1, r1, #32
 8006d86:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d88:	68d1      	ldr	r1, [r2, #12]
 8006d8a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006d8e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d90:	6951      	ldr	r1, [r2, #20]
 8006d92:	f021 0101 	bic.w	r1, r1, #1
 8006d96:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006d98:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d9c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006d9e:	2901      	cmp	r1, #1
 8006da0:	d121      	bne.n	8006de6 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da2:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da4:	68d1      	ldr	r1, [r2, #12]
 8006da6:	f021 0110 	bic.w	r1, r1, #16
 8006daa:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006dac:	6811      	ldr	r1, [r2, #0]
 8006dae:	06c9      	lsls	r1, r1, #27
 8006db0:	d423      	bmi.n	8006dfa <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006db2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006db4:	f7ff ffca 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
}
 8006db8:	2000      	movs	r0, #0
 8006dba:	b002      	add	sp, #8
 8006dbc:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dbe:	6903      	ldr	r3, [r0, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1cc      	bne.n	8006d5e <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dc4:	6803      	ldr	r3, [r0, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	7013      	strb	r3, [r2, #0]
 8006dca:	e7cd      	b.n	8006d68 <UART_Receive_IT.part.0+0x18>
}
 8006dcc:	2000      	movs	r0, #0
 8006dce:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd0:	6903      	ldr	r3, [r0, #16]
 8006dd2:	b96b      	cbnz	r3, 8006df0 <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dd4:	6802      	ldr	r2, [r0, #0]
 8006dd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006dd8:	6852      	ldr	r2, [r2, #4]
 8006dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dde:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8006de2:	6283      	str	r3, [r0, #40]	; 0x28
 8006de4:	e7c3      	b.n	8006d6e <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8006de6:	f7ff ff67 	bl	8006cb8 <HAL_UART_RxCpltCallback>
}
 8006dea:	2000      	movs	r0, #0
 8006dec:	b002      	add	sp, #8
 8006dee:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006df0:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006df2:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	7013      	strb	r3, [r2, #0]
 8006df8:	e7b6      	b.n	8006d68 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	6813      	ldr	r3, [r2, #0]
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	6853      	ldr	r3, [r2, #4]
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	9b01      	ldr	r3, [sp, #4]
 8006e06:	e7d4      	b.n	8006db2 <UART_Receive_IT.part.0+0x62>

08006e08 <HAL_UART_IRQHandler>:
{
 8006e08:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e0a:	6803      	ldr	r3, [r0, #0]
{
 8006e0c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e0e:	681a      	ldr	r2, [r3, #0]
{
 8006e10:	b082      	sub	sp, #8
  if (errorflags == RESET)
 8006e12:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e14:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e16:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8006e18:	d14e      	bne.n	8006eb8 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e1a:	0696      	lsls	r6, r2, #26
 8006e1c:	d502      	bpl.n	8006e24 <HAL_UART_IRQHandler+0x1c>
 8006e1e:	068d      	lsls	r5, r1, #26
 8006e20:	f100 8090 	bmi.w	8006f44 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e24:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006e26:	2801      	cmp	r0, #1
 8006e28:	d00b      	beq.n	8006e42 <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e2a:	0616      	lsls	r6, r2, #24
 8006e2c:	d502      	bpl.n	8006e34 <HAL_UART_IRQHandler+0x2c>
 8006e2e:	060d      	lsls	r5, r1, #24
 8006e30:	f100 8092 	bmi.w	8006f58 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e34:	0650      	lsls	r0, r2, #25
 8006e36:	d502      	bpl.n	8006e3e <HAL_UART_IRQHandler+0x36>
 8006e38:	064a      	lsls	r2, r1, #25
 8006e3a:	f100 80ab 	bmi.w	8006f94 <HAL_UART_IRQHandler+0x18c>
}
 8006e3e:	b002      	add	sp, #8
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006e42:	06d5      	lsls	r5, r2, #27
 8006e44:	d5f1      	bpl.n	8006e2a <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006e46:	06c8      	lsls	r0, r1, #27
 8006e48:	d5ef      	bpl.n	8006e2a <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	9101      	str	r1, [sp, #4]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	9201      	str	r2, [sp, #4]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	9201      	str	r2, [sp, #4]
 8006e56:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8006e5e:	f000 80d2 	beq.w	8007006 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006e64:	6802      	ldr	r2, [r0, #0]
 8006e66:	6852      	ldr	r2, [r2, #4]
 8006e68:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	d0e7      	beq.n	8006e3e <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006e6e:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8006e70:	4295      	cmp	r5, r2
 8006e72:	d9e4      	bls.n	8006e3e <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e74:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 8006e76:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e78:	2e20      	cmp	r6, #32
 8006e7a:	d016      	beq.n	8006eaa <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e84:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	f022 0201 	bic.w	r2, r2, #1
 8006e8c:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e94:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8006e96:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9a:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	f022 0210 	bic.w	r2, r2, #16
 8006ea2:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ea4:	f7fd fada 	bl	800445c <HAL_DMA_Abort>
 8006ea8:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eaa:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8006eac:	4620      	mov	r0, r4
 8006eae:	1a69      	subs	r1, r5, r1
 8006eb0:	b289      	uxth	r1, r1
 8006eb2:	f7ff ff4b 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
 8006eb6:	e7c2      	b.n	8006e3e <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006eb8:	f005 0501 	and.w	r5, r5, #1
 8006ebc:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8006ec0:	4328      	orrs	r0, r5
 8006ec2:	d0af      	beq.n	8006e24 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ec4:	07d0      	lsls	r0, r2, #31
 8006ec6:	d505      	bpl.n	8006ed4 <HAL_UART_IRQHandler+0xcc>
 8006ec8:	05ce      	lsls	r6, r1, #23
 8006eca:	d503      	bpl.n	8006ed4 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ecc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006ece:	f040 0001 	orr.w	r0, r0, #1
 8006ed2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ed4:	0750      	lsls	r0, r2, #29
 8006ed6:	d52c      	bpl.n	8006f32 <HAL_UART_IRQHandler+0x12a>
 8006ed8:	b12d      	cbz	r5, 8006ee6 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eda:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006edc:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ede:	f040 0002 	orr.w	r0, r0, #2
 8006ee2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ee4:	d429      	bmi.n	8006f3a <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ee6:	0716      	lsls	r6, r2, #28
 8006ee8:	d507      	bpl.n	8006efa <HAL_UART_IRQHandler+0xf2>
 8006eea:	f001 0020 	and.w	r0, r1, #32
 8006eee:	4328      	orrs	r0, r5
 8006ef0:	d003      	beq.n	8006efa <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ef2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006ef4:	f040 0008 	orr.w	r0, r0, #8
 8006ef8:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006efa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d09e      	beq.n	8006e3e <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f00:	0690      	lsls	r0, r2, #26
 8006f02:	d509      	bpl.n	8006f18 <HAL_UART_IRQHandler+0x110>
 8006f04:	068a      	lsls	r2, r1, #26
 8006f06:	d507      	bpl.n	8006f18 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f08:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8006f0c:	2a22      	cmp	r2, #34	; 0x22
 8006f0e:	d103      	bne.n	8006f18 <HAL_UART_IRQHandler+0x110>
 8006f10:	4620      	mov	r0, r4
 8006f12:	f7ff ff1d 	bl	8006d50 <UART_Receive_IT.part.0>
 8006f16:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f18:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f1a:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1c:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f20:	f005 0508 	and.w	r5, r5, #8
 8006f24:	4315      	orrs	r5, r2
 8006f26:	d140      	bne.n	8006faa <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f7ff fec7 	bl	8006cbc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2e:	6425      	str	r5, [r4, #64]	; 0x40
 8006f30:	e785      	b.n	8006e3e <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f32:	0790      	lsls	r0, r2, #30
 8006f34:	d5d7      	bpl.n	8006ee6 <HAL_UART_IRQHandler+0xde>
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	d0d5      	beq.n	8006ee6 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006f3c:	f040 0004 	orr.w	r0, r0, #4
 8006f40:	6420      	str	r0, [r4, #64]	; 0x40
 8006f42:	e7d0      	b.n	8006ee6 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f44:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006f48:	2b22      	cmp	r3, #34	; 0x22
 8006f4a:	f47f af78 	bne.w	8006e3e <HAL_UART_IRQHandler+0x36>
}
 8006f4e:	b002      	add	sp, #8
 8006f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f54:	f7ff befc 	b.w	8006d50 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f58:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8006f5c:	2a21      	cmp	r2, #33	; 0x21
 8006f5e:	f47f af6e 	bne.w	8006e3e <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f62:	68a2      	ldr	r2, [r4, #8]
 8006f64:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006f68:	d06e      	beq.n	8007048 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f6a:	6a22      	ldr	r2, [r4, #32]
 8006f6c:	1c51      	adds	r1, r2, #1
 8006f6e:	6221      	str	r1, [r4, #32]
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8006f74:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8006f76:	3a01      	subs	r2, #1
 8006f78:	b292      	uxth	r2, r2
 8006f7a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	f47f af5e 	bne.w	8006e3e <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f88:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	e754      	b.n	8006e3e <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8006f94:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f96:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8006f98:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006fa0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8006fa4:	f7fc fb3c 	bl	8003620 <HAL_UART_TxCpltCallback>
    return;
 8006fa8:	e749      	b.n	8006e3e <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fb0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb2:	695a      	ldr	r2, [r3, #20]
 8006fb4:	f022 0201 	bic.w	r2, r2, #1
 8006fb8:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006fbc:	2a01      	cmp	r2, #1
 8006fbe:	d103      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	f022 0210 	bic.w	r2, r2, #16
 8006fc6:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006fca:	2120      	movs	r1, #32
 8006fcc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd0:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd2:	695a      	ldr	r2, [r3, #20]
 8006fd4:	0656      	lsls	r6, r2, #25
 8006fd6:	d512      	bpl.n	8006ffe <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006fda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006fe2:	b160      	cbz	r0, 8006ffe <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fe4:	4b1e      	ldr	r3, [pc, #120]	; (8007060 <HAL_UART_IRQHandler+0x258>)
 8006fe6:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fe8:	f7fd fa5a 	bl	80044a0 <HAL_DMA_Abort_IT>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	f43f af26 	beq.w	8006e3e <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ff2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006ff4:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8006ff6:	b002      	add	sp, #8
 8006ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ffc:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8006ffe:	4620      	mov	r0, r4
 8007000:	f7ff fe5c 	bl	8006cbc <HAL_UART_ErrorCallback>
 8007004:	e71b      	b.n	8006e3e <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007006:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8007008:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800700a:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800700c:	b289      	uxth	r1, r1
 800700e:	2900      	cmp	r1, #0
 8007010:	f43f af15 	beq.w	8006e3e <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007014:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007016:	1a08      	subs	r0, r1, r0
 8007018:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800701a:	2900      	cmp	r1, #0
 800701c:	f43f af0f 	beq.w	8006e3e <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 8007020:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007022:	68d8      	ldr	r0, [r3, #12]
 8007024:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8007028:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702a:	6958      	ldr	r0, [r3, #20]
 800702c:	f020 0001 	bic.w	r0, r0, #1
 8007030:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8007032:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007036:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007038:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800703a:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703c:	f022 0210 	bic.w	r2, r2, #16
 8007040:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007042:	f7ff fe83 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
 8007046:	e6fa      	b.n	8006e3e <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007048:	6922      	ldr	r2, [r4, #16]
 800704a:	2a00      	cmp	r2, #0
 800704c:	d18d      	bne.n	8006f6a <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800704e:	6a22      	ldr	r2, [r4, #32]
 8007050:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007054:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007058:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800705a:	6222      	str	r2, [r4, #32]
 800705c:	e78a      	b.n	8006f74 <HAL_UART_IRQHandler+0x16c>
 800705e:	bf00      	nop
 8007060:	08006d3d 	.word	0x08006d3d

08007064 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007064:	b084      	sub	sp, #16
 8007066:	a801      	add	r0, sp, #4
 8007068:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800706c:	b004      	add	sp, #16
 800706e:	2000      	movs	r0, #0
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop

08007074 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007074:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007076:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800707a:	2000      	movs	r0, #0
 800707c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8007080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop

08007088 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007088:	f244 02ff 	movw	r2, #16639	; 0x40ff
{
 800708c:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800708e:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 8007092:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007094:	400a      	ands	r2, r1
 8007096:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800709a:	4770      	bx	lr

0800709c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800709c:	2000      	movs	r0, #0
 800709e:	4770      	bx	lr

080070a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070a0:	b084      	sub	sp, #16
 80070a2:	b430      	push	{r4, r5}
 80070a4:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070a6:	2501      	movs	r5, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80070a8:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070aa:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
{
 80070ae:	ad03      	add	r5, sp, #12
  USBx->CNTR = 0U;
 80070b0:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
{
 80070b4:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070b8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80070bc:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80070c0:	bc30      	pop	{r4, r5}
 80070c2:	b004      	add	sp, #16
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop

080070c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070c8:	4603      	mov	r3, r0
 80070ca:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070cc:	780d      	ldrb	r5, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80070ce:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070d0:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80070d4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80070d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80070dc:	0412      	lsls	r2, r2, #16
 80070de:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80070e0:	2803      	cmp	r0, #3
 80070e2:	f200 816c 	bhi.w	80073be <USB_ActivateEndpoint+0x2f6>
 80070e6:	e8df f000 	tbb	[pc, r0]
 80070ea:	5054      	.short	0x5054
 80070ec:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80070ee:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80070f2:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80070f4:	f248 0480 	movw	r4, #32896	; 0x8080
 80070f8:	4322      	orrs	r2, r4
 80070fa:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80070fe:	780e      	ldrb	r6, [r1, #0]
 8007100:	4db0      	ldr	r5, [pc, #704]	; (80073c4 <USB_ActivateEndpoint+0x2fc>)
 8007102:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8007106:	b292      	uxth	r2, r2
 8007108:	402a      	ands	r2, r5
 800710a:	4332      	orrs	r2, r6
 800710c:	4322      	orrs	r2, r4
 800710e:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8007112:	7b0a      	ldrb	r2, [r1, #12]
 8007114:	2a00      	cmp	r2, #0
 8007116:	f040 8089 	bne.w	800722c <USB_ActivateEndpoint+0x164>
  {
    if (ep->is_in != 0U)
 800711a:	784a      	ldrb	r2, [r1, #1]
 800711c:	2a00      	cmp	r2, #0
 800711e:	d03b      	beq.n	8007198 <USB_ActivateEndpoint+0xd0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007120:	780a      	ldrb	r2, [r1, #0]
 8007122:	88cc      	ldrh	r4, [r1, #6]
 8007124:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8007128:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800712c:	0864      	lsrs	r4, r4, #1
 800712e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007132:	0064      	lsls	r4, r4, #1
 8007134:	b2b6      	uxth	r6, r6
 8007136:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007138:	780c      	ldrb	r4, [r1, #0]
 800713a:	f833 6024 	ldrh.w	r6, [r3, r4, lsl #2]
 800713e:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8007142:	0676      	lsls	r6, r6, #25
 8007144:	d50c      	bpl.n	8007160 <USB_ActivateEndpoint+0x98>
 8007146:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800714a:	b292      	uxth	r2, r2
 800714c:	4015      	ands	r5, r2
 800714e:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8007152:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8007156:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
 800715a:	780a      	ldrb	r2, [r1, #0]
 800715c:	eb03 0282 	add.w	r2, r3, r2, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 8007160:	78cb      	ldrb	r3, [r1, #3]
 8007162:	2b01      	cmp	r3, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007164:	8813      	ldrh	r3, [r2, #0]
 8007166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800716e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8007172:	ea4f 4313 	mov.w	r3, r3, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8007176:	d052      	beq.n	800721e <USB_ActivateEndpoint+0x156>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8007178:	bc70      	pop	{r4, r5, r6}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800717a:	f083 0320 	eor.w	r3, r3, #32
 800717e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007186:	8013      	strh	r3, [r2, #0]
}
 8007188:	4770      	bx	lr
  HAL_StatusTypeDef ret = HAL_OK;
 800718a:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800718c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8007190:	e7b0      	b.n	80070f4 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_CONTROL;
 8007192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8007196:	e7ad      	b.n	80070f4 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007198:	780a      	ldrb	r2, [r1, #0]
 800719a:	88cc      	ldrh	r4, [r1, #6]
 800719c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80071a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80071a4:	0864      	lsrs	r4, r4, #1
 80071a6:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80071aa:	0064      	lsls	r4, r4, #1
 80071ac:	b2ad      	uxth	r5, r5
 80071ae:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80071b0:	780a      	ldrb	r2, [r1, #0]
 80071b2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80071b6:	690d      	ldr	r5, [r1, #16]
 80071b8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80071bc:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80071c0:	b2a4      	uxth	r4, r4
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	f000 80e2 	beq.w	800738c <USB_ActivateEndpoint+0x2c4>
 80071c8:	2d3e      	cmp	r5, #62	; 0x3e
 80071ca:	f200 80ed 	bhi.w	80073a8 <USB_ActivateEndpoint+0x2e0>
 80071ce:	086e      	lsrs	r6, r5, #1
 80071d0:	07ed      	lsls	r5, r5, #31
 80071d2:	bf48      	it	mi
 80071d4:	3601      	addmi	r6, #1
 80071d6:	02b6      	lsls	r6, r6, #10
 80071d8:	b2b6      	uxth	r6, r6
 80071da:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071dc:	780c      	ldrb	r4, [r1, #0]
 80071de:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80071e2:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 80071e6:	046d      	lsls	r5, r5, #17
 80071e8:	d510      	bpl.n	800720c <USB_ActivateEndpoint+0x144>
 80071ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80071ee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80071f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80071f6:	0412      	lsls	r2, r2, #16
 80071f8:	0c12      	lsrs	r2, r2, #16
 80071fa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80071fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007202:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8007206:	780a      	ldrb	r2, [r1, #0]
 8007208:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800720c:	8813      	ldrh	r3, [r2, #0]
 800720e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	041b      	lsls	r3, r3, #16
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800721e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007226:	8013      	strh	r3, [r2, #0]
}
 8007228:	bc70      	pop	{r4, r5, r6}
 800722a:	4770      	bx	lr
    PCD_SET_EP_DBUF(USBx, ep->num);
 800722c:	780c      	ldrb	r4, [r1, #0]
 800722e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007232:	b292      	uxth	r2, r2
 8007234:	402a      	ands	r2, r5
 8007236:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800723a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800723e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007242:	780a      	ldrb	r2, [r1, #0]
 8007244:	890c      	ldrh	r4, [r1, #8]
 8007246:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800724a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800724e:	0864      	lsrs	r4, r4, #1
 8007250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007254:	0064      	lsls	r4, r4, #1
 8007256:	b2b6      	uxth	r6, r6
 8007258:	5394      	strh	r4, [r2, r6]
 800725a:	780a      	ldrb	r2, [r1, #0]
 800725c:	894c      	ldrh	r4, [r1, #10]
 800725e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8007262:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007266:	0864      	lsrs	r4, r4, #1
 8007268:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800726c:	b2b6      	uxth	r6, r6
 800726e:	0064      	lsls	r4, r4, #1
 8007270:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8007272:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007274:	780e      	ldrb	r6, [r1, #0]
    if (ep->is_in == 0U)
 8007276:	2a00      	cmp	r2, #0
 8007278:	d13f      	bne.n	80072fa <USB_ActivateEndpoint+0x232>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800727a:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800727e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8007282:	0452      	lsls	r2, r2, #17
 8007284:	d50c      	bpl.n	80072a0 <USB_ActivateEndpoint+0x1d8>
 8007286:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800728a:	b292      	uxth	r2, r2
 800728c:	4015      	ands	r5, r2
 800728e:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8007292:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8007296:	f823 5026 	strh.w	r5, [r3, r6, lsl #2]
 800729a:	780c      	ldrb	r4, [r1, #0]
 800729c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a0:	8822      	ldrh	r2, [r4, #0]
 80072a2:	0655      	lsls	r5, r2, #25
 80072a4:	d50e      	bpl.n	80072c4 <USB_ActivateEndpoint+0x1fc>
 80072a6:	8822      	ldrh	r2, [r4, #0]
 80072a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80072ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072b0:	0412      	lsls	r2, r2, #16
 80072b2:	0c12      	lsrs	r2, r2, #16
 80072b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072b8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80072bc:	8022      	strh	r2, [r4, #0]
 80072be:	780c      	ldrb	r4, [r1, #0]
 80072c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072c4:	f248 0580 	movw	r5, #32896	; 0x8080
 80072c8:	8822      	ldrh	r2, [r4, #0]
 80072ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072d2:	0412      	lsls	r2, r2, #16
 80072d4:	0c12      	lsrs	r2, r2, #16
 80072d6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80072da:	432a      	orrs	r2, r5
 80072dc:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072de:	7809      	ldrb	r1, [r1, #0]
 80072e0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80072e4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80072e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ec:	0412      	lsls	r2, r2, #16
 80072ee:	0c12      	lsrs	r2, r2, #16
 80072f0:	432a      	orrs	r2, r5
 80072f2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 80072f6:	bc70      	pop	{r4, r5, r6}
 80072f8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072fa:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80072fe:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8007302:	0452      	lsls	r2, r2, #17
 8007304:	d50c      	bpl.n	8007320 <USB_ActivateEndpoint+0x258>
 8007306:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800730a:	b292      	uxth	r2, r2
 800730c:	4015      	ands	r5, r2
 800730e:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8007312:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8007316:	f823 5026 	strh.w	r5, [r3, r6, lsl #2]
 800731a:	780c      	ldrb	r4, [r1, #0]
 800731c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007320:	8822      	ldrh	r2, [r4, #0]
 8007322:	0652      	lsls	r2, r2, #25
 8007324:	d50e      	bpl.n	8007344 <USB_ActivateEndpoint+0x27c>
 8007326:	8822      	ldrh	r2, [r4, #0]
 8007328:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800732c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007330:	0412      	lsls	r2, r2, #16
 8007332:	0c12      	lsrs	r2, r2, #16
 8007334:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007338:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800733c:	8022      	strh	r2, [r4, #0]
 800733e:	780c      	ldrb	r4, [r1, #0]
 8007340:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      if (ep->type != EP_TYPE_ISOC)
 8007344:	78ca      	ldrb	r2, [r1, #3]
 8007346:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007348:	8822      	ldrh	r2, [r4, #0]
 800734a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800734e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007352:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8007356:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800735a:	bf18      	it	ne
 800735c:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007364:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007368:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800736a:	7809      	ldrb	r1, [r1, #0]
}
 800736c:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800736e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007372:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007376:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800737a:	0412      	lsls	r2, r2, #16
 800737c:	0c12      	lsrs	r2, r2, #16
 800737e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007386:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 800738a:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800738c:	5b15      	ldrh	r5, [r2, r4]
 800738e:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8007392:	042d      	lsls	r5, r5, #16
 8007394:	0c2d      	lsrs	r5, r5, #16
 8007396:	5315      	strh	r5, [r2, r4]
 8007398:	5b15      	ldrh	r5, [r2, r4]
 800739a:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800739e:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80073a2:	b2ad      	uxth	r5, r5
 80073a4:	5315      	strh	r5, [r2, r4]
 80073a6:	e719      	b.n	80071dc <USB_ActivateEndpoint+0x114>
 80073a8:	096e      	lsrs	r6, r5, #5
 80073aa:	06ed      	lsls	r5, r5, #27
 80073ac:	4d06      	ldr	r5, [pc, #24]	; (80073c8 <USB_ActivateEndpoint+0x300>)
 80073ae:	bf08      	it	eq
 80073b0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80073b4:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 80073b8:	b2ad      	uxth	r5, r5
 80073ba:	5315      	strh	r5, [r2, r4]
 80073bc:	e70e      	b.n	80071dc <USB_ActivateEndpoint+0x114>
      ret = HAL_ERROR;
 80073be:	2001      	movs	r0, #1
 80073c0:	e698      	b.n	80070f4 <USB_ActivateEndpoint+0x2c>
 80073c2:	bf00      	nop
 80073c4:	ffff8f8f 	.word	0xffff8f8f
 80073c8:	ffff8000 	.word	0xffff8000

080073cc <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80073cc:	7b0b      	ldrb	r3, [r1, #12]
{
 80073ce:	b410      	push	{r4}
  if (ep->doublebuffer == 0U)
 80073d0:	b9d3      	cbnz	r3, 8007408 <USB_DeactivateEndpoint+0x3c>
  {
    if (ep->is_in != 0U)
 80073d2:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073d4:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in != 0U)
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80be 	beq.w	8007558 <USB_DeactivateEndpoint+0x18c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073dc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80073e0:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80073e4:	065b      	lsls	r3, r3, #25
 80073e6:	f100 80d4 	bmi.w	8007592 <USB_DeactivateEndpoint+0x1c6>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ea:	8813      	ldrh	r3, [r2, #0]
 80073ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073f4:	041b      	lsls	r3, r3, #16
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8007400:	2000      	movs	r0, #0
 8007402:	bc10      	pop	{r4}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007404:	8013      	strh	r3, [r2, #0]
}
 8007406:	4770      	bx	lr
    if (ep->is_in == 0U)
 8007408:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800740a:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in == 0U)
 800740c:	2b00      	cmp	r3, #0
 800740e:	d151      	bne.n	80074b4 <USB_DeactivateEndpoint+0xe8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007410:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007414:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8007418:	045b      	lsls	r3, r3, #17
 800741a:	d510      	bpl.n	800743e <USB_DeactivateEndpoint+0x72>
 800741c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007434:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8007438:	780a      	ldrb	r2, [r1, #0]
 800743a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800743e:	8813      	ldrh	r3, [r2, #0]
 8007440:	065c      	lsls	r4, r3, #25
 8007442:	d50e      	bpl.n	8007462 <USB_DeactivateEndpoint+0x96>
 8007444:	8813      	ldrh	r3, [r2, #0]
 8007446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744e:	041b      	lsls	r3, r3, #16
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007456:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800745a:	8013      	strh	r3, [r2, #0]
 800745c:	780a      	ldrb	r2, [r1, #0]
 800745e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007462:	f248 0480 	movw	r4, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8007466:	8813      	ldrh	r3, [r2, #0]
 8007468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	0c1b      	lsrs	r3, r3, #16
 8007474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800747c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800747e:	780a      	ldrb	r2, [r1, #0]
 8007480:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	0c1b      	lsrs	r3, r3, #16
 8007490:	4323      	orrs	r3, r4
 8007492:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007496:	780a      	ldrb	r2, [r1, #0]
 8007498:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800749c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	0c1b      	lsrs	r3, r3, #16
 80074a8:	4323      	orrs	r3, r4
 80074aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80074ae:	bc10      	pop	{r4}
 80074b0:	2000      	movs	r0, #0
 80074b2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074b4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80074b8:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80074bc:	045b      	lsls	r3, r3, #17
 80074be:	d510      	bpl.n	80074e2 <USB_DeactivateEndpoint+0x116>
 80074c0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80074c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	0c1b      	lsrs	r3, r3, #16
 80074d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80074dc:	780a      	ldrb	r2, [r1, #0]
 80074de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074e2:	8813      	ldrh	r3, [r2, #0]
 80074e4:	065b      	lsls	r3, r3, #25
 80074e6:	d50e      	bpl.n	8007506 <USB_DeactivateEndpoint+0x13a>
 80074e8:	8813      	ldrh	r3, [r2, #0]
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	0c1b      	lsrs	r3, r3, #16
 80074f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074fe:	8013      	strh	r3, [r2, #0]
 8007500:	780a      	ldrb	r2, [r1, #0]
 8007502:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007506:	f248 0480 	movw	r4, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800750a:	8813      	ldrh	r3, [r2, #0]
 800750c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	0c1b      	lsrs	r3, r3, #16
 8007518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800751c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007520:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007522:	780a      	ldrb	r2, [r1, #0]
 8007524:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007530:	041b      	lsls	r3, r3, #16
 8007532:	0c1b      	lsrs	r3, r3, #16
 8007534:	4323      	orrs	r3, r4
 8007536:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800753a:	780a      	ldrb	r2, [r1, #0]
 800753c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	0c1b      	lsrs	r3, r3, #16
 800754c:	4323      	orrs	r3, r4
 800754e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8007552:	bc10      	pop	{r4}
 8007554:	2000      	movs	r0, #0
 8007556:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007558:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800755c:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8007560:	045b      	lsls	r3, r3, #17
 8007562:	d510      	bpl.n	8007586 <USB_DeactivateEndpoint+0x1ba>
 8007564:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007570:	041b      	lsls	r3, r3, #16
 8007572:	0c1b      	lsrs	r3, r3, #16
 8007574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8007580:	780a      	ldrb	r2, [r1, #0]
 8007582:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007586:	8813      	ldrh	r3, [r2, #0]
 8007588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800758c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007590:	e730      	b.n	80073f4 <USB_DeactivateEndpoint+0x28>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007592:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	0c1b      	lsrs	r3, r3, #16
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075aa:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80075ae:	780a      	ldrb	r2, [r1, #0]
 80075b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80075b4:	e719      	b.n	80073ea <USB_DeactivateEndpoint+0x1e>
 80075b6:	bf00      	nop

080075b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075ba:	784a      	ldrb	r2, [r1, #1]
{
 80075bc:	4603      	mov	r3, r0
  if (ep->is_in == 1U)
 80075be:	2a01      	cmp	r2, #1
 80075c0:	d06d      	beq.n	800769e <USB_EPStartXfer+0xe6>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075c2:	7b08      	ldrb	r0, [r1, #12]
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d03b      	beq.n	8007640 <USB_EPStartXfer+0x88>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075c8:	78c8      	ldrb	r0, [r1, #3]
 80075ca:	2802      	cmp	r0, #2
 80075cc:	f000 8124 	beq.w	8007818 <USB_EPStartXfer+0x260>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075d0:	2801      	cmp	r0, #1
 80075d2:	f040 811f 	bne.w	8007814 <USB_EPStartXfer+0x25c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075d6:	6988      	ldr	r0, [r1, #24]
 80075d8:	690c      	ldr	r4, [r1, #16]
 80075da:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 80075dc:	bf94      	ite	ls
 80075de:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 80075e0:	1b05      	subhi	r5, r0, r4
 80075e2:	618d      	str	r5, [r1, #24]
 80075e4:	bf88      	it	hi
 80075e6:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075e8:	bb32      	cbnz	r2, 8007638 <USB_EPStartXfer+0x80>
 80075ea:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80075ee:	780c      	ldrb	r4, [r1, #0]
 80075f0:	b292      	uxth	r2, r2
 80075f2:	f203 4504 	addw	r5, r3, #1028	; 0x404
 80075f6:	442a      	add	r2, r5
 80075f8:	0124      	lsls	r4, r4, #4
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f000 829d 	beq.w	8007b3a <USB_EPStartXfer+0x582>
 8007600:	283e      	cmp	r0, #62	; 0x3e
 8007602:	f200 838f 	bhi.w	8007d24 <USB_EPStartXfer+0x76c>
 8007606:	0845      	lsrs	r5, r0, #1
 8007608:	462e      	mov	r6, r5
 800760a:	f010 0701 	ands.w	r7, r0, #1
 800760e:	bf18      	it	ne
 8007610:	1c6e      	addne	r6, r5, #1
 8007612:	02b6      	lsls	r6, r6, #10
 8007614:	b2b6      	uxth	r6, r6
 8007616:	52a6      	strh	r6, [r4, r2]
 8007618:	784c      	ldrb	r4, [r1, #1]
 800761a:	2c00      	cmp	r4, #0
 800761c:	f000 8370 	beq.w	8007d00 <USB_EPStartXfer+0x748>
 8007620:	2c01      	cmp	r4, #1
 8007622:	d109      	bne.n	8007638 <USB_EPStartXfer+0x80>
 8007624:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007628:	780c      	ldrb	r4, [r1, #0]
 800762a:	b292      	uxth	r2, r2
 800762c:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007630:	b280      	uxth	r0, r0
 8007632:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8007636:	5298      	strh	r0, [r3, r2]
 8007638:	780a      	ldrb	r2, [r1, #0]
 800763a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800763e:	e01e      	b.n	800767e <USB_EPStartXfer+0xc6>
      if (ep->xfer_len > ep->maxpacket)
 8007640:	698c      	ldr	r4, [r1, #24]
 8007642:	690a      	ldr	r2, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007644:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 8007646:	4294      	cmp	r4, r2
        ep->xfer_len -= len;
 8007648:	bf84      	itt	hi
 800764a:	1aa0      	subhi	r0, r4, r2
 800764c:	4614      	movhi	r4, r2
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800764e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007652:	6188      	str	r0, [r1, #24]
 8007654:	b292      	uxth	r2, r2
 8007656:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 800765a:	4402      	add	r2, r0
 800765c:	0128      	lsls	r0, r5, #4
 800765e:	2c00      	cmp	r4, #0
 8007660:	f000 80c7 	beq.w	80077f2 <USB_EPStartXfer+0x23a>
 8007664:	2c3e      	cmp	r4, #62	; 0x3e
 8007666:	f200 811f 	bhi.w	80078a8 <USB_EPStartXfer+0x2f0>
 800766a:	0865      	lsrs	r5, r4, #1
 800766c:	07e4      	lsls	r4, r4, #31
 800766e:	bf48      	it	mi
 8007670:	3501      	addmi	r5, #1
 8007672:	02ad      	lsls	r5, r5, #10
 8007674:	b2ad      	uxth	r5, r5
 8007676:	5285      	strh	r5, [r0, r2]
 8007678:	780a      	ldrb	r2, [r1, #0]
 800767a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800767e:	8813      	ldrh	r3, [r2, #0]
  }

  return HAL_OK;
 8007680:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768a:	041b      	lsls	r3, r3, #16
 800768c:	0c1b      	lsrs	r3, r3, #16
 800768e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769a:	8013      	strh	r3, [r2, #0]
}
 800769c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 800769e:	690e      	ldr	r6, [r1, #16]
 80076a0:	698a      	ldr	r2, [r1, #24]
    if (ep->doublebuffer == 0U)
 80076a2:	7b08      	ldrb	r0, [r1, #12]
 80076a4:	42b2      	cmp	r2, r6
 80076a6:	bf28      	it	cs
 80076a8:	4632      	movcs	r2, r6
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d071      	beq.n	8007792 <USB_EPStartXfer+0x1da>
      if (ep->type == EP_TYPE_BULK)
 80076ae:	78c8      	ldrb	r0, [r1, #3]
 80076b0:	2802      	cmp	r0, #2
 80076b2:	f000 8107 	beq.w	80078c4 <USB_EPStartXfer+0x30c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 80076b6:	780d      	ldrb	r5, [r1, #0]
        ep->xfer_len_db -= len;
 80076b8:	6a08      	ldr	r0, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 80076ba:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
        ep->xfer_len_db -= len;
 80076be:	1a80      	subs	r0, r0, r2
        PCD_SET_EP_DBUF(USBx, ep->num);
 80076c0:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80076c4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80076c8:	0424      	lsls	r4, r4, #16
 80076ca:	0c24      	lsrs	r4, r4, #16
 80076cc:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80076d0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80076d4:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076d8:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 80076da:	6208      	str	r0, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076dc:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80076e0:	f015 0f40 	tst.w	r5, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076e4:	784d      	ldrb	r5, [r1, #1]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076e6:	f000 814d 	beq.w	8007984 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	f000 81cc 	beq.w	8007a88 <USB_EPStartXfer+0x4d0>
 80076f0:	2d01      	cmp	r5, #1
 80076f2:	d108      	bne.n	8007706 <USB_EPStartXfer+0x14e>
 80076f4:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 80076f8:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 80076fc:	b2bf      	uxth	r7, r7
 80076fe:	443d      	add	r5, r7
 8007700:	0124      	lsls	r4, r4, #4
 8007702:	b297      	uxth	r7, r2
 8007704:	532f      	strh	r7, [r5, r4]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007706:	b297      	uxth	r7, r2
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007708:	894d      	ldrh	r5, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800770a:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800770c:	f503 6480 	add.w	r4, r3, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8007710:	087f      	lsrs	r7, r7, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007712:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007716:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  for (i = n; i != 0U; i--)
 800771a:	d008      	beq.n	800772e <USB_EPStartXfer+0x176>
              ep->xfer_len_db = 0U;
 800771c:	4675      	mov	r5, lr
 800771e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  {
    temp1 = *pBuf;
 8007722:	f835 cb02 	ldrh.w	ip, [r5], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8007726:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 800772a:	42bc      	cmp	r4, r7
 800772c:	d1f9      	bne.n	8007722 <USB_EPStartXfer+0x16a>
          if (ep->xfer_len_db > ep->maxpacket)
 800772e:	4286      	cmp	r6, r0
            ep->xfer_len_db -= len;
 8007730:	bf36      	itet	cc
 8007732:	1a85      	subcc	r5, r0, r2
            ep->xfer_len_db = 0U;
 8007734:	2500      	movcs	r5, #0
 8007736:	4610      	movcc	r0, r2
          ep->xfer_buff += len;
 8007738:	eb0e 0402 	add.w	r4, lr, r2
 800773c:	614c      	str	r4, [r1, #20]
            ep->xfer_len_db -= len;
 800773e:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 8007740:	2800      	cmp	r0, #0
 8007742:	d043      	beq.n	80077cc <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007744:	784a      	ldrb	r2, [r1, #1]
 8007746:	2a00      	cmp	r2, #0
 8007748:	f040 8297 	bne.w	8007c7a <USB_EPStartXfer+0x6c2>
 800774c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007750:	780e      	ldrb	r6, [r1, #0]
 8007752:	b292      	uxth	r2, r2
 8007754:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007758:	283e      	cmp	r0, #62	; 0x3e
 800775a:	442a      	add	r2, r5
 800775c:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8007760:	f200 8392 	bhi.w	8007e88 <USB_EPStartXfer+0x8d0>
 8007764:	0845      	lsrs	r5, r0, #1
 8007766:	07c7      	lsls	r7, r0, #31
 8007768:	bf48      	it	mi
 800776a:	3501      	addmi	r5, #1
 800776c:	02ad      	lsls	r5, r5, #10
 800776e:	b2ad      	uxth	r5, r5
 8007770:	52b5      	strh	r5, [r6, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007772:	890e      	ldrh	r6, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007774:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007776:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800777a:	0845      	lsrs	r5, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800777c:	eb02 0246 	add.w	r2, r2, r6, lsl #1
  for (i = n; i != 0U; i--)
 8007780:	eb04 0545 	add.w	r5, r4, r5, lsl #1
    temp1 = *pBuf;
 8007784:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 8007788:	42a5      	cmp	r5, r4
    *pdwVal = (uint16_t)temp2;
 800778a:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 800778e:	d1f9      	bne.n	8007784 <USB_EPStartXfer+0x1cc>
 8007790:	e01c      	b.n	80077cc <USB_EPStartXfer+0x214>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007792:	b295      	uxth	r5, r2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007794:	88cc      	ldrh	r4, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007796:	3501      	adds	r5, #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007798:	b296      	uxth	r6, r2
 800779a:	694a      	ldr	r2, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800779c:	f503 6080 	add.w	r0, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80077a0:	086d      	lsrs	r5, r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077a2:	eb00 0044 	add.w	r0, r0, r4, lsl #1
  for (i = n; i != 0U; i--)
 80077a6:	bf18      	it	ne
 80077a8:	eb02 0545 	addne.w	r5, r2, r5, lsl #1
 80077ac:	d005      	beq.n	80077ba <USB_EPStartXfer+0x202>
    temp1 = *pBuf;
 80077ae:	f832 4b02 	ldrh.w	r4, [r2], #2
  for (i = n; i != 0U; i--)
 80077b2:	42aa      	cmp	r2, r5
    *pdwVal = (uint16_t)temp2;
 80077b4:	f820 4b04 	strh.w	r4, [r0], #4
  for (i = n; i != 0U; i--)
 80077b8:	d1f9      	bne.n	80077ae <USB_EPStartXfer+0x1f6>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077ba:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 80077be:	780c      	ldrb	r4, [r1, #0]
 80077c0:	b282      	uxth	r2, r0
 80077c2:	f203 4004 	addw	r0, r3, #1028	; 0x404
 80077c6:	4410      	add	r0, r2
 80077c8:	0124      	lsls	r4, r4, #4
 80077ca:	5226      	strh	r6, [r4, r0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077cc:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 80077ce:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077d0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80077d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80077d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077dc:	0412      	lsls	r2, r2, #16
 80077de:	0c12      	lsrs	r2, r2, #16
 80077e0:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 80077e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077ec:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 80077f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80077f2:	5a84      	ldrh	r4, [r0, r2]
 80077f4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80077f8:	0424      	lsls	r4, r4, #16
 80077fa:	0c24      	lsrs	r4, r4, #16
 80077fc:	5284      	strh	r4, [r0, r2]
 80077fe:	5a84      	ldrh	r4, [r0, r2]
 8007800:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007804:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007808:	b2a4      	uxth	r4, r4
 800780a:	5284      	strh	r4, [r0, r2]
 800780c:	780a      	ldrb	r2, [r1, #0]
 800780e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007812:	e734      	b.n	800767e <USB_EPStartXfer+0xc6>
        return HAL_ERROR;
 8007814:	2001      	movs	r0, #1
}
 8007816:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007818:	bb12      	cbnz	r2, 8007860 <USB_EPStartXfer+0x2a8>
 800781a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800781e:	7808      	ldrb	r0, [r1, #0]
 8007820:	690c      	ldr	r4, [r1, #16]
 8007822:	b292      	uxth	r2, r2
 8007824:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007828:	442a      	add	r2, r5
 800782a:	0100      	lsls	r0, r0, #4
 800782c:	2c00      	cmp	r4, #0
 800782e:	f000 8146 	beq.w	8007abe <USB_EPStartXfer+0x506>
 8007832:	2c3e      	cmp	r4, #62	; 0x3e
 8007834:	f200 81ac 	bhi.w	8007b90 <USB_EPStartXfer+0x5d8>
 8007838:	0865      	lsrs	r5, r4, #1
 800783a:	07e6      	lsls	r6, r4, #31
 800783c:	bf48      	it	mi
 800783e:	3501      	addmi	r5, #1
 8007840:	02ad      	lsls	r5, r5, #10
 8007842:	b2ad      	uxth	r5, r5
 8007844:	5285      	strh	r5, [r0, r2]
 8007846:	784a      	ldrb	r2, [r1, #1]
 8007848:	2a00      	cmp	r2, #0
 800784a:	f040 81af 	bne.w	8007bac <USB_EPStartXfer+0x5f4>
 800784e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007852:	7808      	ldrb	r0, [r1, #0]
 8007854:	b294      	uxth	r4, r2
 8007856:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800785a:	4422      	add	r2, r4
 800785c:	0100      	lsls	r0, r0, #4
 800785e:	5285      	strh	r5, [r0, r2]
        if (ep->xfer_count != 0U)
 8007860:	69ca      	ldr	r2, [r1, #28]
 8007862:	2a00      	cmp	r2, #0
 8007864:	f43f aee8 	beq.w	8007638 <USB_EPStartXfer+0x80>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007868:	f244 0440 	movw	r4, #16448	; 0x4040
 800786c:	7808      	ldrb	r0, [r1, #0]
 800786e:	f833 5020 	ldrh.w	r5, [r3, r0, lsl #2]
 8007872:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007876:	ea04 0605 	and.w	r6, r4, r5
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800787a:	43ac      	bics	r4, r5
 800787c:	d002      	beq.n	8007884 <USB_EPStartXfer+0x2cc>
 800787e:	2e00      	cmp	r6, #0
 8007880:	f47f aefd 	bne.w	800767e <USB_EPStartXfer+0xc6>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007884:	f833 2020 	ldrh.w	r2, [r3, r0, lsl #2]
 8007888:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800788c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007890:	0412      	lsls	r2, r2, #16
 8007892:	0c12      	lsrs	r2, r2, #16
 8007894:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007898:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800789c:	f823 2020 	strh.w	r2, [r3, r0, lsl #2]
 80078a0:	780a      	ldrb	r2, [r1, #0]
 80078a2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80078a6:	e6ea      	b.n	800767e <USB_EPStartXfer+0xc6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80078a8:	0965      	lsrs	r5, r4, #5
 80078aa:	06e7      	lsls	r7, r4, #27
 80078ac:	4cb7      	ldr	r4, [pc, #732]	; (8007b8c <USB_EPStartXfer+0x5d4>)
 80078ae:	bf08      	it	eq
 80078b0:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80078b4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 80078b8:	b2a4      	uxth	r4, r4
 80078ba:	5284      	strh	r4, [r0, r2]
 80078bc:	780a      	ldrb	r2, [r1, #0]
 80078be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80078c2:	e6dc      	b.n	800767e <USB_EPStartXfer+0xc6>
        if (ep->xfer_len_db > ep->maxpacket)
 80078c4:	6a08      	ldr	r0, [r1, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 80078c6:	780d      	ldrb	r5, [r1, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 80078c8:	4286      	cmp	r6, r0
 80078ca:	f080 80b0 	bcs.w	8007a2e <USB_EPStartXfer+0x476>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80078ce:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
          ep->xfer_len_db -= len;
 80078d2:	1a80      	subs	r0, r0, r2
          PCD_SET_EP_DBUF(USBx, ep->num);
 80078d4:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80078d8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80078dc:	0424      	lsls	r4, r4, #16
 80078de:	0c24      	lsrs	r4, r4, #16
 80078e0:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80078e4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80078e8:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078ec:	780c      	ldrb	r4, [r1, #0]
          ep->xfer_len_db -= len;
 80078ee:	6208      	str	r0, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078f0:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80078f4:	f015 0f40 	tst.w	r5, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078f8:	784d      	ldrb	r5, [r1, #1]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078fa:	f000 8165 	beq.w	8007bc8 <USB_EPStartXfer+0x610>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078fe:	2d00      	cmp	r5, #0
 8007900:	f040 8253 	bne.w	8007daa <USB_EPStartXfer+0x7f2>
 8007904:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8007908:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 800790c:	b2bf      	uxth	r7, r7
 800790e:	0124      	lsls	r4, r4, #4
 8007910:	443d      	add	r5, r7
 8007912:	2a00      	cmp	r2, #0
 8007914:	f040 82ff 	bne.w	8007f16 <USB_EPStartXfer+0x95e>
 8007918:	5b2f      	ldrh	r7, [r5, r4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800791a:	f8d1 e014 	ldr.w	lr, [r1, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800791e:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8007922:	043f      	lsls	r7, r7, #16
 8007924:	0c3f      	lsrs	r7, r7, #16
 8007926:	532f      	strh	r7, [r5, r4]
 8007928:	5b2f      	ldrh	r7, [r5, r4]
 800792a:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 800792e:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8007932:	b2bf      	uxth	r7, r7
 8007934:	532f      	strh	r7, [r5, r4]
            if (ep->xfer_len_db > ep->maxpacket)
 8007936:	4286      	cmp	r6, r0
              ep->xfer_len_db = 0U;
 8007938:	bf2c      	ite	cs
 800793a:	2500      	movcs	r5, #0
              ep->xfer_len_db -= len;
 800793c:	1a85      	subcc	r5, r0, r2
            ep->xfer_buff += len;
 800793e:	eb0e 0402 	add.w	r4, lr, r2
 8007942:	bf38      	it	cc
 8007944:	4610      	movcc	r0, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007946:	784a      	ldrb	r2, [r1, #1]
            ep->xfer_buff += len;
 8007948:	614c      	str	r4, [r1, #20]
              ep->xfer_len_db -= len;
 800794a:	620d      	str	r5, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800794c:	2a00      	cmp	r2, #0
 800794e:	f040 820d 	bne.w	8007d6c <USB_EPStartXfer+0x7b4>
 8007952:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8007956:	780a      	ldrb	r2, [r1, #0]
 8007958:	b2ad      	uxth	r5, r5
 800795a:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800795e:	4435      	add	r5, r6
 8007960:	0112      	lsls	r2, r2, #4
 8007962:	2800      	cmp	r0, #0
 8007964:	f040 82eb 	bne.w	8007f3e <USB_EPStartXfer+0x986>
 8007968:	5b50      	ldrh	r0, [r2, r5]
 800796a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800796e:	0400      	lsls	r0, r0, #16
 8007970:	0c00      	lsrs	r0, r0, #16
 8007972:	5350      	strh	r0, [r2, r5]
 8007974:	5b50      	ldrh	r0, [r2, r5]
 8007976:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800797a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800797e:	b280      	uxth	r0, r0
 8007980:	5350      	strh	r0, [r2, r5]
  for (i = n; i != 0U; i--)
 8007982:	e723      	b.n	80077cc <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007984:	2d00      	cmp	r5, #0
 8007986:	f000 80be 	beq.w	8007b06 <USB_EPStartXfer+0x54e>
 800798a:	2d01      	cmp	r5, #1
 800798c:	d108      	bne.n	80079a0 <USB_EPStartXfer+0x3e8>
 800798e:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8007992:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007996:	b2bf      	uxth	r7, r7
 8007998:	443d      	add	r5, r7
 800799a:	0124      	lsls	r4, r4, #4
 800799c:	b297      	uxth	r7, r2
 800799e:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079a0:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079a2:	b297      	uxth	r7, r2
 80079a4:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079a6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 80079aa:	087f      	lsrs	r7, r7, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ac:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80079b4:	d008      	beq.n	80079c8 <USB_EPStartXfer+0x410>
            ep->xfer_len_db = 0U;
 80079b6:	4674      	mov	r4, lr
 80079b8:	eb0e 0747 	add.w	r7, lr, r7, lsl #1
    temp1 = *pBuf;
 80079bc:	f834 cb02 	ldrh.w	ip, [r4], #2
  for (i = n; i != 0U; i--)
 80079c0:	42bc      	cmp	r4, r7
    *pdwVal = (uint16_t)temp2;
 80079c2:	f825 cb04 	strh.w	ip, [r5], #4
  for (i = n; i != 0U; i--)
 80079c6:	d1f9      	bne.n	80079bc <USB_EPStartXfer+0x404>
          if (ep->xfer_len_db > ep->maxpacket)
 80079c8:	4286      	cmp	r6, r0
            ep->xfer_len_db -= len;
 80079ca:	bf36      	itet	cc
 80079cc:	1a84      	subcc	r4, r0, r2
            ep->xfer_len_db = 0U;
 80079ce:	2400      	movcs	r4, #0
 80079d0:	4610      	movcc	r0, r2
          ep->xfer_buff += len;
 80079d2:	eb0e 0502 	add.w	r5, lr, r2
 80079d6:	614d      	str	r5, [r1, #20]
            ep->xfer_len_db -= len;
 80079d8:	620c      	str	r4, [r1, #32]
          if (len > 0U)
 80079da:	2800      	cmp	r0, #0
 80079dc:	f43f aef6 	beq.w	80077cc <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079e0:	784a      	ldrb	r2, [r1, #1]
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	f040 8175 	bne.w	8007cd2 <USB_EPStartXfer+0x71a>
 80079e8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80079ec:	780c      	ldrb	r4, [r1, #0]
 80079ee:	b292      	uxth	r2, r2
 80079f0:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80079f4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80079f8:	283e      	cmp	r0, #62	; 0x3e
 80079fa:	441a      	add	r2, r3
 80079fc:	f200 824f 	bhi.w	8007e9e <USB_EPStartXfer+0x8e6>
 8007a00:	0844      	lsrs	r4, r0, #1
 8007a02:	07c6      	lsls	r6, r0, #31
 8007a04:	bf48      	it	mi
 8007a06:	3401      	addmi	r4, #1
 8007a08:	02a4      	lsls	r4, r4, #10
 8007a0a:	b2a4      	uxth	r4, r4
 8007a0c:	8014      	strh	r4, [r2, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a0e:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a10:	1c42      	adds	r2, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a12:	eb03 0044 	add.w	r0, r3, r4, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a16:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a18:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007a1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    temp1 = *pBuf;
 8007a20:	f835 4b02 	ldrh.w	r4, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8007a24:	f820 4b04 	strh.w	r4, [r0], #4
  for (i = n; i != 0U; i--)
 8007a28:	4282      	cmp	r2, r0
 8007a2a:	d1f9      	bne.n	8007a20 <USB_EPStartXfer+0x468>
 8007a2c:	e6ce      	b.n	80077cc <USB_EPStartXfer+0x214>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a2e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a32:	f203 4404 	addw	r4, r3, #1028	; 0x404
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a36:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8007a3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a3e:	0412      	lsls	r2, r2, #16
 8007a40:	0c12      	lsrs	r2, r2, #16
 8007a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a4a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a4e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007a52:	b287      	uxth	r7, r0
 8007a54:	b296      	uxth	r6, r2
 8007a56:	4622      	mov	r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a58:	4638      	mov	r0, r7
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a5a:	780d      	ldrb	r5, [r1, #0]
 8007a5c:	4432      	add	r2, r6
 8007a5e:	012c      	lsls	r4, r5, #4
 8007a60:	52a7      	strh	r7, [r4, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a62:	890c      	ldrh	r4, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a64:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a66:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007a6a:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a6c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a70:	694c      	ldr	r4, [r1, #20]
  for (i = n; i != 0U; i--)
 8007a72:	f43f aeab 	beq.w	80077cc <USB_EPStartXfer+0x214>
 8007a76:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    temp1 = *pBuf;
 8007a7a:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8007a7e:	f822 5b04 	strh.w	r5, [r2], #4
  for (i = n; i != 0U; i--)
 8007a82:	4290      	cmp	r0, r2
 8007a84:	d1f9      	bne.n	8007a7a <USB_EPStartXfer+0x4c2>
 8007a86:	e6a1      	b.n	80077cc <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a88:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 8007a8c:	f203 470c 	addw	r7, r3, #1036	; 0x40c
 8007a90:	fa1f fc8c 	uxth.w	ip, ip
 8007a94:	0125      	lsls	r5, r4, #4
 8007a96:	4467      	add	r7, ip
 8007a98:	2a00      	cmp	r2, #0
 8007a9a:	f040 8105 	bne.w	8007ca8 <USB_EPStartXfer+0x6f0>
 8007a9e:	5b7c      	ldrh	r4, [r7, r5]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa0:	f8d1 e014 	ldr.w	lr, [r1, #20]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007aa4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8007aa8:	0424      	lsls	r4, r4, #16
 8007aaa:	0c24      	lsrs	r4, r4, #16
 8007aac:	537c      	strh	r4, [r7, r5]
 8007aae:	5b7c      	ldrh	r4, [r7, r5]
 8007ab0:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007ab4:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007ab8:	b2a4      	uxth	r4, r4
 8007aba:	537c      	strh	r4, [r7, r5]
  for (i = n; i != 0U; i--)
 8007abc:	e637      	b.n	800772e <USB_EPStartXfer+0x176>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007abe:	5a85      	ldrh	r5, [r0, r2]
 8007ac0:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8007ac4:	042d      	lsls	r5, r5, #16
 8007ac6:	0c2d      	lsrs	r5, r5, #16
 8007ac8:	5285      	strh	r5, [r0, r2]
 8007aca:	5a85      	ldrh	r5, [r0, r2]
 8007acc:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8007ad0:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8007ad4:	b2ad      	uxth	r5, r5
 8007ad6:	5285      	strh	r5, [r0, r2]
 8007ad8:	784a      	ldrb	r2, [r1, #1]
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	d166      	bne.n	8007bac <USB_EPStartXfer+0x5f4>
 8007ade:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8007ae2:	7808      	ldrb	r0, [r1, #0]
 8007ae4:	b2a2      	uxth	r2, r4
 8007ae6:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8007aea:	4414      	add	r4, r2
 8007aec:	0100      	lsls	r0, r0, #4
 8007aee:	5a22      	ldrh	r2, [r4, r0]
 8007af0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007af4:	0412      	lsls	r2, r2, #16
 8007af6:	0c12      	lsrs	r2, r2, #16
 8007af8:	5222      	strh	r2, [r4, r0]
 8007afa:	5a22      	ldrh	r2, [r4, r0]
 8007afc:	b292      	uxth	r2, r2
 8007afe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b02:	5222      	strh	r2, [r4, r0]
 8007b04:	e6ac      	b.n	8007860 <USB_EPStartXfer+0x2a8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b06:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8007b0a:	f203 4704 	addw	r7, r3, #1028	; 0x404
 8007b0e:	b2ad      	uxth	r5, r5
 8007b10:	0124      	lsls	r4, r4, #4
 8007b12:	442f      	add	r7, r5
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	f040 809b 	bne.w	8007c50 <USB_EPStartXfer+0x698>
 8007b1a:	5b3d      	ldrh	r5, [r7, r4]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b1c:	f8d1 e014 	ldr.w	lr, [r1, #20]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b20:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8007b24:	042d      	lsls	r5, r5, #16
 8007b26:	0c2d      	lsrs	r5, r5, #16
 8007b28:	533d      	strh	r5, [r7, r4]
 8007b2a:	5b3d      	ldrh	r5, [r7, r4]
 8007b2c:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8007b30:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8007b34:	b2ad      	uxth	r5, r5
 8007b36:	533d      	strh	r5, [r7, r4]
  for (i = n; i != 0U; i--)
 8007b38:	e746      	b.n	80079c8 <USB_EPStartXfer+0x410>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b3a:	5aa5      	ldrh	r5, [r4, r2]
 8007b3c:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8007b40:	042d      	lsls	r5, r5, #16
 8007b42:	0c2d      	lsrs	r5, r5, #16
 8007b44:	52a5      	strh	r5, [r4, r2]
 8007b46:	5aa5      	ldrh	r5, [r4, r2]
 8007b48:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8007b4c:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8007b50:	b2ad      	uxth	r5, r5
 8007b52:	52a5      	strh	r5, [r4, r2]
 8007b54:	784c      	ldrb	r4, [r1, #1]
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	f47f ad62 	bne.w	8007620 <USB_EPStartXfer+0x68>
 8007b5c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8007b60:	7808      	ldrb	r0, [r1, #0]
 8007b62:	b2a2      	uxth	r2, r4
 8007b64:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8007b68:	4414      	add	r4, r2
 8007b6a:	0100      	lsls	r0, r0, #4
 8007b6c:	5a22      	ldrh	r2, [r4, r0]
 8007b6e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007b72:	0412      	lsls	r2, r2, #16
 8007b74:	0c12      	lsrs	r2, r2, #16
 8007b76:	5222      	strh	r2, [r4, r0]
 8007b78:	5a22      	ldrh	r2, [r4, r0]
 8007b7a:	b292      	uxth	r2, r2
 8007b7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b80:	5222      	strh	r2, [r4, r0]
 8007b82:	780a      	ldrb	r2, [r1, #0]
 8007b84:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007b88:	e579      	b.n	800767e <USB_EPStartXfer+0xc6>
 8007b8a:	bf00      	nop
 8007b8c:	ffff8000 	.word	0xffff8000
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b90:	0966      	lsrs	r6, r4, #5
 8007b92:	06e5      	lsls	r5, r4, #27
 8007b94:	4dbb      	ldr	r5, [pc, #748]	; (8007e84 <USB_EPStartXfer+0x8cc>)
 8007b96:	bf08      	it	eq
 8007b98:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007b9c:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8007ba0:	b2ad      	uxth	r5, r5
 8007ba2:	5285      	strh	r5, [r0, r2]
 8007ba4:	784a      	ldrb	r2, [r1, #1]
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	f43f ae51 	beq.w	800784e <USB_EPStartXfer+0x296>
 8007bac:	2a01      	cmp	r2, #1
 8007bae:	f47f ae57 	bne.w	8007860 <USB_EPStartXfer+0x2a8>
 8007bb2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007bb6:	7808      	ldrb	r0, [r1, #0]
 8007bb8:	b295      	uxth	r5, r2
 8007bba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007bbe:	b2a4      	uxth	r4, r4
 8007bc0:	442a      	add	r2, r5
 8007bc2:	0100      	lsls	r0, r0, #4
 8007bc4:	5284      	strh	r4, [r0, r2]
 8007bc6:	e64b      	b.n	8007860 <USB_EPStartXfer+0x2a8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	f040 812e 	bne.w	8007e2a <USB_EPStartXfer+0x872>
 8007bce:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8007bd2:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007bd6:	b2bf      	uxth	r7, r7
 8007bd8:	0124      	lsls	r4, r4, #4
 8007bda:	443d      	add	r5, r7
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	f040 8186 	bne.w	8007eee <USB_EPStartXfer+0x936>
 8007be2:	5b2f      	ldrh	r7, [r5, r4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007be4:	f8d1 e014 	ldr.w	lr, [r1, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007be8:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8007bec:	043f      	lsls	r7, r7, #16
 8007bee:	0c3f      	lsrs	r7, r7, #16
 8007bf0:	532f      	strh	r7, [r5, r4]
 8007bf2:	5b2f      	ldrh	r7, [r5, r4]
 8007bf4:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8007bf8:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8007bfc:	b2bf      	uxth	r7, r7
 8007bfe:	532f      	strh	r7, [r5, r4]
            if (ep->xfer_len_db > ep->maxpacket)
 8007c00:	4286      	cmp	r6, r0
              ep->xfer_len_db = 0U;
 8007c02:	bf2c      	ite	cs
 8007c04:	2500      	movcs	r5, #0
              ep->xfer_len_db -= len;
 8007c06:	1a85      	subcc	r5, r0, r2
            ep->xfer_buff += len;
 8007c08:	eb0e 0402 	add.w	r4, lr, r2
 8007c0c:	bf38      	it	cc
 8007c0e:	4610      	movcc	r0, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c10:	784a      	ldrb	r2, [r1, #1]
            ep->xfer_buff += len;
 8007c12:	614c      	str	r4, [r1, #20]
              ep->xfer_len_db -= len;
 8007c14:	620d      	str	r5, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	f040 80e8 	bne.w	8007dec <USB_EPStartXfer+0x834>
 8007c1c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007c20:	780d      	ldrb	r5, [r1, #0]
 8007c22:	b292      	uxth	r2, r2
 8007c24:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007c28:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8007c2c:	189d      	adds	r5, r3, r2
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f040 814c 	bne.w	8007ecc <USB_EPStartXfer+0x914>
 8007c34:	5a98      	ldrh	r0, [r3, r2]
 8007c36:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8007c3a:	0400      	lsls	r0, r0, #16
 8007c3c:	0c00      	lsrs	r0, r0, #16
 8007c3e:	5298      	strh	r0, [r3, r2]
 8007c40:	5a98      	ldrh	r0, [r3, r2]
 8007c42:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8007c46:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8007c4a:	b280      	uxth	r0, r0
 8007c4c:	5298      	strh	r0, [r3, r2]
  for (i = n; i != 0U; i--)
 8007c4e:	e5bd      	b.n	80077cc <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c50:	2a3e      	cmp	r2, #62	; 0x3e
 8007c52:	f200 810b 	bhi.w	8007e6c <USB_EPStartXfer+0x8b4>
 8007c56:	0855      	lsrs	r5, r2, #1
 8007c58:	f012 0f01 	tst.w	r2, #1
 8007c5c:	bf18      	it	ne
 8007c5e:	3501      	addne	r5, #1
 8007c60:	02ad      	lsls	r5, r5, #10
 8007c62:	b2ad      	uxth	r5, r5
 8007c64:	533d      	strh	r5, [r7, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c66:	890c      	ldrh	r4, [r1, #8]
 8007c68:	f503 6580 	add.w	r5, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c6c:	1c57      	adds	r7, r2, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c6e:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c72:	eb05 0544 	add.w	r5, r5, r4, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c76:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8007c78:	e69d      	b.n	80079b6 <USB_EPStartXfer+0x3fe>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c7a:	2a01      	cmp	r2, #1
 8007c7c:	d109      	bne.n	8007c92 <USB_EPStartXfer+0x6da>
 8007c7e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007c82:	780d      	ldrb	r5, [r1, #0]
 8007c84:	b296      	uxth	r6, r2
 8007c86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007c8a:	4432      	add	r2, r6
 8007c8c:	012d      	lsls	r5, r5, #4
 8007c8e:	b286      	uxth	r6, r0
 8007c90:	52ae      	strh	r6, [r5, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c92:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c94:	b280      	uxth	r0, r0
 8007c96:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c98:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8007c9c:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8007ca0:	0845      	lsrs	r5, r0, #1
 8007ca2:	f47f ad6d 	bne.w	8007780 <USB_EPStartXfer+0x1c8>
 8007ca6:	e591      	b.n	80077cc <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ca8:	2a3e      	cmp	r2, #62	; 0x3e
 8007caa:	f200 8103 	bhi.w	8007eb4 <USB_EPStartXfer+0x8fc>
 8007cae:	0854      	lsrs	r4, r2, #1
 8007cb0:	f012 0f01 	tst.w	r2, #1
 8007cb4:	bf18      	it	ne
 8007cb6:	3401      	addne	r4, #1
 8007cb8:	02a4      	lsls	r4, r4, #10
 8007cba:	b2a4      	uxth	r4, r4
 8007cbc:	537c      	strh	r4, [r7, r5]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cbe:	894d      	ldrh	r5, [r1, #10]
 8007cc0:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cc4:	1c57      	adds	r7, r2, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cc6:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cca:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cce:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8007cd0:	e524      	b.n	800771c <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cd2:	2a01      	cmp	r2, #1
 8007cd4:	d109      	bne.n	8007cea <USB_EPStartXfer+0x732>
 8007cd6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007cda:	780c      	ldrb	r4, [r1, #0]
 8007cdc:	b292      	uxth	r2, r2
 8007cde:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007ce2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8007ce6:	b284      	uxth	r4, r0
 8007ce8:	529c      	strh	r4, [r3, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cea:	b282      	uxth	r2, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cec:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cee:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cf0:	eb03 0044 	add.w	r0, r3, r4, lsl #1
  for (i = n; i != 0U; i--)
 8007cf4:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cf6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007cfa:	f47f ae8f 	bne.w	8007a1c <USB_EPStartXfer+0x464>
 8007cfe:	e565      	b.n	80077cc <USB_EPStartXfer+0x214>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d00:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 8007d04:	780c      	ldrb	r4, [r1, #0]
 8007d06:	b286      	uxth	r6, r0
 8007d08:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	4430      	add	r0, r6
 8007d10:	0124      	lsls	r4, r4, #4
 8007d12:	b107      	cbz	r7, 8007d16 <USB_EPStartXfer+0x75e>
 8007d14:	3201      	adds	r2, #1
 8007d16:	0292      	lsls	r2, r2, #10
 8007d18:	b292      	uxth	r2, r2
 8007d1a:	5222      	strh	r2, [r4, r0]
 8007d1c:	780a      	ldrb	r2, [r1, #0]
 8007d1e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007d22:	e4ac      	b.n	800767e <USB_EPStartXfer+0xc6>
 8007d24:	0947      	lsrs	r7, r0, #5
 8007d26:	46bc      	mov	ip, r7
 8007d28:	4d56      	ldr	r5, [pc, #344]	; (8007e84 <USB_EPStartXfer+0x8cc>)
 8007d2a:	f010 061f 	ands.w	r6, r0, #31
 8007d2e:	bf08      	it	eq
 8007d30:	f107 3cff 	addeq.w	ip, r7, #4294967295
 8007d34:	ea45 258c 	orr.w	r5, r5, ip, lsl #10
 8007d38:	b2ad      	uxth	r5, r5
 8007d3a:	52a5      	strh	r5, [r4, r2]
 8007d3c:	784c      	ldrb	r4, [r1, #1]
 8007d3e:	2c00      	cmp	r4, #0
 8007d40:	f47f ac6e 	bne.w	8007620 <USB_EPStartXfer+0x68>
 8007d44:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 8007d48:	780d      	ldrb	r5, [r1, #0]
 8007d4a:	b284      	uxth	r4, r0
 8007d4c:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8007d50:	463a      	mov	r2, r7
 8007d52:	4420      	add	r0, r4
 8007d54:	012d      	lsls	r5, r5, #4
 8007d56:	b906      	cbnz	r6, 8007d5a <USB_EPStartXfer+0x7a2>
 8007d58:	3a01      	subs	r2, #1
 8007d5a:	4c4a      	ldr	r4, [pc, #296]	; (8007e84 <USB_EPStartXfer+0x8cc>)
 8007d5c:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
 8007d60:	b292      	uxth	r2, r2
 8007d62:	522a      	strh	r2, [r5, r0]
 8007d64:	780a      	ldrb	r2, [r1, #0]
 8007d66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007d6a:	e488      	b.n	800767e <USB_EPStartXfer+0xc6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d6c:	2a01      	cmp	r2, #1
 8007d6e:	d109      	bne.n	8007d84 <USB_EPStartXfer+0x7cc>
 8007d70:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007d74:	780d      	ldrb	r5, [r1, #0]
 8007d76:	b296      	uxth	r6, r2
 8007d78:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007d7c:	4432      	add	r2, r6
 8007d7e:	012d      	lsls	r5, r5, #4
 8007d80:	b286      	uxth	r6, r0
 8007d82:	52ae      	strh	r6, [r5, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d84:	b280      	uxth	r0, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d86:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d88:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d8a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007d8e:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d90:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8007d94:	f43f ad1a 	beq.w	80077cc <USB_EPStartXfer+0x214>
 8007d98:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    temp1 = *pBuf;
 8007d9c:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 8007da0:	42a5      	cmp	r5, r4
    *pdwVal = (uint16_t)temp2;
 8007da2:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8007da6:	d1f9      	bne.n	8007d9c <USB_EPStartXfer+0x7e4>
 8007da8:	e510      	b.n	80077cc <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007daa:	2d01      	cmp	r5, #1
 8007dac:	d108      	bne.n	8007dc0 <USB_EPStartXfer+0x808>
 8007dae:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8007db2:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 8007db6:	b2bf      	uxth	r7, r7
 8007db8:	443d      	add	r5, r7
 8007dba:	0124      	lsls	r4, r4, #4
 8007dbc:	b297      	uxth	r7, r2
 8007dbe:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dc0:	894f      	ldrh	r7, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dc2:	b295      	uxth	r5, r2
 8007dc4:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dc6:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8007dca:	eb04 0447 	add.w	r4, r4, r7, lsl #1
  for (i = n; i != 0U; i--)
 8007dce:	086f      	lsrs	r7, r5, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dd0:	f8d1 e014 	ldr.w	lr, [r1, #20]
  for (i = n; i != 0U; i--)
 8007dd4:	f43f adaf 	beq.w	8007936 <USB_EPStartXfer+0x37e>
{
 8007dd8:	4675      	mov	r5, lr
 8007dda:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    temp1 = *pBuf;
 8007dde:	f835 cb02 	ldrh.w	ip, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8007de2:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 8007de6:	42bc      	cmp	r4, r7
 8007de8:	d1f9      	bne.n	8007dde <USB_EPStartXfer+0x826>
 8007dea:	e5a4      	b.n	8007936 <USB_EPStartXfer+0x37e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007dec:	2a01      	cmp	r2, #1
 8007dee:	d109      	bne.n	8007e04 <USB_EPStartXfer+0x84c>
 8007df0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007df4:	780d      	ldrb	r5, [r1, #0]
 8007df6:	b292      	uxth	r2, r2
 8007df8:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007dfc:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8007e00:	b285      	uxth	r5, r0
 8007e02:	529d      	strh	r5, [r3, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e04:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e06:	b280      	uxth	r0, r0
 8007e08:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e0a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  for (i = n; i != 0U; i--)
 8007e0e:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007e14:	f43f acda 	beq.w	80077cc <USB_EPStartXfer+0x214>
 8007e18:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    temp1 = *pBuf;
 8007e1c:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8007e20:	f822 5b04 	strh.w	r5, [r2], #4
  for (i = n; i != 0U; i--)
 8007e24:	4290      	cmp	r0, r2
 8007e26:	d1f9      	bne.n	8007e1c <USB_EPStartXfer+0x864>
 8007e28:	e4d0      	b.n	80077cc <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e2a:	2d01      	cmp	r5, #1
 8007e2c:	d108      	bne.n	8007e40 <USB_EPStartXfer+0x888>
 8007e2e:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8007e32:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007e36:	b2bf      	uxth	r7, r7
 8007e38:	443d      	add	r5, r7
 8007e3a:	0124      	lsls	r4, r4, #4
 8007e3c:	b297      	uxth	r7, r2
 8007e3e:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e40:	890c      	ldrh	r4, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e42:	b295      	uxth	r5, r2
 8007e44:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e46:	eb03 0444 	add.w	r4, r3, r4, lsl #1
  for (i = n; i != 0U; i--)
 8007e4a:	086f      	lsrs	r7, r5, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e4c:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007e54:	f43f aed4 	beq.w	8007c00 <USB_EPStartXfer+0x648>
              ep->xfer_len_db = 0U;
 8007e58:	4675      	mov	r5, lr
 8007e5a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    temp1 = *pBuf;
 8007e5e:	f835 cb02 	ldrh.w	ip, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8007e62:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 8007e66:	42a7      	cmp	r7, r4
 8007e68:	d1f9      	bne.n	8007e5e <USB_EPStartXfer+0x8a6>
 8007e6a:	e6c9      	b.n	8007c00 <USB_EPStartXfer+0x648>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e6c:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8007e70:	06d5      	lsls	r5, r2, #27
 8007e72:	4d04      	ldr	r5, [pc, #16]	; (8007e84 <USB_EPStartXfer+0x8cc>)
 8007e74:	bf08      	it	eq
 8007e76:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007e7a:	ea45 258c 	orr.w	r5, r5, ip, lsl #10
 8007e7e:	b2ad      	uxth	r5, r5
 8007e80:	533d      	strh	r5, [r7, r4]
 8007e82:	e58d      	b.n	80079a0 <USB_EPStartXfer+0x3e8>
 8007e84:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e88:	0947      	lsrs	r7, r0, #5
 8007e8a:	06c5      	lsls	r5, r0, #27
 8007e8c:	4d4b      	ldr	r5, [pc, #300]	; (8007fbc <USB_EPStartXfer+0xa04>)
 8007e8e:	bf08      	it	eq
 8007e90:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007e94:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8007e98:	b2ad      	uxth	r5, r5
 8007e9a:	52b5      	strh	r5, [r6, r2]
 8007e9c:	e6f9      	b.n	8007c92 <USB_EPStartXfer+0x6da>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e9e:	0946      	lsrs	r6, r0, #5
 8007ea0:	4c46      	ldr	r4, [pc, #280]	; (8007fbc <USB_EPStartXfer+0xa04>)
 8007ea2:	06c7      	lsls	r7, r0, #27
 8007ea4:	bf08      	it	eq
 8007ea6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007eaa:	ea44 2486 	orr.w	r4, r4, r6, lsl #10
 8007eae:	b2a4      	uxth	r4, r4
 8007eb0:	8014      	strh	r4, [r2, #0]
 8007eb2:	e71a      	b.n	8007cea <USB_EPStartXfer+0x732>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007eb4:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8007eb8:	06d4      	lsls	r4, r2, #27
 8007eba:	4c40      	ldr	r4, [pc, #256]	; (8007fbc <USB_EPStartXfer+0xa04>)
 8007ebc:	bf08      	it	eq
 8007ebe:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007ec2:	ea44 248c 	orr.w	r4, r4, ip, lsl #10
 8007ec6:	b2a4      	uxth	r4, r4
 8007ec8:	537c      	strh	r4, [r7, r5]
 8007eca:	e41c      	b.n	8007706 <USB_EPStartXfer+0x14e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ecc:	283e      	cmp	r0, #62	; 0x3e
 8007ece:	d847      	bhi.n	8007f60 <USB_EPStartXfer+0x9a8>
 8007ed0:	0842      	lsrs	r2, r0, #1
 8007ed2:	07c6      	lsls	r6, r0, #31
 8007ed4:	bf48      	it	mi
 8007ed6:	3201      	addmi	r2, #1
 8007ed8:	0292      	lsls	r2, r2, #10
 8007eda:	b292      	uxth	r2, r2
 8007edc:	802a      	strh	r2, [r5, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ede:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ee0:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ee2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ee6:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007eec:	e794      	b.n	8007e18 <USB_EPStartXfer+0x860>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007eee:	2a3e      	cmp	r2, #62	; 0x3e
 8007ef0:	d84c      	bhi.n	8007f8c <USB_EPStartXfer+0x9d4>
 8007ef2:	0857      	lsrs	r7, r2, #1
 8007ef4:	f012 0f01 	tst.w	r2, #1
 8007ef8:	bf18      	it	ne
 8007efa:	3701      	addne	r7, #1
 8007efc:	02bf      	lsls	r7, r7, #10
 8007efe:	b2bf      	uxth	r7, r7
 8007f00:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f02:	890d      	ldrh	r5, [r1, #8]
 8007f04:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f08:	1c57      	adds	r7, r2, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f0a:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f0e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f12:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8007f14:	e7a0      	b.n	8007e58 <USB_EPStartXfer+0x8a0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f16:	2a3e      	cmp	r2, #62	; 0x3e
 8007f18:	d844      	bhi.n	8007fa4 <USB_EPStartXfer+0x9ec>
 8007f1a:	0857      	lsrs	r7, r2, #1
 8007f1c:	f012 0f01 	tst.w	r2, #1
 8007f20:	bf18      	it	ne
 8007f22:	3701      	addne	r7, #1
 8007f24:	02bf      	lsls	r7, r7, #10
 8007f26:	b2bf      	uxth	r7, r7
 8007f28:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f2a:	894d      	ldrh	r5, [r1, #10]
 8007f2c:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f30:	1c57      	adds	r7, r2, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f32:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f36:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f3a:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8007f3c:	e74c      	b.n	8007dd8 <USB_EPStartXfer+0x820>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f3e:	283e      	cmp	r0, #62	; 0x3e
 8007f40:	d819      	bhi.n	8007f76 <USB_EPStartXfer+0x9be>
 8007f42:	0846      	lsrs	r6, r0, #1
 8007f44:	07c7      	lsls	r7, r0, #31
 8007f46:	bf48      	it	mi
 8007f48:	3601      	addmi	r6, #1
 8007f4a:	02b6      	lsls	r6, r6, #10
 8007f4c:	b2b6      	uxth	r6, r6
 8007f4e:	5356      	strh	r6, [r2, r5]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f50:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f52:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f54:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f58:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f5a:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8007f5e:	e71b      	b.n	8007d98 <USB_EPStartXfer+0x7e0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f60:	0946      	lsrs	r6, r0, #5
 8007f62:	06c2      	lsls	r2, r0, #27
 8007f64:	4a15      	ldr	r2, [pc, #84]	; (8007fbc <USB_EPStartXfer+0xa04>)
 8007f66:	bf08      	it	eq
 8007f68:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007f6c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8007f70:	b292      	uxth	r2, r2
 8007f72:	802a      	strh	r2, [r5, #0]
 8007f74:	e746      	b.n	8007e04 <USB_EPStartXfer+0x84c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f76:	0947      	lsrs	r7, r0, #5
 8007f78:	06c6      	lsls	r6, r0, #27
 8007f7a:	4e10      	ldr	r6, [pc, #64]	; (8007fbc <USB_EPStartXfer+0xa04>)
 8007f7c:	bf08      	it	eq
 8007f7e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007f82:	ea46 2687 	orr.w	r6, r6, r7, lsl #10
 8007f86:	b2b6      	uxth	r6, r6
 8007f88:	5356      	strh	r6, [r2, r5]
 8007f8a:	e6fb      	b.n	8007d84 <USB_EPStartXfer+0x7cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f8c:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8007f90:	06d7      	lsls	r7, r2, #27
 8007f92:	4f0a      	ldr	r7, [pc, #40]	; (8007fbc <USB_EPStartXfer+0xa04>)
 8007f94:	bf08      	it	eq
 8007f96:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007f9a:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8007f9e:	b2bf      	uxth	r7, r7
 8007fa0:	532f      	strh	r7, [r5, r4]
 8007fa2:	e74d      	b.n	8007e40 <USB_EPStartXfer+0x888>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fa4:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8007fa8:	06d7      	lsls	r7, r2, #27
 8007faa:	4f04      	ldr	r7, [pc, #16]	; (8007fbc <USB_EPStartXfer+0xa04>)
 8007fac:	bf08      	it	eq
 8007fae:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007fb2:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8007fb6:	b2bf      	uxth	r7, r7
 8007fb8:	532f      	strh	r7, [r5, r4]
 8007fba:	e701      	b.n	8007dc0 <USB_EPStartXfer+0x808>
 8007fbc:	ffff8000 	.word	0xffff8000

08007fc0 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8007fc0:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fc2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8007fc4:	b18b      	cbz	r3, 8007fea <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd2:	041b      	lsls	r3, r3, #16
 8007fd4:	0c1b      	lsrs	r3, r3, #16
 8007fd6:	f083 0310 	eor.w	r3, r3, #16
 8007fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007fea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	0c1b      	lsrs	r3, r3, #16
 8007ffa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008006:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800800a:	2000      	movs	r0, #0
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop

08008010 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8008010:	7b0b      	ldrb	r3, [r1, #12]
 8008012:	bb43      	cbnz	r3, 8008066 <USB_EPClearStall+0x56>
    if (ep->is_in != 0U)
 8008014:	784b      	ldrb	r3, [r1, #1]
 8008016:	b343      	cbz	r3, 800806a <USB_EPClearStall+0x5a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008018:	780a      	ldrb	r2, [r1, #0]
 800801a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800801e:	065b      	lsls	r3, r3, #25
 8008020:	d50d      	bpl.n	800803e <USB_EPClearStall+0x2e>
 8008022:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800803a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800803e:	78cb      	ldrb	r3, [r1, #3]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d010      	beq.n	8008066 <USB_EPClearStall+0x56>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008044:	780a      	ldrb	r2, [r1, #0]
 8008046:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800804a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008052:	041b      	lsls	r3, r3, #16
 8008054:	0c1b      	lsrs	r3, r3, #16
 8008056:	f083 0320 	eor.w	r3, r3, #32
 800805a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800805e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008062:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008066:	2000      	movs	r0, #0
 8008068:	4770      	bx	lr
{
 800806a:	b410      	push	{r4}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800806c:	780c      	ldrb	r4, [r1, #0]
 800806e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008072:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8008076:	045b      	lsls	r3, r3, #17
 8008078:	d510      	bpl.n	800809c <USB_EPClearStall+0x8c>
 800807a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800807e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008086:	041b      	lsls	r3, r3, #16
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800808e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008092:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8008096:	780a      	ldrb	r2, [r1, #0]
 8008098:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800809c:	8813      	ldrh	r3, [r2, #0]
}
 800809e:	2000      	movs	r0, #0
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a8:	041b      	lsls	r3, r3, #16
 80080aa:	0c1b      	lsrs	r3, r3, #16
 80080ac:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80080b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 80080b8:	bc10      	pop	{r4}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080ba:	8013      	strh	r3, [r2, #0]
}
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <USB_SetDevAddress>:
  if (address == 0U)
 80080c0:	b911      	cbnz	r1, 80080c8 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080c2:	2380      	movs	r3, #128	; 0x80
 80080c4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80080c8:	2000      	movs	r0, #0
 80080ca:	4770      	bx	lr

080080cc <USB_DevConnect>:
 80080cc:	2000      	movs	r0, #0
 80080ce:	4770      	bx	lr

080080d0 <USB_DevDisconnect>:
 80080d0:	2000      	movs	r0, #0
 80080d2:	4770      	bx	lr

080080d4 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 80080d4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 80080d8:	b280      	uxth	r0, r0
 80080da:	4770      	bx	lr

080080dc <USB_EP0_OutStart>:
}
 80080dc:	2000      	movs	r0, #0
 80080de:	4770      	bx	lr

080080e0 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80080e0:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 80080e6:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80080ec:	d007      	beq.n	80080fe <USB_WritePMA+0x1e>
 80080ee:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80080f2:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80080f6:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 80080fa:	4282      	cmp	r2, r0
 80080fc:	d1f9      	bne.n	80080f2 <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80080fe:	4770      	bx	lr

08008100 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008100:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8008104:	ea5f 0c53 	movs.w	ip, r3, lsr #1
{
 8008108:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800810a:	f500 6780 	add.w	r7, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800810e:	d013      	beq.n	8008138 <USB_ReadPMA+0x38>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008110:	463d      	mov	r5, r7
  for (i = n; i != 0U; i--)
 8008112:	4664      	mov	r4, ip
 8008114:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008116:	f835 2b04 	ldrh.w	r2, [r5], #4
  for (i = n; i != 0U; i--)
 800811a:	3c01      	subs	r4, #1
    temp = *(__IO uint16_t *)pdwVal;
 800811c:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800811e:	ea4f 2612 	mov.w	r6, r2, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008122:	f800 2c02 	strb.w	r2, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008126:	f800 6c01 	strb.w	r6, [r0, #-1]
  for (i = n; i != 0U; i--)
 800812a:	f100 0002 	add.w	r0, r0, #2
 800812e:	d1f2      	bne.n	8008116 <USB_ReadPMA+0x16>
 8008130:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 8008134:	eb07 078c 	add.w	r7, r7, ip, lsl #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008138:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800813a:	bf48      	it	mi
 800813c:	883b      	ldrhmi	r3, [r7, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 800813e:	bcf0      	pop	{r4, r5, r6, r7}
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008140:	bf48      	it	mi
 8008142:	700b      	strbmi	r3, [r1, #0]
}
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop

08008148 <USBD_MIDI_DataIn>:
  return 0;
}

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){

  if (USB_Tx_State == 1){
 8008148:	4b03      	ldr	r3, [pc, #12]	; (8008158 <USBD_MIDI_DataIn+0x10>)
    USB_Tx_State = 0;
  }
  return USBD_OK;
}
 800814a:	2000      	movs	r0, #0
  if (USB_Tx_State == 1){
 800814c:	781a      	ldrb	r2, [r3, #0]
 800814e:	2a01      	cmp	r2, #1
    USB_Tx_State = 0;
 8008150:	bf04      	itt	eq
 8008152:	2200      	moveq	r2, #0
 8008154:	701a      	strbeq	r2, [r3, #0]
}
 8008156:	4770      	bx	lr
 8008158:	200001ed 	.word	0x200001ed

0800815c <USBD_MIDI_GetCfgDesc>:
    while(USBD_LL_Transmit(pInstance, MIDI_IN_EP,buffer,len) != USBD_OK)
    	;

}

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 800815c:	4603      	mov	r3, r0
  *length = sizeof (USBD_MIDI_CfgDesc);
 800815e:	2265      	movs	r2, #101	; 0x65
  return USBD_MIDI_CfgDesc;
}
 8008160:	4801      	ldr	r0, [pc, #4]	; (8008168 <USBD_MIDI_GetCfgDesc+0xc>)
  *length = sizeof (USBD_MIDI_CfgDesc);
 8008162:	801a      	strh	r2, [r3, #0]
}
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	200000f0 	.word	0x200000f0

0800816c <USBD_MIDI_DataOut>:
{      
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4604      	mov	r4, r0
  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8008170:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  pmidi->pIf_MidiRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8008174:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8008178:	4d08      	ldr	r5, [pc, #32]	; (800819c <USBD_MIDI_DataOut+0x30>)
  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800817a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800817e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  pmidi->pIf_MidiRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8008182:	4628      	mov	r0, r5
 8008184:	6813      	ldr	r3, [r2, #0]
 8008186:	f8b1 1184 	ldrh.w	r1, [r1, #388]	; 0x184
 800818a:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,USB_Rx_Buffer,MIDI_DATA_OUT_PACKET_SIZE);
 800818c:	4620      	mov	r0, r4
 800818e:	462a      	mov	r2, r5
 8008190:	2340      	movs	r3, #64	; 0x40
 8008192:	2101      	movs	r1, #1
 8008194:	f001 faa0 	bl	80096d8 <USBD_LL_PrepareReceive>
}
 8008198:	2000      	movs	r0, #0
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	20000c50 	.word	0x20000c50

080081a0 <USBD_MIDI_DeInit>:
static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80081a0:	b538      	push	{r3, r4, r5, lr}
  pInstance = NULL;
 80081a2:	2500      	movs	r5, #0
static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80081a4:	4604      	mov	r4, r0
  pInstance = NULL;
 80081a6:	4b05      	ldr	r3, [pc, #20]	; (80081bc <USBD_MIDI_DeInit+0x1c>)
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 80081a8:	2181      	movs	r1, #129	; 0x81
  pInstance = NULL;
 80081aa:	601d      	str	r5, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 80081ac:	f001 fa3a 	bl	8009624 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 80081b0:	4620      	mov	r0, r4
 80081b2:	2101      	movs	r1, #1
 80081b4:	f001 fa36 	bl	8009624 <USBD_LL_CloseEP>
}
 80081b8:	4628      	mov	r0, r5
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	200001f0 	.word	0x200001f0

080081c0 <USBD_MIDI_Init>:
static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4604      	mov	r4, r0
  pInstance = pdev;
 80081c4:	4d0b      	ldr	r5, [pc, #44]	; (80081f4 <USBD_MIDI_Init+0x34>)
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 80081c6:	2340      	movs	r3, #64	; 0x40
 80081c8:	2202      	movs	r2, #2
 80081ca:	2181      	movs	r1, #129	; 0x81
  pInstance = pdev;
 80081cc:	6028      	str	r0, [r5, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 80081ce:	f001 fa19 	bl	8009604 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 80081d2:	4620      	mov	r0, r4
 80081d4:	2340      	movs	r3, #64	; 0x40
 80081d6:	2202      	movs	r2, #2
 80081d8:	2101      	movs	r1, #1
 80081da:	f001 fa13 	bl	8009604 <USBD_LL_OpenEP>
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 80081de:	2101      	movs	r1, #1
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80081e0:	4620      	mov	r0, r4
 80081e2:	2340      	movs	r3, #64	; 0x40
 80081e4:	4a04      	ldr	r2, [pc, #16]	; (80081f8 <USBD_MIDI_Init+0x38>)
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 80081e6:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 1U;
 80081ea:	62e1      	str	r1, [r4, #44]	; 0x2c
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80081ec:	f001 fa74 	bl	80096d8 <USBD_LL_PrepareReceive>
}
 80081f0:	2000      	movs	r0, #0
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	200001f0 	.word	0x200001f0
 80081f8:	20000c50 	.word	0x20000c50

080081fc <USBD_MIDI_SendPacket>:
void USBD_MIDI_SendPacket (uint8_t* buffer, uint8_t len){
 80081fc:	b570      	push	{r4, r5, r6, lr}
	if(pInstance->dev_state != USBD_STATE_CONFIGURED)
 80081fe:	4e0c      	ldr	r6, [pc, #48]	; (8008230 <USBD_MIDI_SendPacket+0x34>)
void USBD_MIDI_SendPacket (uint8_t* buffer, uint8_t len){
 8008200:	4605      	mov	r5, r0
	if(pInstance->dev_state != USBD_STATE_CONFIGURED)
 8008202:	6830      	ldr	r0, [r6, #0]
 8008204:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008208:	2b03      	cmp	r3, #3
 800820a:	d10f      	bne.n	800822c <USBD_MIDI_SendPacket+0x30>
 800820c:	4b09      	ldr	r3, [pc, #36]	; (8008234 <USBD_MIDI_SendPacket+0x38>)
	while(USB_Tx_State)
 800820e:	781c      	ldrb	r4, [r3, #0]
 8008210:	2c00      	cmp	r4, #0
 8008212:	d1fc      	bne.n	800820e <USBD_MIDI_SendPacket+0x12>
    USB_Tx_State = 1;
 8008214:	2201      	movs	r2, #1
 8008216:	b28c      	uxth	r4, r1
 8008218:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance, MIDI_IN_EP,buffer,len) != USBD_OK)
 800821a:	e000      	b.n	800821e <USBD_MIDI_SendPacket+0x22>
 800821c:	6830      	ldr	r0, [r6, #0]
 800821e:	4623      	mov	r3, r4
 8008220:	462a      	mov	r2, r5
 8008222:	2181      	movs	r1, #129	; 0x81
 8008224:	f001 fa4a 	bl	80096bc <USBD_LL_Transmit>
 8008228:	2800      	cmp	r0, #0
 800822a:	d1f7      	bne.n	800821c <USBD_MIDI_SendPacket+0x20>
}
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	bf00      	nop
 8008230:	200001f0 	.word	0x200001f0
 8008234:	200001ed 	.word	0x200001ed

08008238 <USBD_MIDI_RegisterInterface>:

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
  uint8_t ret = USBD_FAIL;
  
  if(fops != NULL){
 8008238:	b119      	cbz	r1, 8008242 <USBD_MIDI_RegisterInterface+0xa>
    pdev->pUserData= fops;
 800823a:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;    
 800823e:	2000      	movs	r0, #0
 8008240:	4770      	bx	lr
  uint8_t ret = USBD_FAIL;
 8008242:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop

08008248 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008248:	b188      	cbz	r0, 800826e <USBD_Init+0x26>
{
 800824a:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800824c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008250:	b113      	cbz	r3, 8008258 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008258:	b109      	cbz	r1, 800825e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800825a:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800825e:	2301      	movs	r3, #1
  pdev->id = id;
 8008260:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008262:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008266:	f001 f985 	bl	8009574 <USBD_LL_Init>

  return USBD_OK;
 800826a:	2000      	movs	r0, #0
}
 800826c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800826e:	2002      	movs	r0, #2
}
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop

08008274 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008274:	b119      	cbz	r1, 800827e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008276:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800827a:	2000      	movs	r0, #0
 800827c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800827e:	2002      	movs	r0, #2
  }

  return status;
}
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop

08008284 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008284:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008286:	f001 f9af 	bl	80095e8 <USBD_LL_Start>

  return USBD_OK;
}
 800828a:	2000      	movs	r0, #0
 800828c:	bd08      	pop	{r3, pc}
 800828e:	bf00      	nop

08008290 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008290:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8008292:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008296:	b11b      	cbz	r3, 80082a0 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4798      	blx	r3
 800829c:	b900      	cbnz	r0, 80082a0 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800829e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082a0:	2002      	movs	r0, #2
}
 80082a2:	bd08      	pop	{r3, pc}

080082a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082a4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80082a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	4798      	blx	r3

  return USBD_OK;
}
 80082ae:	2000      	movs	r0, #0
 80082b0:	bd08      	pop	{r3, pc}
 80082b2:	bf00      	nop

080082b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082b8:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 fb59 	bl	8008974 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082c2:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80082c4:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 80082c8:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
 80082cc:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 80082d0:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 80082d2:	e9c4 02a5 	strd	r0, r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80082d6:	d009      	beq.n	80082ec <USBD_LL_SetupStage+0x38>
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d013      	beq.n	8008304 <USBD_LL_SetupStage+0x50>
 80082dc:	b163      	cbz	r3, 80082f8 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082de:	4620      	mov	r0, r4
 80082e0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80082e4:	f001 f9ac 	bl	8009640 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 80082e8:	2000      	movs	r0, #0
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80082ec:	4629      	mov	r1, r5
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 fa74 	bl	80087dc <USBD_StdItfReq>
}
 80082f4:	2000      	movs	r0, #0
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 80082f8:	4629      	mov	r1, r5
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 f8f4 	bl	80084e8 <USBD_StdDevReq>
}
 8008300:	2000      	movs	r0, #0
 8008302:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8008304:	4629      	mov	r1, r5
 8008306:	4620      	mov	r0, r4
 8008308:	f000 fa9c 	bl	8008844 <USBD_StdEPReq>
}
 800830c:	2000      	movs	r0, #0
 800830e:	bd38      	pop	{r3, r4, r5, pc}

08008310 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008314:	b969      	cbnz	r1, 8008332 <USBD_LL_DataOutStage+0x22>
 8008316:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008318:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800831c:	2a03      	cmp	r2, #3
 800831e:	d015      	beq.n	800834c <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008320:	2a05      	cmp	r2, #5
 8008322:	460c      	mov	r4, r1
 8008324:	d10e      	bne.n	8008344 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008326:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800832a:	f001 f989 	bl	8009640 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800832e:	4620      	mov	r0, r4
}
 8008330:	bd38      	pop	{r3, r4, r5, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8008332:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	b133      	cbz	r3, 8008348 <USBD_LL_DataOutStage+0x38>
 800833a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800833e:	2a03      	cmp	r2, #3
 8008340:	d102      	bne.n	8008348 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8008342:	4798      	blx	r3
  return USBD_OK;
 8008344:	2000      	movs	r0, #0
}
 8008346:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008348:	2002      	movs	r0, #2
}
 800834a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800834c:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 8008350:	4291      	cmp	r1, r2
 8008352:	d90c      	bls.n	800836e <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 8008354:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx(pdev, pdata,
 8008356:	428a      	cmp	r2, r1
 8008358:	bf88      	it	hi
 800835a:	b28a      	uxthhi	r2, r1
        pep->rem_length -= pep->maxpacket;
 800835c:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8008360:	bf98      	it	ls
 8008362:	b292      	uxthls	r2, r2
 8008364:	4619      	mov	r1, r3
 8008366:	f000 fb57 	bl	8008a18 <USBD_CtlContinueRx>
  return USBD_OK;
 800836a:	2000      	movs	r0, #0
}
 800836c:	bd38      	pop	{r3, r4, r5, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800836e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	b11b      	cbz	r3, 800837e <USBD_LL_DataOutStage+0x6e>
 8008376:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800837a:	2a03      	cmp	r2, #3
 800837c:	d004      	beq.n	8008388 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 800837e:	4628      	mov	r0, r5
 8008380:	f000 fb54 	bl	8008a2c <USBD_CtlSendStatus>
  return USBD_OK;
 8008384:	2000      	movs	r0, #0
}
 8008386:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 8008388:	4798      	blx	r3
 800838a:	e7f8      	b.n	800837e <USBD_LL_DataOutStage+0x6e>

0800838c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008390:	b981      	cbnz	r1, 80083b4 <USBD_LL_DataInStage+0x28>
 8008392:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008394:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008398:	2a02      	cmp	r2, #2
 800839a:	d01b      	beq.n	80083d4 <USBD_LL_DataInStage+0x48>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800839c:	f032 0304 	bics.w	r3, r2, #4
 80083a0:	d102      	bne.n	80083a8 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80083a2:	2180      	movs	r1, #128	; 0x80
 80083a4:	f001 f94c 	bl	8009640 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80083a8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80083ac:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d00d      	beq.n	80083ce <USBD_LL_DataInStage+0x42>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80083b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	b133      	cbz	r3, 80083ca <USBD_LL_DataInStage+0x3e>
 80083bc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80083c0:	2a03      	cmp	r2, #3
 80083c2:	d102      	bne.n	80083ca <USBD_LL_DataInStage+0x3e>
    pdev->pClass->DataIn(pdev, epnum);
 80083c4:	4798      	blx	r3
  return USBD_OK;
 80083c6:	2000      	movs	r0, #0
}
 80083c8:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80083ca:	2002      	movs	r0, #2
}
 80083cc:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 80083ce:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80083d4:	e9d0 2608 	ldrd	r2, r6, [r0, #32]
 80083d8:	42b2      	cmp	r2, r6
 80083da:	d826      	bhi.n	800842a <USBD_LL_DataInStage+0x9e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083dc:	69c3      	ldr	r3, [r0, #28]
 80083de:	fbb3 f5f6 	udiv	r5, r3, r6
 80083e2:	fb06 3515 	mls	r5, r6, r5, r3
 80083e6:	b95d      	cbnz	r5, 8008400 <USBD_LL_DataInStage+0x74>
 80083e8:	429e      	cmp	r6, r3
 80083ea:	d809      	bhi.n	8008400 <USBD_LL_DataInStage+0x74>
            (pep->total_length >= pep->maxpacket) &&
 80083ec:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d205      	bcs.n	8008400 <USBD_LL_DataInStage+0x74>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083f4:	462a      	mov	r2, r5
 80083f6:	f000 fb05 	bl	8008a04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083fa:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80083fe:	e01b      	b.n	8008438 <USBD_LL_DataInStage+0xac>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008400:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	b11b      	cbz	r3, 8008410 <USBD_LL_DataInStage+0x84>
 8008408:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800840c:	2a03      	cmp	r2, #3
 800840e:	d01a      	beq.n	8008446 <USBD_LL_DataInStage+0xba>
          USBD_LL_StallEP(pdev, 0x80U);
 8008410:	2180      	movs	r1, #128	; 0x80
 8008412:	4620      	mov	r0, r4
 8008414:	f001 f914 	bl	8009640 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fb13 	bl	8008a44 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800841e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 8008422:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8008424:	2b01      	cmp	r3, #1
 8008426:	d1c4      	bne.n	80083b2 <USBD_LL_DataInStage+0x26>
 8008428:	e7d1      	b.n	80083ce <USBD_LL_DataInStage+0x42>
        pep->rem_length -= pep->maxpacket;
 800842a:	1b92      	subs	r2, r2, r6
 800842c:	460d      	mov	r5, r1
 800842e:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008430:	4619      	mov	r1, r3
 8008432:	b292      	uxth	r2, r2
 8008434:	f000 fae6 	bl	8008a04 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008438:	462b      	mov	r3, r5
 800843a:	462a      	mov	r2, r5
 800843c:	4629      	mov	r1, r5
 800843e:	4620      	mov	r0, r4
 8008440:	f001 f94a 	bl	80096d8 <USBD_LL_PrepareReceive>
 8008444:	e7b0      	b.n	80083a8 <USBD_LL_DataInStage+0x1c>
            pdev->pClass->EP0_TxSent(pdev);
 8008446:	4620      	mov	r0, r4
 8008448:	4798      	blx	r3
 800844a:	e7e1      	b.n	8008410 <USBD_LL_DataInStage+0x84>

0800844c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800844c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800844e:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008450:	2640      	movs	r6, #64	; 0x40
{
 8008452:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008454:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008456:	4611      	mov	r1, r2
 8008458:	4633      	mov	r3, r6
 800845a:	f001 f8d3 	bl	8009604 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800845e:	4633      	mov	r3, r6
 8008460:	2180      	movs	r1, #128	; 0x80
 8008462:	4620      	mov	r0, r4
 8008464:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008466:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800846a:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800846e:	f001 f8c9 	bl	8009604 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8008472:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008474:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008478:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800847a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800847c:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008480:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8008484:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008486:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800848a:	b123      	cbz	r3, 8008496 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800848c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008490:	4620      	mov	r0, r4
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008496:	2000      	movs	r0, #0
 8008498:	bd70      	pop	{r4, r5, r6, pc}
 800849a:	bf00      	nop

0800849c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800849c:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800849e:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80084a0:	7419      	strb	r1, [r3, #16]
}
 80084a2:	4770      	bx	lr

080084a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084a4:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084a6:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 80084a8:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80084ac:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 80084ae:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 80084b6:	4770      	bx	lr

080084b8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80084bc:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80084be:	bf04      	itt	eq
 80084c0:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80084c4:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80084c8:	2000      	movs	r0, #0
 80084ca:	4770      	bx	lr

080084cc <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084cc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80084d0:	2a03      	cmp	r2, #3
 80084d2:	d001      	beq.n	80084d8 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80084d4:	2000      	movs	r0, #0
 80084d6:	4770      	bx	lr
{
 80084d8:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 80084da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	b103      	cbz	r3, 80084e4 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80084e2:	4798      	blx	r3
}
 80084e4:	2000      	movs	r0, #0
 80084e6:	bd08      	pop	{r3, pc}

080084e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80084e8:	b530      	push	{r4, r5, lr}
 80084ea:	780b      	ldrb	r3, [r1, #0]
 80084ec:	460d      	mov	r5, r1
 80084ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f2:	2b20      	cmp	r3, #32
{
 80084f4:	4604      	mov	r4, r0
 80084f6:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f8:	d00d      	beq.n	8008516 <USBD_StdDevReq+0x2e>
 80084fa:	2b40      	cmp	r3, #64	; 0x40
 80084fc:	d00b      	beq.n	8008516 <USBD_StdDevReq+0x2e>
 80084fe:	b19b      	cbz	r3, 8008528 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8008500:	2180      	movs	r1, #128	; 0x80
 8008502:	4620      	mov	r0, r4
 8008504:	f001 f89c 	bl	8009640 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008508:	4620      	mov	r0, r4
 800850a:	2100      	movs	r1, #0
 800850c:	f001 f898 	bl	8009640 <USBD_LL_StallEP>
}
 8008510:	2000      	movs	r0, #0
 8008512:	b003      	add	sp, #12
 8008514:	bd30      	pop	{r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8008516:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800851a:	4629      	mov	r1, r5
 800851c:	4620      	mov	r0, r4
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	4798      	blx	r3
}
 8008522:	2000      	movs	r0, #0
 8008524:	b003      	add	sp, #12
 8008526:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8008528:	784b      	ldrb	r3, [r1, #1]
 800852a:	2b09      	cmp	r3, #9
 800852c:	d8e8      	bhi.n	8008500 <USBD_StdDevReq+0x18>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <USBD_StdDevReq+0x4c>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	0800858f 	.word	0x0800858f
 8008538:	080085bb 	.word	0x080085bb
 800853c:	08008501 	.word	0x08008501
 8008540:	080085d7 	.word	0x080085d7
 8008544:	08008501 	.word	0x08008501
 8008548:	080085e9 	.word	0x080085e9
 800854c:	08008623 	.word	0x08008623
 8008550:	08008501 	.word	0x08008501
 8008554:	08008659 	.word	0x08008659
 8008558:	0800855d 	.word	0x0800855d
  cfgidx = (uint8_t)(req->wValue);
 800855c:	7889      	ldrb	r1, [r1, #2]
 800855e:	4d9e      	ldr	r5, [pc, #632]	; (80087d8 <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008560:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008562:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008564:	d8cc      	bhi.n	8008500 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8008566:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800856a:	2b02      	cmp	r3, #2
 800856c:	f000 810f 	beq.w	800878e <USBD_StdDevReq+0x2a6>
 8008570:	2b03      	cmp	r3, #3
 8008572:	f000 80fb 	beq.w	800876c <USBD_StdDevReq+0x284>
  USBD_LL_StallEP(pdev, 0x80U);
 8008576:	2180      	movs	r1, #128	; 0x80
 8008578:	f001 f862 	bl	8009640 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800857c:	2100      	movs	r1, #0
 800857e:	4620      	mov	r0, r4
 8008580:	f001 f85e 	bl	8009640 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008584:	4620      	mov	r0, r4
 8008586:	7829      	ldrb	r1, [r5, #0]
 8008588:	f7ff fe8c 	bl	80082a4 <USBD_ClrClassConfig>
        break;
 800858c:	e7c0      	b.n	8008510 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800858e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008592:	3b01      	subs	r3, #1
 8008594:	2b02      	cmp	r3, #2
 8008596:	d8b3      	bhi.n	8008500 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8008598:	88cb      	ldrh	r3, [r1, #6]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d1b0      	bne.n	8008500 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800859e:	2201      	movs	r2, #1
      if (pdev->dev_remote_wakeup)
 80085a0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085a4:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80085a6:	b10b      	cbz	r3, 80085ac <USBD_StdDevReq+0xc4>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085a8:	2303      	movs	r3, #3
 80085aa:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085ac:	2202      	movs	r2, #2
 80085ae:	4620      	mov	r0, r4
 80085b0:	f104 010c 	add.w	r1, r4, #12
 80085b4:	f000 fa18 	bl	80089e8 <USBD_CtlSendData>
      break;
 80085b8:	e7aa      	b.n	8008510 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80085ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80085be:	3b01      	subs	r3, #1
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d89d      	bhi.n	8008500 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085c4:	884b      	ldrh	r3, [r1, #2]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d1a2      	bne.n	8008510 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80085d0:	f000 fa2c 	bl	8008a2c <USBD_CtlSendStatus>
 80085d4:	e79c      	b.n	8008510 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085d6:	884b      	ldrh	r3, [r1, #2]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d199      	bne.n	8008510 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 80085dc:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fa23 	bl	8008a2c <USBD_CtlSendStatus>
 80085e6:	e793      	b.n	8008510 <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085e8:	888b      	ldrh	r3, [r1, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d188      	bne.n	8008500 <USBD_StdDevReq+0x18>
 80085ee:	88cb      	ldrh	r3, [r1, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d185      	bne.n	8008500 <USBD_StdDevReq+0x18>
 80085f4:	884d      	ldrh	r5, [r1, #2]
 80085f6:	2d7f      	cmp	r5, #127	; 0x7f
 80085f8:	d882      	bhi.n	8008500 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80085fe:	2b03      	cmp	r3, #3
 8008600:	f43f af7e 	beq.w	8008500 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008604:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8008606:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800860a:	f001 f849 	bl	80096a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800860e:	4620      	mov	r0, r4
 8008610:	f000 fa0c 	bl	8008a2c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008614:	2d00      	cmp	r5, #0
 8008616:	f000 80db 	beq.w	80087d0 <USBD_StdDevReq+0x2e8>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800861a:	2302      	movs	r3, #2
 800861c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008620:	e776      	b.n	8008510 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 8008622:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 8008624:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8008626:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800862a:	0a13      	lsrs	r3, r2, #8
 800862c:	3b01      	subs	r3, #1
 800862e:	2b06      	cmp	r3, #6
 8008630:	f63f af66 	bhi.w	8008500 <USBD_StdDevReq+0x18>
 8008634:	a101      	add	r1, pc, #4	; (adr r1, 800863c <USBD_StdDevReq+0x154>)
 8008636:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	080086fd 	.word	0x080086fd
 8008640:	080086e5 	.word	0x080086e5
 8008644:	080086d3 	.word	0x080086d3
 8008648:	08008501 	.word	0x08008501
 800864c:	08008501 	.word	0x08008501
 8008650:	080086bd 	.word	0x080086bd
 8008654:	0800867d 	.word	0x0800867d
  if (req->wLength != 1U)
 8008658:	88ca      	ldrh	r2, [r1, #6]
 800865a:	2a01      	cmp	r2, #1
 800865c:	f47f af50 	bne.w	8008500 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8008660:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008664:	2b02      	cmp	r3, #2
 8008666:	d87a      	bhi.n	800875e <USBD_StdDevReq+0x276>
 8008668:	2b00      	cmp	r3, #0
 800866a:	f43f af49 	beq.w	8008500 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	4601      	mov	r1, r0
 8008672:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008676:	f000 f9b7 	bl	80089e8 <USBD_CtlSendData>
        break;
 800867a:	e749      	b.n	8008510 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800867c:	7c03      	ldrb	r3, [r0, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f47f af3e 	bne.w	8008500 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008684:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008688:	f10d 0006 	add.w	r0, sp, #6
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008690:	2307      	movs	r3, #7
 8008692:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 8008694:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008698:	b15a      	cbz	r2, 80086b2 <USBD_StdDevReq+0x1ca>
 800869a:	88eb      	ldrh	r3, [r5, #6]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d09f      	beq.n	80085e0 <USBD_StdDevReq+0xf8>
      len = MIN(len, req->wLength);
 80086a0:	429a      	cmp	r2, r3
 80086a2:	bf28      	it	cs
 80086a4:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086a6:	4601      	mov	r1, r0
 80086a8:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80086aa:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086ae:	f000 f99b 	bl	80089e8 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80086b2:	88eb      	ldrh	r3, [r5, #6]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f47f af2b 	bne.w	8008510 <USBD_StdDevReq+0x28>
 80086ba:	e791      	b.n	80085e0 <USBD_StdDevReq+0xf8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086bc:	7c03      	ldrb	r3, [r0, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f47f af1e 	bne.w	8008500 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80086c8:	f10d 0006 	add.w	r0, sp, #6
 80086cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ce:	4798      	blx	r3
  if (err != 0U)
 80086d0:	e7e0      	b.n	8008694 <USBD_StdDevReq+0x1ac>
      switch ((uint8_t)(req->wValue))
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	2a05      	cmp	r2, #5
 80086d6:	f63f af13 	bhi.w	8008500 <USBD_StdDevReq+0x18>
 80086da:	e8df f002 	tbb	[pc, r2]
 80086de:	343a      	.short	0x343a
 80086e0:	1722282e 	.word	0x1722282e
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e4:	7c03      	ldrb	r3, [r0, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d15f      	bne.n	80087aa <USBD_StdDevReq+0x2c2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80086ee:	f10d 0006 	add.w	r0, sp, #6
 80086f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086f6:	2302      	movs	r3, #2
 80086f8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80086fa:	e7cb      	b.n	8008694 <USBD_StdDevReq+0x1ac>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086fc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008700:	f10d 0106 	add.w	r1, sp, #6
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	7c00      	ldrb	r0, [r0, #16]
 8008708:	4798      	blx	r3
  if (err != 0U)
 800870a:	e7c3      	b.n	8008694 <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800870c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f43f aef4 	beq.w	8008500 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008718:	7c20      	ldrb	r0, [r4, #16]
 800871a:	f10d 0106 	add.w	r1, sp, #6
 800871e:	4798      	blx	r3
  if (err != 0U)
 8008720:	e7b8      	b.n	8008694 <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008722:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f5      	bne.n	8008718 <USBD_StdDevReq+0x230>
 800872c:	e6e8      	b.n	8008500 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800872e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1ef      	bne.n	8008718 <USBD_StdDevReq+0x230>
 8008738:	e6e2      	b.n	8008500 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800873a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e9      	bne.n	8008718 <USBD_StdDevReq+0x230>
 8008744:	e6dc      	b.n	8008500 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008746:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e3      	bne.n	8008718 <USBD_StdDevReq+0x230>
 8008750:	e6d6      	b.n	8008500 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008752:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1dd      	bne.n	8008718 <USBD_StdDevReq+0x230>
 800875c:	e6d0      	b.n	8008500 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800875e:	2b03      	cmp	r3, #3
 8008760:	f47f aece 	bne.w	8008500 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008764:	1d01      	adds	r1, r0, #4
 8008766:	f000 f93f 	bl	80089e8 <USBD_CtlSendData>
        break;
 800876a:	e6d1      	b.n	8008510 <USBD_StdDevReq+0x28>
        if (cfgidx == 0U)
 800876c:	b331      	cbz	r1, 80087bc <USBD_StdDevReq+0x2d4>
        else if (cfgidx != pdev->dev_config)
 800876e:	6841      	ldr	r1, [r0, #4]
 8008770:	2901      	cmp	r1, #1
 8008772:	f43f af35 	beq.w	80085e0 <USBD_StdDevReq+0xf8>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008776:	b2c9      	uxtb	r1, r1
 8008778:	f7ff fd94 	bl	80082a4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800877c:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800877e:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8008780:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008782:	f7ff fd85 	bl	8008290 <USBD_SetClassConfig>
 8008786:	2802      	cmp	r0, #2
 8008788:	f47f af2a 	bne.w	80085e0 <USBD_StdDevReq+0xf8>
 800878c:	e6b8      	b.n	8008500 <USBD_StdDevReq+0x18>
        if (cfgidx)
 800878e:	2900      	cmp	r1, #0
 8008790:	f43f af26 	beq.w	80085e0 <USBD_StdDevReq+0xf8>
          pdev->dev_config = cfgidx;
 8008794:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008796:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8008798:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800879a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800879e:	f7ff fd77 	bl	8008290 <USBD_SetClassConfig>
 80087a2:	2802      	cmp	r0, #2
 80087a4:	f47f af1c 	bne.w	80085e0 <USBD_StdDevReq+0xf8>
 80087a8:	e6aa      	b.n	8008500 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80087aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80087ae:	f10d 0006 	add.w	r0, sp, #6
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087b6:	2302      	movs	r3, #2
 80087b8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80087ba:	e76b      	b.n	8008694 <USBD_StdDevReq+0x1ac>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087bc:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80087be:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087c0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80087c4:	f7ff fd6e 	bl	80082a4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80087c8:	4620      	mov	r0, r4
 80087ca:	f000 f92f 	bl	8008a2c <USBD_CtlSendStatus>
 80087ce:	e69f      	b.n	8008510 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80087d6:	e69b      	b.n	8008510 <USBD_StdDevReq+0x28>
 80087d8:	200001f4 	.word	0x200001f4

080087dc <USBD_StdItfReq>:
{
 80087dc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087de:	780b      	ldrb	r3, [r1, #0]
{
 80087e0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087e2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80087e6:	2a40      	cmp	r2, #64	; 0x40
{
 80087e8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ea:	d00a      	beq.n	8008802 <USBD_StdItfReq+0x26>
 80087ec:	065b      	lsls	r3, r3, #25
 80087ee:	d508      	bpl.n	8008802 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev, 0x80U);
 80087f0:	2180      	movs	r1, #128	; 0x80
 80087f2:	f000 ff25 	bl	8009640 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80087f6:	4620      	mov	r0, r4
 80087f8:	2100      	movs	r1, #0
 80087fa:	f000 ff21 	bl	8009640 <USBD_LL_StallEP>
}
 80087fe:	2000      	movs	r0, #0
 8008800:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8008802:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8008806:	3b01      	subs	r3, #1
 8008808:	2b02      	cmp	r3, #2
 800880a:	d811      	bhi.n	8008830 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800880c:	792b      	ldrb	r3, [r5, #4]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d80e      	bhi.n	8008830 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008812:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008816:	4629      	mov	r1, r5
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	4620      	mov	r0, r4
 800881c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800881e:	88eb      	ldrh	r3, [r5, #6]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1ec      	bne.n	80087fe <USBD_StdItfReq+0x22>
 8008824:	2800      	cmp	r0, #0
 8008826:	d1ea      	bne.n	80087fe <USBD_StdItfReq+0x22>
              USBD_CtlSendStatus(pdev);
 8008828:	4620      	mov	r0, r4
 800882a:	f000 f8ff 	bl	8008a2c <USBD_CtlSendStatus>
 800882e:	e7e6      	b.n	80087fe <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev, 0x80U);
 8008830:	2180      	movs	r1, #128	; 0x80
 8008832:	4620      	mov	r0, r4
 8008834:	f000 ff04 	bl	8009640 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008838:	4620      	mov	r0, r4
 800883a:	2100      	movs	r1, #0
 800883c:	f000 ff00 	bl	8009640 <USBD_LL_StallEP>
}
 8008840:	2000      	movs	r0, #0
 8008842:	bd38      	pop	{r3, r4, r5, pc}

08008844 <USBD_StdEPReq>:
{
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	780b      	ldrb	r3, [r1, #0]
 8008848:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800884a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800884e:	2b20      	cmp	r3, #32
 8008850:	d00c      	beq.n	800886c <USBD_StdEPReq+0x28>
 8008852:	2b40      	cmp	r3, #64	; 0x40
 8008854:	d00a      	beq.n	800886c <USBD_StdEPReq+0x28>
 8008856:	b183      	cbz	r3, 800887a <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 8008858:	2180      	movs	r1, #128	; 0x80
 800885a:	4620      	mov	r0, r4
 800885c:	f000 fef0 	bl	8009640 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008860:	4620      	mov	r0, r4
 8008862:	2100      	movs	r1, #0
 8008864:	f000 feec 	bl	8009640 <USBD_LL_StallEP>
}
 8008868:	2000      	movs	r0, #0
 800886a:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 800886c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008870:	4620      	mov	r0, r4
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	4798      	blx	r3
}
 8008876:	2000      	movs	r0, #0
 8008878:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800887a:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800887c:	888a      	ldrh	r2, [r1, #4]
 800887e:	2b01      	cmp	r3, #1
 8008880:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 8008882:	d03d      	beq.n	8008900 <USBD_StdEPReq+0xbc>
 8008884:	2b03      	cmp	r3, #3
 8008886:	d02a      	beq.n	80088de <USBD_StdEPReq+0x9a>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e5      	bne.n	8008858 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 800888c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008890:	2b02      	cmp	r3, #2
 8008892:	d04e      	beq.n	8008932 <USBD_StdEPReq+0xee>
 8008894:	2b03      	cmp	r3, #3
 8008896:	d1df      	bne.n	8008858 <USBD_StdEPReq+0x14>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008898:	f005 030f 	and.w	r3, r5, #15
 800889c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80088a0:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80088a6:	d453      	bmi.n	8008950 <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088a8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0d3      	beq.n	8008858 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088b0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80088b4:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 80088b8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80088bc:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088c0:	b133      	cbz	r3, 80088d0 <USBD_StdEPReq+0x8c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80088c2:	4629      	mov	r1, r5
 80088c4:	4620      	mov	r0, r4
 80088c6:	f000 fed7 	bl	8009678 <USBD_LL_IsStallEP>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d04b      	beq.n	8008966 <USBD_StdEPReq+0x122>
                pep->status = 0x0001U;
 80088ce:	2301      	movs	r3, #1
 80088d0:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088d2:	4631      	mov	r1, r6
 80088d4:	4620      	mov	r0, r4
 80088d6:	2202      	movs	r2, #2
 80088d8:	f000 f886 	bl	80089e8 <USBD_CtlSendData>
              break;
 80088dc:	e7c4      	b.n	8008868 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80088de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d01b      	beq.n	800891e <USBD_StdEPReq+0xda>
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d1b6      	bne.n	8008858 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088ea:	884b      	ldrh	r3, [r1, #2]
 80088ec:	b923      	cbnz	r3, 80088f8 <USBD_StdEPReq+0xb4>
                if ((ep_addr != 0x00U) &&
 80088ee:	066a      	lsls	r2, r5, #25
 80088f0:	d002      	beq.n	80088f8 <USBD_StdEPReq+0xb4>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088f2:	88cb      	ldrh	r3, [r1, #6]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d038      	beq.n	800896a <USBD_StdEPReq+0x126>
              USBD_CtlSendStatus(pdev);
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 f897 	bl	8008a2c <USBD_CtlSendStatus>
              break;
 80088fe:	e7b3      	b.n	8008868 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8008900:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008904:	2b02      	cmp	r3, #2
 8008906:	d00a      	beq.n	800891e <USBD_StdEPReq+0xda>
 8008908:	2b03      	cmp	r3, #3
 800890a:	d1a5      	bne.n	8008858 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800890c:	884b      	ldrh	r3, [r1, #2]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1aa      	bne.n	8008868 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008912:	066e      	lsls	r6, r5, #25
 8008914:	d0f0      	beq.n	80088f8 <USBD_StdEPReq+0xb4>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008916:	4629      	mov	r1, r5
 8008918:	f000 fea0 	bl	800965c <USBD_LL_ClearStallEP>
 800891c:	e7ec      	b.n	80088f8 <USBD_StdEPReq+0xb4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800891e:	066b      	lsls	r3, r5, #25
 8008920:	d09a      	beq.n	8008858 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 8008922:	4629      	mov	r1, r5
 8008924:	f000 fe8c 	bl	8009640 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008928:	4620      	mov	r0, r4
 800892a:	2180      	movs	r1, #128	; 0x80
 800892c:	f000 fe88 	bl	8009640 <USBD_LL_StallEP>
 8008930:	e79a      	b.n	8008868 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008932:	0668      	lsls	r0, r5, #25
 8008934:	d190      	bne.n	8008858 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 8008936:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008938:	0611      	lsls	r1, r2, #24
 800893a:	bf4c      	ite	mi
 800893c:	f104 0114 	addmi.w	r1, r4, #20
 8008940:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008944:	4620      	mov	r0, r4
 8008946:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8008948:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800894a:	f000 f84d 	bl	80089e8 <USBD_CtlSendData>
              break;
 800894e:	e78b      	b.n	8008868 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d080      	beq.n	8008858 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008956:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800895a:	1c5e      	adds	r6, r3, #1
 800895c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8008960:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008964:	e7ac      	b.n	80088c0 <USBD_StdEPReq+0x7c>
                pep->status = 0x0000U;
 8008966:	6030      	str	r0, [r6, #0]
 8008968:	e7b3      	b.n	80088d2 <USBD_StdEPReq+0x8e>
                  USBD_LL_StallEP(pdev, ep_addr);
 800896a:	4629      	mov	r1, r5
 800896c:	f000 fe68 	bl	8009640 <USBD_LL_StallEP>
 8008970:	e7c2      	b.n	80088f8 <USBD_StdEPReq+0xb4>
 8008972:	bf00      	nop

08008974 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8008974:	780b      	ldrb	r3, [r1, #0]
 8008976:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008978:	784b      	ldrb	r3, [r1, #1]
 800897a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800897c:	78ca      	ldrb	r2, [r1, #3]
 800897e:	788b      	ldrb	r3, [r1, #2]
 8008980:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008984:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008986:	794a      	ldrb	r2, [r1, #5]
 8008988:	790b      	ldrb	r3, [r1, #4]
 800898a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800898e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008990:	79ca      	ldrb	r2, [r1, #7]
 8008992:	798b      	ldrb	r3, [r1, #6]
 8008994:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008998:	80c3      	strh	r3, [r0, #6]
}
 800899a:	4770      	bx	lr

0800899c <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800899c:	b308      	cbz	r0, 80089e2 <USBD_GetString+0x46>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800899e:	7803      	ldrb	r3, [r0, #0]
{
 80089a0:	b470      	push	{r4, r5, r6}
  while (*buf != '\0')
 80089a2:	b1fb      	cbz	r3, 80089e4 <USBD_GetString+0x48>
 80089a4:	4604      	mov	r4, r0
 80089a6:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 80089aa:	19a3      	adds	r3, r4, r6
  while (*buf != '\0')
 80089ac:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2d00      	cmp	r5, #0
 80089b4:	d1f9      	bne.n	80089aa <USBD_GetString+0xe>
 80089b6:	3301      	adds	r3, #1
 80089b8:	005b      	lsls	r3, r3, #1
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089ba:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089bc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80089be:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089c0:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 80089c2:	7804      	ldrb	r4, [r0, #0]
 80089c4:	b15c      	cbz	r4, 80089de <USBD_GetString+0x42>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089c6:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80089c8:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	b2d2      	uxtb	r2, r2
 80089ce:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 80089d0:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 80089d2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 80089d6:	3302      	adds	r3, #2
 80089d8:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 80089da:	2c00      	cmp	r4, #0
 80089dc:	d1f5      	bne.n	80089ca <USBD_GetString+0x2e>
}
 80089de:	bc70      	pop	{r4, r5, r6}
 80089e0:	4770      	bx	lr
 80089e2:	4770      	bx	lr
  while (*buf != '\0')
 80089e4:	2302      	movs	r3, #2
 80089e6:	e7e8      	b.n	80089ba <USBD_GetString+0x1e>

080089e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089ec:	2502      	movs	r5, #2
{
 80089ee:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80089f0:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089f6:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089fa:	f000 fe5f 	bl	80096bc <USBD_LL_Transmit>

  return USBD_OK;
}
 80089fe:	2000      	movs	r0, #0
 8008a00:	bd38      	pop	{r3, r4, r5, pc}
 8008a02:	bf00      	nop

08008a04 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a04:	b510      	push	{r4, lr}
 8008a06:	460c      	mov	r4, r1
 8008a08:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	f000 fe55 	bl	80096bc <USBD_LL_Transmit>

  return USBD_OK;
}
 8008a12:	2000      	movs	r0, #0
 8008a14:	bd10      	pop	{r4, pc}
 8008a16:	bf00      	nop

08008a18 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a1e:	2100      	movs	r1, #0
 8008a20:	4622      	mov	r2, r4
 8008a22:	f000 fe59 	bl	80096d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a26:	2000      	movs	r0, #0
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop

08008a2c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a2c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a2e:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a30:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a32:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a36:	4619      	mov	r1, r3
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f000 fe3f 	bl	80096bc <USBD_LL_Transmit>

  return USBD_OK;
}
 8008a3e:	2000      	movs	r0, #0
 8008a40:	bd08      	pop	{r3, pc}
 8008a42:	bf00      	nop

08008a44 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a44:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a46:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a48:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a4a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a4e:	4619      	mov	r1, r3
 8008a50:	461a      	mov	r2, r3
 8008a52:	f000 fe41 	bl	80096d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a56:	2000      	movs	r0, #0
 8008a58:	bd08      	pop	{r3, pc}
 8008a5a:	bf00      	nop

08008a5c <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	bf14      	ite	ne
 8008a60:	22ff      	movne	r2, #255	; 0xff
 8008a62:	2200      	moveq	r2, #0
 8008a64:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <ssd1306_Fill+0x18>)
 8008a66:	f503 6182 	add.w	r1, r3, #1040	; 0x410
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008a6a:	f803 2f01 	strb.w	r2, [r3, #1]!
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008a6e:	428b      	cmp	r3, r1
 8008a70:	d1fb      	bne.n	8008a6a <ssd1306_Fill+0xe>
    }
}
 8008a72:	4770      	bx	lr
 8008a74:	200001ff 	.word	0x200001ff

08008a78 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8008a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	25b0      	movs	r5, #176	; 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008a7e:	f04f 0a00 	mov.w	sl, #0
void ssd1306_UpdateScreen(void) {
 8008a82:	b086      	sub	sp, #24
 8008a84:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8008b0c <ssd1306_UpdateScreen+0x94>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008a88:	4f1f      	ldr	r7, [pc, #124]	; (8008b08 <ssd1306_UpdateScreen+0x90>)
 8008a8a:	f10d 0817 	add.w	r8, sp, #23
 8008a8e:	2401      	movs	r4, #1
 8008a90:	f04f 36ff 	mov.w	r6, #4294967295
 8008a94:	4623      	mov	r3, r4
 8008a96:	2200      	movs	r2, #0
 8008a98:	2178      	movs	r1, #120	; 0x78
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8008aa0:	f8cd 8000 	str.w	r8, [sp]
 8008aa4:	f88d 5017 	strb.w	r5, [sp, #23]
 8008aa8:	f7fc fafe 	bl	80050a8 <HAL_I2C_Mem_Write>
 8008aac:	4623      	mov	r3, r4
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2178      	movs	r1, #120	; 0x78
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8008ab8:	f8cd 8000 	str.w	r8, [sp]
 8008abc:	f88d a017 	strb.w	sl, [sp, #23]
 8008ac0:	f7fc faf2 	bl	80050a8 <HAL_I2C_Mem_Write>
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
 8008ac4:	f04f 0c10 	mov.w	ip, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008ac8:	4623      	mov	r3, r4
 8008aca:	2200      	movs	r2, #0
 8008acc:	2178      	movs	r1, #120	; 0x78
 8008ace:	4638      	mov	r0, r7
 8008ad0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8008ad4:	f8cd 8000 	str.w	r8, [sp]
 8008ad8:	f88d c017 	strb.w	ip, [sp, #23]
 8008adc:	f7fc fae4 	bl	80050a8 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8008ae0:	2282      	movs	r2, #130	; 0x82
 8008ae2:	4425      	add	r5, r4
 8008ae4:	e9cd 9200 	strd	r9, r2, [sp]
 8008ae8:	4623      	mov	r3, r4
 8008aea:	2240      	movs	r2, #64	; 0x40
 8008aec:	2178      	movs	r1, #120	; 0x78
 8008aee:	4638      	mov	r0, r7
 8008af0:	9602      	str	r6, [sp, #8]
 8008af2:	b2ed      	uxtb	r5, r5
 8008af4:	f7fc fad8 	bl	80050a8 <HAL_I2C_Mem_Write>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008af8:	2db8      	cmp	r5, #184	; 0xb8
 8008afa:	f109 0982 	add.w	r9, r9, #130	; 0x82
 8008afe:	d1c6      	bne.n	8008a8e <ssd1306_UpdateScreen+0x16>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }
}
 8008b00:	b006      	add	sp, #24
 8008b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b06:	bf00      	nop
 8008b08:	20000a20 	.word	0x20000a20
 8008b0c:	20000200 	.word	0x20000200

08008b10 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8008b10:	2881      	cmp	r0, #129	; 0x81
 8008b12:	d81b      	bhi.n	8008b4c <ssd1306_DrawPixel+0x3c>
 8008b14:	293f      	cmp	r1, #63	; 0x3f
 8008b16:	d819      	bhi.n	8008b4c <ssd1306_DrawPixel+0x3c>
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8008b18:	b410      	push	{r4}
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8008b1a:	4b14      	ldr	r3, [pc, #80]	; (8008b6c <ssd1306_DrawPixel+0x5c>)
 8008b1c:	791b      	ldrb	r3, [r3, #4]
 8008b1e:	b113      	cbz	r3, 8008b26 <ssd1306_DrawPixel+0x16>
        color = (SSD1306_COLOR)!color;
 8008b20:	fab2 f282 	clz	r2, r2
 8008b24:	0952      	lsrs	r2, r2, #5
    }
    
    // Draw in the right color
    if(color == White) {
 8008b26:	2a01      	cmp	r2, #1
 8008b28:	d011      	beq.n	8008b4e <ssd1306_DrawPixel+0x3e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	08cb      	lsrs	r3, r1, #3
 8008b2e:	4c10      	ldr	r4, [pc, #64]	; (8008b70 <ssd1306_DrawPixel+0x60>)
 8008b30:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8008b34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008b38:	5c23      	ldrb	r3, [r4, r0]
 8008b3a:	f001 0107 	and.w	r1, r1, #7
 8008b3e:	fa02 f101 	lsl.w	r1, r2, r1
 8008b42:	ea23 0101 	bic.w	r1, r3, r1
 8008b46:	5421      	strb	r1, [r4, r0]
    }
}
 8008b48:	bc10      	pop	{r4}
 8008b4a:	4770      	bx	lr
 8008b4c:	4770      	bx	lr
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008b4e:	08cb      	lsrs	r3, r1, #3
 8008b50:	4c07      	ldr	r4, [pc, #28]	; (8008b70 <ssd1306_DrawPixel+0x60>)
 8008b52:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8008b56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008b5a:	5c23      	ldrb	r3, [r4, r0]
 8008b5c:	f001 0107 	and.w	r1, r1, #7
 8008b60:	408a      	lsls	r2, r1
 8008b62:	431a      	orrs	r2, r3
 8008b64:	5422      	strb	r2, [r4, r0]
}
 8008b66:	bc10      	pop	{r4}
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	200001f8 	.word	0x200001f8
 8008b70:	20000200 	.word	0x20000200

08008b74 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	9000      	str	r0, [sp, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8008b7c:	3820      	subs	r0, #32
 8008b7e:	b2c4      	uxtb	r4, r0
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008b80:	461e      	mov	r6, r3
    if (ch < 32 || ch > 126)
 8008b82:	2c5e      	cmp	r4, #94	; 0x5e
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008b84:	ab04      	add	r3, sp, #16
 8008b86:	e903 0006 	stmdb	r3, {r1, r2}
    if (ch < 32 || ch > 126)
 8008b8a:	d845      	bhi.n	8008c18 <ssd1306_WriteChar+0xa4>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008b8c:	4924      	ldr	r1, [pc, #144]	; (8008c20 <ssd1306_WriteChar+0xac>)
 8008b8e:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8008b92:	f8b1 9000 	ldrh.w	r9, [r1]
 8008b96:	eb09 0305 	add.w	r3, r9, r5
 8008b9a:	2b82      	cmp	r3, #130	; 0x82
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	dc3b      	bgt.n	8008c18 <ssd1306_WriteChar+0xa4>
 8008ba0:	f89d 2009 	ldrb.w	r2, [sp, #9]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8008ba4:	8849      	ldrh	r1, [r1, #2]
 8008ba6:	188c      	adds	r4, r1, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008ba8:	2c40      	cmp	r4, #64	; 0x40
 8008baa:	dc35      	bgt.n	8008c18 <ssd1306_WriteChar+0xa4>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8008bac:	b36a      	cbz	r2, 8008c0a <ssd1306_WriteChar+0x96>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008bae:	fb02 f000 	mul.w	r0, r2, r0
 8008bb2:	9f03      	ldr	r7, [sp, #12]
 8008bb4:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8008bb8:	3c01      	subs	r4, #1
 8008bba:	4410      	add	r0, r2
 8008bbc:	f1a7 0a02 	sub.w	sl, r7, #2
 8008bc0:	fa5f fb81 	uxtb.w	fp, r1
 8008bc4:	eb07 0844 	add.w	r8, r7, r4, lsl #1
 8008bc8:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
        for(j = 0; j < Font.FontWidth; j++) {
 8008bcc:	2400      	movs	r4, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008bce:	f838 7f02 	ldrh.w	r7, [r8, #2]!
        for(j = 0; j < Font.FontWidth; j++) {
 8008bd2:	b1a5      	cbz	r5, 8008bfe <ssd1306_WriteChar+0x8a>
            if((b << j) & 0x8000)  {
 8008bd4:	fa07 f304 	lsl.w	r3, r7, r4
 8008bd8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008bdc:	eb09 0004 	add.w	r0, r9, r4
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008be0:	4601      	mov	r1, r0
 8008be2:	bf0c      	ite	eq
 8008be4:	fab6 f286 	clzeq	r2, r6
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008be8:	4632      	movne	r2, r6
 8008bea:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008bec:	bf04      	itt	eq
 8008bee:	0952      	lsreq	r2, r2, #5
 8008bf0:	b2c8      	uxtbeq	r0, r1
        for(j = 0; j < Font.FontWidth; j++) {
 8008bf2:	3401      	adds	r4, #1
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008bf4:	4659      	mov	r1, fp
 8008bf6:	f7ff ff8b 	bl	8008b10 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8008bfa:	42ac      	cmp	r4, r5
 8008bfc:	d1ea      	bne.n	8008bd4 <ssd1306_WriteChar+0x60>
    for(i = 0; i < Font.FontHeight; i++) {
 8008bfe:	f10b 0b01 	add.w	fp, fp, #1
 8008c02:	45d0      	cmp	r8, sl
 8008c04:	fa5f fb8b 	uxtb.w	fp, fp
 8008c08:	d1e0      	bne.n	8008bcc <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008c0a:	4b05      	ldr	r3, [pc, #20]	; (8008c20 <ssd1306_WriteChar+0xac>)
 8008c0c:	9a01      	ldr	r2, [sp, #4]
    
    // Return written char for validation
    return ch;
 8008c0e:	9800      	ldr	r0, [sp, #0]
    SSD1306.CurrentX += Font.FontWidth;
 8008c10:	801a      	strh	r2, [r3, #0]
}
 8008c12:	b005      	add	sp, #20
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8008c18:	2000      	movs	r0, #0
}
 8008c1a:	b005      	add	sp, #20
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	200001f8 	.word	0x200001f8

08008c24 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	466d      	mov	r5, sp
 8008c2a:	4604      	mov	r4, r0
    // Write until null-byte
    while (*str) {
 8008c2c:	7800      	ldrb	r0, [r0, #0]
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008c2e:	e885 0006 	stmia.w	r5, {r1, r2}
    while (*str) {
 8008c32:	b178      	cbz	r0, 8008c54 <ssd1306_WriteString+0x30>
 8008c34:	461e      	mov	r6, r3
 8008c36:	e002      	b.n	8008c3e <ssd1306_WriteString+0x1a>
 8008c38:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8008c3c:	b150      	cbz	r0, 8008c54 <ssd1306_WriteString+0x30>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8008c3e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8008c42:	4633      	mov	r3, r6
 8008c44:	f7ff ff96 	bl	8008b74 <ssd1306_WriteChar>
 8008c48:	7822      	ldrb	r2, [r4, #0]
 8008c4a:	4290      	cmp	r0, r2
 8008c4c:	d0f4      	beq.n	8008c38 <ssd1306_WriteString+0x14>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8008c4e:	4610      	mov	r0, r2
 8008c50:	b002      	add	sp, #8
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008c54:	2200      	movs	r2, #0
}
 8008c56:	4610      	mov	r0, r2
 8008c58:	b002      	add	sp, #8
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}

08008c5c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8008c5c:	4b01      	ldr	r3, [pc, #4]	; (8008c64 <ssd1306_SetCursor+0x8>)
 8008c5e:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8008c60:	8059      	strh	r1, [r3, #2]
}
 8008c62:	4770      	bx	lr
 8008c64:	200001f8 	.word	0x200001f8

08008c68 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8008c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008c6c:	2401      	movs	r4, #1
 8008c6e:	f04f 38ff 	mov.w	r8, #4294967295
 8008c72:	f04f 0c81 	mov.w	ip, #129	; 0x81
void ssd1306_SetContrast(const uint8_t value) {
 8008c76:	4605      	mov	r5, r0
 8008c78:	b086      	sub	sp, #24
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008c7a:	4e0e      	ldr	r6, [pc, #56]	; (8008cb4 <ssd1306_SetContrast+0x4c>)
 8008c7c:	f10d 0717 	add.w	r7, sp, #23
 8008c80:	4623      	mov	r3, r4
 8008c82:	4630      	mov	r0, r6
 8008c84:	2200      	movs	r2, #0
 8008c86:	2178      	movs	r1, #120	; 0x78
 8008c88:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8008c8c:	9700      	str	r7, [sp, #0]
 8008c8e:	f88d c017 	strb.w	ip, [sp, #23]
 8008c92:	f7fc fa09 	bl	80050a8 <HAL_I2C_Mem_Write>
 8008c96:	4623      	mov	r3, r4
 8008c98:	4630      	mov	r0, r6
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2178      	movs	r1, #120	; 0x78
 8008c9e:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8008ca2:	9700      	str	r7, [sp, #0]
 8008ca4:	f88d 5017 	strb.w	r5, [sp, #23]
 8008ca8:	f7fc f9fe 	bl	80050a8 <HAL_I2C_Mem_Write>
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
    ssd1306_WriteCommand(value);
}
 8008cac:	b006      	add	sp, #24
 8008cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000a20 	.word	0x20000a20

08008cb8 <ssd1306_SetDisplayOn>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008cb8:	2301      	movs	r3, #1
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 8008cba:	2800      	cmp	r0, #0
void ssd1306_SetDisplayOn(const uint8_t on) {
 8008cbc:	b530      	push	{r4, r5, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008cbe:	f04f 31ff 	mov.w	r1, #4294967295
    if (on) {
 8008cc2:	4604      	mov	r4, r0
        value = 0xAE;   // Display off
 8008cc4:	bf16      	itet	ne
 8008cc6:	20af      	movne	r0, #175	; 0xaf
 8008cc8:	20ae      	moveq	r0, #174	; 0xae
 8008cca:	461c      	movne	r4, r3
void ssd1306_SetDisplayOn(const uint8_t on) {
 8008ccc:	b087      	sub	sp, #28
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008cce:	f10d 0217 	add.w	r2, sp, #23
 8008cd2:	4d07      	ldr	r5, [pc, #28]	; (8008cf0 <ssd1306_SetDisplayOn+0x38>)
 8008cd4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008cd8:	9200      	str	r2, [sp, #0]
 8008cda:	f88d 0017 	strb.w	r0, [sp, #23]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2178      	movs	r1, #120	; 0x78
 8008ce2:	4804      	ldr	r0, [pc, #16]	; (8008cf4 <ssd1306_SetDisplayOn+0x3c>)
 8008ce4:	71ac      	strb	r4, [r5, #6]
 8008ce6:	f7fc f9df 	bl	80050a8 <HAL_I2C_Mem_Write>
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
}
 8008cea:	b007      	add	sp, #28
 8008cec:	bd30      	pop	{r4, r5, pc}
 8008cee:	bf00      	nop
 8008cf0:	200001f8 	.word	0x200001f8
 8008cf4:	20000a20 	.word	0x20000a20

08008cf8 <ssd1306_Init>:
void ssd1306_Init(void) {
 8008cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfc:	2600      	movs	r6, #0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008cfe:	2501      	movs	r5, #1
 8008d00:	f04f 38ff 	mov.w	r8, #4294967295
 8008d04:	2420      	movs	r4, #32
void ssd1306_Init(void) {
 8008d06:	b086      	sub	sp, #24
    HAL_Delay(100);
 8008d08:	2064      	movs	r0, #100	; 0x64
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d0a:	f10d 0717 	add.w	r7, sp, #23
    HAL_Delay(100);
 8008d0e:	f7fb fa99 	bl	8004244 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7ff ffd0 	bl	8008cb8 <ssd1306_SetDisplayOn>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d18:	462b      	mov	r3, r5
 8008d1a:	4632      	mov	r2, r6
 8008d1c:	2178      	movs	r1, #120	; 0x78
 8008d1e:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d22:	489f      	ldr	r0, [pc, #636]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008d24:	9700      	str	r7, [sp, #0]
 8008d26:	f88d 4017 	strb.w	r4, [sp, #23]
 8008d2a:	f7fc f9bd 	bl	80050a8 <HAL_I2C_Mem_Write>
 8008d2e:	462b      	mov	r3, r5
 8008d30:	4632      	mov	r2, r6
 8008d32:	2178      	movs	r1, #120	; 0x78
 8008d34:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d38:	4899      	ldr	r0, [pc, #612]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008d3a:	9700      	str	r7, [sp, #0]
 8008d3c:	f88d 6017 	strb.w	r6, [sp, #23]
 8008d40:	f7fc f9b2 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008d44:	f04f 0cb0 	mov.w	ip, #176	; 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d48:	462b      	mov	r3, r5
 8008d4a:	4632      	mov	r2, r6
 8008d4c:	2178      	movs	r1, #120	; 0x78
 8008d4e:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d52:	4893      	ldr	r0, [pc, #588]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008d54:	9700      	str	r7, [sp, #0]
 8008d56:	f88d c017 	strb.w	ip, [sp, #23]
 8008d5a:	f7fc f9a5 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8008d5e:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d62:	462b      	mov	r3, r5
 8008d64:	4632      	mov	r2, r6
 8008d66:	2178      	movs	r1, #120	; 0x78
 8008d68:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d6c:	488c      	ldr	r0, [pc, #560]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008d6e:	9700      	str	r7, [sp, #0]
 8008d70:	f88d c017 	strb.w	ip, [sp, #23]
 8008d74:	f7fc f998 	bl	80050a8 <HAL_I2C_Mem_Write>
 8008d78:	462b      	mov	r3, r5
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	2178      	movs	r1, #120	; 0x78
 8008d7e:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d82:	4887      	ldr	r0, [pc, #540]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008d84:	9700      	str	r7, [sp, #0]
 8008d86:	f88d 6017 	strb.w	r6, [sp, #23]
 8008d8a:	f7fc f98d 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x10); //---set high column address
 8008d8e:	f04f 0c10 	mov.w	ip, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d92:	462b      	mov	r3, r5
 8008d94:	4632      	mov	r2, r6
 8008d96:	2178      	movs	r1, #120	; 0x78
 8008d98:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d9c:	4880      	ldr	r0, [pc, #512]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008d9e:	9700      	str	r7, [sp, #0]
 8008da0:	f88d c017 	strb.w	ip, [sp, #23]
 8008da4:	f7fc f980 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8008da8:	f04f 0c40 	mov.w	ip, #64	; 0x40
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008dac:	462b      	mov	r3, r5
 8008dae:	4632      	mov	r2, r6
 8008db0:	2178      	movs	r1, #120	; 0x78
 8008db2:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008db6:	487a      	ldr	r0, [pc, #488]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008db8:	9700      	str	r7, [sp, #0]
 8008dba:	f88d c017 	strb.w	ip, [sp, #23]
 8008dbe:	f7fc f973 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_SetContrast(0xFF);
 8008dc2:	20ff      	movs	r0, #255	; 0xff
 8008dc4:	f7ff ff50 	bl	8008c68 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8008dc8:	f04f 0ca1 	mov.w	ip, #161	; 0xa1
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008dcc:	462b      	mov	r3, r5
 8008dce:	4632      	mov	r2, r6
 8008dd0:	2178      	movs	r1, #120	; 0x78
 8008dd2:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008dd6:	4872      	ldr	r0, [pc, #456]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008dd8:	9700      	str	r7, [sp, #0]
 8008dda:	f88d c017 	strb.w	ip, [sp, #23]
 8008dde:	f7fc f963 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8008de2:	f04f 0ca6 	mov.w	ip, #166	; 0xa6
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008de6:	462b      	mov	r3, r5
 8008de8:	4632      	mov	r2, r6
 8008dea:	2178      	movs	r1, #120	; 0x78
 8008dec:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008df0:	486b      	ldr	r0, [pc, #428]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008df2:	9700      	str	r7, [sp, #0]
 8008df4:	f88d c017 	strb.w	ip, [sp, #23]
 8008df8:	f7fc f956 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008dfc:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e00:	462b      	mov	r3, r5
 8008e02:	4632      	mov	r2, r6
 8008e04:	2178      	movs	r1, #120	; 0x78
 8008e06:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e0a:	4865      	ldr	r0, [pc, #404]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008e0c:	9700      	str	r7, [sp, #0]
 8008e0e:	f88d c017 	strb.w	ip, [sp, #23]
 8008e12:	f7fc f949 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x3F); //
 8008e16:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e1a:	462b      	mov	r3, r5
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	2178      	movs	r1, #120	; 0x78
 8008e20:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e24:	485e      	ldr	r0, [pc, #376]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008e26:	9700      	str	r7, [sp, #0]
 8008e28:	f88d c017 	strb.w	ip, [sp, #23]
 8008e2c:	f7fc f93c 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008e30:	f04f 0ca4 	mov.w	ip, #164	; 0xa4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e34:	462b      	mov	r3, r5
 8008e36:	4632      	mov	r2, r6
 8008e38:	2178      	movs	r1, #120	; 0x78
 8008e3a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e3e:	4858      	ldr	r0, [pc, #352]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008e40:	9700      	str	r7, [sp, #0]
 8008e42:	f88d c017 	strb.w	ip, [sp, #23]
 8008e46:	f7fc f92f 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8008e4a:	f04f 0cd3 	mov.w	ip, #211	; 0xd3
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e4e:	462b      	mov	r3, r5
 8008e50:	4632      	mov	r2, r6
 8008e52:	2178      	movs	r1, #120	; 0x78
 8008e54:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e58:	4851      	ldr	r0, [pc, #324]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008e5a:	9700      	str	r7, [sp, #0]
 8008e5c:	f88d c017 	strb.w	ip, [sp, #23]
 8008e60:	f7fc f922 	bl	80050a8 <HAL_I2C_Mem_Write>
 8008e64:	462b      	mov	r3, r5
 8008e66:	4632      	mov	r2, r6
 8008e68:	2178      	movs	r1, #120	; 0x78
 8008e6a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e6e:	484c      	ldr	r0, [pc, #304]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008e70:	9700      	str	r7, [sp, #0]
 8008e72:	f88d 6017 	strb.w	r6, [sp, #23]
 8008e76:	f7fc f917 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8008e7a:	f04f 0cd5 	mov.w	ip, #213	; 0xd5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e7e:	462b      	mov	r3, r5
 8008e80:	4632      	mov	r2, r6
 8008e82:	2178      	movs	r1, #120	; 0x78
 8008e84:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e88:	4845      	ldr	r0, [pc, #276]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008e8a:	9700      	str	r7, [sp, #0]
 8008e8c:	f88d c017 	strb.w	ip, [sp, #23]
 8008e90:	f7fc f90a 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8008e94:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e98:	462b      	mov	r3, r5
 8008e9a:	4632      	mov	r2, r6
 8008e9c:	2178      	movs	r1, #120	; 0x78
 8008e9e:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008ea2:	483f      	ldr	r0, [pc, #252]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008ea4:	9700      	str	r7, [sp, #0]
 8008ea6:	f88d c017 	strb.w	ip, [sp, #23]
 8008eaa:	f7fc f8fd 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8008eae:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008eb2:	462b      	mov	r3, r5
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	2178      	movs	r1, #120	; 0x78
 8008eb8:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008ebc:	4838      	ldr	r0, [pc, #224]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008ebe:	9700      	str	r7, [sp, #0]
 8008ec0:	f88d c017 	strb.w	ip, [sp, #23]
 8008ec4:	f7fc f8f0 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x22); //
 8008ec8:	f04f 0c22 	mov.w	ip, #34	; 0x22
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008ecc:	462b      	mov	r3, r5
 8008ece:	4632      	mov	r2, r6
 8008ed0:	2178      	movs	r1, #120	; 0x78
 8008ed2:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008ed6:	4832      	ldr	r0, [pc, #200]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008ed8:	9700      	str	r7, [sp, #0]
 8008eda:	f88d c017 	strb.w	ip, [sp, #23]
 8008ede:	f7fc f8e3 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8008ee2:	f04f 0cda 	mov.w	ip, #218	; 0xda
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008ee6:	462b      	mov	r3, r5
 8008ee8:	4632      	mov	r2, r6
 8008eea:	2178      	movs	r1, #120	; 0x78
 8008eec:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008ef0:	482b      	ldr	r0, [pc, #172]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008ef2:	9700      	str	r7, [sp, #0]
 8008ef4:	f88d c017 	strb.w	ip, [sp, #23]
 8008ef8:	f7fc f8d6 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x12);
 8008efc:	f04f 0c12 	mov.w	ip, #18
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008f00:	462b      	mov	r3, r5
 8008f02:	4632      	mov	r2, r6
 8008f04:	2178      	movs	r1, #120	; 0x78
 8008f06:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f0a:	4825      	ldr	r0, [pc, #148]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008f0c:	9700      	str	r7, [sp, #0]
 8008f0e:	f88d c017 	strb.w	ip, [sp, #23]
 8008f12:	f7fc f8c9 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8008f16:	f04f 0cdb 	mov.w	ip, #219	; 0xdb
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008f1a:	462b      	mov	r3, r5
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	2178      	movs	r1, #120	; 0x78
 8008f20:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f24:	481e      	ldr	r0, [pc, #120]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008f26:	9700      	str	r7, [sp, #0]
 8008f28:	f88d c017 	strb.w	ip, [sp, #23]
 8008f2c:	f7fc f8bc 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8008f30:	f88d 4017 	strb.w	r4, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008f34:	248d      	movs	r4, #141	; 0x8d
 8008f36:	462b      	mov	r3, r5
 8008f38:	4632      	mov	r2, r6
 8008f3a:	2178      	movs	r1, #120	; 0x78
 8008f3c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f40:	4817      	ldr	r0, [pc, #92]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008f42:	9700      	str	r7, [sp, #0]
 8008f44:	f7fc f8b0 	bl	80050a8 <HAL_I2C_Mem_Write>
 8008f48:	462b      	mov	r3, r5
 8008f4a:	4632      	mov	r2, r6
 8008f4c:	2178      	movs	r1, #120	; 0x78
 8008f4e:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f52:	4813      	ldr	r0, [pc, #76]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008f54:	9700      	str	r7, [sp, #0]
 8008f56:	f88d 4017 	strb.w	r4, [sp, #23]
 8008f5a:	f7fc f8a5 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x14); //
 8008f5e:	f04f 0c14 	mov.w	ip, #20
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008f62:	4634      	mov	r4, r6
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008f64:	462b      	mov	r3, r5
 8008f66:	4632      	mov	r2, r6
 8008f68:	2178      	movs	r1, #120	; 0x78
 8008f6a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f6e:	480c      	ldr	r0, [pc, #48]	; (8008fa0 <ssd1306_Init+0x2a8>)
 8008f70:	9700      	str	r7, [sp, #0]
 8008f72:	f88d c017 	strb.w	ip, [sp, #23]
 8008f76:	f7fc f897 	bl	80050a8 <HAL_I2C_Mem_Write>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f7ff fe9c 	bl	8008cb8 <ssd1306_SetDisplayOn>
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008f80:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <ssd1306_Init+0x2ac>)
 8008f82:	f503 6282 	add.w	r2, r3, #1040	; 0x410
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008f86:	f803 4f01 	strb.w	r4, [r3, #1]!
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d1fb      	bne.n	8008f86 <ssd1306_Init+0x28e>
    ssd1306_UpdateScreen();
 8008f8e:	f7ff fd73 	bl	8008a78 <ssd1306_UpdateScreen>
    SSD1306.Initialized = 1;
 8008f92:	2201      	movs	r2, #1
    SSD1306.CurrentX = 0;
 8008f94:	4b04      	ldr	r3, [pc, #16]	; (8008fa8 <ssd1306_Init+0x2b0>)
    SSD1306.Initialized = 1;
 8008f96:	715a      	strb	r2, [r3, #5]
    SSD1306.CurrentX = 0;
 8008f98:	601c      	str	r4, [r3, #0]
}
 8008f9a:	b006      	add	sp, #24
 8008f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa0:	20000a20 	.word	0x20000a20
 8008fa4:	200001ff 	.word	0x200001ff
 8008fa8:	200001f8 	.word	0x200001f8

08008fac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

	// This is a bit hackey, but we don't want to register the USB sound device, just the MIDI device.
	// So we register that class then return.

  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	490a      	ldr	r1, [pc, #40]	; (8008fdc <MX_USB_DEVICE_Init+0x30>)
 8008fb2:	480b      	ldr	r0, [pc, #44]	; (8008fe0 <MX_USB_DEVICE_Init+0x34>)
 8008fb4:	f7ff f948 	bl	8008248 <USBD_Init>
 8008fb8:	b960      	cbnz	r0, 8008fd4 <MX_USB_DEVICE_Init+0x28>
  {
	Error_Handler();
  }

	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8008fba:	490a      	ldr	r1, [pc, #40]	; (8008fe4 <MX_USB_DEVICE_Init+0x38>)
 8008fbc:	4808      	ldr	r0, [pc, #32]	; (8008fe0 <MX_USB_DEVICE_Init+0x34>)
 8008fbe:	f7ff f959 	bl	8008274 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8008fc2:	4909      	ldr	r1, [pc, #36]	; (8008fe8 <MX_USB_DEVICE_Init+0x3c>)
 8008fc4:	4806      	ldr	r0, [pc, #24]	; (8008fe0 <MX_USB_DEVICE_Init+0x34>)
 8008fc6:	f7ff f937 	bl	8008238 <USBD_MIDI_RegisterInterface>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */


  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	USBD_Start(&hUsbDeviceFS);
 8008fce:	4804      	ldr	r0, [pc, #16]	; (8008fe0 <MX_USB_DEVICE_Init+0x34>)
 8008fd0:	f7ff b958 	b.w	8008284 <USBD_Start>
	Error_Handler();
 8008fd4:	f7fa faf0 	bl	80035b8 <Error_Handler>
 8008fd8:	e7ef      	b.n	8008fba <MX_USB_DEVICE_Init+0xe>
 8008fda:	bf00      	nop
 8008fdc:	20000168 	.word	0x20000168
 8008fe0:	20000d90 	.word	0x20000d90
 8008fe4:	200000b8 	.word	0x200000b8
 8008fe8:	200001b8 	.word	0x200001b8

08008fec <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fec:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8008fee:	4801      	ldr	r0, [pc, #4]	; (8008ff4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ff0:	800b      	strh	r3, [r1, #0]
}
 8008ff2:	4770      	bx	lr
 8008ff4:	20000184 	.word	0x20000184

08008ff8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ff8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8008ffa:	4801      	ldr	r0, [pc, #4]	; (8009000 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8008ffc:	800b      	strh	r3, [r1, #0]
}
 8008ffe:	4770      	bx	lr
 8009000:	20000198 	.word	0x20000198

08009004 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009004:	2300      	movs	r3, #0
 8009006:	b4f0      	push	{r4, r5, r6, r7}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009008:	461f      	mov	r7, r3
 800900a:	0052      	lsls	r2, r2, #1
 800900c:	1c4e      	adds	r6, r1, #1
    if (((value >> 28)) < 0xA)
 800900e:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8009012:	ea4f 7410 	mov.w	r4, r0, lsr #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8009016:	f104 0530 	add.w	r5, r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800901a:	bf2a      	itet	cs
 800901c:	3437      	addcs	r4, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800901e:	54cd      	strbcc	r5, [r1, r3]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009020:	54cc      	strbcs	r4, [r1, r3]
    pbuf[2 * idx + 1] = 0;
 8009022:	54f7      	strb	r7, [r6, r3]
 8009024:	3302      	adds	r3, #2
  for (idx = 0; idx < len; idx++)
 8009026:	429a      	cmp	r2, r3
    value = value << 4;
 8009028:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800902c:	d1ef      	bne.n	800900e <IntToUnicode+0xa>
  }
}
 800902e:	bcf0      	pop	{r4, r5, r6, r7}
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop

08009034 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8009034:	221a      	movs	r2, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009036:	480b      	ldr	r0, [pc, #44]	; (8009064 <USBD_FS_SerialStrDescriptor+0x30>)
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009038:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800903a:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 800903c:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800903e:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 8009040:	18c0      	adds	r0, r0, r3
 8009042:	d101      	bne.n	8009048 <USBD_FS_SerialStrDescriptor+0x14>
}
 8009044:	4809      	ldr	r0, [pc, #36]	; (800906c <USBD_FS_SerialStrDescriptor+0x38>)
 8009046:	4770      	bx	lr
{
 8009048:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800904a:	4b09      	ldr	r3, [pc, #36]	; (8009070 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800904c:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800904e:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009050:	4908      	ldr	r1, [pc, #32]	; (8009074 <USBD_FS_SerialStrDescriptor+0x40>)
 8009052:	f7ff ffd7 	bl	8009004 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009056:	4620      	mov	r0, r4
 8009058:	2204      	movs	r2, #4
 800905a:	4907      	ldr	r1, [pc, #28]	; (8009078 <USBD_FS_SerialStrDescriptor+0x44>)
 800905c:	f7ff ffd2 	bl	8009004 <IntToUnicode>
}
 8009060:	4802      	ldr	r0, [pc, #8]	; (800906c <USBD_FS_SerialStrDescriptor+0x38>)
 8009062:	bd10      	pop	{r4, pc}
 8009064:	1ffff7e8 	.word	0x1ffff7e8
 8009068:	1ffff7f0 	.word	0x1ffff7f0
 800906c:	2000019c 	.word	0x2000019c
 8009070:	1ffff7ec 	.word	0x1ffff7ec
 8009074:	2000019e 	.word	0x2000019e
 8009078:	200001ae 	.word	0x200001ae

0800907c <USBD_FS_ManufacturerStrDescriptor>:
{
 800907c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800907e:	4c04      	ldr	r4, [pc, #16]	; (8009090 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8009080:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009082:	4804      	ldr	r0, [pc, #16]	; (8009094 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8009084:	4621      	mov	r1, r4
 8009086:	f7ff fc89 	bl	800899c <USBD_GetString>
}
 800908a:	4620      	mov	r0, r4
 800908c:	bd10      	pop	{r4, pc}
 800908e:	bf00      	nop
 8009090:	20001054 	.word	0x20001054
 8009094:	0800ac60 	.word	0x0800ac60

08009098 <USBD_FS_ProductStrDescriptor>:
{
 8009098:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800909a:	4c04      	ldr	r4, [pc, #16]	; (80090ac <USBD_FS_ProductStrDescriptor+0x14>)
{
 800909c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800909e:	4804      	ldr	r0, [pc, #16]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x18>)
 80090a0:	4621      	mov	r1, r4
 80090a2:	f7ff fc7b 	bl	800899c <USBD_GetString>
}
 80090a6:	4620      	mov	r0, r4
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	bf00      	nop
 80090ac:	20001054 	.word	0x20001054
 80090b0:	0800ac74 	.word	0x0800ac74

080090b4 <USBD_FS_ConfigStrDescriptor>:
{
 80090b4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090b6:	4c04      	ldr	r4, [pc, #16]	; (80090c8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80090b8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090ba:	4804      	ldr	r0, [pc, #16]	; (80090cc <USBD_FS_ConfigStrDescriptor+0x18>)
 80090bc:	4621      	mov	r1, r4
 80090be:	f7ff fc6d 	bl	800899c <USBD_GetString>
}
 80090c2:	4620      	mov	r0, r4
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	bf00      	nop
 80090c8:	20001054 	.word	0x20001054
 80090cc:	0800ac88 	.word	0x0800ac88

080090d0 <USBD_FS_InterfaceStrDescriptor>:
{
 80090d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090d2:	4c04      	ldr	r4, [pc, #16]	; (80090e4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80090d4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090d6:	4804      	ldr	r0, [pc, #16]	; (80090e8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80090d8:	4621      	mov	r1, r4
 80090da:	f7ff fc5f 	bl	800899c <USBD_GetString>
}
 80090de:	4620      	mov	r0, r4
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	bf00      	nop
 80090e4:	20001054 	.word	0x20001054
 80090e8:	0800ac98 	.word	0x0800ac98

080090ec <MIDI_DataTx>:

	return 0;
}

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 80090ec:	b508      	push	{r3, lr}
  USBD_MIDI_SendPacket(msg, length);
 80090ee:	b2c9      	uxtb	r1, r1
 80090f0:	f7ff f884 	bl	80081fc <USBD_MIDI_SendPacket>
  return USBD_OK;
}
 80090f4:	2000      	movs	r0, #0
 80090f6:	bd08      	pop	{r3, pc}

080090f8 <sysex_send_message>:
void sysex_send_message(uint8_t* buffer, uint8_t length){
 80090f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while(buff_ptr < length + buffer){
 80090fc:	1844      	adds	r4, r0, r1
 80090fe:	42a0      	cmp	r0, r4
 8009100:	d243      	bcs.n	800918a <sysex_send_message+0x92>
	uint8_t *assembly_ptr = sysex_tx_assembly_buffer;
 8009102:	4925      	ldr	r1, [pc, #148]	; (8009198 <sysex_send_message+0xa0>)
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_SINGLE_BYTE;
 8009104:	f04f 0905 	mov.w	r9, #5
	uint8_t *assembly_ptr = sysex_tx_assembly_buffer;
 8009108:	460a      	mov	r2, r1
			*assembly_ptr++ = 0xFF;
 800910a:	27ff      	movs	r7, #255	; 0xff
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_TWO_BYTES;
 800910c:	f04f 0e06 	mov.w	lr, #6
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_THREE_BYTES;
 8009110:	f04f 0807 	mov.w	r8, #7
			assembly_ptr[0] = CIN_SYSEX_STARTS_OR_CONTINUES;
 8009114:	f04f 0c04 	mov.w	ip, #4
 8009118:	e011      	b.n	800913e <sysex_send_message+0x46>
		} else if (data_to_go == 3) {
 800911a:	d032      	beq.n	8009182 <sysex_send_message+0x8a>
		} else if (data_to_go == 2) {
 800911c:	2b02      	cmp	r3, #2
 800911e:	d026      	beq.n	800916e <sysex_send_message+0x76>
		} else if (data_to_go == 1) {
 8009120:	2b01      	cmp	r3, #1
 8009122:	d10a      	bne.n	800913a <sysex_send_message+0x42>
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_SINGLE_BYTE;
 8009124:	f882 9000 	strb.w	r9, [r2]
			memcpy(assembly_ptr+1, buff_ptr, 1);
 8009128:	f810 3b01 	ldrb.w	r3, [r0], #1
			*assembly_ptr++ = 0xFF;
 800912c:	3204      	adds	r2, #4
			*assembly_ptr++ = 0xFF;
 800912e:	f802 7c02 	strb.w	r7, [r2, #-2]
			memcpy(assembly_ptr+1, buff_ptr, 1);
 8009132:	f802 3c03 	strb.w	r3, [r2, #-3]
			*assembly_ptr++ = 0xFF;
 8009136:	f802 7c01 	strb.w	r7, [r2, #-1]
	while(buff_ptr < length + buffer){
 800913a:	42a0      	cmp	r0, r4
 800913c:	d210      	bcs.n	8009160 <sysex_send_message+0x68>
		uint8_t data_to_go = length + buffer - buff_ptr;
 800913e:	1a23      	subs	r3, r4, r0
 8009140:	b2db      	uxtb	r3, r3
		if(data_to_go > 3){
 8009142:	2b03      	cmp	r3, #3
 8009144:	d9e9      	bls.n	800911a <sysex_send_message+0x22>
			assembly_ptr[0] = CIN_SYSEX_STARTS_OR_CONTINUES;
 8009146:	4613      	mov	r3, r2
 8009148:	f803 cb01 	strb.w	ip, [r3], #1
			memcpy(assembly_ptr+1, buff_ptr, 3);
 800914c:	8806      	ldrh	r6, [r0, #0]
 800914e:	7885      	ldrb	r5, [r0, #2]
			buff_ptr += 3;
 8009150:	3003      	adds	r0, #3
	while(buff_ptr < length + buffer){
 8009152:	42a0      	cmp	r0, r4
			memcpy(assembly_ptr+1, buff_ptr, 3);
 8009154:	f8a2 6001 	strh.w	r6, [r2, #1]
 8009158:	709d      	strb	r5, [r3, #2]
			assembly_ptr += 4;
 800915a:	f102 0204 	add.w	r2, r2, #4
	while(buff_ptr < length + buffer){
 800915e:	d3ee      	bcc.n	800913e <sysex_send_message+0x46>
}
 8009160:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009164:	1a51      	subs	r1, r2, r1
  USBD_MIDI_SendPacket(msg, length);
 8009166:	480c      	ldr	r0, [pc, #48]	; (8009198 <sysex_send_message+0xa0>)
 8009168:	b2c9      	uxtb	r1, r1
 800916a:	f7ff b847 	b.w	80081fc <USBD_MIDI_SendPacket>
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_TWO_BYTES;
 800916e:	f882 e000 	strb.w	lr, [r2]
			memcpy(assembly_ptr+1, buff_ptr, 2);
 8009172:	f830 3b02 	ldrh.w	r3, [r0], #2
			*assembly_ptr++ = 0xFF;
 8009176:	3204      	adds	r2, #4
 8009178:	f802 7c01 	strb.w	r7, [r2, #-1]
			memcpy(assembly_ptr+1, buff_ptr, 2);
 800917c:	f822 3c03 	strh.w	r3, [r2, #-3]
			*assembly_ptr++ = 0xFF;
 8009180:	e7db      	b.n	800913a <sysex_send_message+0x42>
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_THREE_BYTES;
 8009182:	4613      	mov	r3, r2
 8009184:	f803 8b01 	strb.w	r8, [r3], #1
 8009188:	e7e0      	b.n	800914c <sysex_send_message+0x54>
	while(buff_ptr < length + buffer){
 800918a:	2100      	movs	r1, #0
}
 800918c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USBD_MIDI_SendPacket(msg, length);
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <sysex_send_message+0xa0>)
 8009192:	f7ff b833 	b.w	80081fc <USBD_MIDI_SendPacket>
 8009196:	bf00      	nop
 8009198:	20001294 	.word	0x20001294

0800919c <sysex_erase_eeprom>:
	if(data_packet_start[0] != 0x42 || data_packet_start[1] != 0x24){
 800919c:	7803      	ldrb	r3, [r0, #0]
 800919e:	2b42      	cmp	r3, #66	; 0x42
 80091a0:	d133      	bne.n	800920a <sysex_erase_eeprom+0x6e>
 80091a2:	7843      	ldrb	r3, [r0, #1]
 80091a4:	2b24      	cmp	r3, #36	; 0x24
 80091a6:	d130      	bne.n	800920a <sysex_erase_eeprom+0x6e>
void sysex_erase_eeprom(uint8_t* data_packet_start){
 80091a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bytes = 0;
 80091ac:	2400      	movs	r4, #0
		HAL_I2C_Mem_Write(&hi2c1, 0xA0 | ((bytes & 0x0300) >> 7), (bytes & 0xff), I2C_MEMADD_SIZE_8BIT, eraseData, sizeof(eraseData), 100);
 80091ae:	f04f 0864 	mov.w	r8, #100	; 0x64
 80091b2:	2708      	movs	r7, #8
	uint8_t eraseData[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
 80091b4:	4b15      	ldr	r3, [pc, #84]	; (800920c <sysex_erase_eeprom+0x70>)
void sysex_erase_eeprom(uint8_t* data_packet_start){
 80091b6:	b086      	sub	sp, #24
	uint8_t eraseData[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
 80091b8:	ad04      	add	r5, sp, #16
 80091ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80091be:	e885 0003 	stmia.w	r5, {r0, r1}
		HAL_I2C_Mem_Write(&hi2c1, 0xA0 | ((bytes & 0x0300) >> 7), (bytes & 0xff), I2C_MEMADD_SIZE_8BIT, eraseData, sizeof(eraseData), 100);
 80091c2:	4e13      	ldr	r6, [pc, #76]	; (8009210 <sysex_erase_eeprom+0x74>)
 80091c4:	09e1      	lsrs	r1, r4, #7
 80091c6:	f001 0106 	and.w	r1, r1, #6
 80091ca:	b2e2      	uxtb	r2, r4
 80091cc:	2301      	movs	r3, #1
 80091ce:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 80091d2:	4630      	mov	r0, r6
 80091d4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80091d8:	9500      	str	r5, [sp, #0]
 80091da:	f7fb ff65 	bl	80050a8 <HAL_I2C_Mem_Write>
		bytes += sizeof(eraseData);
 80091de:	3408      	adds	r4, #8
		HAL_Delay(5);
 80091e0:	2005      	movs	r0, #5
 80091e2:	f7fb f82f 	bl	8004244 <HAL_Delay>
	while ( bytes < 1024)
 80091e6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80091ea:	d1eb      	bne.n	80091c4 <sysex_erase_eeprom+0x28>
	midi_msg_tx_buffer[2] = SYSEX_RSP_ERASE_EEPROM;
 80091ec:	2235      	movs	r2, #53	; 0x35
	midi_msg_tx_buffer[3] = SYSEX_END;
 80091ee:	23f7      	movs	r3, #247	; 0xf7
	midi_msg_tx_buffer[0] = SYSEX_START;
 80091f0:	25f0      	movs	r5, #240	; 0xf0
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 80091f2:	247d      	movs	r4, #125	; 0x7d
	midi_msg_tx_buffer[0] = SYSEX_START;
 80091f4:	4807      	ldr	r0, [pc, #28]	; (8009214 <sysex_erase_eeprom+0x78>)
	sysex_send_message(midi_msg_tx_buffer, 4);
 80091f6:	2104      	movs	r1, #4
	midi_msg_tx_buffer[0] = SYSEX_START;
 80091f8:	7005      	strb	r5, [r0, #0]
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 80091fa:	7044      	strb	r4, [r0, #1]
	midi_msg_tx_buffer[2] = SYSEX_RSP_ERASE_EEPROM;
 80091fc:	7082      	strb	r2, [r0, #2]
	midi_msg_tx_buffer[3] = SYSEX_END;
 80091fe:	70c3      	strb	r3, [r0, #3]
	sysex_send_message(midi_msg_tx_buffer, 4);
 8009200:	f7ff ff7a 	bl	80090f8 <sysex_send_message>
}
 8009204:	b006      	add	sp, #24
 8009206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800920a:	4770      	bx	lr
 800920c:	0800aca8 	.word	0x0800aca8
 8009210:	20000a20 	.word	0x20000a20
 8009214:	20001254 	.word	0x20001254

08009218 <sysex_write_eeprom>:
void sysex_write_eeprom(uint8_t* data_packet_start){
 8009218:	b530      	push	{r4, r5, lr}
 800921a:	4604      	mov	r4, r0
	uint16_t ee_byte_address = data_packet_start[0] * 16;
 800921c:	7802      	ldrb	r2, [r0, #0]
void sysex_write_eeprom(uint8_t* data_packet_start){
 800921e:	b089      	sub	sp, #36	; 0x24
 8009220:	f10d 010f 	add.w	r1, sp, #15
	uint16_t ee_byte_address = data_packet_start[0] * 16;
 8009224:	0112      	lsls	r2, r2, #4
	for (int i=0; i<16; i++){
 8009226:	f10d 051f 	add.w	r5, sp, #31
		reassembled_array[i] = data_packet_start[2*i] << 4 | data_packet_start[2*i + 1];
 800922a:	7860      	ldrb	r0, [r4, #1]
 800922c:	f814 3f02 	ldrb.w	r3, [r4, #2]!
 8009230:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8009234:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (int i=0; i<16; i++){
 8009238:	428d      	cmp	r5, r1
 800923a:	d1f6      	bne.n	800922a <sysex_write_eeprom+0x12>
	HAL_I2C_Mem_Write(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, reassembled_array, 16, 100);
 800923c:	2010      	movs	r0, #16
 800923e:	2464      	movs	r4, #100	; 0x64
 8009240:	11d1      	asrs	r1, r2, #7
 8009242:	eb0d 0300 	add.w	r3, sp, r0
 8009246:	f001 0106 	and.w	r1, r1, #6
 800924a:	e9cd 0401 	strd	r0, r4, [sp, #4]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8009254:	2301      	movs	r3, #1
 8009256:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800925a:	4808      	ldr	r0, [pc, #32]	; (800927c <sysex_write_eeprom+0x64>)
 800925c:	f7fb ff24 	bl	80050a8 <HAL_I2C_Mem_Write>
	midi_msg_tx_buffer[0] = SYSEX_START;
 8009260:	25f0      	movs	r5, #240	; 0xf0
	midi_msg_tx_buffer[2] = SYSEX_RSP_WRITE_EEPROM;
 8009262:	2237      	movs	r2, #55	; 0x37
	midi_msg_tx_buffer[3] = SYSEX_END;
 8009264:	23f7      	movs	r3, #247	; 0xf7
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 8009266:	247d      	movs	r4, #125	; 0x7d
	midi_msg_tx_buffer[0] = SYSEX_START;
 8009268:	4805      	ldr	r0, [pc, #20]	; (8009280 <sysex_write_eeprom+0x68>)
	sysex_send_message(midi_msg_tx_buffer, 4);
 800926a:	2104      	movs	r1, #4
	midi_msg_tx_buffer[0] = SYSEX_START;
 800926c:	7005      	strb	r5, [r0, #0]
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 800926e:	7044      	strb	r4, [r0, #1]
	midi_msg_tx_buffer[2] = SYSEX_RSP_WRITE_EEPROM;
 8009270:	7082      	strb	r2, [r0, #2]
	midi_msg_tx_buffer[3] = SYSEX_END;
 8009272:	70c3      	strb	r3, [r0, #3]
	sysex_send_message(midi_msg_tx_buffer, 4);
 8009274:	f7ff ff40 	bl	80090f8 <sysex_send_message>
}
 8009278:	b009      	add	sp, #36	; 0x24
 800927a:	bd30      	pop	{r4, r5, pc}
 800927c:	20000a20 	.word	0x20000a20
 8009280:	20001254 	.word	0x20001254

08009284 <sysex_dump_eeprom_page>:
void sysex_dump_eeprom_page(uint8_t page_number){
 8009284:	b5f0      	push	{r4, r5, r6, r7, lr}
	midi_msg_tx_buffer[0] = SYSEX_START;
 8009286:	23f0      	movs	r3, #240	; 0xf0
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 8009288:	2710      	movs	r7, #16
 800928a:	f04f 0c64 	mov.w	ip, #100	; 0x64
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 800928e:	267d      	movs	r6, #125	; 0x7d
	midi_msg_tx_buffer[2] = SYSEX_RSP_DUMP_EEPROM;
 8009290:	2433      	movs	r4, #51	; 0x33
	midi_msg_tx_buffer[0] = SYSEX_START;
 8009292:	4d17      	ldr	r5, [pc, #92]	; (80092f0 <sysex_dump_eeprom_page+0x6c>)
void sysex_dump_eeprom_page(uint8_t page_number){
 8009294:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 8009296:	08c1      	lsrs	r1, r0, #3
	uint16_t ee_byte_address = page_number * 16;
 8009298:	0102      	lsls	r2, r0, #4
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 800929a:	f001 0106 	and.w	r1, r1, #6
 800929e:	401a      	ands	r2, r3
	midi_msg_tx_buffer[0] = SYSEX_START;
 80092a0:	702b      	strb	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 80092a2:	eb0d 0307 	add.w	r3, sp, r7
	midi_msg_tx_buffer[3] = page_number;
 80092a6:	70e8      	strb	r0, [r5, #3]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 80092ae:	2301      	movs	r3, #1
 80092b0:	4810      	ldr	r0, [pc, #64]	; (80092f4 <sysex_dump_eeprom_page+0x70>)
 80092b2:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 80092b6:	706e      	strb	r6, [r5, #1]
	midi_msg_tx_buffer[2] = SYSEX_RSP_DUMP_EEPROM;
 80092b8:	70ac      	strb	r4, [r5, #2]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 80092ba:	f7fb ff97 	bl	80051ec <HAL_I2C_Mem_Read>
	if(status == HAL_OK){
 80092be:	b9a8      	cbnz	r0, 80092ec <sysex_dump_eeprom_page+0x68>
 80092c0:	462a      	mov	r2, r5
 80092c2:	f10d 010f 	add.w	r1, sp, #15
 80092c6:	f10d 041f 	add.w	r4, sp, #31
			midi_msg_tx_buffer[4+(i*2)] = eeprom_buffer[i] >> 4;
 80092ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092ce:	3202      	adds	r2, #2
 80092d0:	0918      	lsrs	r0, r3, #4
		for(int i=0; i<16; i++){
 80092d2:	42a1      	cmp	r1, r4
			midi_msg_tx_buffer[4+(i*2)+1] = eeprom_buffer[i] & 0x0F;
 80092d4:	f003 030f 	and.w	r3, r3, #15
			midi_msg_tx_buffer[4+(i*2)] = eeprom_buffer[i] >> 4;
 80092d8:	7090      	strb	r0, [r2, #2]
			midi_msg_tx_buffer[4+(i*2)+1] = eeprom_buffer[i] & 0x0F;
 80092da:	70d3      	strb	r3, [r2, #3]
		for(int i=0; i<16; i++){
 80092dc:	d1f5      	bne.n	80092ca <sysex_dump_eeprom_page+0x46>
		midi_msg_tx_buffer[4+32] = SYSEX_END;
 80092de:	23f7      	movs	r3, #247	; 0xf7
		sysex_send_message(midi_msg_tx_buffer, 37);
 80092e0:	2125      	movs	r1, #37	; 0x25
 80092e2:	4803      	ldr	r0, [pc, #12]	; (80092f0 <sysex_dump_eeprom_page+0x6c>)
		midi_msg_tx_buffer[4+32] = SYSEX_END;
 80092e4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
		sysex_send_message(midi_msg_tx_buffer, 37);
 80092e8:	f7ff ff06 	bl	80090f8 <sysex_send_message>
}
 80092ec:	b009      	add	sp, #36	; 0x24
 80092ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f0:	20001254 	.word	0x20001254
 80092f4:	20000a20 	.word	0x20000a20

080092f8 <process_sysex_message>:
void process_sysex_message(void){
 80092f8:	b510      	push	{r4, lr}
	if(sysex_rx_buffer[0] != SYSEX_START ||
 80092fa:	4b24      	ldr	r3, [pc, #144]	; (800938c <process_sysex_message+0x94>)
 80092fc:	4c24      	ldr	r4, [pc, #144]	; (8009390 <process_sysex_message+0x98>)
 80092fe:	781a      	ldrb	r2, [r3, #0]
 8009300:	2af0      	cmp	r2, #240	; 0xf0
 8009302:	d105      	bne.n	8009310 <process_sysex_message+0x18>
			sysex_rx_buffer[sysex_rx_counter -1] != SYSEX_END){
 8009304:	7822      	ldrb	r2, [r4, #0]
 8009306:	441a      	add	r2, r3
	if(sysex_rx_buffer[0] != SYSEX_START ||
 8009308:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800930c:	2af7      	cmp	r2, #247	; 0xf7
 800930e:	d002      	beq.n	8009316 <process_sysex_message+0x1e>
	sysex_rx_counter = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	7023      	strb	r3, [r4, #0]
}
 8009314:	bd10      	pop	{r4, pc}
	if(pSysexHead->manuf_id != MIDI_MANUF_ID){
 8009316:	785a      	ldrb	r2, [r3, #1]
 8009318:	2a7d      	cmp	r2, #125	; 0x7d
 800931a:	d1f9      	bne.n	8009310 <process_sysex_message+0x18>
	switch(pSysexHead->msg_cmd){
 800931c:	789a      	ldrb	r2, [r3, #2]
 800931e:	3a32      	subs	r2, #50	; 0x32
 8009320:	2a0a      	cmp	r2, #10
 8009322:	d8f5      	bhi.n	8009310 <process_sysex_message+0x18>
 8009324:	a101      	add	r1, pc, #4	; (adr r1, 800932c <process_sysex_message+0x34>)
 8009326:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800932a:	bf00      	nop
 800932c:	08009369 	.word	0x08009369
 8009330:	08009311 	.word	0x08009311
 8009334:	08009361 	.word	0x08009361
 8009338:	08009311 	.word	0x08009311
 800933c:	08009359 	.word	0x08009359
 8009340:	08009311 	.word	0x08009311
 8009344:	08009311 	.word	0x08009311
 8009348:	08009311 	.word	0x08009311
 800934c:	08009311 	.word	0x08009311
 8009350:	08009311 	.word	0x08009311
 8009354:	08009371 	.word	0x08009371
		sysex_write_eeprom(&(pSysexHead->start_parameters));
 8009358:	480e      	ldr	r0, [pc, #56]	; (8009394 <process_sysex_message+0x9c>)
 800935a:	f7ff ff5d 	bl	8009218 <sysex_write_eeprom>
		break;
 800935e:	e7d7      	b.n	8009310 <process_sysex_message+0x18>
		sysex_erase_eeprom(&(pSysexHead->start_parameters));
 8009360:	480c      	ldr	r0, [pc, #48]	; (8009394 <process_sysex_message+0x9c>)
 8009362:	f7ff ff1b 	bl	800919c <sysex_erase_eeprom>
		break;
 8009366:	e7d3      	b.n	8009310 <process_sysex_message+0x18>
		sysex_dump_eeprom_page(pSysexHead->start_parameters);
 8009368:	78d8      	ldrb	r0, [r3, #3]
 800936a:	f7ff ff8b 	bl	8009284 <sysex_dump_eeprom_page>
		break;
 800936e:	e7cf      	b.n	8009310 <process_sysex_message+0x18>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009370:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009374:	4908      	ldr	r1, [pc, #32]	; (8009398 <process_sysex_message+0xa0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009376:	4b09      	ldr	r3, [pc, #36]	; (800939c <process_sysex_message+0xa4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009378:	68ca      	ldr	r2, [r1, #12]
 800937a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800937e:	4313      	orrs	r3, r2
 8009380:	60cb      	str	r3, [r1, #12]
 8009382:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009386:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009388:	e7fd      	b.n	8009386 <process_sysex_message+0x8e>
 800938a:	bf00      	nop
 800938c:	200012f4 	.word	0x200012f4
 8009390:	20000610 	.word	0x20000610
 8009394:	200012f7 	.word	0x200012f7
 8009398:	e000ed00 	.word	0xe000ed00
 800939c:	05fa0004 	.word	0x05fa0004

080093a0 <MIDI_DataRx>:
	while(processed_data_cnt < length){
 80093a0:	2900      	cmp	r1, #0
 80093a2:	d072      	beq.n	800948a <MIDI_DataRx+0xea>
{
 80093a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t processed_data_cnt = 0;
 80093a8:	2400      	movs	r4, #0
 80093aa:	4606      	mov	r6, r0
 80093ac:	4689      	mov	r9, r1
	sysex_rx_counter = 0;
 80093ae:	4627      	mov	r7, r4
 80093b0:	4d37      	ldr	r5, [pc, #220]	; (8009490 <MIDI_DataRx+0xf0>)
			if(pGlobalSettings[GLOBAL_SETTINGS_REALTIME_PASS]){
 80093b2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8009494 <MIDI_DataRx+0xf4>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 80093b6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8009498 <MIDI_DataRx+0xf8>
		uint8_t usb_msg_cin = msg[processed_data_cnt] & 0xF;
 80093ba:	5d33      	ldrb	r3, [r6, r4]
		if(sysex_rx_counter != 0){
 80093bc:	782a      	ldrb	r2, [r5, #0]
		uint8_t usb_msg_cin = msg[processed_data_cnt] & 0xF;
 80093be:	f003 030f 	and.w	r3, r3, #15
					usb_msg_cin != CIN_SYSEX_ENDS_WITH_FOLLOWING_TWO_BYTES &&
 80093c2:	3b04      	subs	r3, #4
		if(sysex_rx_counter != 0){
 80093c4:	b11a      	cbz	r2, 80093ce <MIDI_DataRx+0x2e>
			if(usb_msg_cin != CIN_SYSEX_STARTS_OR_CONTINUES &&
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	2a03      	cmp	r2, #3
	sysex_rx_counter = 0;
 80093ca:	bf88      	it	hi
 80093cc:	702f      	strbhi	r7, [r5, #0]
		switch(usb_msg_cin){
 80093ce:	2b0b      	cmp	r3, #11
 80093d0:	d807      	bhi.n	80093e2 <MIDI_DataRx+0x42>
 80093d2:	e8df f003 	tbb	[pc, r3]
 80093d6:	2d39      	.short	0x2d39
 80093d8:	06061c48 	.word	0x06061c48
 80093dc:	06060606 	.word	0x06060606
 80093e0:	0d06      	.short	0x0d06
			processed_data_cnt = length;
 80093e2:	fa5f f489 	uxtb.w	r4, r9
	while(processed_data_cnt < length){
 80093e6:	454c      	cmp	r4, r9
 80093e8:	d3e7      	bcc.n	80093ba <MIDI_DataRx+0x1a>
}
 80093ea:	2000      	movs	r0, #0
 80093ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if(pGlobalSettings[GLOBAL_SETTINGS_REALTIME_PASS]){
 80093f0:	f8d8 3000 	ldr.w	r3, [r8]
 80093f4:	785b      	ldrb	r3, [r3, #1]
 80093f6:	b13b      	cbz	r3, 8009408 <MIDI_DataRx+0x68>
				if(msg[processed_data_cnt+1] == 0xF8 || msg[processed_data_cnt+1] == 0xFA ||msg[processed_data_cnt+1] == 0xFC){
 80093f8:	1933      	adds	r3, r6, r4
 80093fa:	7858      	ldrb	r0, [r3, #1]
 80093fc:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 8009400:	2bf8      	cmp	r3, #248	; 0xf8
 8009402:	d03d      	beq.n	8009480 <MIDI_DataRx+0xe0>
 8009404:	28fc      	cmp	r0, #252	; 0xfc
 8009406:	d03b      	beq.n	8009480 <MIDI_DataRx+0xe0>
			processed_data_cnt += 2;
 8009408:	3402      	adds	r4, #2
 800940a:	b2e4      	uxtb	r4, r4
			break;
 800940c:	e7eb      	b.n	80093e6 <MIDI_DataRx+0x46>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 800940e:	1c62      	adds	r2, r4, #1
 8009410:	782b      	ldrb	r3, [r5, #0]
 8009412:	18b1      	adds	r1, r6, r2
 8009414:	5ab0      	ldrh	r0, [r6, r2]
 8009416:	7889      	ldrb	r1, [r1, #2]
 8009418:	eb03 020a 	add.w	r2, r3, sl
 800941c:	f823 000a 	strh.w	r0, [r3, sl]
			processed_data_cnt += 4;
 8009420:	3404      	adds	r4, #4
			sysex_rx_counter += 3;
 8009422:	3303      	adds	r3, #3
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8009424:	7091      	strb	r1, [r2, #2]
			processed_data_cnt += 4;
 8009426:	b2e4      	uxtb	r4, r4
			sysex_rx_counter += 3;
 8009428:	702b      	strb	r3, [r5, #0]
			process_sysex_message();
 800942a:	f7ff ff65 	bl	80092f8 <process_sysex_message>
			break;
 800942e:	e7da      	b.n	80093e6 <MIDI_DataRx+0x46>
			sysex_rx_buffer[sysex_rx_counter] = msg[processed_data_cnt + 1];
 8009430:	782b      	ldrb	r3, [r5, #0]
 8009432:	1932      	adds	r2, r6, r4
 8009434:	7851      	ldrb	r1, [r2, #1]
			processed_data_cnt += 2;
 8009436:	3402      	adds	r4, #2
			sysex_rx_counter++;
 8009438:	1c5a      	adds	r2, r3, #1
			sysex_rx_buffer[sysex_rx_counter] = msg[processed_data_cnt + 1];
 800943a:	f80a 1003 	strb.w	r1, [sl, r3]
			sysex_rx_counter++;
 800943e:	702a      	strb	r2, [r5, #0]
			processed_data_cnt += 2;
 8009440:	b2e4      	uxtb	r4, r4
			process_sysex_message();
 8009442:	f7ff ff59 	bl	80092f8 <process_sysex_message>
			break;
 8009446:	e7ce      	b.n	80093e6 <MIDI_DataRx+0x46>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8009448:	1c62      	adds	r2, r4, #1
 800944a:	782b      	ldrb	r3, [r5, #0]
 800944c:	5ab0      	ldrh	r0, [r6, r2]
 800944e:	18b1      	adds	r1, r6, r2
 8009450:	7889      	ldrb	r1, [r1, #2]
 8009452:	eb03 020a 	add.w	r2, r3, sl
 8009456:	f823 000a 	strh.w	r0, [r3, sl]
			processed_data_cnt += 4;
 800945a:	3404      	adds	r4, #4
			sysex_rx_counter += 3;
 800945c:	3303      	adds	r3, #3
			processed_data_cnt += 4;
 800945e:	b2e4      	uxtb	r4, r4
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8009460:	7091      	strb	r1, [r2, #2]
			sysex_rx_counter += 3;
 8009462:	702b      	strb	r3, [r5, #0]
			break;
 8009464:	e7bf      	b.n	80093e6 <MIDI_DataRx+0x46>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 2);
 8009466:	782b      	ldrb	r3, [r5, #0]
 8009468:	1932      	adds	r2, r6, r4
 800946a:	f8b2 1001 	ldrh.w	r1, [r2, #1]
			processed_data_cnt += 3;
 800946e:	3403      	adds	r4, #3
			sysex_rx_counter += 2;
 8009470:	1c9a      	adds	r2, r3, #2
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 2);
 8009472:	f823 100a 	strh.w	r1, [r3, sl]
			sysex_rx_counter += 2;
 8009476:	702a      	strb	r2, [r5, #0]
			processed_data_cnt += 3;
 8009478:	b2e4      	uxtb	r4, r4
			process_sysex_message();
 800947a:	f7ff ff3d 	bl	80092f8 <process_sysex_message>
			break;
 800947e:	e7b2      	b.n	80093e6 <MIDI_DataRx+0x46>
			processed_data_cnt += 2;
 8009480:	3402      	adds	r4, #2
					midiCmd_send_byte_serial(msg[processed_data_cnt+1]);
 8009482:	f7fa f919 	bl	80036b8 <midiCmd_send_byte_serial>
			processed_data_cnt += 2;
 8009486:	b2e4      	uxtb	r4, r4
			break;
 8009488:	e7ad      	b.n	80093e6 <MIDI_DataRx+0x46>
}
 800948a:	2000      	movs	r0, #0
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	20000610 	.word	0x20000610
 8009494:	20000618 	.word	0x20000618
 8009498:	200012f4 	.word	0x200012f4

0800949c <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800949c:	4b12      	ldr	r3, [pc, #72]	; (80094e8 <HAL_PCD_MspInit+0x4c>)
 800949e:	6802      	ldr	r2, [r0, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d000      	beq.n	80094a6 <HAL_PCD_MspInit+0xa>
 80094a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094a6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80094aa:	69d8      	ldr	r0, [r3, #28]
{
 80094ac:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 80094ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80094b2:	61d8      	str	r0, [r3, #28]
 80094b4:	69db      	ldr	r3, [r3, #28]
{
 80094b6:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80094b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 80094bc:	2200      	movs	r2, #0
 80094be:	2102      	movs	r1, #2
    __HAL_RCC_USB_CLK_ENABLE();
 80094c0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 80094c2:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 80094c4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 80094c6:	f7fa fee1 	bl	800428c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80094ca:	2013      	movs	r0, #19
 80094cc:	f7fa ff16 	bl	80042fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 80094d0:	2200      	movs	r2, #0
 80094d2:	2101      	movs	r1, #1
 80094d4:	2014      	movs	r0, #20
 80094d6:	f7fa fed9 	bl	800428c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80094da:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094dc:	b003      	add	sp, #12
 80094de:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80094e2:	f7fa bf0b 	b.w	80042fc <HAL_NVIC_EnableIRQ>
 80094e6:	bf00      	nop
 80094e8:	40005c00 	.word	0x40005c00

080094ec <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094ec:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80094f0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80094f4:	f7fe bede 	b.w	80082b4 <USBD_LL_SetupStage>

080094f8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094f8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80094fc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009500:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009504:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009508:	f7fe bf02 	b.w	8008310 <USBD_LL_DataOutStage>

0800950c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800950c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009510:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009516:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800951a:	f7fe bf37 	b.w	800838c <USBD_LL_DataInStage>
 800951e:	bf00      	nop

08009520 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009520:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009524:	f7fe bfd2 	b.w	80084cc <USBD_LL_SOF>

08009528 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009528:	6883      	ldr	r3, [r0, #8]
{
 800952a:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800952c:	2b02      	cmp	r3, #2
{
 800952e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009530:	d001      	beq.n	8009536 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8009532:	f7fa f841 	bl	80035b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009536:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800953a:	2101      	movs	r1, #1
 800953c:	f7fe ffae 	bl	800849c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009540:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8009544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009548:	f7fe bf80 	b.w	800844c <USBD_LL_Reset>

0800954c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954c:	b510      	push	{r4, lr}
 800954e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009550:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009554:	f7fe ffa6 	bl	80084a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009558:	69a3      	ldr	r3, [r4, #24]
 800955a:	b123      	cbz	r3, 8009566 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800955c:	4a02      	ldr	r2, [pc, #8]	; (8009568 <HAL_PCD_SuspendCallback+0x1c>)
 800955e:	6913      	ldr	r3, [r2, #16]
 8009560:	f043 0306 	orr.w	r3, r3, #6
 8009564:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009566:	bd10      	pop	{r4, pc}
 8009568:	e000ed00 	.word	0xe000ed00

0800956c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800956c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009570:	f7fe bfa2 	b.w	80084b8 <USBD_LL_Resume>

08009574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009578:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800957a:	2108      	movs	r1, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800957c:	2202      	movs	r2, #2
  hpcd_USB_FS.pData = pdev;
 800957e:	4818      	ldr	r0, [pc, #96]	; (80095e0 <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Instance = USB;
 8009580:	4d18      	ldr	r5, [pc, #96]	; (80095e4 <USBD_LL_Init+0x70>)
  hpcd_USB_FS.pData = pdev;
 8009582:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009586:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800958a:	e9c0 5100 	strd	r5, r1, [r0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800958e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009592:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009594:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009596:	f7fb ffa1 	bl	80054dc <HAL_PCD_Init>
 800959a:	b9e8      	cbnz	r0, 80095d8 <USBD_LL_Init+0x64>
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */

  // Setup the PMA address areas for both control endpoints and the MIDI bulk endpoints
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800959c:	2200      	movs	r2, #0
 800959e:	2318      	movs	r3, #24
 80095a0:	4611      	mov	r1, r2
 80095a2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80095a6:	f7fc ff1f 	bl	80063e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095aa:	2358      	movs	r3, #88	; 0x58
 80095ac:	2200      	movs	r2, #0
 80095ae:	2180      	movs	r1, #128	; 0x80
 80095b0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80095b4:	f7fc ff18 	bl	80063e8 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, (0x58 + 0x40));
 80095b8:	2398      	movs	r3, #152	; 0x98
 80095ba:	2200      	movs	r2, #0
 80095bc:	2101      	movs	r1, #1
 80095be:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80095c2:	f7fc ff11 	bl	80063e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, (0x58 + 0x40 + 0x40));
 80095c6:	23d8      	movs	r3, #216	; 0xd8
 80095c8:	2200      	movs	r2, #0
 80095ca:	2181      	movs	r1, #129	; 0x81
 80095cc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80095d0:	f7fc ff0a 	bl	80063e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
}
 80095d4:	2000      	movs	r0, #0
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 80095d8:	f7f9 ffee 	bl	80035b8 <Error_Handler>
 80095dc:	e7de      	b.n	800959c <USBD_LL_Init+0x28>
 80095de:	bf00      	nop
 80095e0:	20001334 	.word	0x20001334
 80095e4:	40005c00 	.word	0x40005c00

080095e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80095ea:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80095ee:	f7fb fff1 	bl	80055d4 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80095f2:	2803      	cmp	r0, #3
 80095f4:	bf96      	itet	ls
 80095f6:	4b02      	ldrls	r3, [pc, #8]	; (8009600 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80095f8:	2002      	movhi	r0, #2
 80095fa:	5c18      	ldrbls	r0, [r3, r0]
}
 80095fc:	bd08      	pop	{r3, pc}
 80095fe:	bf00      	nop
 8009600:	0800acb4 	.word	0x0800acb4

08009604 <USBD_LL_OpenEP>:
{
 8009604:	b510      	push	{r4, lr}
 8009606:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009608:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 800960c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800960e:	4623      	mov	r3, r4
 8009610:	f7fc fdda 	bl	80061c8 <HAL_PCD_EP_Open>
  switch (hal_status)
 8009614:	2803      	cmp	r0, #3
 8009616:	bf96      	itet	ls
 8009618:	4b01      	ldrls	r3, [pc, #4]	; (8009620 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800961a:	2002      	movhi	r0, #2
 800961c:	5c18      	ldrbls	r0, [r3, r0]
}
 800961e:	bd10      	pop	{r4, pc}
 8009620:	0800acb4 	.word	0x0800acb4

08009624 <USBD_LL_CloseEP>:
{
 8009624:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009626:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800962a:	f7fc fe01 	bl	8006230 <HAL_PCD_EP_Close>
  switch (hal_status)
 800962e:	2803      	cmp	r0, #3
 8009630:	bf96      	itet	ls
 8009632:	4b02      	ldrls	r3, [pc, #8]	; (800963c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009634:	2002      	movhi	r0, #2
 8009636:	5c18      	ldrbls	r0, [r3, r0]
}
 8009638:	bd08      	pop	{r3, pc}
 800963a:	bf00      	nop
 800963c:	0800acb4 	.word	0x0800acb4

08009640 <USBD_LL_StallEP>:
{
 8009640:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009642:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009646:	f7fc fe59 	bl	80062fc <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800964a:	2803      	cmp	r0, #3
 800964c:	bf96      	itet	ls
 800964e:	4b02      	ldrls	r3, [pc, #8]	; (8009658 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009650:	2002      	movhi	r0, #2
 8009652:	5c18      	ldrbls	r0, [r3, r0]
}
 8009654:	bd08      	pop	{r3, pc}
 8009656:	bf00      	nop
 8009658:	0800acb4 	.word	0x0800acb4

0800965c <USBD_LL_ClearStallEP>:
{
 800965c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800965e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009662:	f7fc fe87 	bl	8006374 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8009666:	2803      	cmp	r0, #3
 8009668:	bf96      	itet	ls
 800966a:	4b02      	ldrls	r3, [pc, #8]	; (8009674 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800966c:	2002      	movhi	r0, #2
 800966e:	5c18      	ldrbls	r0, [r3, r0]
}
 8009670:	bd08      	pop	{r3, pc}
 8009672:	bf00      	nop
 8009674:	0800acb4 	.word	0x0800acb4

08009678 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8009678:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800967a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800967e:	d406      	bmi.n	800968e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009680:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009684:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009688:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800968c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800968e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009692:	3101      	adds	r1, #1
 8009694:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009698:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800969c:	7888      	ldrb	r0, [r1, #2]
 800969e:	4770      	bx	lr

080096a0 <USBD_LL_SetUSBAddress>:
{
 80096a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80096a6:	f7fc fd7b 	bl	80061a0 <HAL_PCD_SetAddress>
  switch (hal_status)
 80096aa:	2803      	cmp	r0, #3
 80096ac:	bf96      	itet	ls
 80096ae:	4b02      	ldrls	r3, [pc, #8]	; (80096b8 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096b0:	2002      	movhi	r0, #2
 80096b2:	5c18      	ldrbls	r0, [r3, r0]
}
 80096b4:	bd08      	pop	{r3, pc}
 80096b6:	bf00      	nop
 80096b8:	0800acb4 	.word	0x0800acb4

080096bc <USBD_LL_Transmit>:
{
 80096bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80096c2:	f7fc fdfd 	bl	80062c0 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80096c6:	2803      	cmp	r0, #3
 80096c8:	bf96      	itet	ls
 80096ca:	4b02      	ldrls	r3, [pc, #8]	; (80096d4 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096cc:	2002      	movhi	r0, #2
 80096ce:	5c18      	ldrbls	r0, [r3, r0]
}
 80096d0:	bd08      	pop	{r3, pc}
 80096d2:	bf00      	nop
 80096d4:	0800acb4 	.word	0x0800acb4

080096d8 <USBD_LL_PrepareReceive>:
{
 80096d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80096de:	f7fc fdd7 	bl	8006290 <HAL_PCD_EP_Receive>
  switch (hal_status)
 80096e2:	2803      	cmp	r0, #3
 80096e4:	bf96      	itet	ls
 80096e6:	4b02      	ldrls	r3, [pc, #8]	; (80096f0 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096e8:	2002      	movhi	r0, #2
 80096ea:	5c18      	ldrbls	r0, [r3, r0]
}
 80096ec:	bd08      	pop	{r3, pc}
 80096ee:	bf00      	nop
 80096f0:	0800acb4 	.word	0x0800acb4

080096f4 <HAL_PCDEx_SetConnectionState>:
}
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop

080096f8 <__libc_init_array>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	2600      	movs	r6, #0
 80096fc:	4d0c      	ldr	r5, [pc, #48]	; (8009730 <__libc_init_array+0x38>)
 80096fe:	4c0d      	ldr	r4, [pc, #52]	; (8009734 <__libc_init_array+0x3c>)
 8009700:	1b64      	subs	r4, r4, r5
 8009702:	10a4      	asrs	r4, r4, #2
 8009704:	42a6      	cmp	r6, r4
 8009706:	d109      	bne.n	800971c <__libc_init_array+0x24>
 8009708:	f000 f81a 	bl	8009740 <_init>
 800970c:	2600      	movs	r6, #0
 800970e:	4d0a      	ldr	r5, [pc, #40]	; (8009738 <__libc_init_array+0x40>)
 8009710:	4c0a      	ldr	r4, [pc, #40]	; (800973c <__libc_init_array+0x44>)
 8009712:	1b64      	subs	r4, r4, r5
 8009714:	10a4      	asrs	r4, r4, #2
 8009716:	42a6      	cmp	r6, r4
 8009718:	d105      	bne.n	8009726 <__libc_init_array+0x2e>
 800971a:	bd70      	pop	{r4, r5, r6, pc}
 800971c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009720:	4798      	blx	r3
 8009722:	3601      	adds	r6, #1
 8009724:	e7ee      	b.n	8009704 <__libc_init_array+0xc>
 8009726:	f855 3b04 	ldr.w	r3, [r5], #4
 800972a:	4798      	blx	r3
 800972c:	3601      	adds	r6, #1
 800972e:	e7f2      	b.n	8009716 <__libc_init_array+0x1e>
 8009730:	0800acb8 	.word	0x0800acb8
 8009734:	0800acb8 	.word	0x0800acb8
 8009738:	0800acb8 	.word	0x0800acb8
 800973c:	0800acbc 	.word	0x0800acbc

08009740 <_init>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr

0800974c <_fini>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	bf00      	nop
 8009750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009752:	bc08      	pop	{r3}
 8009754:	469e      	mov	lr, r3
 8009756:	4770      	bx	lr
