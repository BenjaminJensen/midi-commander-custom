
MIDI_Commander_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08003000  08003000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006570  080031e4  080031e4  000031e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001560  08009754  08009754  00009754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb4  0800acb4  000101c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800acb4  0800acb4  000101c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800acb4  0800acb4  000101c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acb4  0800acb4  0000acb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acb8  0800acb8  0000acb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  0800acbc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  200001c0  0800ae7c  000101c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001620  0800ae7c  00011620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024cd8  00000000  00000000  000101e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055be  00000000  00000000  00034ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012a2a  00000000  00000000  0003a47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  0004ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002ab0  00000000  00000000  0004dd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d538  00000000  00000000  000507f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201ec  00000000  00000000  0006dd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099ed3  00000000  00000000  0008df14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127de7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ea4  00000000  00000000  00127e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080031e4 <__do_global_dtors_aux>:
 80031e4:	b510      	push	{r4, lr}
 80031e6:	4c05      	ldr	r4, [pc, #20]	; (80031fc <__do_global_dtors_aux+0x18>)
 80031e8:	7823      	ldrb	r3, [r4, #0]
 80031ea:	b933      	cbnz	r3, 80031fa <__do_global_dtors_aux+0x16>
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__do_global_dtors_aux+0x1c>)
 80031ee:	b113      	cbz	r3, 80031f6 <__do_global_dtors_aux+0x12>
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <__do_global_dtors_aux+0x20>)
 80031f2:	f3af 8000 	nop.w
 80031f6:	2301      	movs	r3, #1
 80031f8:	7023      	strb	r3, [r4, #0]
 80031fa:	bd10      	pop	{r4, pc}
 80031fc:	200001c0 	.word	0x200001c0
 8003200:	00000000 	.word	0x00000000
 8003204:	0800973c 	.word	0x0800973c

08003208 <frame_dummy>:
 8003208:	b508      	push	{r3, lr}
 800320a:	4b03      	ldr	r3, [pc, #12]	; (8003218 <frame_dummy+0x10>)
 800320c:	b11b      	cbz	r3, 8003216 <frame_dummy+0xe>
 800320e:	4903      	ldr	r1, [pc, #12]	; (800321c <frame_dummy+0x14>)
 8003210:	4803      	ldr	r0, [pc, #12]	; (8003220 <frame_dummy+0x18>)
 8003212:	f3af 8000 	nop.w
 8003216:	bd08      	pop	{r3, pc}
 8003218:	00000000 	.word	0x00000000
 800321c:	200001c4 	.word	0x200001c4
 8003220:	0800973c 	.word	0x0800973c

08003224 <display_init>:
#include <stdio.h>
#include "ssd1306.h"
#include "eeprom_midi_settings.h"


void display_init(void){
 8003224:	b508      	push	{r3, lr}
    ssd1306_Init();
 8003226:	f005 fd65 	bl	8008cf4 <ssd1306_Init>

    ssd1306_SetCursor(5,0);
 800322a:	2100      	movs	r1, #0
 800322c:	2005      	movs	r0, #5
 800322e:	f005 fd13 	bl	8008c58 <ssd1306_SetCursor>

    ssd1306_WriteString("*CUSTOM*", Font_11x18, White);
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <display_init+0x38>)
 8003234:	2301      	movs	r3, #1
 8003236:	ca06      	ldmia	r2, {r1, r2}
 8003238:	4809      	ldr	r0, [pc, #36]	; (8003260 <display_init+0x3c>)
 800323a:	f005 fcf1 	bl	8008c20 <ssd1306_WriteString>
    ssd1306_SetCursor(5, 22);
 800323e:	2116      	movs	r1, #22
 8003240:	2005      	movs	r0, #5
 8003242:	f005 fd09 	bl	8008c58 <ssd1306_SetCursor>
    ssd1306_WriteString(FIRMWARE_VERSION, Font_7x10, White);
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <display_init+0x40>)
 8003248:	2301      	movs	r3, #1
 800324a:	ca06      	ldmia	r2, {r1, r2}
 800324c:	4806      	ldr	r0, [pc, #24]	; (8003268 <display_init+0x44>)
 800324e:	f005 fce7 	bl	8008c20 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
}
 8003252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ssd1306_UpdateScreen();
 8003256:	f005 bc0d 	b.w	8008a74 <ssd1306_UpdateScreen>
 800325a:	bf00      	nop
 800325c:	20000158 	.word	0x20000158
 8003260:	08009754 	.word	0x08009754
 8003264:	20000160 	.word	0x20000160
 8003268:	08009760 	.word	0x08009760

0800326c <display_setConfigName>:

void display_setConfigName(void){
 800326c:	b570      	push	{r4, r5, r6, lr}
    ssd1306_SetCursor(10, 34);
 800326e:	2122      	movs	r1, #34	; 0x22
 8003270:	200a      	movs	r0, #10
 8003272:	f005 fcf1 	bl	8008c58 <ssd1306_SetCursor>
 8003276:	2410      	movs	r4, #16
 8003278:	4d07      	ldr	r5, [pc, #28]	; (8003298 <display_setConfigName+0x2c>)
 800327a:	4e08      	ldr	r6, [pc, #32]	; (800329c <display_setConfigName+0x30>)
    for(int i=0; i<16; i++){
    	ssd1306_WriteChar(pGlobalSettings[16+i], Font_7x10, White);
 800327c:	2301      	movs	r3, #1
 800327e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003282:	6830      	ldr	r0, [r6, #0]
 8003284:	5d00      	ldrb	r0, [r0, r4]
 8003286:	441c      	add	r4, r3
 8003288:	f005 fc72 	bl	8008b70 <ssd1306_WriteChar>
    for(int i=0; i<16; i++){
 800328c:	2c20      	cmp	r4, #32
 800328e:	d1f5      	bne.n	800327c <display_setConfigName+0x10>
    }
    ssd1306_UpdateScreen();
}
 8003290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ssd1306_UpdateScreen();
 8003294:	f005 bbee 	b.w	8008a74 <ssd1306_UpdateScreen>
 8003298:	20000160 	.word	0x20000160
 800329c:	20000618 	.word	0x20000618

080032a0 <display_setBankName>:


void display_setBankName(uint8_t bankNumber){
	uint8_t *pString = pBankStrings + (12 * bankNumber);
 80032a0:	4a16      	ldr	r2, [pc, #88]	; (80032fc <display_setBankName+0x5c>)
void display_setBankName(uint8_t bankNumber){
 80032a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t *pString = pBankStrings + (12 * bankNumber);
 80032a4:	6816      	ldr	r6, [r2, #0]
 80032a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1

	ssd1306_Fill(Black);
 80032aa:	2000      	movs	r0, #0
	uint8_t *pString = pBankStrings + (12 * bankNumber);
 80032ac:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	ssd1306_Fill(Black);
 80032b0:	f005 fbd2 	bl	8008a58 <ssd1306_Fill>


    ssd1306_SetCursor(30,20);
 80032b4:	2114      	movs	r1, #20
 80032b6:	201e      	movs	r0, #30
	uint8_t *pString = pBankStrings + (12 * bankNumber);
 80032b8:	4635      	mov	r5, r6
    ssd1306_SetCursor(30,20);
 80032ba:	f005 fccd 	bl	8008c58 <ssd1306_SetCursor>
    for(int i=0; i<4; i++){
 80032be:	4f10      	ldr	r7, [pc, #64]	; (8003300 <display_setBankName+0x60>)
 80032c0:	1d34      	adds	r4, r6, #4
    	ssd1306_WriteChar((char)*pString++, Font_11x18, White);
 80032c2:	f815 0b01 	ldrb.w	r0, [r5], #1
 80032c6:	2301      	movs	r3, #1
 80032c8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80032cc:	f005 fc50 	bl	8008b70 <ssd1306_WriteChar>
    for(int i=0; i<4; i++){
 80032d0:	42ac      	cmp	r4, r5
 80032d2:	d1f6      	bne.n	80032c2 <display_setBankName+0x22>
    }

    ssd1306_SetCursor(30,40);
 80032d4:	2128      	movs	r1, #40	; 0x28
 80032d6:	201e      	movs	r0, #30
 80032d8:	f005 fcbe 	bl	8008c58 <ssd1306_SetCursor>
    for(int i=0; i<8; i++){
 80032dc:	4d09      	ldr	r5, [pc, #36]	; (8003304 <display_setBankName+0x64>)
 80032de:	360c      	adds	r6, #12
    	ssd1306_WriteChar((char)*pString++, Font_7x10, White);
 80032e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80032e4:	2301      	movs	r3, #1
 80032e6:	e895 0006 	ldmia.w	r5, {r1, r2}
 80032ea:	f005 fc41 	bl	8008b70 <ssd1306_WriteChar>
    for(int i=0; i<8; i++){
 80032ee:	42a6      	cmp	r6, r4
 80032f0:	d1f6      	bne.n	80032e0 <display_setBankName+0x40>
    }

    ssd1306_UpdateScreen();
}
 80032f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ssd1306_UpdateScreen();
 80032f6:	f005 bbbd 	b.w	8008a74 <ssd1306_UpdateScreen>
 80032fa:	bf00      	nop
 80032fc:	20000614 	.word	0x20000614
 8003300:	20000158 	.word	0x20000158
 8003304:	20000160 	.word	0x20000160

08003308 <eeprom_load_settings>:
}

void eeprom_load_settings(void){
	uint16_t ee_byte_address = 0;
	// Load the complete EEPROM into RAM
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_mirror, 0x400, 100);
 8003308:	2164      	movs	r1, #100	; 0x64
 800330a:	f44f 6280 	mov.w	r2, #1024	; 0x400
void eeprom_load_settings(void){
 800330e:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_mirror, 0x400, 100);
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <eeprom_load_settings+0x3c>)
void eeprom_load_settings(void){
 8003312:	b085      	sub	sp, #20
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_mirror, 0x400, 100);
 8003314:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	2301      	movs	r3, #1
 800331e:	21a0      	movs	r1, #160	; 0xa0
 8003320:	4809      	ldr	r0, [pc, #36]	; (8003348 <eeprom_load_settings+0x40>)
 8003322:	f001 ff61 	bl	80051e8 <HAL_I2C_Mem_Read>
	if(status != HAL_OK){
 8003326:	b100      	cbz	r0, 800332a <eeprom_load_settings+0x22>
	__NOP();
 8003328:	bf00      	nop
		eeprom_error();
	}

	pGlobalSettings = eeprom_mirror + 128;
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <eeprom_load_settings+0x44>)
 800332c:	4d08      	ldr	r5, [pc, #32]	; (8003350 <eeprom_load_settings+0x48>)
	pBankStrings = pGlobalSettings + 32;
 800332e:	4809      	ldr	r0, [pc, #36]	; (8003354 <eeprom_load_settings+0x4c>)
	pSwitchCmds = pBankStrings + 96;
 8003330:	4a09      	ldr	r2, [pc, #36]	; (8003358 <eeprom_load_settings+0x50>)
	pBankStrings = pGlobalSettings + 32;
 8003332:	f103 0420 	add.w	r4, r3, #32
	pSwitchCmds = pBankStrings + 96;
 8003336:	f103 0180 	add.w	r1, r3, #128	; 0x80
	pGlobalSettings = eeprom_mirror + 128;
 800333a:	602b      	str	r3, [r5, #0]
	pBankStrings = pGlobalSettings + 32;
 800333c:	6004      	str	r4, [r0, #0]
	pSwitchCmds = pBankStrings + 96;
 800333e:	6011      	str	r1, [r2, #0]
}
 8003340:	b005      	add	sp, #20
 8003342:	bd30      	pop	{r4, r5, pc}
 8003344:	20000620 	.word	0x20000620
 8003348:	20000a20 	.word	0x20000a20
 800334c:	200006a0 	.word	0x200006a0
 8003350:	20000618 	.word	0x20000618
 8003354:	20000614 	.word	0x20000614
 8003358:	2000061c 	.word	0x2000061c

0800335c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800335c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800335e:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003360:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003362:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003366:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003368:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
{
 800336c:	b097      	sub	sp, #92	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800336e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003370:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003374:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003378:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800337c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003380:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003384:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003388:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800338c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800338e:	9301      	str	r3, [sp, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003390:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003392:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003394:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003396:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003398:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800339a:	f003 f83f 	bl	800641c <HAL_RCC_OscConfig>
 800339e:	b108      	cbz	r0, 80033a4 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033a4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033aa:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033ac:	4621      	mov	r1, r4
 80033ae:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033b0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033b2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033b4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b6:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033b8:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033ba:	f003 fa71 	bl	80068a0 <HAL_RCC_ClockConfig>
 80033be:	4603      	mov	r3, r0
 80033c0:	b108      	cbz	r0, 80033c6 <SystemClock_Config+0x6a>
 80033c2:	b672      	cpsid	i
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80033c6:	2210      	movs	r2, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c8:	a806      	add	r0, sp, #24
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80033ca:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80033cc:	9206      	str	r2, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ce:	f003 fb27 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 80033d2:	b108      	cbz	r0, 80033d8 <SystemClock_Config+0x7c>
 80033d4:	b672      	cpsid	i
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <SystemClock_Config+0x7a>
}
 80033d8:	b017      	add	sp, #92	; 0x5c
 80033da:	bd30      	pop	{r4, r5, pc}

080033dc <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	2400      	movs	r4, #0
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b088      	sub	sp, #32
  HAL_Init();
 80033e2:	f000 ff09 	bl	80041f8 <HAL_Init>
  SystemClock_Config();
 80033e6:	f7ff ffb9 	bl	800335c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ea:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80033ee:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f2:	4d67      	ldr	r5, [pc, #412]	; (8003590 <main+0x1b4>)
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 80033f4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f6:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 80033f8:	f44f 4130 	mov.w	r1, #45056	; 0xb000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fc:	f043 0310 	orr.w	r3, r3, #16
 8003400:	61ab      	str	r3, [r5, #24]
 8003402:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 8003404:	4863      	ldr	r0, [pc, #396]	; (8003594 <main+0x1b8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800340e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003410:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003412:	f043 0320 	orr.w	r3, r3, #32
 8003416:	61ab      	str	r3, [r5, #24]
 8003418:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003426:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = SW_B_Pin;
 8003428:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	61ab      	str	r3, [r5, #24]
 8003432:	69ab      	ldr	r3, [r5, #24]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800343c:	69ab      	ldr	r3, [r5, #24]
 800343e:	f043 0308 	orr.w	r3, r3, #8
 8003442:	61ab      	str	r3, [r5, #24]
 8003444:	69ab      	ldr	r3, [r5, #24]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 800344e:	f001 fb45 	bl	8004adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_D_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8003452:	4622      	mov	r2, r4
 8003454:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003458:	484f      	ldr	r0, [pc, #316]	; (8003598 <main+0x1bc>)
 800345a:	f001 fb3f 	bl	8004adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_E_Pin|LED_5_Pin|LED_4_Pin|LED_3_Pin
 800345e:	4622      	mov	r2, r4
 8003460:	f245 011e 	movw	r1, #20510	; 0x501e
 8003464:	484d      	ldr	r0, [pc, #308]	; (800359c <main+0x1c0>)
 8003466:	f001 fb39 	bl	8004adc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_C_Pin|LED_B_Pin|USB_ID_Pin;
 800346a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346e:	4849      	ldr	r0, [pc, #292]	; (8003594 <main+0x1b8>)
 8003470:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003472:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003478:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347c:	f001 fa00 	bl	8004880 <HAL_GPIO_Init>
  HAL_GPIO_Init(SW_B_GPIO_Port, &GPIO_InitStruct);
 8003480:	4844      	ldr	r0, [pc, #272]	; (8003594 <main+0x1b8>)
 8003482:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003484:	e9cd 4605 	strd	r4, r6, [sp, #20]
  GPIO_InitStruct.Pin = SW_B_Pin;
 8003488:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(SW_B_GPIO_Port, &GPIO_InitStruct);
 800348a:	f001 f9f9 	bl	8004880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_C_Pin|SW_D_Pin|SW_E_Pin|SW_2_Pin
 800348e:	f248 4351 	movw	r3, #33873	; 0x8451
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003492:	4841      	ldr	r0, [pc, #260]	; (8003598 <main+0x1bc>)
 8003494:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_C_Pin|SW_D_Pin|SW_E_Pin|SW_2_Pin
 8003496:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003498:	e9cd 4605 	strd	r4, r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	f001 f9f0 	bl	8004880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_D_Pin|LED_2_Pin;
 80034a0:	f44f 7390 	mov.w	r3, #288	; 0x120
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a4:	483c      	ldr	r0, [pc, #240]	; (8003598 <main+0x1bc>)
 80034a6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_D_Pin|LED_2_Pin;
 80034a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	e9cd 6405 	strd	r6, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	f001 f9e5 	bl	8004880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_E_Pin|LED_5_Pin|LED_4_Pin|LED_3_Pin
 80034b6:	f245 031e 	movw	r3, #20510	; 0x501e
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ba:	4838      	ldr	r0, [pc, #224]	; (800359c <main+0x1c0>)
 80034bc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_E_Pin|LED_5_Pin|LED_4_Pin|LED_3_Pin
 80034be:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	e9cd 6405 	strd	r6, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c8:	f001 f9da 	bl	8004880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_5_Pin|SW_4_Pin|SW_3_Pin|SW_A_Pin;
 80034cc:	f24a 4320 	movw	r3, #42016	; 0xa420
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d0:	4832      	ldr	r0, [pc, #200]	; (800359c <main+0x1c0>)
 80034d2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_5_Pin|SW_4_Pin|SW_3_Pin|SW_A_Pin;
 80034d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d6:	e9cd 4605 	strd	r4, r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	f001 f9d1 	bl	8004880 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034de:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80034e0:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034e2:	4333      	orrs	r3, r6
 80034e4:	616b      	str	r3, [r5, #20]
 80034e6:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80034e8:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034ea:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80034ec:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034ee:	9304      	str	r3, [sp, #16]
 80034f0:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80034f2:	f000 fec9 	bl	8004288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80034f6:	2011      	movs	r0, #17
 80034f8:	f000 fefe 	bl	80042f8 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 31250;
 80034fc:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003500:	230c      	movs	r3, #12
  huart2.Instance = USART2;
 8003502:	4827      	ldr	r0, [pc, #156]	; (80035a0 <main+0x1c4>)
 8003504:	4927      	ldr	r1, [pc, #156]	; (80035a4 <main+0x1c8>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003506:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800350a:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.BaudRate = 31250;
 800350e:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003512:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003514:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003516:	f003 fb45 	bl	8006ba4 <HAL_UART_Init>
 800351a:	b108      	cbz	r0, 8003520 <main+0x144>
 800351c:	b672      	cpsid	i
  while (1)
 800351e:	e7fe      	b.n	800351e <main+0x142>
  hi2c1.Instance = I2C1;
 8003520:	4603      	mov	r3, r0
 8003522:	4921      	ldr	r1, [pc, #132]	; (80035a8 <main+0x1cc>)
 8003524:	4821      	ldr	r0, [pc, #132]	; (80035ac <main+0x1d0>)
  hi2c1.Init.ClockSpeed = 400000;
 8003526:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <main+0x1d4>)
  hi2c1.Init.OwnAddress1 = 0;
 8003528:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800352c:	e9c0 7304 	strd	r7, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003530:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.ClockSpeed = 400000;
 8003534:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003538:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800353a:	f001 fcef 	bl	8004f1c <HAL_I2C_Init>
 800353e:	4604      	mov	r4, r0
 8003540:	bb20      	cbnz	r0, 800358c <main+0x1b0>
  MX_USB_DEVICE_Init();
 8003542:	f005 fd31 	bl	8008fa8 <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(USB_ID_GPIO_Port, USB_ID_Pin, GPIO_PIN_RESET);
 8003546:	4622      	mov	r2, r4
 8003548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800354c:	4811      	ldr	r0, [pc, #68]	; (8003594 <main+0x1b8>)
 800354e:	f001 fac5 	bl	8004adc <HAL_GPIO_WritePin>
  display_init();
 8003552:	f7ff fe67 	bl	8003224 <display_init>
  eeprom_load_settings();
 8003556:	f7ff fed7 	bl	8003308 <eeprom_load_settings>
  display_setConfigName();
 800355a:	f7ff fe87 	bl	800326c <display_setConfigName>
  sw_led_init();
 800355e:	f000 fbcb 	bl	8003cf8 <sw_led_init>
  HAL_Delay(1000);
 8003562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003566:	f000 fe6b 	bl	8004240 <HAL_Delay>
  HAL_GPIO_WritePin(USB_ID_GPIO_Port, USB_ID_Pin, GPIO_PIN_SET);
 800356a:	4632      	mov	r2, r6
 800356c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003570:	4808      	ldr	r0, [pc, #32]	; (8003594 <main+0x1b8>)
 8003572:	f001 fab3 	bl	8004adc <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8003576:	20c8      	movs	r0, #200	; 0xc8
 8003578:	f000 fe62 	bl	8004240 <HAL_Delay>
  f_sys_config_complete = 1; // Don't scan switch changes until everything is init'd
 800357c:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <main+0x1d8>)
  display_setBankName(0);
 800357e:	4620      	mov	r0, r4
  f_sys_config_complete = 1; // Don't scan switch changes until everything is init'd
 8003580:	701e      	strb	r6, [r3, #0]
  display_setBankName(0);
 8003582:	f7ff fe8d 	bl	80032a0 <display_setBankName>
	  handleSwitches();
 8003586:	f000 fd0f 	bl	8003fa8 <handleSwitches>
  while (1)
 800358a:	e7fc      	b.n	8003586 <main+0x1aa>
 800358c:	b672      	cpsid	i
  while (1)
 800358e:	e7fe      	b.n	800358e <main+0x1b2>
 8003590:	40021000 	.word	0x40021000
 8003594:	40011000 	.word	0x40011000
 8003598:	40010800 	.word	0x40010800
 800359c:	40010c00 	.word	0x40010c00
 80035a0:	20000ab8 	.word	0x20000ab8
 80035a4:	40004400 	.word	0x40004400
 80035a8:	40005400 	.word	0x40005400
 80035ac:	20000a20 	.word	0x20000a20
 80035b0:	00061a80 	.word	0x00061a80
 80035b4:	200001dc 	.word	0x200001dc

080035b8 <Error_Handler>:
 80035b8:	b672      	cpsid	i
 80035ba:	e7fe      	b.n	80035ba <Error_Handler+0x2>

080035bc <midiCmd_get_cmd_toggle>:
	return -1;
}

uint8_t midiCmd_get_cmd_toggle(uint8_t *pRom){
// Toggle state is always stored in the most significant bit of the second cmd byte
	return *(pRom+1) & 0x80;
 80035bc:	7840      	ldrb	r0, [r0, #1]
}
 80035be:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80035c2:	4770      	bx	lr

080035c4 <midiCmd_get_delay>:

/*
 * Returns the delay time to note or pitch bend off in ms
 */
uint32_t midiCmd_get_delay(uint8_t *pRom){
	return (uint32_t)*(pRom+3) * 10;
 80035c4:	78c0      	ldrb	r0, [r0, #3]
 80035c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 80035ca:	0040      	lsls	r0, r0, #1
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop

080035d0 <midi_serial_start_next_dma>:

void midi_serial_start_next_dma(void){
 80035d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t buffer_to_transmit = 0xFF;
	// Find the next buffer ready for transmit
	for(int i=0; i<4; i++){
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 80035d4:	4e0e      	ldr	r6, [pc, #56]	; (8003610 <midi_serial_start_next_dma+0x40>)
 80035d6:	4d0f      	ldr	r5, [pc, #60]	; (8003614 <midi_serial_start_next_dma+0x44>)
 80035d8:	7831      	ldrb	r1, [r6, #0]
 80035da:	1c4b      	adds	r3, r1, #1
 80035dc:	3105      	adds	r1, #5
 80035de:	f003 0403 	and.w	r4, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] != 0){
 80035e2:	5d2a      	ldrb	r2, [r5, r4]
 80035e4:	3301      	adds	r3, #1
 80035e6:	b91a      	cbnz	r2, 80035f0 <midi_serial_start_next_dma+0x20>
	for(int i=0; i<4; i++){
 80035e8:	4299      	cmp	r1, r3
 80035ea:	d1f8      	bne.n	80035de <midi_serial_start_next_dma+0xe>
				midi_uart_out_buffer_bytes_to_tx[buffer_to_transmit]) != HAL_OK)
			;
		last_transmitted_buffer = buffer_to_transmit;
	}

}
 80035ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		while(HAL_UART_Transmit_DMA(&huart2, midi_uart_out_buffer[buffer_to_transmit],
 80035f0:	4f09      	ldr	r7, [pc, #36]	; (8003618 <midi_serial_start_next_dma+0x48>)
 80035f2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800361c <midi_serial_start_next_dma+0x4c>
 80035f6:	eb07 1704 	add.w	r7, r7, r4, lsl #4
 80035fa:	e000      	b.n	80035fe <midi_serial_start_next_dma+0x2e>
 80035fc:	5d2a      	ldrb	r2, [r5, r4]
 80035fe:	4639      	mov	r1, r7
 8003600:	4640      	mov	r0, r8
 8003602:	f003 faff 	bl	8006c04 <HAL_UART_Transmit_DMA>
 8003606:	2800      	cmp	r0, #0
 8003608:	d1f8      	bne.n	80035fc <midi_serial_start_next_dma+0x2c>
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 800360a:	7034      	strb	r4, [r6, #0]
}
 800360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003610:	20000000 	.word	0x20000000
 8003614:	200001e0 	.word	0x200001e0
 8003618:	20000afc 	.word	0x20000afc
 800361c:	20000ab8 	.word	0x20000ab8

08003620 <HAL_UART_TxCpltCallback>:
	// nothing to be done.
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == huart2.Instance){
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_UART_TxCpltCallback+0x1c>)
 8003622:	6802      	ldr	r2, [r0, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d000      	beq.n	800362c <HAL_UART_TxCpltCallback+0xc>
		// last sent buffer is complete, start another transfer.
		midi_uart_out_buffer_bytes_to_tx[last_transmitted_buffer] = 0;
		midi_serial_start_next_dma();
	}
}
 800362a:	4770      	bx	lr
		midi_uart_out_buffer_bytes_to_tx[last_transmitted_buffer] = 0;
 800362c:	2100      	movs	r1, #0
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <HAL_UART_TxCpltCallback+0x20>)
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_UART_TxCpltCallback+0x24>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	54d1      	strb	r1, [r2, r3]
		midi_serial_start_next_dma();
 8003636:	f7ff bfcb 	b.w	80035d0 <midi_serial_start_next_dma>
 800363a:	bf00      	nop
 800363c:	20000ab8 	.word	0x20000ab8
 8003640:	20000000 	.word	0x20000000
 8003644:	200001e0 	.word	0x200001e0

08003648 <midiCmd_send_stop_command>:

int8_t midiCmd_send_stop_command(void){
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <midiCmd_send_stop_command+0x5c>)
 800364e:	4d16      	ldr	r5, [pc, #88]	; (80036a8 <midiCmd_send_stop_command+0x60>)
 8003650:	7819      	ldrb	r1, [r3, #0]
 8003652:	1c4b      	adds	r3, r1, #1
 8003654:	3105      	adds	r1, #5
 8003656:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 800365a:	5cac      	ldrb	r4, [r5, r2]
 800365c:	3301      	adds	r3, #1
 800365e:	b12c      	cbz	r4, 800366c <midiCmd_send_stop_command+0x24>
	for(int i=0; i<4; i++){
 8003660:	428b      	cmp	r3, r1
 8003662:	d1f8      	bne.n	8003656 <midiCmd_send_stop_command+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8003664:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 8003666:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 800366a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = CIN_SINGLE_BYTE;
 800366c:	260f      	movs	r6, #15
	*(usbBuf++) = 0xFC; // Start byte
 800366e:	23fc      	movs	r3, #252	; 0xfc
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 8003670:	2101      	movs	r1, #1
	*(usbBuf++) = CIN_SINGLE_BYTE;
 8003672:	480e      	ldr	r0, [pc, #56]	; (80036ac <midiCmd_send_stop_command+0x64>)
	*serialBuf = 0xFC;
 8003674:	4f0e      	ldr	r7, [pc, #56]	; (80036b0 <midiCmd_send_stop_command+0x68>)
	*(usbBuf++) = CIN_SINGLE_BYTE;
 8003676:	7006      	strb	r6, [r0, #0]
	*serialBuf = 0xFC;
 8003678:	0116      	lsls	r6, r2, #4
	*(usbBuf++) = 0; // Pad
 800367a:	7084      	strb	r4, [r0, #2]
	*(usbBuf++) = 0; // Pad
 800367c:	70c4      	strb	r4, [r0, #3]
	*(usbBuf++) = 0xFC; // Start byte
 800367e:	7043      	strb	r3, [r0, #1]
	*serialBuf = 0xFC;
 8003680:	55bb      	strb	r3, [r7, r6]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 8003682:	54a9      	strb	r1, [r5, r2]
 8003684:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 8003686:	2104      	movs	r1, #4
 8003688:	f005 fd2e 	bl	80090e8 <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <midiCmd_send_stop_command+0x6c>)
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	2b20      	cmp	r3, #32
 8003694:	d001      	beq.n	800369a <midiCmd_send_stop_command+0x52>
	return 0;
 8003696:	4620      	mov	r0, r4
}
 8003698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		midi_serial_start_next_dma();
 800369a:	f7ff ff99 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 800369e:	4620      	mov	r0, r4
 80036a0:	e7fa      	b.n	8003698 <midiCmd_send_stop_command+0x50>
 80036a2:	bf00      	nop
 80036a4:	20000000 	.word	0x20000000
 80036a8:	200001e0 	.word	0x200001e0
 80036ac:	20000b3c 	.word	0x20000b3c
 80036b0:	20000afc 	.word	0x20000afc
 80036b4:	20000ab8 	.word	0x20000ab8

080036b8 <midiCmd_send_byte_serial>:

/*
 * Send a single byte message just through to the serial midi port.
 * This is to transfer start/stop/sync messages through from the USB to the midi port
 */
void midiCmd_send_byte_serial(uint8_t byteMessage){
 80036b8:	b430      	push	{r4, r5}
  __ASM volatile ("cpsid i" : : : "memory");
 80036ba:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <midiCmd_send_byte_serial+0x44>)
 80036be:	4d10      	ldr	r5, [pc, #64]	; (8003700 <midiCmd_send_byte_serial+0x48>)
 80036c0:	7819      	ldrb	r1, [r3, #0]
 80036c2:	1c4b      	adds	r3, r1, #1
 80036c4:	3105      	adds	r1, #5
 80036c6:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 80036ca:	5cac      	ldrb	r4, [r5, r2]
 80036cc:	3301      	adds	r3, #1
 80036ce:	b124      	cbz	r4, 80036da <midiCmd_send_byte_serial+0x22>
	for(int i=0; i<4; i++){
 80036d0:	428b      	cmp	r3, r1
 80036d2:	d1f8      	bne.n	80036c6 <midiCmd_send_byte_serial+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 80036d4:	b662      	cpsie	i
	*serialBuf = byteMessage;
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
	__enable_irq();

	midi_serial_transmit();
}
 80036d6:	bc30      	pop	{r4, r5}
 80036d8:	4770      	bx	lr
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 80036da:	2401      	movs	r4, #1
	*serialBuf = byteMessage;
 80036dc:	4909      	ldr	r1, [pc, #36]	; (8003704 <midiCmd_send_byte_serial+0x4c>)
 80036de:	0113      	lsls	r3, r2, #4
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 80036e0:	54ac      	strb	r4, [r5, r2]
	*serialBuf = byteMessage;
 80036e2:	54c8      	strb	r0, [r1, r3]
 80036e4:	b662      	cpsie	i
	if(huart2.gState == HAL_UART_STATE_READY){
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <midiCmd_send_byte_serial+0x50>)
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d001      	beq.n	80036f4 <midiCmd_send_byte_serial+0x3c>
}
 80036f0:	bc30      	pop	{r4, r5}
 80036f2:	4770      	bx	lr
 80036f4:	bc30      	pop	{r4, r5}
		midi_serial_start_next_dma();
 80036f6:	f7ff bf6b 	b.w	80035d0 <midi_serial_start_next_dma>
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000
 8003700:	200001e0 	.word	0x200001e0
 8003704:	20000afc 	.word	0x20000afc
 8003708:	20000ab8 	.word	0x20000ab8

0800370c <midiCmd_send_start_command>:

int8_t midiCmd_send_start_command(void){
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800370e:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <midiCmd_send_start_command+0x5c>)
 8003712:	4d16      	ldr	r5, [pc, #88]	; (800376c <midiCmd_send_start_command+0x60>)
 8003714:	7819      	ldrb	r1, [r3, #0]
 8003716:	1c4b      	adds	r3, r1, #1
 8003718:	3105      	adds	r1, #5
 800371a:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 800371e:	5cac      	ldrb	r4, [r5, r2]
 8003720:	3301      	adds	r3, #1
 8003722:	b12c      	cbz	r4, 8003730 <midiCmd_send_start_command+0x24>
	for(int i=0; i<4; i++){
 8003724:	428b      	cmp	r3, r1
 8003726:	d1f8      	bne.n	800371a <midiCmd_send_start_command+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8003728:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 800372a:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 800372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = CIN_SINGLE_BYTE;
 8003730:	260f      	movs	r6, #15
	*(usbBuf++) = 0xFA; // Start byte
 8003732:	23fa      	movs	r3, #250	; 0xfa
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 8003734:	2101      	movs	r1, #1
	*(usbBuf++) = CIN_SINGLE_BYTE;
 8003736:	480e      	ldr	r0, [pc, #56]	; (8003770 <midiCmd_send_start_command+0x64>)
	*serialBuf = 0xFA;
 8003738:	4f0e      	ldr	r7, [pc, #56]	; (8003774 <midiCmd_send_start_command+0x68>)
	*(usbBuf++) = CIN_SINGLE_BYTE;
 800373a:	7006      	strb	r6, [r0, #0]
	*serialBuf = 0xFA;
 800373c:	0116      	lsls	r6, r2, #4
	*(usbBuf++) = 0; // Pad
 800373e:	7084      	strb	r4, [r0, #2]
	*(usbBuf++) = 0; // Pad
 8003740:	70c4      	strb	r4, [r0, #3]
	*(usbBuf++) = 0xFA; // Start byte
 8003742:	7043      	strb	r3, [r0, #1]
	*serialBuf = 0xFA;
 8003744:	55bb      	strb	r3, [r7, r6]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 8003746:	54a9      	strb	r1, [r5, r2]
 8003748:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 800374a:	2104      	movs	r1, #4
 800374c:	f005 fccc 	bl	80090e8 <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <midiCmd_send_start_command+0x6c>)
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	2b20      	cmp	r3, #32
 8003758:	d001      	beq.n	800375e <midiCmd_send_start_command+0x52>
	return 0;
 800375a:	4620      	mov	r0, r4
}
 800375c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		midi_serial_start_next_dma();
 800375e:	f7ff ff37 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 8003762:	4620      	mov	r0, r4
 8003764:	e7fa      	b.n	800375c <midiCmd_send_start_command+0x50>
 8003766:	bf00      	nop
 8003768:	20000000 	.word	0x20000000
 800376c:	200001e0 	.word	0x200001e0
 8003770:	20000b3c 	.word	0x20000b3c
 8003774:	20000afc 	.word	0x20000afc
 8003778:	20000ab8 	.word	0x20000ab8

0800377c <midiCmd_send_pb_command_from_rom>:


int8_t midiCmd_send_pb_command_from_rom(uint8_t *pRom, uint8_t on_off){
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800377e:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003780:	4b21      	ldr	r3, [pc, #132]	; (8003808 <midiCmd_send_pb_command_from_rom+0x8c>)
 8003782:	4e22      	ldr	r6, [pc, #136]	; (800380c <midiCmd_send_pb_command_from_rom+0x90>)
 8003784:	781c      	ldrb	r4, [r3, #0]
 8003786:	1c63      	adds	r3, r4, #1
 8003788:	3405      	adds	r4, #5
 800378a:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 800378e:	5cb5      	ldrb	r5, [r6, r2]
 8003790:	3301      	adds	r3, #1
 8003792:	b12d      	cbz	r5, 80037a0 <midiCmd_send_pb_command_from_rom+0x24>
	for(int i=0; i<4; i++){
 8003794:	42a3      	cmp	r3, r4
 8003796:	d1f8      	bne.n	800378a <midiCmd_send_pb_command_from_rom+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8003798:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 800379a:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 800379e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = CIN_PITCHBEND_CHANGE;
 80037a0:	230e      	movs	r3, #14
 80037a2:	4c1b      	ldr	r4, [pc, #108]	; (8003810 <midiCmd_send_pb_command_from_rom+0x94>)
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80037a4:	4d1b      	ldr	r5, [pc, #108]	; (8003814 <midiCmd_send_pb_command_from_rom+0x98>)
	*(usbBuf++) = CIN_PITCHBEND_CHANGE;
 80037a6:	7023      	strb	r3, [r4, #0]
	*(usbBuf++) = 0xE0| (pRom[0] & 0xF); // Channel
 80037a8:	7803      	ldrb	r3, [r0, #0]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80037aa:	eb05 1702 	add.w	r7, r5, r2, lsl #4
	*(usbBuf++) = 0xE0| (pRom[0] & 0xF); // Channel
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	f063 031f 	orn	r3, r3, #31
 80037b6:	7063      	strb	r3, [r4, #1]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80037b8:	ea4f 1c02 	mov.w	ip, r2, lsl #4
	*(usbBuf++) = on_off ? (pRom[1] & 0x7F) : 0x0; // PB LSB
 80037bc:	b9b9      	cbnz	r1, 80037ee <midiCmd_send_pb_command_from_rom+0x72>
	*(usbBuf++) = on_off ? (pRom[2] & 0x7F) : (0X2000 >> 7) & 0X7f; // PB MSB
 80037be:	2340      	movs	r3, #64	; 0x40
	*(usbBuf++) = on_off ? (pRom[1] & 0x7F) : 0x0; // PB LSB
 80037c0:	70a1      	strb	r1, [r4, #2]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 80037c2:	f04f 0e03 	mov.w	lr, #3
	memcpy(serialBuf, (usbBuf-3), 3);
 80037c6:	4814      	ldr	r0, [pc, #80]	; (8003818 <midiCmd_send_pb_command_from_rom+0x9c>)
	*(usbBuf++) = on_off ? (pRom[2] & 0x7F) : (0X2000 >> 7) & 0X7f; // PB MSB
 80037c8:	70e3      	strb	r3, [r4, #3]
	memcpy(serialBuf, (usbBuf-3), 3);
 80037ca:	f830 1901 	ldrh.w	r1, [r0], #-1
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 80037ce:	f806 e002 	strb.w	lr, [r6, r2]
	memcpy(serialBuf, (usbBuf-3), 3);
 80037d2:	f82c 1005 	strh.w	r1, [ip, r5]
 80037d6:	70bb      	strb	r3, [r7, #2]
 80037d8:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 80037da:	2104      	movs	r1, #4
 80037dc:	f005 fc84 	bl	80090e8 <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <midiCmd_send_pb_command_from_rom+0xa0>)
 80037e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d009      	beq.n	80037fe <midiCmd_send_pb_command_from_rom+0x82>
	return 0;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = on_off ? (pRom[1] & 0x7F) : 0x0; // PB LSB
 80037ee:	7843      	ldrb	r3, [r0, #1]
 80037f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f4:	70a3      	strb	r3, [r4, #2]
	*(usbBuf++) = on_off ? (pRom[2] & 0x7F) : (0X2000 >> 7) & 0X7f; // PB MSB
 80037f6:	7883      	ldrb	r3, [r0, #2]
 80037f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037fc:	e7e1      	b.n	80037c2 <midiCmd_send_pb_command_from_rom+0x46>
		midi_serial_start_next_dma();
 80037fe:	f7ff fee7 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 8003802:	2000      	movs	r0, #0
}
 8003804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000
 800380c:	200001e0 	.word	0x200001e0
 8003810:	20000b3c 	.word	0x20000b3c
 8003814:	20000afc 	.word	0x20000afc
 8003818:	20000b3d 	.word	0x20000b3d
 800381c:	20000ab8 	.word	0x20000ab8

08003820 <midiCmd_send_note_command_from_rom>:

int8_t midiCmd_send_note_command_from_rom(uint8_t *pRom, uint8_t on_off){
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8003822:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003824:	4b29      	ldr	r3, [pc, #164]	; (80038cc <midiCmd_send_note_command_from_rom+0xac>)
 8003826:	4e2a      	ldr	r6, [pc, #168]	; (80038d0 <midiCmd_send_note_command_from_rom+0xb0>)
 8003828:	781c      	ldrb	r4, [r3, #0]
 800382a:	1c63      	adds	r3, r4, #1
 800382c:	3405      	adds	r4, #5
 800382e:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 8003832:	5cb5      	ldrb	r5, [r6, r2]
 8003834:	3301      	adds	r3, #1
 8003836:	b12d      	cbz	r5, 8003844 <midiCmd_send_note_command_from_rom+0x24>
	for(int i=0; i<4; i++){
 8003838:	429c      	cmp	r4, r3
 800383a:	d1f8      	bne.n	800382e <midiCmd_send_note_command_from_rom+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 800383c:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 800383e:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 8003842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 8003844:	4d23      	ldr	r5, [pc, #140]	; (80038d4 <midiCmd_send_note_command_from_rom+0xb4>)
 8003846:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 800384a:	eb05 1702 	add.w	r7, r5, r2, lsl #4
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 800384e:	bb29      	cbnz	r1, 800389c <midiCmd_send_note_command_from_rom+0x7c>
	*(usbBuf) = (on_off) ? 0x90 : 0x80; // Note on/off
 8003850:	2480      	movs	r4, #128	; 0x80
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 8003852:	f04f 0e08 	mov.w	lr, #8
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <midiCmd_send_note_command_from_rom+0xb8>)
	*(usbBuf) = (on_off) ? 0x90 : 0x80; // Note on/off
 8003858:	705c      	strb	r4, [r3, #1]
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 800385a:	f883 e000 	strb.w	lr, [r3]
	*(usbBuf++) |= pRom[0] & 0xF; // Channel
 800385e:	7804      	ldrb	r4, [r0, #0]
 8003860:	f004 040f 	and.w	r4, r4, #15
 8003864:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8003868:	705c      	strb	r4, [r3, #1]
	*(usbBuf++) = pRom[1] & 0x7F; // Note Number
 800386a:	7840      	ldrb	r0, [r0, #1]
 800386c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003870:	7098      	strb	r0, [r3, #2]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 8003872:	2403      	movs	r4, #3
	memcpy(serialBuf, (usbBuf-3), 3);
 8003874:	4819      	ldr	r0, [pc, #100]	; (80038dc <midiCmd_send_note_command_from_rom+0xbc>)
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : 0; // Velocity
 8003876:	70d9      	strb	r1, [r3, #3]
	memcpy(serialBuf, (usbBuf-3), 3);
 8003878:	7883      	ldrb	r3, [r0, #2]
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 800387a:	54b4      	strb	r4, [r6, r2]
	memcpy(serialBuf, (usbBuf-3), 3);
 800387c:	8802      	ldrh	r2, [r0, #0]
 800387e:	f82c 2005 	strh.w	r2, [ip, r5]
 8003882:	70bb      	strb	r3, [r7, #2]
 8003884:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 8003886:	2104      	movs	r1, #4
 8003888:	3801      	subs	r0, #1
 800388a:	f005 fc2d 	bl	80090e8 <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 800388e:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <midiCmd_send_note_command_from_rom+0xc0>)
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	2b20      	cmp	r3, #32
 8003896:	d014      	beq.n	80038c2 <midiCmd_send_note_command_from_rom+0xa2>
	return 0;
 8003898:	2000      	movs	r0, #0
}
 800389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf) = (on_off) ? 0x90 : 0x80; // Note on/off
 800389c:	2190      	movs	r1, #144	; 0x90
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 800389e:	2409      	movs	r4, #9
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <midiCmd_send_note_command_from_rom+0xb8>)
	*(usbBuf) = (on_off) ? 0x90 : 0x80; // Note on/off
 80038a2:	7059      	strb	r1, [r3, #1]
	*(usbBuf++) = (on_off) ? CIN_NOTE_ON : CIN_NOTE_OFF;
 80038a4:	701c      	strb	r4, [r3, #0]
	*(usbBuf++) |= pRom[0] & 0xF; // Channel
 80038a6:	7801      	ldrb	r1, [r0, #0]
 80038a8:	f001 010f 	and.w	r1, r1, #15
 80038ac:	f061 016f 	orn	r1, r1, #111	; 0x6f
 80038b0:	7059      	strb	r1, [r3, #1]
	*(usbBuf++) = pRom[1] & 0x7F; // Note Number
 80038b2:	7841      	ldrb	r1, [r0, #1]
 80038b4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80038b8:	7099      	strb	r1, [r3, #2]
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : 0; // Velocity
 80038ba:	7881      	ldrb	r1, [r0, #2]
 80038bc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80038c0:	e7d7      	b.n	8003872 <midiCmd_send_note_command_from_rom+0x52>
		midi_serial_start_next_dma();
 80038c2:	f7ff fe85 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 80038c6:	2000      	movs	r0, #0
}
 80038c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000000 	.word	0x20000000
 80038d0:	200001e0 	.word	0x200001e0
 80038d4:	20000afc 	.word	0x20000afc
 80038d8:	20000b3c 	.word	0x20000b3c
 80038dc:	20000b3d 	.word	0x20000b3d
 80038e0:	20000ab8 	.word	0x20000ab8

080038e4 <midiCmd_send_cc_command_from_rom>:

int8_t midiCmd_send_cc_command_from_rom(uint8_t *pRom, uint8_t on_off){
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Check switch off value is valid, else no off value will be sent
	if(!on_off){
 80038e6:	b919      	cbnz	r1, 80038f0 <midiCmd_send_cc_command_from_rom+0xc>
		if(pRom[3] > 0x7F)
 80038e8:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	db3c      	blt.n	800396a <midiCmd_send_cc_command_from_rom+0x86>
  __ASM volatile ("cpsid i" : : : "memory");
 80038f0:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 80038f2:	4b21      	ldr	r3, [pc, #132]	; (8003978 <midiCmd_send_cc_command_from_rom+0x94>)
 80038f4:	4e21      	ldr	r6, [pc, #132]	; (800397c <midiCmd_send_cc_command_from_rom+0x98>)
 80038f6:	781c      	ldrb	r4, [r3, #0]
 80038f8:	1c63      	adds	r3, r4, #1
 80038fa:	3405      	adds	r4, #5
 80038fc:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 8003900:	5cb5      	ldrb	r5, [r6, r2]
 8003902:	3301      	adds	r3, #1
 8003904:	b12d      	cbz	r5, 8003912 <midiCmd_send_cc_command_from_rom+0x2e>
	for(int i=0; i<4; i++){
 8003906:	42a3      	cmp	r3, r4
 8003908:	d1f8      	bne.n	80038fc <midiCmd_send_cc_command_from_rom+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 800390a:	b662      	cpsie	i

	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 8003910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = CIN_CONTROL_CHANGE;
 8003912:	230b      	movs	r3, #11
 8003914:	4c1a      	ldr	r4, [pc, #104]	; (8003980 <midiCmd_send_cc_command_from_rom+0x9c>)
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 8003916:	4d1b      	ldr	r5, [pc, #108]	; (8003984 <midiCmd_send_cc_command_from_rom+0xa0>)
	*(usbBuf++) = CIN_CONTROL_CHANGE;
 8003918:	7023      	strb	r3, [r4, #0]
	*(usbBuf++) = 0xB0 | (pRom[0] & 0xF); // CC and Channel
 800391a:	7803      	ldrb	r3, [r0, #0]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 800391c:	eb05 1702 	add.w	r7, r5, r2, lsl #4
	*(usbBuf++) = 0xB0 | (pRom[0] & 0xF); // CC and Channel
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003928:	7063      	strb	r3, [r4, #1]
	*(usbBuf++) = pRom[1] & 0x7F; // CC Number
 800392a:	7843      	ldrb	r3, [r0, #1]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 800392c:	ea4f 1c02 	mov.w	ip, r2, lsl #4
	*(usbBuf++) = pRom[1] & 0x7F; // CC Number
 8003930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003934:	70a3      	strb	r3, [r4, #2]
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : pRom[3] & 0x7F; // Value
 8003936:	b9d1      	cbnz	r1, 800396e <midiCmd_send_cc_command_from_rom+0x8a>
 8003938:	78c3      	ldrb	r3, [r0, #3]
 800393a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 800393e:	f04f 0e03 	mov.w	lr, #3
	memcpy(serialBuf, (usbBuf-3), 3);
 8003942:	4811      	ldr	r0, [pc, #68]	; (8003988 <midiCmd_send_cc_command_from_rom+0xa4>)
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : pRom[3] & 0x7F; // Value
 8003944:	70e3      	strb	r3, [r4, #3]
	memcpy(serialBuf, (usbBuf-3), 3);
 8003946:	f830 1901 	ldrh.w	r1, [r0], #-1
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 800394a:	f806 e002 	strb.w	lr, [r6, r2]
	memcpy(serialBuf, (usbBuf-3), 3);
 800394e:	f82c 1005 	strh.w	r1, [ip, r5]
 8003952:	70bb      	strb	r3, [r7, #2]
 8003954:	b662      	cpsie	i
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 8003956:	2104      	movs	r1, #4
 8003958:	f005 fbc6 	bl	80090e8 <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <midiCmd_send_cc_command_from_rom+0xa8>)
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	2b20      	cmp	r3, #32
 8003964:	d101      	bne.n	800396a <midiCmd_send_cc_command_from_rom+0x86>
		midi_serial_start_next_dma();
 8003966:	f7ff fe33 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 800396a:	2000      	movs	r0, #0
}
 800396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*(usbBuf++) = (on_off) ?  pRom[2] & 0x7F : pRom[3] & 0x7F; // Value
 800396e:	7883      	ldrb	r3, [r0, #2]
 8003970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003974:	e7e3      	b.n	800393e <midiCmd_send_cc_command_from_rom+0x5a>
 8003976:	bf00      	nop
 8003978:	20000000 	.word	0x20000000
 800397c:	200001e0 	.word	0x200001e0
 8003980:	20000b3c 	.word	0x20000b3c
 8003984:	20000afc 	.word	0x20000afc
 8003988:	20000b3d 	.word	0x20000b3d
 800398c:	20000ab8 	.word	0x20000ab8

08003990 <midiCmd_send_pc_command_from_rom>:


int8_t midiCmd_send_pc_command_from_rom(uint8_t *pRom){
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8003992:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003994:	4b37      	ldr	r3, [pc, #220]	; (8003a74 <midiCmd_send_pc_command_from_rom+0xe4>)
 8003996:	4f38      	ldr	r7, [pc, #224]	; (8003a78 <midiCmd_send_pc_command_from_rom+0xe8>)
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	1c53      	adds	r3, r2, #1
 800399c:	3205      	adds	r2, #5
 800399e:	f003 0503 	and.w	r5, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 80039a2:	5d7c      	ldrb	r4, [r7, r5]
 80039a4:	3301      	adds	r3, #1
 80039a6:	b12c      	cbz	r4, 80039b4 <midiCmd_send_pc_command_from_rom+0x24>
	for(int i=0; i<4; i++){
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d1f8      	bne.n	800399e <midiCmd_send_pc_command_from_rom+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 80039ac:	b662      	cpsie	i
	__disable_irq();
	int8_t buffer_no = get_next_available_tx_buffer();
	if(buffer_no < 0){
		__enable_irq();
		return ERROR_BUFFERS_FULL;
 80039ae:	f04f 30ff 	mov.w	r0, #4294967295
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);

	midi_serial_transmit();
	return 0;
}
 80039b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(pRom[2] < 0x80){ // Bank Select MSB
 80039b4:	f990 3002 	ldrsb.w	r3, [r0, #2]
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80039b8:	4e30      	ldr	r6, [pc, #192]	; (8003a7c <midiCmd_send_pc_command_from_rom+0xec>)
	if(pRom[2] < 0x80){ // Bank Select MSB
 80039ba:	2b00      	cmp	r3, #0
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80039bc:	eb06 1c05 	add.w	ip, r6, r5, lsl #4
 80039c0:	ea4f 1e05 	mov.w	lr, r5, lsl #4
	if(pRom[2] < 0x80){ // Bank Select MSB
 80039c4:	da3b      	bge.n	8003a3e <midiCmd_send_pc_command_from_rom+0xae>
	uint8_t *usbBuf = midi_usb_assembly_buffer;
 80039c6:	492e      	ldr	r1, [pc, #184]	; (8003a80 <midiCmd_send_pc_command_from_rom+0xf0>)
	uint8_t *serialBuf = &(midi_uart_out_buffer[buffer_no][0]);
 80039c8:	4662      	mov	r2, ip
	uint8_t *usbBuf = midi_usb_assembly_buffer;
 80039ca:	460b      	mov	r3, r1
	if(pRom[3] < 0x80){ // Bank Select LSB
 80039cc:	f990 4003 	ldrsb.w	r4, [r0, #3]
 80039d0:	2c00      	cmp	r4, #0
 80039d2:	db11      	blt.n	80039f8 <midiCmd_send_pc_command_from_rom+0x68>
		*(usbBuf++) = CIN_CONTROL_CHANGE;
 80039d4:	240b      	movs	r4, #11
		*(usbBuf++) = MIDI_PC_BANK_SELECT_LSB;
 80039d6:	2620      	movs	r6, #32
		*(usbBuf++) = CIN_CONTROL_CHANGE;
 80039d8:	701c      	strb	r4, [r3, #0]
		*(usbBuf++) = 0xB0 | (pRom[0] & 0xF);
 80039da:	7804      	ldrb	r4, [r0, #0]
		*(usbBuf++) = MIDI_PC_BANK_SELECT_LSB;
 80039dc:	709e      	strb	r6, [r3, #2]
		*(usbBuf++) = 0xB0 | (pRom[0] & 0xF);
 80039de:	f004 040f 	and.w	r4, r4, #15
 80039e2:	f064 044f 	orn	r4, r4, #79	; 0x4f
 80039e6:	705c      	strb	r4, [r3, #1]
		*(usbBuf++) = pRom[3];
 80039e8:	78c4      	ldrb	r4, [r0, #3]
		memcpy(serialBuf, (usbBuf-3), 3);
 80039ea:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		*(usbBuf++) = pRom[3];
 80039ee:	70dc      	strb	r4, [r3, #3]
		memcpy(serialBuf, (usbBuf-3), 3);
 80039f0:	7094      	strb	r4, [r2, #2]
 80039f2:	8016      	strh	r6, [r2, #0]
		*(usbBuf++) = pRom[3];
 80039f4:	3304      	adds	r3, #4
		serialBuf += 3;
 80039f6:	3203      	adds	r2, #3
	*(usbBuf++) = CIN_PROGRAM_CHANGE;
 80039f8:	240c      	movs	r4, #12
	*(usbBuf++) = 0; // must pad USB packets to 32b
 80039fa:	2600      	movs	r6, #0
	*(usbBuf++) = CIN_PROGRAM_CHANGE;
 80039fc:	701c      	strb	r4, [r3, #0]
	*(usbBuf++) = 0xC0 | (pRom[0] & 0xF);
 80039fe:	7804      	ldrb	r4, [r0, #0]
 8003a00:	f004 040f 	and.w	r4, r4, #15
 8003a04:	f064 043f 	orn	r4, r4, #63	; 0x3f
 8003a08:	705c      	strb	r4, [r3, #1]
	*(usbBuf++) = pRom[1] & 0x7F;
 8003a0a:	7840      	ldrb	r0, [r0, #1]
	*(usbBuf++) = 0; // must pad USB packets to 32b
 8003a0c:	70de      	strb	r6, [r3, #3]
	*(usbBuf++) = pRom[1] & 0x7F;
 8003a0e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003a12:	7098      	strb	r0, [r3, #2]
	memcpy(serialBuf, (usbBuf-3), 2);
 8003a14:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 8003a18:	f822 0b02 	strh.w	r0, [r2], #2
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = serialBuf - &midi_uart_out_buffer[buffer_no][0];
 8003a1c:	eba2 020c 	sub.w	r2, r2, ip
 8003a20:	557a      	strb	r2, [r7, r5]
 8003a22:	b662      	cpsie	i
	*(usbBuf++) = 0; // must pad USB packets to 32b
 8003a24:	3304      	adds	r3, #4
	uint8_t usb_bytes_to_tx = usbBuf - midi_usb_assembly_buffer;
 8003a26:	1a59      	subs	r1, r3, r1
	MIDI_DataTx(midi_usb_assembly_buffer, usb_bytes_to_tx);
 8003a28:	4815      	ldr	r0, [pc, #84]	; (8003a80 <midiCmd_send_pc_command_from_rom+0xf0>)
 8003a2a:	b2c9      	uxtb	r1, r1
 8003a2c:	f005 fb5c 	bl	80090e8 <MIDI_DataTx>
	if(huart2.gState == HAL_UART_STATE_READY){
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <midiCmd_send_pc_command_from_rom+0xf4>)
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d017      	beq.n	8003a6a <midiCmd_send_pc_command_from_rom+0xda>
	return 0;
 8003a3a:	4630      	mov	r0, r6
}
 8003a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*(usbBuf++) = CIN_CONTROL_CHANGE;
 8003a3e:	230b      	movs	r3, #11
 8003a40:	490f      	ldr	r1, [pc, #60]	; (8003a80 <midiCmd_send_pc_command_from_rom+0xf0>)
		serialBuf += 3;
 8003a42:	f10c 0203 	add.w	r2, ip, #3
		*(usbBuf++) = CIN_CONTROL_CHANGE;
 8003a46:	700b      	strb	r3, [r1, #0]
		*(usbBuf++) = 0xB0 | (pRom[0] & 0xF);
 8003a48:	7803      	ldrb	r3, [r0, #0]
		*(usbBuf++) = MIDI_PC_BANK_SELECT_MSB;
 8003a4a:	708c      	strb	r4, [r1, #2]
		*(usbBuf++) = 0xB0 | (pRom[0] & 0xF);
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003a54:	704b      	strb	r3, [r1, #1]
		memcpy(serialBuf, (usbBuf-3), 3);
 8003a56:	f8b1 4001 	ldrh.w	r4, [r1, #1]
		*(usbBuf++) = pRom[2];
 8003a5a:	7883      	ldrb	r3, [r0, #2]
		memcpy(serialBuf, (usbBuf-3), 3);
 8003a5c:	f82e 4006 	strh.w	r4, [lr, r6]
		*(usbBuf++) = pRom[2];
 8003a60:	70cb      	strb	r3, [r1, #3]
		memcpy(serialBuf, (usbBuf-3), 3);
 8003a62:	f88c 3002 	strb.w	r3, [ip, #2]
		*(usbBuf++) = pRom[2];
 8003a66:	1d0b      	adds	r3, r1, #4
 8003a68:	e7b0      	b.n	80039cc <midiCmd_send_pc_command_from_rom+0x3c>
		midi_serial_start_next_dma();
 8003a6a:	f7ff fdb1 	bl	80035d0 <midi_serial_start_next_dma>
	return 0;
 8003a6e:	4630      	mov	r0, r6
}
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000000 	.word	0x20000000
 8003a78:	200001e0 	.word	0x200001e0
 8003a7c:	20000afc 	.word	0x20000afc
 8003a80:	20000b3c 	.word	0x20000b3c
 8003a84:	20000ab8 	.word	0x20000ab8

08003a88 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_MspInit+0x3c>)
{
 8003a8a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a8c:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a8e:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	619a      	str	r2, [r3, #24]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	f002 0201 	and.w	r2, r2, #1
 8003a9c:	9200      	str	r2, [sp, #0]
 8003a9e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003aa6:	61da      	str	r2, [r3, #28]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ab2:	684b      	ldr	r3, [r1, #4]
 8003ab4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003abc:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003abe:	b002      	add	sp, #8
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40010000 	.word	0x40010000

08003acc <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	2300      	movs	r3, #0
{
 8003ace:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 8003ad0:	6801      	ldr	r1, [r0, #0]
 8003ad2:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_I2C_MspInit+0x58>)
{
 8003ad4:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 8003ad6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003adc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ae2:	b007      	add	sp, #28
 8003ae4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ae6:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ae8:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aea:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aec:	4c0e      	ldr	r4, [pc, #56]	; (8003b28 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aee:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af0:	69a3      	ldr	r3, [r4, #24]
 8003af2:	f043 0308 	orr.w	r3, r3, #8
 8003af6:	61a3      	str	r3, [r4, #24]
 8003af8:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003afa:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b02:	480a      	ldr	r0, [pc, #40]	; (8003b2c <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b04:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b06:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b08:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0a:	f000 feb9 	bl	8004880 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b0e:	69e3      	ldr	r3, [r4, #28]
 8003b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b14:	61e3      	str	r3, [r4, #28]
 8003b16:	69e3      	ldr	r3, [r4, #28]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	9b01      	ldr	r3, [sp, #4]
}
 8003b20:	b007      	add	sp, #28
 8003b22:	bd30      	pop	{r4, r5, pc}
 8003b24:	40005400 	.word	0x40005400
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40010c00 	.word	0x40010c00

08003b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b30:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b32:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8003b34:	6802      	ldr	r2, [r0, #0]
 8003b36:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <HAL_UART_MspInit+0xa4>)
{
 8003b38:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8003b3a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003b40:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART2)
 8003b44:	d001      	beq.n	8003b4a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b46:	b006      	add	sp, #24
 8003b48:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	4605      	mov	r5, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b50:	2603      	movs	r6, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b52:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b5c:	61da      	str	r2, [r3, #28]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003b64:	9200      	str	r2, [sp, #0]
 8003b66:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	619a      	str	r2, [r3, #24]
 8003b6e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b70:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b72:	400b      	ands	r3, r1
 8003b74:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b76:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7a:	4817      	ldr	r0, [pc, #92]	; (8003bd8 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b7e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b80:	f000 fe7e 	bl	8004880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b84:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b86:	4814      	ldr	r0, [pc, #80]	; (8003bd8 <HAL_UART_MspInit+0xa8>)
 8003b88:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b8c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	f000 fe75 	bl	8004880 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b96:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b98:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003b9a:	4e10      	ldr	r6, [pc, #64]	; (8003bdc <HAL_UART_MspInit+0xac>)
 8003b9c:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <HAL_UART_MspInit+0xb0>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b9e:	4630      	mov	r0, r6
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ba0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ba4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ba8:	6071      	str	r1, [r6, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003baa:	60b4      	str	r4, [r6, #8]
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003bac:	6032      	str	r2, [r6, #0]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bae:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003bb0:	f000 fbc8 	bl	8004344 <HAL_DMA_Init>
 8003bb4:	b958      	cbnz	r0, 8003bce <HAL_UART_MspInit+0x9e>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2026      	movs	r0, #38	; 0x26
 8003bba:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003bbc:	636e      	str	r6, [r5, #52]	; 0x34
 8003bbe:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bc0:	f000 fb62 	bl	8004288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bc4:	2026      	movs	r0, #38	; 0x26
 8003bc6:	f000 fb97 	bl	80042f8 <HAL_NVIC_EnableIRQ>
}
 8003bca:	b006      	add	sp, #24
 8003bcc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003bce:	f7ff fcf3 	bl	80035b8 <Error_Handler>
 8003bd2:	e7f0      	b.n	8003bb6 <HAL_UART_MspInit+0x86>
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40010800 	.word	0x40010800
 8003bdc:	20000a74 	.word	0x20000a74
 8003be0:	40020080 	.word	0x40020080

08003be4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003be4:	e7fe      	b.n	8003be4 <NMI_Handler>
 8003be6:	bf00      	nop

08003be8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be8:	e7fe      	b.n	8003be8 <HardFault_Handler>
 8003bea:	bf00      	nop

08003bec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bec:	e7fe      	b.n	8003bec <MemManage_Handler>
 8003bee:	bf00      	nop

08003bf0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf0:	e7fe      	b.n	8003bf0 <BusFault_Handler>
 8003bf2:	bf00      	nop

08003bf4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf4:	e7fe      	b.n	8003bf4 <UsageFault_Handler>
 8003bf6:	bf00      	nop

08003bf8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop

08003bfc <DebugMon_Handler>:
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop

08003c00 <PendSV_Handler>:
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop

08003c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c06:	f000 fb09 	bl	800421c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  sw_scan();

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sw_scan();
 8003c0e:	f000 b815 	b.w	8003c3c <sw_scan>
 8003c12:	bf00      	nop

08003c14 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <DMA1_Channel7_IRQHandler+0x8>)
 8003c16:	f000 bcdf 	b.w	80045d8 <HAL_DMA_IRQHandler>
 8003c1a:	bf00      	nop
 8003c1c:	20000a74 	.word	0x20000a74

08003c20 <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003c20:	4801      	ldr	r0, [pc, #4]	; (8003c28 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 8003c22:	f001 bcef 	b.w	8005604 <HAL_PCD_IRQHandler>
 8003c26:	bf00      	nop
 8003c28:	20001334 	.word	0x20001334

08003c2c <USB_LP_CAN1_RX0_IRQHandler>:
 8003c2c:	f7ff bff8 	b.w	8003c20 <USB_HP_CAN1_TX_IRQHandler>

08003c30 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <USART2_IRQHandler+0x8>)
 8003c32:	f003 b8e7 	b.w	8006e04 <HAL_UART_IRQHandler>
 8003c36:	bf00      	nop
 8003c38:	20000ab8 	.word	0x20000ab8

08003c3c <sw_scan>:
 *
 * Switch changes are then handled in the main loop.
 */
void sw_scan(void){

	if(!f_sys_config_complete){
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <sw_scan+0x90>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d041      	beq.n	8003cc8 <sw_scan+0x8c>
		return;
	}

	if(debounce_counter){
 8003c44:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <sw_scan+0x94>)
 8003c46:	7813      	ldrb	r3, [r2, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d138      	bne.n	8003cbe <sw_scan+0x82>
		debounce_counter--;
		return;
	}

	/* PORTA input pins */
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <sw_scan+0x98>)
void sw_scan(void){
 8003c4e:	b4f0      	push	{r4, r5, r6, r7}
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c50:	689b      	ldr	r3, [r3, #8]
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c52:	4c21      	ldr	r4, [pc, #132]	; (8003cd8 <sw_scan+0x9c>)
 8003c54:	4821      	ldr	r0, [pc, #132]	; (8003cdc <sw_scan+0xa0>)
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c56:	f423 43f7 	bic.w	r3, r3, #31616	; 0x7b80
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c5a:	8821      	ldrh	r1, [r4, #0]
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c60:	8805      	ldrh	r5, [r0, #0]
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 8003c62:	b29b      	uxth	r3, r3
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c64:	4059      	eors	r1, r3
 8003c66:	4329      	orrs	r1, r5
 8003c68:	b289      	uxth	r1, r1
	port_A_previous_state = current_port_A;

	/* PORTB input pins */
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c6a:	4d1d      	ldr	r5, [pc, #116]	; (8003ce0 <sw_scan+0xa4>)
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 8003c6c:	8001      	strh	r1, [r0, #0]
	port_A_previous_state = current_port_A;
 8003c6e:	8023      	strh	r3, [r4, #0]
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c70:	68ab      	ldr	r3, [r5, #8]
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c72:	4d1c      	ldr	r5, [pc, #112]	; (8003ce4 <sw_scan+0xa8>)
 8003c74:	4c1c      	ldr	r4, [pc, #112]	; (8003ce8 <sw_scan+0xac>)
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c76:	f423 43b7 	bic.w	r3, r3, #23424	; 0x5b80
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c7a:	8829      	ldrh	r1, [r5, #0]
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c7c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c80:	8826      	ldrh	r6, [r4, #0]
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 8003c82:	b29b      	uxth	r3, r3
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c84:	4059      	eors	r1, r3
 8003c86:	4331      	orrs	r1, r6
	port_B_previous_state = current_port_B;

	/* PORTC input pins */
	uint16_t current_port_C = GPIOC->IDR & SW_PORTC_MASK;
 8003c88:	4f18      	ldr	r7, [pc, #96]	; (8003cec <sw_scan+0xb0>)
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 8003c8a:	b289      	uxth	r1, r1
 8003c8c:	8021      	strh	r1, [r4, #0]
	port_C_switches_changed |= current_port_C  ^ port_C_previous_state;
 8003c8e:	4e18      	ldr	r6, [pc, #96]	; (8003cf0 <sw_scan+0xb4>)
	uint16_t current_port_C = GPIOC->IDR & SW_PORTC_MASK;
 8003c90:	68b9      	ldr	r1, [r7, #8]
	port_B_previous_state = current_port_B;
 8003c92:	802b      	strh	r3, [r5, #0]
	port_C_switches_changed |= current_port_C  ^ port_C_previous_state;
 8003c94:	4d17      	ldr	r5, [pc, #92]	; (8003cf4 <sw_scan+0xb8>)
 8003c96:	8833      	ldrh	r3, [r6, #0]
 8003c98:	882f      	ldrh	r7, [r5, #0]
	uint16_t current_port_C = GPIOC->IDR & SW_PORTC_MASK;
 8003c9a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
	port_C_switches_changed |= current_port_C  ^ port_C_previous_state;
 8003c9e:	404b      	eors	r3, r1
 8003ca0:	433b      	orrs	r3, r7
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	802b      	strh	r3, [r5, #0]
	port_C_previous_state = current_port_C;

	if(port_A_switches_changed | port_B_switches_changed | port_C_switches_changed){
 8003ca6:	8800      	ldrh	r0, [r0, #0]
 8003ca8:	8823      	ldrh	r3, [r4, #0]
	port_C_previous_state = current_port_C;
 8003caa:	8031      	strh	r1, [r6, #0]
	if(port_A_switches_changed | port_B_switches_changed | port_C_switches_changed){
 8003cac:	8829      	ldrh	r1, [r5, #0]
 8003cae:	4303      	orrs	r3, r0
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b10b      	cbz	r3, 8003cba <sw_scan+0x7e>
		debounce_counter = 10; // 10ms debounce delay
 8003cb6:	230a      	movs	r3, #10
 8003cb8:	7013      	strb	r3, [r2, #0]
		return;
	}

}
 8003cba:	bcf0      	pop	{r4, r5, r6, r7}
 8003cbc:	4770      	bx	lr
		debounce_counter--;
 8003cbe:	7813      	ldrb	r3, [r2, #0]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	7013      	strb	r3, [r2, #0]
		return;
 8003cc6:	4770      	bx	lr
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	200001dc 	.word	0x200001dc
 8003cd0:	200001e4 	.word	0x200001e4
 8003cd4:	40010800 	.word	0x40010800
 8003cd8:	200000a4 	.word	0x200000a4
 8003cdc:	200001e6 	.word	0x200001e6
 8003ce0:	40010c00 	.word	0x40010c00
 8003ce4:	200000a6 	.word	0x200000a6
 8003ce8:	200001e8 	.word	0x200001e8
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	200000a8 	.word	0x200000a8
 8003cf4:	200001ea 	.word	0x200001ea

08003cf8 <sw_led_init>:
}


void sw_led_init(void){
	// Scan all commands in EEPROM, and build the table of whether the LED should toggle with the switch, or be momentary
	for(int page=0; page<8; page++){
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	220c      	movs	r2, #12
void sw_led_init(void){
 8003cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d00:	b083      	sub	sp, #12
	for(int page=0; page<8; page++){
 8003d02:	e9cd 3200 	strd	r3, r2, [sp]
 8003d06:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8003db8 <sw_led_init+0xc0>
 8003d0a:	4e28      	ldr	r6, [pc, #160]	; (8003dac <sw_led_init+0xb4>)
		for(int sw=0; sw<8; sw++){
			// Clear the toggle bit
			a_sw_obj[sw].led_cmd_toggle &= ~(1<<page);
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	9b00      	ldr	r3, [sp, #0]
 8003d10:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003dbc <sw_led_init+0xc4>
 8003d14:	fa02 f503 	lsl.w	r5, r2, r3
 8003d18:	b26d      	sxtb	r5, r5
 8003d1a:	43ef      	mvns	r7, r5
 8003d1c:	46c1      	mov	r9, r8
 8003d1e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8003d22:	f899 0013 	ldrb.w	r0, [r9, #19]
 8003d26:	f1aa 040c 	sub.w	r4, sl, #12
 8003d2a:	4038      	ands	r0, r7
 8003d2c:	f889 0013 	strb.w	r0, [r9, #19]
	return pSwitchCmds + (MIDI_ROM_KEY_STRIDE * sw) + (MIDI_ROM_CMD_SIZE * cmd) + (MIDI_ROM_KEY_STRIDE * 8 * page);
 8003d30:	f8db 0000 	ldr.w	r0, [fp]

			for(int cmd=0; cmd<3; cmd++){
				uint8_t *pCmd = getRomPointer(page, sw, cmd);
				if(midiCmd_get_cmd_toggle(pCmd)){
 8003d34:	4420      	add	r0, r4
 8003d36:	f7ff fc41 	bl	80035bc <midiCmd_get_cmd_toggle>
			for(int cmd=0; cmd<3; cmd++){
 8003d3a:	3404      	adds	r4, #4
				if(midiCmd_get_cmd_toggle(pCmd)){
 8003d3c:	b120      	cbz	r0, 8003d48 <sw_led_init+0x50>
					a_sw_obj[sw].led_cmd_toggle |= (1<<page);
 8003d3e:	f899 0013 	ldrb.w	r0, [r9, #19]
 8003d42:	4328      	orrs	r0, r5
 8003d44:	f889 0013 	strb.w	r0, [r9, #19]
			for(int cmd=0; cmd<3; cmd++){
 8003d48:	45a2      	cmp	sl, r4
 8003d4a:	d1f1      	bne.n	8003d30 <sw_led_init+0x38>
		for(int sw=0; sw<8; sw++){
 8003d4c:	f109 0914 	add.w	r9, r9, #20
 8003d50:	45b1      	cmp	r9, r6
 8003d52:	f10a 0a0c 	add.w	sl, sl, #12
 8003d56:	d1e4      	bne.n	8003d22 <sw_led_init+0x2a>
	for(int page=0; page<8; page++){
 8003d58:	9b00      	ldr	r3, [sp, #0]
 8003d5a:	9a01      	ldr	r2, [sp, #4]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	3260      	adds	r2, #96	; 0x60
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	9201      	str	r2, [sp, #4]
 8003d66:	d1d1      	bne.n	8003d0c <sw_led_init+0x14>
			}
		}
	}

	// Init all delayed cmds to off
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003d68:	2300      	movs	r3, #0
		delayed_cmds[i].systick_timout = UINT32_MAX;
 8003d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6e:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <sw_led_init+0xb8>)
 8003d70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003d74:	3301      	adds	r3, #1
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d1fa      	bne.n	8003d70 <sw_led_init+0x78>
	}

	// Init all the LEDs to the off state
	for(int i = 0; i<8; i++){
		HAL_GPIO_WritePin(a_sw_obj[i].led_gpio_port, a_sw_obj[i].led_gpio_pin, GPIO_PIN_SET);
 8003d7a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8003d7e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f108 0814 	add.w	r8, r8, #20
 8003d88:	f000 fea8 	bl	8004adc <HAL_GPIO_WritePin>
	for(int i = 0; i<8; i++){
 8003d8c:	45b0      	cmp	r8, r6
 8003d8e:	d1f4      	bne.n	8003d7a <sw_led_init+0x82>
	}
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8003d90:	2201      	movs	r2, #1
 8003d92:	2104      	movs	r1, #4
 8003d94:	4807      	ldr	r0, [pc, #28]	; (8003db4 <sw_led_init+0xbc>)
 8003d96:	f000 fea1 	bl	8004adc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	4805      	ldr	r0, [pc, #20]	; (8003db4 <sw_led_init+0xbc>)


}
 8003da0:	b003      	add	sp, #12
 8003da2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8003da6:	f000 be99 	b.w	8004adc <HAL_GPIO_WritePin>
 8003daa:	bf00      	nop
 8003dac:	200000a4 	.word	0x200000a4
 8003db0:	20000b4c 	.word	0x20000b4c
 8003db4:	40010c00 	.word	0x40010c00
 8003db8:	2000061c 	.word	0x2000061c
 8003dbc:	20000004 	.word	0x20000004

08003dc0 <handleDelayedCmds>:
	}

	return -1;
}

void handleDelayedCmds(void){
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
				midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_OFF);
				break;
			default:
				break;
			}
			delayed_cmds[i].systick_timout = UINT32_MAX;
 8003dc2:	f04f 37ff 	mov.w	r7, #4294967295
 8003dc6:	4c0f      	ldr	r4, [pc, #60]	; (8003e04 <handleDelayedCmds+0x44>)
 8003dc8:	f504 7680 	add.w	r6, r4, #256	; 0x100
		if(delayed_cmds[i].systick_timout < HAL_GetTick()){
 8003dcc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8003dd0:	f000 fa30 	bl	8004234 <HAL_GetTick>
 8003dd4:	4285      	cmp	r5, r0
 8003dd6:	d211      	bcs.n	8003dfc <handleDelayedCmds+0x3c>
			uint8_t* pRom = delayed_cmds[i].pRomCmd;
 8003dd8:	6825      	ldr	r5, [r4, #0]
			switch(*pRom & 0xF0){
 8003dda:	782b      	ldrb	r3, [r5, #0]
 8003ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de0:	2b90      	cmp	r3, #144	; 0x90
 8003de2:	d005      	beq.n	8003df0 <handleDelayedCmds+0x30>
 8003de4:	2be0      	cmp	r3, #224	; 0xe0
 8003de6:	d107      	bne.n	8003df8 <handleDelayedCmds+0x38>
				midiCmd_send_pb_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003de8:	2100      	movs	r1, #0
 8003dea:	4628      	mov	r0, r5
 8003dec:	f7ff fcc6 	bl	800377c <midiCmd_send_pb_command_from_rom>
				midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003df0:	4628      	mov	r0, r5
 8003df2:	2100      	movs	r1, #0
 8003df4:	f7ff fd14 	bl	8003820 <midiCmd_send_note_command_from_rom>
			delayed_cmds[i].systick_timout = UINT32_MAX;
 8003df8:	f844 7c04 	str.w	r7, [r4, #-4]
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003dfc:	3408      	adds	r4, #8
 8003dfe:	42b4      	cmp	r4, r6
 8003e00:	d1e4      	bne.n	8003dcc <handleDelayedCmds+0xc>
		}
	}
}
 8003e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e04:	20000b50 	.word	0x20000b50

08003e08 <setCmdDurationDelay>:

// Sets the cmd point to switch off and the delay timeout into the delayed cmds table
void setCmdDurationDelay(uint8_t *pRom){
 8003e08:	b570      	push	{r4, r5, r6, lr}
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003e0a:	2400      	movs	r4, #0
void setCmdDurationDelay(uint8_t *pRom){
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	4d0b      	ldr	r5, [pc, #44]	; (8003e3c <setCmdDurationDelay+0x34>)
 8003e10:	e002      	b.n	8003e18 <setCmdDurationDelay+0x10>
	for(int i=0; i<MAX_DELAYED_CMDS; i++){
 8003e12:	3401      	adds	r4, #1
 8003e14:	2c20      	cmp	r4, #32
 8003e16:	d010      	beq.n	8003e3a <setCmdDurationDelay+0x32>
		if(delayed_cmds[i].systick_timout == UINT32_MAX){
 8003e18:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8003e1c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 8003e20:	3301      	adds	r3, #1
 8003e22:	d1f6      	bne.n	8003e12 <setCmdDurationDelay+0xa>
	int slot = get_available_delayed_cmd_slot();
	if(slot >= 0){
		delayed_cmds[slot].pRomCmd = pRom;
 8003e24:	6056      	str	r6, [r2, #4]
		delayed_cmds[slot].systick_timout = HAL_GetTick() + midiCmd_get_delay(pRom);
 8003e26:	f000 fa05 	bl	8004234 <HAL_GetTick>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	461e      	mov	r6, r3
 8003e30:	f7ff fbc8 	bl	80035c4 <midiCmd_get_delay>
 8003e34:	4406      	add	r6, r0
 8003e36:	f845 6034 	str.w	r6, [r5, r4, lsl #3]
	}
}
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	20000b4c 	.word	0x20000b4c

08003e40 <handleCmdSwDown>:

void handleCmdSwDown(uint8_t *pRom, uint8_t toggleState){
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	7803      	ldrb	r3, [r0, #0]
 8003e44:	4604      	mov	r4, r0
 8003e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	switch(*pRom & 0xF0){
 8003e4a:	2bb0      	cmp	r3, #176	; 0xb0
void handleCmdSwDown(uint8_t *pRom, uint8_t toggleState){
 8003e4c:	460d      	mov	r5, r1
	switch(*pRom & 0xF0){
 8003e4e:	d03b      	beq.n	8003ec8 <handleCmdSwDown+0x88>
 8003e50:	d80c      	bhi.n	8003e6c <handleCmdSwDown+0x2c>
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d041      	beq.n	8003eda <handleCmdSwDown+0x9a>
 8003e56:	2b90      	cmp	r3, #144	; 0x90
 8003e58:	d115      	bne.n	8003e86 <handleCmdSwDown+0x46>
				setCmdDurationDelay(pRom);
			}
		}
		break;
	case CMD_NOTE_NIBBLE:
		if(midiCmd_get_cmd_toggle(pRom)){
 8003e5a:	f7ff fbaf 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003e5e:	b1c0      	cbz	r0, 8003e92 <handleCmdSwDown+0x52>
			midiCmd_send_note_command_from_rom(pRom, toggleState);
 8003e60:	4629      	mov	r1, r5
 8003e62:	4620      	mov	r0, r4
		midiCmd_send_stop_command();
		break;
	default:
		break;
	}
}
 8003e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			midiCmd_send_note_command_from_rom(pRom, toggleState);
 8003e68:	f7ff bcda 	b.w	8003820 <midiCmd_send_note_command_from_rom>
	switch(*pRom & 0xF0){
 8003e6c:	2bc0      	cmp	r3, #192	; 0xc0
 8003e6e:	d027      	beq.n	8003ec0 <handleCmdSwDown+0x80>
 8003e70:	2be0      	cmp	r3, #224	; 0xe0
 8003e72:	d116      	bne.n	8003ea2 <handleCmdSwDown+0x62>
		if(midiCmd_get_cmd_toggle(pRom)){
 8003e74:	f7ff fba2 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003e78:	b1a0      	cbz	r0, 8003ea4 <handleCmdSwDown+0x64>
			midiCmd_send_pb_command_from_rom(pRom, toggleState);
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	4620      	mov	r0, r4
}
 8003e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			midiCmd_send_pb_command_from_rom(pRom, toggleState);
 8003e82:	f7ff bc7b 	b.w	800377c <midiCmd_send_pb_command_from_rom>
	switch(*pRom & 0xF0){
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d10b      	bne.n	8003ea2 <handleCmdSwDown+0x62>
}
 8003e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		midiCmd_send_start_command();
 8003e8e:	f7ff bc3d 	b.w	800370c <midiCmd_send_start_command>
			midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_ON);
 8003e92:	2101      	movs	r1, #1
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7ff fcc3 	bl	8003820 <midiCmd_send_note_command_from_rom>
			if(midiCmd_get_delay(pRom) != 0){
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f7ff fb92 	bl	80035c4 <midiCmd_get_delay>
 8003ea0:	b948      	cbnz	r0, 8003eb6 <handleCmdSwDown+0x76>
}
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
			midiCmd_send_pb_command_from_rom(pRom, MIDI_CONTROL_ON);
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f7ff fc68 	bl	800377c <midiCmd_send_pb_command_from_rom>
			if(midiCmd_get_delay(pRom) != 0){
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7ff fb89 	bl	80035c4 <midiCmd_get_delay>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d0f5      	beq.n	8003ea2 <handleCmdSwDown+0x62>
				setCmdDurationDelay(pRom);
 8003eb6:	4620      	mov	r0, r4
}
 8003eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				setCmdDurationDelay(pRom);
 8003ebc:	f7ff bfa4 	b.w	8003e08 <setCmdDurationDelay>
}
 8003ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		midiCmd_send_pc_command_from_rom(pRom);
 8003ec4:	f7ff bd64 	b.w	8003990 <midiCmd_send_pc_command_from_rom>
		if(midiCmd_get_cmd_toggle(pRom)){
 8003ec8:	f7ff fb78 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003ecc:	b148      	cbz	r0, 8003ee2 <handleCmdSwDown+0xa2>
			midiCmd_send_cc_command_from_rom(pRom, toggleState);
 8003ece:	4629      	mov	r1, r5
 8003ed0:	4620      	mov	r0, r4
}
 8003ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			midiCmd_send_cc_command_from_rom(pRom, toggleState);
 8003ed6:	f7ff bd05 	b.w	80038e4 <midiCmd_send_cc_command_from_rom>
}
 8003eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		midiCmd_send_stop_command();
 8003ede:	f7ff bbb3 	b.w	8003648 <midiCmd_send_stop_command>
			midiCmd_send_cc_command_from_rom(pRom, MIDI_CONTROL_ON);
 8003ee2:	4620      	mov	r0, r4
}
 8003ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			midiCmd_send_cc_command_from_rom(pRom, MIDI_CONTROL_ON);
 8003ee8:	2101      	movs	r1, #1
 8003eea:	f7ff bcfb 	b.w	80038e4 <midiCmd_send_cc_command_from_rom>
 8003eee:	bf00      	nop

08003ef0 <handleCmdSwUp>:

void handleCmdSwUp(uint8_t *pRom, uint8_t toggleState){
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	7803      	ldrb	r3, [r0, #0]
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	switch(*pRom & 0xF0){
 8003efa:	2bb0      	cmp	r3, #176	; 0xb0
 8003efc:	d022      	beq.n	8003f44 <handleCmdSwUp+0x54>
 8003efe:	2be0      	cmp	r3, #224	; 0xe0
 8003f00:	d011      	beq.n	8003f26 <handleCmdSwUp+0x36>
 8003f02:	2b90      	cmp	r3, #144	; 0x90
 8003f04:	d000      	beq.n	8003f08 <handleCmdSwUp+0x18>
	case CMD_STOP_NIBBLE:
		break;
	default:
		break;
	}
}
 8003f06:	bd10      	pop	{r4, pc}
		if(!midiCmd_get_cmd_toggle(pRom)){
 8003f08:	f7ff fb58 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d1fa      	bne.n	8003f06 <handleCmdSwUp+0x16>
			if(midiCmd_get_delay(pRom) == 0){
 8003f10:	4620      	mov	r0, r4
 8003f12:	f7ff fb57 	bl	80035c4 <midiCmd_get_delay>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d1f5      	bne.n	8003f06 <handleCmdSwUp+0x16>
				midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f1a:	4601      	mov	r1, r0
 8003f1c:	4620      	mov	r0, r4
}
 8003f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				midiCmd_send_note_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f22:	f7ff bc7d 	b.w	8003820 <midiCmd_send_note_command_from_rom>
		if(!midiCmd_get_cmd_toggle(pRom)){
 8003f26:	f7ff fb49 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d1eb      	bne.n	8003f06 <handleCmdSwUp+0x16>
			if(midiCmd_get_delay(pRom) == 0){
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f7ff fb48 	bl	80035c4 <midiCmd_get_delay>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d1e6      	bne.n	8003f06 <handleCmdSwUp+0x16>
				midiCmd_send_pb_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f38:	4601      	mov	r1, r0
 8003f3a:	4620      	mov	r0, r4
}
 8003f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				midiCmd_send_pb_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f40:	f7ff bc1c 	b.w	800377c <midiCmd_send_pb_command_from_rom>
		if(!midiCmd_get_cmd_toggle(pRom)){
 8003f44:	f7ff fb3a 	bl	80035bc <midiCmd_get_cmd_toggle>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d1dc      	bne.n	8003f06 <handleCmdSwUp+0x16>
			midiCmd_send_cc_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f4c:	4601      	mov	r1, r0
 8003f4e:	4620      	mov	r0, r4
}
 8003f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			midiCmd_send_cc_command_from_rom(pRom, MIDI_CONTROL_OFF);
 8003f54:	f7ff bcc6 	b.w	80038e4 <midiCmd_send_cc_command_from_rom>

08003f58 <updateLedsOnBankChange>:
	GPIO_PinState pinState = (state) ? GPIO_PIN_RESET : GPIO_PIN_SET;
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);

}

void updateLedsOnBankChange(void){
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	4c11      	ldr	r4, [pc, #68]	; (8003fa0 <updateLedsOnBankChange+0x48>)
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8003f5c:	2701      	movs	r7, #1
 8003f5e:	4e11      	ldr	r6, [pc, #68]	; (8003fa4 <updateLedsOnBankChange+0x4c>)
 8003f60:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8003f64:	e00c      	b.n	8003f80 <updateLedsOnBankChange+0x28>
	return sw->switch_toggle_state & (1 << switch_current_page);
 8003f66:	7ca3      	ldrb	r3, [r4, #18]
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8003f68:	8a21      	ldrh	r1, [r4, #16]
	GPIO_PinState pinState = (state) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8003f6a:	4203      	tst	r3, r0
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8003f6c:	bf08      	it	eq
 8003f6e:	2201      	moveq	r2, #1
 8003f70:	68e0      	ldr	r0, [r4, #12]
 8003f72:	bf18      	it	ne
 8003f74:	2200      	movne	r2, #0
 8003f76:	3414      	adds	r4, #20
 8003f78:	f000 fdb0 	bl	8004adc <HAL_GPIO_WritePin>
	for(int i=0; i<8; i++){
 8003f7c:	42ac      	cmp	r4, r5
 8003f7e:	d00e      	beq.n	8003f9e <updateLedsOnBankChange+0x46>
		if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003f80:	7832      	ldrb	r2, [r6, #0]
 8003f82:	7ce3      	ldrb	r3, [r4, #19]
	return sw->switch_toggle_state & (1 << switch_current_page);
 8003f84:	fa07 f002 	lsl.w	r0, r7, r2
		if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003f88:	4113      	asrs	r3, r2
 8003f8a:	07db      	lsls	r3, r3, #31
 8003f8c:	d4eb      	bmi.n	8003f66 <updateLedsOnBankChange+0xe>
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8003f8e:	8a21      	ldrh	r1, [r4, #16]
 8003f90:	68e0      	ldr	r0, [r4, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	3414      	adds	r4, #20
 8003f96:	f000 fda1 	bl	8004adc <HAL_GPIO_WritePin>
	for(int i=0; i<8; i++){
 8003f9a:	42ac      	cmp	r4, r5
 8003f9c:	d1f0      	bne.n	8003f80 <updateLedsOnBankChange+0x28>
			setLed(i,get_sw_toggle_stage(&a_sw_obj[i]));
		} else {
			setLed(i,RESET);
		}
	}
}
 8003f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa0:	20000004 	.word	0x20000004
 8003fa4:	200001ec 	.word	0x200001ec

08003fa8 <handleSwitches>:

void handleSwitches(void){
 8003fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	// The Command switches
	for(int i=0; i<8; i++){
 8003fac:	2500      	movs	r5, #0
	return sw->switch_toggle_state & (1 << switch_current_page);
 8003fae:	2701      	movs	r7, #1
 8003fb0:	4c61      	ldr	r4, [pc, #388]	; (8004138 <handleSwitches+0x190>)
								get_sw_toggle_stage(&a_sw_obj[i]));
					}
				}else {
					// Switch up
					// Clear the LED if it's not toggling.
					if(!(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page))){
 8003fb2:	4e62      	ldr	r6, [pc, #392]	; (800413c <handleSwitches+0x194>)
 8003fb4:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8004150 <handleSwitches+0x1a8>
 8003fb8:	e004      	b.n	8003fc4 <handleSwitches+0x1c>
	for(int i=0; i<8; i++){
 8003fba:	3501      	adds	r5, #1
 8003fbc:	2d08      	cmp	r5, #8
 8003fbe:	f104 0414 	add.w	r4, r4, #20
 8003fc2:	d040      	beq.n	8004046 <handleSwitches+0x9e>
		if(*a_sw_obj[i].pSwChangeState & a_sw_obj[i].sw_gpio_pin){
 8003fc4:	68a3      	ldr	r3, [r4, #8]
 8003fc6:	88a2      	ldrh	r2, [r4, #4]
 8003fc8:	8819      	ldrh	r1, [r3, #0]
 8003fca:	420a      	tst	r2, r1
 8003fcc:	d0f5      	beq.n	8003fba <handleSwitches+0x12>
				*a_sw_obj[i].pSwChangeState &= ~a_sw_obj[i].sw_gpio_pin;
 8003fce:	8819      	ldrh	r1, [r3, #0]
				if(!HAL_GPIO_ReadPin(a_sw_obj[i].sw_gpio_port, a_sw_obj[i].sw_gpio_pin)){
 8003fd0:	6820      	ldr	r0, [r4, #0]
				*a_sw_obj[i].pSwChangeState &= ~a_sw_obj[i].sw_gpio_pin;
 8003fd2:	b289      	uxth	r1, r1
 8003fd4:	ea21 0202 	bic.w	r2, r1, r2
 8003fd8:	801a      	strh	r2, [r3, #0]
				if(!HAL_GPIO_ReadPin(a_sw_obj[i].sw_gpio_port, a_sw_obj[i].sw_gpio_pin)){
 8003fda:	88a1      	ldrh	r1, [r4, #4]
 8003fdc:	f000 fd78 	bl	8004ad0 <HAL_GPIO_ReadPin>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d13c      	bne.n	800405e <handleSwitches+0xb6>
	sw->switch_toggle_state ^= (1 << switch_current_page);
 8003fe4:	7830      	ldrb	r0, [r6, #0]
 8003fe6:	7ca3      	ldrb	r3, [r4, #18]
					if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003fe8:	7ce2      	ldrb	r2, [r4, #19]
	sw->switch_toggle_state ^= (1 << switch_current_page);
 8003fea:	fa07 f100 	lsl.w	r1, r7, r0
 8003fee:	b249      	sxtb	r1, r1
 8003ff0:	404b      	eors	r3, r1
					if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003ff2:	4102      	asrs	r2, r0
	sw->switch_toggle_state ^= (1 << switch_current_page);
 8003ff4:	b25b      	sxtb	r3, r3
					if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003ff6:	f012 0201 	ands.w	r2, r2, #1
	sw->switch_toggle_state ^= (1 << switch_current_page);
 8003ffa:	74a3      	strb	r3, [r4, #18]
					if(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page)){
 8003ffc:	d003      	beq.n	8004006 <handleSwitches+0x5e>
	GPIO_PinState pinState = (state) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8003ffe:	4219      	tst	r1, r3
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8004000:	bf0c      	ite	eq
 8004002:	2201      	moveq	r2, #1
 8004004:	2200      	movne	r2, #0
 8004006:	8a21      	ldrh	r1, [r4, #16]
 8004008:	68e0      	ldr	r0, [r4, #12]
 800400a:	f000 fd67 	bl	8004adc <HAL_GPIO_WritePin>
	for(int i=0; i<8; i++){
 800400e:	f04f 0900 	mov.w	r9, #0
						handleCmdSwDown(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 8004012:	7832      	ldrb	r2, [r6, #0]
 8004014:	f8d8 0000 	ldr.w	r0, [r8]
 8004018:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	return sw->switch_toggle_state & (1 << switch_current_page);
 800401c:	7ca1      	ldrb	r1, [r4, #18]
						handleCmdSwDown(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 800401e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004022:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	return sw->switch_toggle_state & (1 << switch_current_page);
 8004026:	fa07 f202 	lsl.w	r2, r7, r2
 800402a:	f109 0904 	add.w	r9, r9, #4
						handleCmdSwDown(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 800402e:	4418      	add	r0, r3
 8004030:	4011      	ands	r1, r2
 8004032:	f7ff ff05 	bl	8003e40 <handleCmdSwDown>
					for(int j=0; j<3; j++){
 8004036:	f1b9 0f0c 	cmp.w	r9, #12
 800403a:	d1ea      	bne.n	8004012 <handleSwitches+0x6a>
	for(int i=0; i<8; i++){
 800403c:	3501      	adds	r5, #1
 800403e:	2d08      	cmp	r5, #8
 8004040:	f104 0414 	add.w	r4, r4, #20
 8004044:	d1be      	bne.n	8003fc4 <handleSwitches+0x1c>
				}
			}

	}

	handleDelayedCmds();
 8004046:	f7ff febb 	bl	8003dc0 <handleDelayedCmds>

	// The bank change switches
	if(port_A_switches_changed & SW_E_Pin){
 800404a:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <handleSwitches+0x198>)
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	0651      	lsls	r1, r2, #25
 8004050:	d448      	bmi.n	80040e4 <handleSwitches+0x13c>
		} else {
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
		}
	}

	if(port_B_switches_changed & SW_5_Pin){
 8004052:	4b3c      	ldr	r3, [pc, #240]	; (8004144 <handleSwitches+0x19c>)
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	0552      	lsls	r2, r2, #21
 8004058:	d425      	bmi.n	80040a6 <handleSwitches+0xfe>
			}
		} else {
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
		}
	}
}
 800405a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if(!(a_sw_obj[i].led_cmd_toggle & (1<<switch_current_page))){
 800405e:	7832      	ldrb	r2, [r6, #0]
 8004060:	7ce3      	ldrb	r3, [r4, #19]
 8004062:	4113      	asrs	r3, r2
 8004064:	07d8      	lsls	r0, r3, #31
 8004066:	d517      	bpl.n	8004098 <handleSwitches+0xf0>
	for(int i=0; i<8; i++){
 8004068:	f04f 0900 	mov.w	r9, #0
						handleCmdSwUp(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 800406c:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 8004070:	f8d8 3000 	ldr.w	r3, [r8]
	return sw->switch_toggle_state & (1 << switch_current_page);
 8004074:	7ca1      	ldrb	r1, [r4, #18]
						handleCmdSwUp(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 8004076:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800407a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
	return sw->switch_toggle_state & (1 << switch_current_page);
 800407e:	fa07 f202 	lsl.w	r2, r7, r2
 8004082:	f109 0904 	add.w	r9, r9, #4
						handleCmdSwUp(pSwitchCmds + (MIDI_ROM_KEY_STRIDE * (i + switch_current_page*8)) + (MIDI_ROM_CMD_SIZE * j),
 8004086:	4418      	add	r0, r3
 8004088:	4011      	ands	r1, r2
 800408a:	f7ff ff31 	bl	8003ef0 <handleCmdSwUp>
					for(int j=0; j<3; j++){
 800408e:	f1b9 0f0c 	cmp.w	r9, #12
 8004092:	d092      	beq.n	8003fba <handleSwitches+0x12>
 8004094:	7832      	ldrb	r2, [r6, #0]
 8004096:	e7e9      	b.n	800406c <handleSwitches+0xc4>
	HAL_GPIO_WritePin(a_sw_obj[sw_no].led_gpio_port, a_sw_obj[sw_no].led_gpio_pin, pinState);
 8004098:	2201      	movs	r2, #1
 800409a:	8a21      	ldrh	r1, [r4, #16]
 800409c:	68e0      	ldr	r0, [r4, #12]
 800409e:	f000 fd1d 	bl	8004adc <HAL_GPIO_WritePin>
 80040a2:	7832      	ldrb	r2, [r6, #0]
}
 80040a4:	e7e0      	b.n	8004068 <handleSwitches+0xc0>
		port_B_switches_changed &= ~SW_5_Pin;
 80040a6:	881a      	ldrh	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin)){
 80040a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
		port_B_switches_changed &= ~SW_5_Pin;
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b0:	0412      	lsls	r2, r2, #16
 80040b2:	0c12      	lsrs	r2, r2, #16
		if(!HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin)){
 80040b4:	4824      	ldr	r0, [pc, #144]	; (8004148 <handleSwitches+0x1a0>)
		port_B_switches_changed &= ~SW_5_Pin;
 80040b6:	801a      	strh	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(SW_5_GPIO_Port, SW_5_Pin)){
 80040b8:	f000 fd0a 	bl	8004ad0 <HAL_GPIO_ReadPin>
 80040bc:	4602      	mov	r2, r0
 80040be:	2800      	cmp	r0, #0
 80040c0:	d132      	bne.n	8004128 <handleSwitches+0x180>
			if(switch_current_page < 7){
 80040c2:	4c1e      	ldr	r4, [pc, #120]	; (800413c <handleSwitches+0x194>)
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, RESET);
 80040c4:	2104      	movs	r1, #4
 80040c6:	4820      	ldr	r0, [pc, #128]	; (8004148 <handleSwitches+0x1a0>)
 80040c8:	f000 fd08 	bl	8004adc <HAL_GPIO_WritePin>
			if(switch_current_page < 7){
 80040cc:	7823      	ldrb	r3, [r4, #0]
 80040ce:	2b06      	cmp	r3, #6
 80040d0:	d8c3      	bhi.n	800405a <handleSwitches+0xb2>
				switch_current_page++;
 80040d2:	3301      	adds	r3, #1
 80040d4:	7023      	strb	r3, [r4, #0]
				updateLedsOnBankChange();
 80040d6:	f7ff ff3f 	bl	8003f58 <updateLedsOnBankChange>
				display_setBankName(switch_current_page);
 80040da:	7820      	ldrb	r0, [r4, #0]
}
 80040dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
				display_setBankName(switch_current_page);
 80040e0:	f7ff b8de 	b.w	80032a0 <display_setBankName>
		port_A_switches_changed &= ~SW_E_Pin;
 80040e4:	881a      	ldrh	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(SW_E_GPIO_Port, SW_E_Pin)){
 80040e6:	2140      	movs	r1, #64	; 0x40
		port_A_switches_changed &= ~SW_E_Pin;
 80040e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ec:	0412      	lsls	r2, r2, #16
 80040ee:	0c12      	lsrs	r2, r2, #16
		if(!HAL_GPIO_ReadPin(SW_E_GPIO_Port, SW_E_Pin)){
 80040f0:	4816      	ldr	r0, [pc, #88]	; (800414c <handleSwitches+0x1a4>)
		port_A_switches_changed &= ~SW_E_Pin;
 80040f2:	801a      	strh	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(SW_E_GPIO_Port, SW_E_Pin)){
 80040f4:	f000 fcec 	bl	8004ad0 <HAL_GPIO_ReadPin>
 80040f8:	4602      	mov	r2, r0
 80040fa:	b978      	cbnz	r0, 800411c <handleSwitches+0x174>
			if(switch_current_page > 0){
 80040fc:	4c0f      	ldr	r4, [pc, #60]	; (800413c <handleSwitches+0x194>)
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 80040fe:	2102      	movs	r1, #2
 8004100:	4811      	ldr	r0, [pc, #68]	; (8004148 <handleSwitches+0x1a0>)
 8004102:	f000 fceb 	bl	8004adc <HAL_GPIO_WritePin>
			if(switch_current_page > 0){
 8004106:	7823      	ldrb	r3, [r4, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0a2      	beq.n	8004052 <handleSwitches+0xaa>
				switch_current_page--;
 800410c:	3b01      	subs	r3, #1
 800410e:	7023      	strb	r3, [r4, #0]
				updateLedsOnBankChange();
 8004110:	f7ff ff22 	bl	8003f58 <updateLedsOnBankChange>
				display_setBankName(switch_current_page);
 8004114:	7820      	ldrb	r0, [r4, #0]
 8004116:	f7ff f8c3 	bl	80032a0 <display_setBankName>
 800411a:	e79a      	b.n	8004052 <handleSwitches+0xaa>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 800411c:	2201      	movs	r2, #1
 800411e:	2102      	movs	r1, #2
 8004120:	4809      	ldr	r0, [pc, #36]	; (8004148 <handleSwitches+0x1a0>)
 8004122:	f000 fcdb 	bl	8004adc <HAL_GPIO_WritePin>
 8004126:	e794      	b.n	8004052 <handleSwitches+0xaa>
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 8004128:	2201      	movs	r2, #1
}
 800412a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, SET);
 800412e:	2104      	movs	r1, #4
 8004130:	4805      	ldr	r0, [pc, #20]	; (8004148 <handleSwitches+0x1a0>)
 8004132:	f000 bcd3 	b.w	8004adc <HAL_GPIO_WritePin>
 8004136:	bf00      	nop
 8004138:	20000004 	.word	0x20000004
 800413c:	200001ec 	.word	0x200001ec
 8004140:	200001e6 	.word	0x200001e6
 8004144:	200001e8 	.word	0x200001e8
 8004148:	40010c00 	.word	0x40010c00
 800414c:	40010800 	.word	0x40010800
 8004150:	2000061c 	.word	0x2000061c

08004154 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8004154:	4b01      	ldr	r3, [pc, #4]	; (800415c <SystemInit+0x8>)
 8004156:	4a02      	ldr	r2, [pc, #8]	; (8004160 <SystemInit+0xc>)
 8004158:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800415a:	4770      	bx	lr
 800415c:	e000ed00 	.word	0xe000ed00
 8004160:	08003000 	.word	0x08003000

08004164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004164:	480c      	ldr	r0, [pc, #48]	; (8004198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004166:	490d      	ldr	r1, [pc, #52]	; (800419c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004168:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800416a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800416c:	e002      	b.n	8004174 <LoopCopyDataInit>

0800416e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800416e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004172:	3304      	adds	r3, #4

08004174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004178:	d3f9      	bcc.n	800416e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800417a:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800417c:	4c0a      	ldr	r4, [pc, #40]	; (80041a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800417e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004180:	e001      	b.n	8004186 <LoopFillZerobss>

08004182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004184:	3204      	adds	r2, #4

08004186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004188:	d3fb      	bcc.n	8004182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800418a:	f7ff ffe3 	bl	8004154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800418e:	f005 fab1 	bl	80096f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004192:	f7ff f923 	bl	80033dc <main>
  bx lr
 8004196:	4770      	bx	lr
  ldr r0, =_sdata
 8004198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800419c:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 80041a0:	0800acbc 	.word	0x0800acbc
  ldr r2, =_sbss
 80041a4:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 80041a8:	20001620 	.word	0x20001620

080041ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041ac:	e7fe      	b.n	80041ac <ADC1_2_IRQHandler>
	...

080041b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041b6:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <HAL_InitTick+0x3c>)
{
 80041b8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041ba:	7811      	ldrb	r1, [r2, #0]
 80041bc:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <HAL_InitTick+0x40>)
 80041be:	fbb3 f3f1 	udiv	r3, r3, r1
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	fbb2 f0f3 	udiv	r0, r2, r3
 80041c8:	f000 f8a4 	bl	8004314 <HAL_SYSTICK_Config>
 80041cc:	b908      	cbnz	r0, 80041d2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ce:	2d0f      	cmp	r5, #15
 80041d0:	d901      	bls.n	80041d6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80041d2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80041d4:	bd38      	pop	{r3, r4, r5, pc}
 80041d6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d8:	4602      	mov	r2, r0
 80041da:	4629      	mov	r1, r5
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	f000 f852 	bl	8004288 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <HAL_InitTick+0x44>)
 80041e6:	4620      	mov	r0, r4
 80041e8:	601d      	str	r5, [r3, #0]
}
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	200000b0 	.word	0x200000b0
 80041f0:	200000ac 	.word	0x200000ac
 80041f4:	200000b4 	.word	0x200000b4

080041f8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041f8:	4a07      	ldr	r2, [pc, #28]	; (8004218 <HAL_Init+0x20>)
{
 80041fa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041fc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041fe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004200:	f043 0310 	orr.w	r3, r3, #16
 8004204:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004206:	f000 f82d 	bl	8004264 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800420a:	2000      	movs	r0, #0
 800420c:	f7ff ffd0 	bl	80041b0 <HAL_InitTick>
  HAL_MspInit();
 8004210:	f7ff fc3a 	bl	8003a88 <HAL_MspInit>
}
 8004214:	2000      	movs	r0, #0
 8004216:	bd08      	pop	{r3, pc}
 8004218:	40022000 	.word	0x40022000

0800421c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800421c:	4a03      	ldr	r2, [pc, #12]	; (800422c <HAL_IncTick+0x10>)
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <HAL_IncTick+0x14>)
 8004220:	6811      	ldr	r1, [r2, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	440b      	add	r3, r1
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000c4c 	.word	0x20000c4c
 8004230:	200000b0 	.word	0x200000b0

08004234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004234:	4b01      	ldr	r3, [pc, #4]	; (800423c <HAL_GetTick+0x8>)
 8004236:	6818      	ldr	r0, [r3, #0]
}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000c4c 	.word	0x20000c4c

08004240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004244:	f7ff fff6 	bl	8004234 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004248:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800424a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800424c:	d002      	beq.n	8004254 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <HAL_Delay+0x20>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004254:	f7ff ffee 	bl	8004234 <HAL_GetTick>
 8004258:	1b40      	subs	r0, r0, r5
 800425a:	42a0      	cmp	r0, r4
 800425c:	d3fa      	bcc.n	8004254 <HAL_Delay+0x14>
  {
  }
}
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	200000b0 	.word	0x200000b0

08004264 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004264:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004268:	4a06      	ldr	r2, [pc, #24]	; (8004284 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800426a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800426c:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800426e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004272:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004274:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004276:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800427a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800427e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800428a:	b430      	push	{r4, r5}
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004292:	f1c3 0507 	rsb	r5, r3, #7
 8004296:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004298:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800429c:	bf28      	it	cs
 800429e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a0:	2c06      	cmp	r4, #6
 80042a2:	d919      	bls.n	80042d8 <HAL_NVIC_SetPriority+0x50>
 80042a4:	f04f 34ff 	mov.w	r4, #4294967295
 80042a8:	3b03      	subs	r3, #3
 80042aa:	409c      	lsls	r4, r3
 80042ac:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	f04f 34ff 	mov.w	r4, #4294967295
 80042b4:	40ac      	lsls	r4, r5
 80042b6:	ea21 0104 	bic.w	r1, r1, r4
 80042ba:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80042bc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042be:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80042c2:	db0c      	blt.n	80042de <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c4:	0109      	lsls	r1, r1, #4
 80042c6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80042ca:	b2c9      	uxtb	r1, r1
 80042cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80042d0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80042d4:	bc30      	pop	{r4, r5}
 80042d6:	4770      	bx	lr
 80042d8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042da:	4613      	mov	r3, r2
 80042dc:	e7e8      	b.n	80042b0 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_NVIC_SetPriority+0x6c>)
 80042e0:	f000 000f 	and.w	r0, r0, #15
 80042e4:	0109      	lsls	r1, r1, #4
 80042e6:	b2c9      	uxtb	r1, r1
 80042e8:	4403      	add	r3, r0
 80042ea:	7619      	strb	r1, [r3, #24]
 80042ec:	bc30      	pop	{r4, r5}
 80042ee:	4770      	bx	lr
 80042f0:	e000ed00 	.word	0xe000ed00
 80042f4:	e000ecfc 	.word	0xe000ecfc

080042f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80042f8:	2800      	cmp	r0, #0
 80042fa:	db07      	blt.n	800430c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042fc:	2301      	movs	r3, #1
 80042fe:	f000 011f 	and.w	r1, r0, #31
 8004302:	4a03      	ldr	r2, [pc, #12]	; (8004310 <HAL_NVIC_EnableIRQ+0x18>)
 8004304:	408b      	lsls	r3, r1
 8004306:	0940      	lsrs	r0, r0, #5
 8004308:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	e000e100 	.word	0xe000e100

08004314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004314:	3801      	subs	r0, #1
 8004316:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800431a:	d20d      	bcs.n	8004338 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800431c:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431e:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004320:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004322:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004326:	4c06      	ldr	r4, [pc, #24]	; (8004340 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004328:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800432e:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8004330:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004332:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004334:	6019      	str	r1, [r3, #0]
 8004336:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004338:	2001      	movs	r0, #1
 800433a:	4770      	bx	lr
 800433c:	e000e010 	.word	0xe000e010
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004344:	2800      	cmp	r0, #0
 8004346:	d036      	beq.n	80043b6 <HAL_DMA_Init+0x72>
 8004348:	4603      	mov	r3, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <HAL_DMA_Init+0x78>)
 800434c:	6800      	ldr	r0, [r0, #0]
{
 800434e:	b470      	push	{r4, r5, r6}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004350:	4290      	cmp	r0, r2
 8004352:	d925      	bls.n	80043a0 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004354:	4a1a      	ldr	r2, [pc, #104]	; (80043c0 <HAL_DMA_Init+0x7c>)
 8004356:	491b      	ldr	r1, [pc, #108]	; (80043c4 <HAL_DMA_Init+0x80>)
 8004358:	4402      	add	r2, r0
 800435a:	fba1 1202 	umull	r1, r2, r1, r2
    hdma->DmaBaseAddress = DMA2;
 800435e:	491a      	ldr	r1, [pc, #104]	; (80043c8 <HAL_DMA_Init+0x84>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004360:	0912      	lsrs	r2, r2, #4
 8004362:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 8004364:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004368:	e9d3 2601 	ldrd	r2, r6, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800436c:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004370:	2400      	movs	r4, #0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004372:	68d9      	ldr	r1, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004374:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004376:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004378:	e9d3 6104 	ldrd	r6, r1, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800437c:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437e:	699e      	ldr	r6, [r3, #24]
 8004380:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8004382:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004384:	4332      	orrs	r2, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 8004386:	69de      	ldr	r6, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004388:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 800438c:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800438e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8004392:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8004394:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8004396:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 8004398:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800439a:	639c      	str	r4, [r3, #56]	; 0x38
}
 800439c:	bc70      	pop	{r4, r5, r6}
 800439e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <HAL_DMA_Init+0x88>)
 80043a2:	4908      	ldr	r1, [pc, #32]	; (80043c4 <HAL_DMA_Init+0x80>)
 80043a4:	4402      	add	r2, r0
 80043a6:	fba1 1202 	umull	r1, r2, r1, r2
    hdma->DmaBaseAddress = DMA1;
 80043aa:	4909      	ldr	r1, [pc, #36]	; (80043d0 <HAL_DMA_Init+0x8c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043ac:	0912      	lsrs	r2, r2, #4
 80043ae:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80043b0:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
 80043b4:	e7d8      	b.n	8004368 <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 80043b6:	2001      	movs	r0, #1
}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40020407 	.word	0x40020407
 80043c0:	bffdfbf8 	.word	0xbffdfbf8
 80043c4:	cccccccd 	.word	0xcccccccd
 80043c8:	40020400 	.word	0x40020400
 80043cc:	bffdfff8 	.word	0xbffdfff8
 80043d0:	40020000 	.word	0x40020000

080043d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d4:	b4f0      	push	{r4, r5, r6, r7}
 80043d6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043d8:	f890 0020 	ldrb.w	r0, [r0, #32]
 80043dc:	2801      	cmp	r0, #1
 80043de:	d038      	beq.n	8004452 <HAL_DMA_Start_IT+0x7e>
 80043e0:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043e2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 80043e6:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ea:	42a8      	cmp	r0, r5
 80043ec:	d005      	beq.n	80043fa <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80043ee:	2300      	movs	r3, #0
 80043f0:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80043f4:	2002      	movs	r0, #2
  }    
  return status;
}
 80043f6:	bcf0      	pop	{r4, r5, r6, r7}
 80043f8:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80043fa:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043fc:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 80043fe:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8004400:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004404:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004406:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8004408:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800440a:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 800440c:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004410:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004412:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004414:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004416:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8004418:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 800441a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800441c:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800441e:	bf0b      	itete	eq
 8004420:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004422:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004424:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004426:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8004428:	b153      	cbz	r3, 8004440 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800442a:	682b      	ldr	r3, [r5, #0]
 800442c:	f043 030e 	orr.w	r3, r3, #14
 8004430:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8004432:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004434:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	602b      	str	r3, [r5, #0]
}
 800443c:	bcf0      	pop	{r4, r5, r6, r7}
 800443e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	f023 0304 	bic.w	r3, r3, #4
 8004446:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	f043 030a 	orr.w	r3, r3, #10
 800444e:	602b      	str	r3, [r5, #0]
 8004450:	e7ef      	b.n	8004432 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8004452:	2002      	movs	r0, #2
}
 8004454:	bcf0      	pop	{r4, r5, r6, r7}
 8004456:	4770      	bx	lr

08004458 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004458:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800445c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800445e:	2a02      	cmp	r2, #2
 8004460:	d006      	beq.n	8004470 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004462:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8004464:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004466:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8004468:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 800446c:	2001      	movs	r0, #1
}
 800446e:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004470:	2101      	movs	r1, #1
{
 8004472:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8004474:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004478:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800447a:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447c:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800447e:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004480:	f024 040e 	bic.w	r4, r4, #14
 8004484:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004486:	6814      	ldr	r4, [r2, #0]
  return status; 
 8004488:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800448a:	f024 0401 	bic.w	r4, r4, #1
 800448e:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004492:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8004494:	841d      	strh	r5, [r3, #32]
}
 8004496:	bc70      	pop	{r4, r5, r6}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop

0800449c <HAL_DMA_Abort_IT>:
{  
 800449c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800449e:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 80044a2:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044a4:	2a02      	cmp	r2, #2
 80044a6:	d003      	beq.n	80044b0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a8:	2204      	movs	r2, #4
    status = HAL_ERROR;
 80044aa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80044ae:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b0:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044b2:	4845      	ldr	r0, [pc, #276]	; (80045c8 <HAL_DMA_Abort_IT+0x12c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b4:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044b6:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b8:	f021 010e 	bic.w	r1, r1, #14
 80044bc:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80044be:	6811      	ldr	r1, [r2, #0]
 80044c0:	f021 0101 	bic.w	r1, r1, #1
 80044c4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044c6:	4941      	ldr	r1, [pc, #260]	; (80045cc <HAL_DMA_Abort_IT+0x130>)
 80044c8:	d924      	bls.n	8004514 <HAL_DMA_Abort_IT+0x78>
 80044ca:	428a      	cmp	r2, r1
 80044cc:	d055      	beq.n	800457a <HAL_DMA_Abort_IT+0xde>
 80044ce:	3114      	adds	r1, #20
 80044d0:	428a      	cmp	r2, r1
 80044d2:	d05e      	beq.n	8004592 <HAL_DMA_Abort_IT+0xf6>
 80044d4:	3114      	adds	r1, #20
 80044d6:	428a      	cmp	r2, r1
 80044d8:	d05d      	beq.n	8004596 <HAL_DMA_Abort_IT+0xfa>
 80044da:	3114      	adds	r1, #20
 80044dc:	428a      	cmp	r2, r1
 80044de:	d053      	beq.n	8004588 <HAL_DMA_Abort_IT+0xec>
 80044e0:	3114      	adds	r1, #20
 80044e2:	428a      	cmp	r2, r1
 80044e4:	d060      	beq.n	80045a8 <HAL_DMA_Abort_IT+0x10c>
 80044e6:	3114      	adds	r1, #20
 80044e8:	428a      	cmp	r2, r1
 80044ea:	d063      	beq.n	80045b4 <HAL_DMA_Abort_IT+0x118>
 80044ec:	4282      	cmp	r2, r0
 80044ee:	d067      	beq.n	80045c0 <HAL_DMA_Abort_IT+0x124>
 80044f0:	f501 7167 	add.w	r1, r1, #924	; 0x39c
 80044f4:	428a      	cmp	r2, r1
 80044f6:	d040      	beq.n	800457a <HAL_DMA_Abort_IT+0xde>
 80044f8:	3114      	adds	r1, #20
 80044fa:	428a      	cmp	r2, r1
 80044fc:	d049      	beq.n	8004592 <HAL_DMA_Abort_IT+0xf6>
 80044fe:	3114      	adds	r1, #20
 8004500:	428a      	cmp	r2, r1
 8004502:	d048      	beq.n	8004596 <HAL_DMA_Abort_IT+0xfa>
 8004504:	3114      	adds	r1, #20
 8004506:	428a      	cmp	r2, r1
 8004508:	bf14      	ite	ne
 800450a:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 800450e:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8004512:	e033      	b.n	800457c <HAL_DMA_Abort_IT+0xe0>
 8004514:	428a      	cmp	r2, r1
 8004516:	d022      	beq.n	800455e <HAL_DMA_Abort_IT+0xc2>
 8004518:	3114      	adds	r1, #20
 800451a:	428a      	cmp	r2, r1
 800451c:	d037      	beq.n	800458e <HAL_DMA_Abort_IT+0xf2>
 800451e:	3114      	adds	r1, #20
 8004520:	428a      	cmp	r2, r1
 8004522:	d03b      	beq.n	800459c <HAL_DMA_Abort_IT+0x100>
 8004524:	3114      	adds	r1, #20
 8004526:	428a      	cmp	r2, r1
 8004528:	d02b      	beq.n	8004582 <HAL_DMA_Abort_IT+0xe6>
 800452a:	3114      	adds	r1, #20
 800452c:	428a      	cmp	r2, r1
 800452e:	d038      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x106>
 8004530:	3114      	adds	r1, #20
 8004532:	428a      	cmp	r2, r1
 8004534:	d03b      	beq.n	80045ae <HAL_DMA_Abort_IT+0x112>
 8004536:	4282      	cmp	r2, r0
 8004538:	d03f      	beq.n	80045ba <HAL_DMA_Abort_IT+0x11e>
 800453a:	f501 7167 	add.w	r1, r1, #924	; 0x39c
 800453e:	428a      	cmp	r2, r1
 8004540:	d00d      	beq.n	800455e <HAL_DMA_Abort_IT+0xc2>
 8004542:	3114      	adds	r1, #20
 8004544:	428a      	cmp	r2, r1
 8004546:	d022      	beq.n	800458e <HAL_DMA_Abort_IT+0xf2>
 8004548:	3114      	adds	r1, #20
 800454a:	428a      	cmp	r2, r1
 800454c:	d026      	beq.n	800459c <HAL_DMA_Abort_IT+0x100>
 800454e:	3114      	adds	r1, #20
 8004550:	428a      	cmp	r2, r1
 8004552:	bf14      	ite	ne
 8004554:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8004558:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800455c:	e000      	b.n	8004560 <HAL_DMA_Abort_IT+0xc4>
 800455e:	2201      	movs	r2, #1
 8004560:	491b      	ldr	r1, [pc, #108]	; (80045d0 <HAL_DMA_Abort_IT+0x134>)
 8004562:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004564:	f44f 7180 	mov.w	r1, #256	; 0x100
    if(hdma->XferAbortCallback != NULL)
 8004568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800456a:	8419      	strh	r1, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 800456c:	b11a      	cbz	r2, 8004576 <HAL_DMA_Abort_IT+0xda>
      hdma->XferAbortCallback(hdma);
 800456e:	4618      	mov	r0, r3
 8004570:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2000      	movs	r0, #0
}
 8004574:	bd08      	pop	{r3, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	4610      	mov	r0, r2
}
 8004578:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800457a:	2201      	movs	r2, #1
 800457c:	4915      	ldr	r1, [pc, #84]	; (80045d4 <HAL_DMA_Abort_IT+0x138>)
 800457e:	604a      	str	r2, [r1, #4]
 8004580:	e7f0      	b.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 8004582:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004586:	e7eb      	b.n	8004560 <HAL_DMA_Abort_IT+0xc4>
 8004588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800458c:	e7f6      	b.n	800457c <HAL_DMA_Abort_IT+0xe0>
 800458e:	2210      	movs	r2, #16
 8004590:	e7e6      	b.n	8004560 <HAL_DMA_Abort_IT+0xc4>
 8004592:	2210      	movs	r2, #16
 8004594:	e7f2      	b.n	800457c <HAL_DMA_Abort_IT+0xe0>
 8004596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800459a:	e7ef      	b.n	800457c <HAL_DMA_Abort_IT+0xe0>
 800459c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045a0:	e7de      	b.n	8004560 <HAL_DMA_Abort_IT+0xc4>
 80045a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045a6:	e7db      	b.n	8004560 <HAL_DMA_Abort_IT+0xc4>
 80045a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045ac:	e7e6      	b.n	800457c <HAL_DMA_Abort_IT+0xe0>
 80045ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045b2:	e7d5      	b.n	8004560 <HAL_DMA_Abort_IT+0xc4>
 80045b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045b8:	e7e0      	b.n	800457c <HAL_DMA_Abort_IT+0xe0>
 80045ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045be:	e7cf      	b.n	8004560 <HAL_DMA_Abort_IT+0xc4>
 80045c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c4:	e7da      	b.n	800457c <HAL_DMA_Abort_IT+0xe0>
 80045c6:	bf00      	nop
 80045c8:	40020080 	.word	0x40020080
 80045cc:	40020008 	.word	0x40020008
 80045d0:	40020000 	.word	0x40020000
 80045d4:	40020400 	.word	0x40020400

080045d8 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045d8:	2204      	movs	r2, #4
{
 80045da:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045dc:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045e0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80045e2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045e4:	408a      	lsls	r2, r1
 80045e6:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80045e8:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045ea:	d042      	beq.n	8004672 <HAL_DMA_IRQHandler+0x9a>
 80045ec:	076a      	lsls	r2, r5, #29
 80045ee:	d540      	bpl.n	8004672 <HAL_DMA_IRQHandler+0x9a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	0691      	lsls	r1, r2, #26
 80045f4:	d403      	bmi.n	80045fe <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	f022 0204 	bic.w	r2, r2, #4
 80045fc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80045fe:	4a9b      	ldr	r2, [pc, #620]	; (800486c <HAL_DMA_IRQHandler+0x294>)
 8004600:	499b      	ldr	r1, [pc, #620]	; (8004870 <HAL_DMA_IRQHandler+0x298>)
 8004602:	4293      	cmp	r3, r2
 8004604:	f240 8090 	bls.w	8004728 <HAL_DMA_IRQHandler+0x150>
 8004608:	428b      	cmp	r3, r1
 800460a:	f000 80ee 	beq.w	80047ea <HAL_DMA_IRQHandler+0x212>
 800460e:	3114      	adds	r1, #20
 8004610:	428b      	cmp	r3, r1
 8004612:	f000 80f2 	beq.w	80047fa <HAL_DMA_IRQHandler+0x222>
 8004616:	3114      	adds	r1, #20
 8004618:	428b      	cmp	r3, r1
 800461a:	f000 80e1 	beq.w	80047e0 <HAL_DMA_IRQHandler+0x208>
 800461e:	3114      	adds	r1, #20
 8004620:	428b      	cmp	r3, r1
 8004622:	f000 80f5 	beq.w	8004810 <HAL_DMA_IRQHandler+0x238>
 8004626:	3114      	adds	r1, #20
 8004628:	428b      	cmp	r3, r1
 800462a:	f000 80fd 	beq.w	8004828 <HAL_DMA_IRQHandler+0x250>
 800462e:	3114      	adds	r1, #20
 8004630:	428b      	cmp	r3, r1
 8004632:	f000 8102 	beq.w	800483a <HAL_DMA_IRQHandler+0x262>
 8004636:	4293      	cmp	r3, r2
 8004638:	f000 810b 	beq.w	8004852 <HAL_DMA_IRQHandler+0x27a>
 800463c:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8004640:	4293      	cmp	r3, r2
 8004642:	f000 80d2 	beq.w	80047ea <HAL_DMA_IRQHandler+0x212>
 8004646:	3214      	adds	r2, #20
 8004648:	4293      	cmp	r3, r2
 800464a:	f000 80d6 	beq.w	80047fa <HAL_DMA_IRQHandler+0x222>
 800464e:	3214      	adds	r2, #20
 8004650:	4293      	cmp	r3, r2
 8004652:	f000 80c5 	beq.w	80047e0 <HAL_DMA_IRQHandler+0x208>
 8004656:	3214      	adds	r2, #20
 8004658:	4293      	cmp	r3, r2
 800465a:	bf14      	ite	ne
 800465c:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8004660:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8004664:	4a83      	ldr	r2, [pc, #524]	; (8004874 <HAL_DMA_IRQHandler+0x29c>)
 8004666:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004668:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d15a      	bne.n	8004724 <HAL_DMA_IRQHandler+0x14c>
}
 800466e:	bc70      	pop	{r4, r5, r6}
 8004670:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004672:	2202      	movs	r2, #2
 8004674:	408a      	lsls	r2, r1
 8004676:	4222      	tst	r2, r4
 8004678:	d03f      	beq.n	80046fa <HAL_DMA_IRQHandler+0x122>
 800467a:	07aa      	lsls	r2, r5, #30
 800467c:	d53d      	bpl.n	80046fa <HAL_DMA_IRQHandler+0x122>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	0691      	lsls	r1, r2, #26
 8004682:	d406      	bmi.n	8004692 <HAL_DMA_IRQHandler+0xba>
      hdma->State = HAL_DMA_STATE_READY;
 8004684:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	f022 020a 	bic.w	r2, r2, #10
 800468c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800468e:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004692:	4a76      	ldr	r2, [pc, #472]	; (800486c <HAL_DMA_IRQHandler+0x294>)
 8004694:	4976      	ldr	r1, [pc, #472]	; (8004870 <HAL_DMA_IRQHandler+0x298>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d96d      	bls.n	8004776 <HAL_DMA_IRQHandler+0x19e>
 800469a:	428b      	cmp	r3, r1
 800469c:	f000 80a7 	beq.w	80047ee <HAL_DMA_IRQHandler+0x216>
 80046a0:	3114      	adds	r1, #20
 80046a2:	428b      	cmp	r3, r1
 80046a4:	f000 8097 	beq.w	80047d6 <HAL_DMA_IRQHandler+0x1fe>
 80046a8:	3114      	adds	r1, #20
 80046aa:	428b      	cmp	r3, r1
 80046ac:	f000 80a7 	beq.w	80047fe <HAL_DMA_IRQHandler+0x226>
 80046b0:	3114      	adds	r1, #20
 80046b2:	428b      	cmp	r3, r1
 80046b4:	f000 80af 	beq.w	8004816 <HAL_DMA_IRQHandler+0x23e>
 80046b8:	3114      	adds	r1, #20
 80046ba:	428b      	cmp	r3, r1
 80046bc:	f000 80ba 	beq.w	8004834 <HAL_DMA_IRQHandler+0x25c>
 80046c0:	3114      	adds	r1, #20
 80046c2:	428b      	cmp	r3, r1
 80046c4:	f000 80c2 	beq.w	800484c <HAL_DMA_IRQHandler+0x274>
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f000 80cb 	beq.w	8004864 <HAL_DMA_IRQHandler+0x28c>
 80046ce:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	f000 808b 	beq.w	80047ee <HAL_DMA_IRQHandler+0x216>
 80046d8:	3214      	adds	r2, #20
 80046da:	4293      	cmp	r3, r2
 80046dc:	d07b      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x1fe>
 80046de:	3214      	adds	r2, #20
 80046e0:	4293      	cmp	r3, r2
 80046e2:	f000 808c 	beq.w	80047fe <HAL_DMA_IRQHandler+0x226>
 80046e6:	3214      	adds	r2, #20
 80046e8:	4293      	cmp	r3, r2
 80046ea:	bf14      	ite	ne
 80046ec:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 80046f0:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80046f4:	4b5f      	ldr	r3, [pc, #380]	; (8004874 <HAL_DMA_IRQHandler+0x29c>)
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	e062      	b.n	80047c0 <HAL_DMA_IRQHandler+0x1e8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80046fa:	2208      	movs	r2, #8
 80046fc:	408a      	lsls	r2, r1
 80046fe:	4222      	tst	r2, r4
 8004700:	d0b5      	beq.n	800466e <HAL_DMA_IRQHandler+0x96>
 8004702:	072a      	lsls	r2, r5, #28
 8004704:	d5b3      	bpl.n	800466e <HAL_DMA_IRQHandler+0x96>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004706:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 8004708:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800470c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800470e:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004712:	f022 020e 	bic.w	r2, r2, #14
 8004716:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8004718:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800471a:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800471c:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800471e:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0a4      	beq.n	800466e <HAL_DMA_IRQHandler+0x96>
}
 8004724:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004726:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004728:	428b      	cmp	r3, r1
 800472a:	d05c      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x20e>
 800472c:	3114      	adds	r1, #20
 800472e:	428b      	cmp	r3, r1
 8004730:	d061      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x21e>
 8004732:	3114      	adds	r1, #20
 8004734:	428b      	cmp	r3, r1
 8004736:	d050      	beq.n	80047da <HAL_DMA_IRQHandler+0x202>
 8004738:	3114      	adds	r1, #20
 800473a:	428b      	cmp	r3, r1
 800473c:	d065      	beq.n	800480a <HAL_DMA_IRQHandler+0x232>
 800473e:	3114      	adds	r1, #20
 8004740:	428b      	cmp	r3, r1
 8004742:	d06e      	beq.n	8004822 <HAL_DMA_IRQHandler+0x24a>
 8004744:	3114      	adds	r1, #20
 8004746:	428b      	cmp	r3, r1
 8004748:	d07a      	beq.n	8004840 <HAL_DMA_IRQHandler+0x268>
 800474a:	4293      	cmp	r3, r2
 800474c:	f000 8084 	beq.w	8004858 <HAL_DMA_IRQHandler+0x280>
 8004750:	4a49      	ldr	r2, [pc, #292]	; (8004878 <HAL_DMA_IRQHandler+0x2a0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d047      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x20e>
 8004756:	3214      	adds	r2, #20
 8004758:	4293      	cmp	r3, r2
 800475a:	d04c      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x21e>
 800475c:	3214      	adds	r2, #20
 800475e:	4293      	cmp	r3, r2
 8004760:	d03b      	beq.n	80047da <HAL_DMA_IRQHandler+0x202>
 8004762:	3214      	adds	r2, #20
 8004764:	4293      	cmp	r3, r2
 8004766:	bf14      	ite	ne
 8004768:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800476c:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8004770:	4a42      	ldr	r2, [pc, #264]	; (800487c <HAL_DMA_IRQHandler+0x2a4>)
 8004772:	6053      	str	r3, [r2, #4]
 8004774:	e778      	b.n	8004668 <HAL_DMA_IRQHandler+0x90>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004776:	428b      	cmp	r3, r1
 8004778:	d03b      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x21a>
 800477a:	3114      	adds	r1, #20
 800477c:	428b      	cmp	r3, r1
 800477e:	d028      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x1fa>
 8004780:	3114      	adds	r1, #20
 8004782:	428b      	cmp	r3, r1
 8004784:	d03e      	beq.n	8004804 <HAL_DMA_IRQHandler+0x22c>
 8004786:	3114      	adds	r1, #20
 8004788:	428b      	cmp	r3, r1
 800478a:	d047      	beq.n	800481c <HAL_DMA_IRQHandler+0x244>
 800478c:	3114      	adds	r1, #20
 800478e:	428b      	cmp	r3, r1
 8004790:	d04d      	beq.n	800482e <HAL_DMA_IRQHandler+0x256>
 8004792:	3114      	adds	r1, #20
 8004794:	428b      	cmp	r3, r1
 8004796:	d056      	beq.n	8004846 <HAL_DMA_IRQHandler+0x26e>
 8004798:	4293      	cmp	r3, r2
 800479a:	d060      	beq.n	800485e <HAL_DMA_IRQHandler+0x286>
 800479c:	4a36      	ldr	r2, [pc, #216]	; (8004878 <HAL_DMA_IRQHandler+0x2a0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d027      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x21a>
 80047a2:	3214      	adds	r2, #20
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d014      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x1fa>
 80047a8:	3214      	adds	r2, #20
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02a      	beq.n	8004804 <HAL_DMA_IRQHandler+0x22c>
 80047ae:	3214      	adds	r2, #20
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bf14      	ite	ne
 80047b4:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 80047b8:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80047bc:	4b2f      	ldr	r3, [pc, #188]	; (800487c <HAL_DMA_IRQHandler+0x2a4>)
 80047be:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80047c0:	2200      	movs	r2, #0
    if(hdma->XferCpltCallback != NULL)
 80047c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    __HAL_UNLOCK(hdma);
 80047c4:	f880 2020 	strb.w	r2, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f43f af50 	beq.w	800466e <HAL_DMA_IRQHandler+0x96>
}
 80047ce:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80047d0:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80047d2:	2220      	movs	r2, #32
 80047d4:	e7f2      	b.n	80047bc <HAL_DMA_IRQHandler+0x1e4>
 80047d6:	2220      	movs	r2, #32
 80047d8:	e78c      	b.n	80046f4 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80047da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047de:	e7c7      	b.n	8004770 <HAL_DMA_IRQHandler+0x198>
 80047e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e4:	e73e      	b.n	8004664 <HAL_DMA_IRQHandler+0x8c>
 80047e6:	2304      	movs	r3, #4
 80047e8:	e7c2      	b.n	8004770 <HAL_DMA_IRQHandler+0x198>
 80047ea:	2304      	movs	r3, #4
 80047ec:	e73a      	b.n	8004664 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80047ee:	2202      	movs	r2, #2
 80047f0:	e780      	b.n	80046f4 <HAL_DMA_IRQHandler+0x11c>
 80047f2:	2202      	movs	r2, #2
 80047f4:	e7e2      	b.n	80047bc <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80047f6:	2340      	movs	r3, #64	; 0x40
 80047f8:	e7ba      	b.n	8004770 <HAL_DMA_IRQHandler+0x198>
 80047fa:	2340      	movs	r3, #64	; 0x40
 80047fc:	e732      	b.n	8004664 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80047fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004802:	e777      	b.n	80046f4 <HAL_DMA_IRQHandler+0x11c>
 8004804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004808:	e7d8      	b.n	80047bc <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800480a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800480e:	e7af      	b.n	8004770 <HAL_DMA_IRQHandler+0x198>
 8004810:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004814:	e726      	b.n	8004664 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800481a:	e76b      	b.n	80046f4 <HAL_DMA_IRQHandler+0x11c>
 800481c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004820:	e7cc      	b.n	80047bc <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004822:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004826:	e7a3      	b.n	8004770 <HAL_DMA_IRQHandler+0x198>
 8004828:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800482c:	e71a      	b.n	8004664 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800482e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004832:	e7c3      	b.n	80047bc <HAL_DMA_IRQHandler+0x1e4>
 8004834:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004838:	e75c      	b.n	80046f4 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800483a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800483e:	e711      	b.n	8004664 <HAL_DMA_IRQHandler+0x8c>
 8004840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004844:	e794      	b.n	8004770 <HAL_DMA_IRQHandler+0x198>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004846:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800484a:	e7b7      	b.n	80047bc <HAL_DMA_IRQHandler+0x1e4>
 800484c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004850:	e750      	b.n	80046f4 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004852:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004856:	e705      	b.n	8004664 <HAL_DMA_IRQHandler+0x8c>
 8004858:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800485c:	e788      	b.n	8004770 <HAL_DMA_IRQHandler+0x198>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800485e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004862:	e7ab      	b.n	80047bc <HAL_DMA_IRQHandler+0x1e4>
 8004864:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004868:	e744      	b.n	80046f4 <HAL_DMA_IRQHandler+0x11c>
 800486a:	bf00      	nop
 800486c:	40020080 	.word	0x40020080
 8004870:	40020008 	.word	0x40020008
 8004874:	40020400 	.word	0x40020400
 8004878:	40020408 	.word	0x40020408
 800487c:	40020000 	.word	0x40020000

08004880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004884:	680c      	ldr	r4, [r1, #0]
{
 8004886:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004888:	2c00      	cmp	r4, #0
 800488a:	f000 80a2 	beq.w	80049d2 <HAL_GPIO_Init+0x152>
  uint32_t config = 0x00u;
 800488e:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004890:	f8df c228 	ldr.w	ip, [pc, #552]	; 8004abc <HAL_GPIO_Init+0x23c>
  uint32_t position = 0x00u;
 8004894:	4633      	mov	r3, r6
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004896:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8004ac0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800489a:	4f82      	ldr	r7, [pc, #520]	; (8004aa4 <HAL_GPIO_Init+0x224>)
      switch (GPIO_Init->Mode)
 800489c:	f8df e224 	ldr.w	lr, [pc, #548]	; 8004ac4 <HAL_GPIO_Init+0x244>
 80048a0:	e004      	b.n	80048ac <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80048a2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048a4:	fa34 f203 	lsrs.w	r2, r4, r3
 80048a8:	f000 8093 	beq.w	80049d2 <HAL_GPIO_Init+0x152>
    ioposition = (0x01uL << position);
 80048ac:	2201      	movs	r2, #1
 80048ae:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80048b0:	ea32 0904 	bics.w	r9, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048b4:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 80048b8:	d1f3      	bne.n	80048a2 <HAL_GPIO_Init+0x22>
      switch (GPIO_Init->Mode)
 80048ba:	684c      	ldr	r4, [r1, #4]
 80048bc:	2c12      	cmp	r4, #18
 80048be:	f200 808b 	bhi.w	80049d8 <HAL_GPIO_Init+0x158>
 80048c2:	2c12      	cmp	r4, #18
 80048c4:	d80c      	bhi.n	80048e0 <HAL_GPIO_Init+0x60>
 80048c6:	e8df f004 	tbb	[pc, r4]
 80048ca:	c693      	.short	0xc693
 80048cc:	0b0b0ac3 	.word	0x0b0b0ac3
 80048d0:	0b0b0b0b 	.word	0x0b0b0b0b
 80048d4:	0b0b0b0b 	.word	0x0b0b0b0b
 80048d8:	c00b0b0b 	.word	0xc00b0b0b
 80048dc:	bd          	.byte	0xbd
 80048dd:	00          	.byte	0x00
 80048de:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048e0:	2dff      	cmp	r5, #255	; 0xff
 80048e2:	f200 808c 	bhi.w	80049fe <HAL_GPIO_Init+0x17e>
 80048e6:	4681      	mov	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048e8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048ec:	240f      	movs	r4, #15
 80048ee:	f8d9 2000 	ldr.w	r2, [r9]
 80048f2:	fa04 fb0a 	lsl.w	fp, r4, sl
 80048f6:	ea22 020b 	bic.w	r2, r2, fp
 80048fa:	fa06 fa0a 	lsl.w	sl, r6, sl
 80048fe:	ea42 020a 	orr.w	r2, r2, sl
 8004902:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004906:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800490a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800490e:	f000 8097 	beq.w	8004a40 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004912:	f8dc a018 	ldr.w	sl, [ip, #24]
 8004916:	f023 0203 	bic.w	r2, r3, #3
 800491a:	f04a 0a01 	orr.w	sl, sl, #1
 800491e:	f8cc a018 	str.w	sl, [ip, #24]
 8004922:	f8dc a018 	ldr.w	sl, [ip, #24]
 8004926:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800492a:	f00a 0a01 	and.w	sl, sl, #1
 800492e:	f8cd a00c 	str.w	sl, [sp, #12]
 8004932:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004936:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800493a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800493e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004942:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004946:	fa04 f40a 	lsl.w	r4, r4, sl
 800494a:	ea2b 0404 	bic.w	r4, fp, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800494e:	4540      	cmp	r0, r8
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004950:	9401      	str	r4, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004952:	d01b      	beq.n	800498c <HAL_GPIO_Init+0x10c>
 8004954:	4c54      	ldr	r4, [pc, #336]	; (8004aa8 <HAL_GPIO_Init+0x228>)
 8004956:	42a0      	cmp	r0, r4
 8004958:	f000 8088 	beq.w	8004a6c <HAL_GPIO_Init+0x1ec>
 800495c:	4c53      	ldr	r4, [pc, #332]	; (8004aac <HAL_GPIO_Init+0x22c>)
 800495e:	42a0      	cmp	r0, r4
 8004960:	d07b      	beq.n	8004a5a <HAL_GPIO_Init+0x1da>
 8004962:	4c53      	ldr	r4, [pc, #332]	; (8004ab0 <HAL_GPIO_Init+0x230>)
 8004964:	42a0      	cmp	r0, r4
 8004966:	f000 808a 	beq.w	8004a7e <HAL_GPIO_Init+0x1fe>
 800496a:	4c52      	ldr	r4, [pc, #328]	; (8004ab4 <HAL_GPIO_Init+0x234>)
 800496c:	42a0      	cmp	r0, r4
 800496e:	f000 808f 	beq.w	8004a90 <HAL_GPIO_Init+0x210>
 8004972:	4c51      	ldr	r4, [pc, #324]	; (8004ab8 <HAL_GPIO_Init+0x238>)
 8004974:	42a0      	cmp	r0, r4
 8004976:	bf0c      	ite	eq
 8004978:	f04f 0b05 	moveq.w	fp, #5
 800497c:	f04f 0b06 	movne.w	fp, #6
 8004980:	9c01      	ldr	r4, [sp, #4]
 8004982:	fa0b fa0a 	lsl.w	sl, fp, sl
 8004986:	ea44 040a 	orr.w	r4, r4, sl
 800498a:	9401      	str	r4, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 800498c:	9c01      	ldr	r4, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800498e:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8004992:	6094      	str	r4, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	bf14      	ite	ne
 8004998:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800499a:	43aa      	biceq	r2, r5
 800499c:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800499e:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049a0:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80049a4:	bf14      	ite	ne
 80049a6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049a8:	43aa      	biceq	r2, r5
 80049aa:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80049ac:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049ae:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80049b2:	bf14      	ite	ne
 80049b4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049b6:	43aa      	biceq	r2, r5
 80049b8:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049ba:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80049be:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049c0:	d03b      	beq.n	8004a3a <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->FTSR, iocurrent);
 80049c2:	4315      	orrs	r5, r2
 80049c4:	60fd      	str	r5, [r7, #12]
 80049c6:	680c      	ldr	r4, [r1, #0]
	position++;
 80049c8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ca:	fa34 f203 	lsrs.w	r2, r4, r3
 80049ce:	f47f af6d 	bne.w	80048ac <HAL_GPIO_Init+0x2c>
  }
}
 80049d2:	b005      	add	sp, #20
 80049d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80049d8:	4574      	cmp	r4, lr
 80049da:	d009      	beq.n	80049f0 <HAL_GPIO_Init+0x170>
 80049dc:	d916      	bls.n	8004a0c <HAL_GPIO_Init+0x18c>
 80049de:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8004ac8 <HAL_GPIO_Init+0x248>
 80049e2:	454c      	cmp	r4, r9
 80049e4:	d004      	beq.n	80049f0 <HAL_GPIO_Init+0x170>
 80049e6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80049ea:	454c      	cmp	r4, r9
 80049ec:	f47f af78 	bne.w	80048e0 <HAL_GPIO_Init+0x60>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049f0:	688c      	ldr	r4, [r1, #8]
 80049f2:	b9dc      	cbnz	r4, 8004a2c <HAL_GPIO_Init+0x1ac>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80049f4:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049f6:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80049fa:	f67f af74 	bls.w	80048e6 <HAL_GPIO_Init+0x66>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80049fe:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8004a02:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a06:	f100 0904 	add.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a0a:	e76f      	b.n	80048ec <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8004a0c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8004acc <HAL_GPIO_Init+0x24c>
 8004a10:	454c      	cmp	r4, r9
 8004a12:	d0ed      	beq.n	80049f0 <HAL_GPIO_Init+0x170>
 8004a14:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8004a18:	454c      	cmp	r4, r9
 8004a1a:	d0e9      	beq.n	80049f0 <HAL_GPIO_Init+0x170>
 8004a1c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8004a20:	454c      	cmp	r4, r9
 8004a22:	f47f af5d 	bne.w	80048e0 <HAL_GPIO_Init+0x60>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a26:	688c      	ldr	r4, [r1, #8]
 8004a28:	2c00      	cmp	r4, #0
 8004a2a:	d0e3      	beq.n	80049f4 <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a2c:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a2e:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8004a32:	bf0c      	ite	eq
 8004a34:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8004a36:	6142      	strne	r2, [r0, #20]
 8004a38:	e752      	b.n	80048e0 <HAL_GPIO_Init+0x60>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a3a:	ea22 0505 	bic.w	r5, r2, r5
 8004a3e:	60fd      	str	r5, [r7, #12]
 8004a40:	680c      	ldr	r4, [r1, #0]
 8004a42:	e72e      	b.n	80048a2 <HAL_GPIO_Init+0x22>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a44:	68ce      	ldr	r6, [r1, #12]
 8004a46:	360c      	adds	r6, #12
          break;
 8004a48:	e74a      	b.n	80048e0 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a4a:	68ce      	ldr	r6, [r1, #12]
 8004a4c:	3604      	adds	r6, #4
          break;
 8004a4e:	e747      	b.n	80048e0 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a50:	68ce      	ldr	r6, [r1, #12]
 8004a52:	3608      	adds	r6, #8
          break;
 8004a54:	e744      	b.n	80048e0 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a56:	68ce      	ldr	r6, [r1, #12]
          break;
 8004a58:	e742      	b.n	80048e0 <HAL_GPIO_Init+0x60>
 8004a5a:	f04f 0b02 	mov.w	fp, #2
 8004a5e:	9c01      	ldr	r4, [sp, #4]
 8004a60:	fa0b fa0a 	lsl.w	sl, fp, sl
 8004a64:	ea44 040a 	orr.w	r4, r4, sl
 8004a68:	9401      	str	r4, [sp, #4]
 8004a6a:	e78f      	b.n	800498c <HAL_GPIO_Init+0x10c>
 8004a6c:	f04f 0b01 	mov.w	fp, #1
 8004a70:	9c01      	ldr	r4, [sp, #4]
 8004a72:	fa0b fa0a 	lsl.w	sl, fp, sl
 8004a76:	ea44 040a 	orr.w	r4, r4, sl
 8004a7a:	9401      	str	r4, [sp, #4]
 8004a7c:	e786      	b.n	800498c <HAL_GPIO_Init+0x10c>
 8004a7e:	f04f 0b03 	mov.w	fp, #3
 8004a82:	9c01      	ldr	r4, [sp, #4]
 8004a84:	fa0b fa0a 	lsl.w	sl, fp, sl
 8004a88:	ea44 040a 	orr.w	r4, r4, sl
 8004a8c:	9401      	str	r4, [sp, #4]
 8004a8e:	e77d      	b.n	800498c <HAL_GPIO_Init+0x10c>
 8004a90:	f04f 0b04 	mov.w	fp, #4
 8004a94:	9c01      	ldr	r4, [sp, #4]
 8004a96:	fa0b fa0a 	lsl.w	sl, fp, sl
 8004a9a:	ea44 040a 	orr.w	r4, r4, sl
 8004a9e:	9401      	str	r4, [sp, #4]
 8004aa0:	e774      	b.n	800498c <HAL_GPIO_Init+0x10c>
 8004aa2:	bf00      	nop
 8004aa4:	40010400 	.word	0x40010400
 8004aa8:	40010c00 	.word	0x40010c00
 8004aac:	40011000 	.word	0x40011000
 8004ab0:	40011400 	.word	0x40011400
 8004ab4:	40011800 	.word	0x40011800
 8004ab8:	40011c00 	.word	0x40011c00
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40010800 	.word	0x40010800
 8004ac4:	10220000 	.word	0x10220000
 8004ac8:	10310000 	.word	0x10310000
 8004acc:	10120000 	.word	0x10120000

08004ad0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ad0:	6883      	ldr	r3, [r0, #8]
 8004ad2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004ad4:	bf14      	ite	ne
 8004ad6:	2001      	movne	r0, #1
 8004ad8:	2000      	moveq	r0, #0
 8004ada:	4770      	bx	lr

08004adc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004adc:	b902      	cbnz	r2, 8004ae0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ade:	0409      	lsls	r1, r1, #16
 8004ae0:	6101      	str	r1, [r0, #16]
  }
}
 8004ae2:	4770      	bx	lr

08004ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ae8:	4681      	mov	r9, r0
 8004aea:	460e      	mov	r6, r1
 8004aec:	4617      	mov	r7, r2
 8004aee:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af0:	f8d9 4000 	ldr.w	r4, [r9]
 8004af4:	e004      	b.n	8004b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af6:	6965      	ldr	r5, [r4, #20]
 8004af8:	056a      	lsls	r2, r5, #21
 8004afa:	d409      	bmi.n	8004b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afc:	1c7b      	adds	r3, r7, #1
 8004afe:	d121      	bne.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b00:	6960      	ldr	r0, [r4, #20]
 8004b02:	ea26 0000 	bic.w	r0, r6, r0
 8004b06:	b280      	uxth	r0, r0
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d1f4      	bne.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8004b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b10:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b12:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b16:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b1e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b20:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b22:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b26:	f889 103d 	strb.w	r1, [r9, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2a:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b2e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004b32:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b36:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8004b3a:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b3c:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
}
 8004b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b44:	f7ff fb76 	bl	8004234 <HAL_GetTick>
 8004b48:	eba0 0008 	sub.w	r0, r0, r8
 8004b4c:	42b8      	cmp	r0, r7
 8004b4e:	d801      	bhi.n	8004b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
 8004b50:	2f00      	cmp	r7, #0
 8004b52:	d1cd      	bne.n	8004af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b54:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b56:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b58:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b5c:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b60:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b64:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        return HAL_ERROR;
 8004b68:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004b6e:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b72:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        return HAL_ERROR;
 8004b76:	e7c9      	b.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x28>

08004b78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b530      	push	{r4, r5, lr}
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b7e:	6820      	ldr	r0, [r4, #0]
 8004b80:	6943      	ldr	r3, [r0, #20]
 8004b82:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004b86:	d130      	bne.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b88:	6945      	ldr	r5, [r0, #20]
 8004b8a:	056d      	lsls	r5, r5, #21
 8004b8c:	d41b      	bmi.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	1c4b      	adds	r3, r1, #1
 8004b90:	d0f6      	beq.n	8004b80 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	e9cd 1200 	strd	r1, r2, [sp]
 8004b96:	f7ff fb4d 	bl	8004234 <HAL_GetTick>
 8004b9a:	9a01      	ldr	r2, [sp, #4]
 8004b9c:	9900      	ldr	r1, [sp, #0]
 8004b9e:	1a80      	subs	r0, r0, r2
 8004ba0:	4288      	cmp	r0, r1
 8004ba2:	d801      	bhi.n	8004ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x30>
 8004ba4:	2900      	cmp	r1, #0
 8004ba6:	d1ea      	bne.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0x6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ba8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004baa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bac:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bb2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004bb8:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bba:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004bbe:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bc2:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004bc4:	e00f      	b.n	8004be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc6:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bca:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bcc:	6141      	str	r1, [r0, #20]
      return HAL_ERROR;
 8004bce:	2001      	movs	r0, #1
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd0:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bda:	6c22      	ldr	r2, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be0:	f042 0204 	orr.w	r2, r2, #4
 8004be4:	6422      	str	r2, [r4, #64]	; 0x40
}
 8004be6:	b003      	add	sp, #12
 8004be8:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8004bea:	2000      	movs	r0, #0
}
 8004bec:	b003      	add	sp, #12
 8004bee:	bd30      	pop	{r4, r5, pc}

08004bf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	460d      	mov	r5, r1
 8004bf6:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bf8:	e008      	b.n	8004c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bfa:	6962      	ldr	r2, [r4, #20]
 8004bfc:	06d2      	lsls	r2, r2, #27
 8004bfe:	d41b      	bmi.n	8004c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c00:	f7ff fb18 	bl	8004234 <HAL_GetTick>
 8004c04:	1bc0      	subs	r0, r0, r7
 8004c06:	42a8      	cmp	r0, r5
 8004c08:	d807      	bhi.n	8004c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8004c0a:	b135      	cbz	r5, 8004c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c0c:	6834      	ldr	r4, [r6, #0]
 8004c0e:	6963      	ldr	r3, [r4, #20]
 8004c10:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004c14:	d0f1      	beq.n	8004bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
  return HAL_OK;
 8004c16:	2000      	movs	r0, #0
}
 8004c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c1a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c1c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c1e:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c20:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c24:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c28:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c2a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004c32:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c34:	6433      	str	r3, [r6, #64]	; 0x40
}
 8004c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c38:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c3c:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c40:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c42:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c46:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c4a:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004c4c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      return HAL_ERROR;
 8004c50:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c52:	6432      	str	r2, [r6, #64]	; 0x40
}
 8004c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c56:	bf00      	nop

08004c58 <I2C_WaitOnFlagUntilTimeout>:
{
 8004c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c5c:	460d      	mov	r5, r1
 8004c5e:	4681      	mov	r9, r0
 8004c60:	4617      	mov	r7, r2
 8004c62:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c64:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8004c68:	f8d9 3000 	ldr.w	r3, [r9]
 8004c6c:	e001      	b.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	1c72      	adds	r2, r6, #1
 8004c70:	d10f      	bne.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c72:	f1b8 0f01 	cmp.w	r8, #1
 8004c76:	bf0c      	ite	eq
 8004c78:	695c      	ldreq	r4, [r3, #20]
 8004c7a:	699c      	ldrne	r4, [r3, #24]
 8004c7c:	ea25 0404 	bic.w	r4, r5, r4
 8004c80:	b2a4      	uxth	r4, r4
 8004c82:	fab4 f484 	clz	r4, r4
 8004c86:	0964      	lsrs	r4, r4, #5
 8004c88:	42bc      	cmp	r4, r7
 8004c8a:	d0f0      	beq.n	8004c6e <I2C_WaitOnFlagUntilTimeout+0x16>
  return HAL_OK;
 8004c8c:	2000      	movs	r0, #0
}
 8004c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7ff facf 	bl	8004234 <HAL_GetTick>
 8004c96:	9b08      	ldr	r3, [sp, #32]
 8004c98:	1ac0      	subs	r0, r0, r3
 8004c9a:	42b0      	cmp	r0, r6
 8004c9c:	d801      	bhi.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x4a>
 8004c9e:	2e00      	cmp	r6, #0
 8004ca0:	d1e2      	bne.n	8004c68 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ca2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ca4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ca6:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004caa:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cae:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cb2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cb6:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cb8:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004cbc:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cc0:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
        return HAL_ERROR;
 8004cc4:	e7e3      	b.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0x36>
 8004cc6:	bf00      	nop

08004cc8 <I2C_RequestMemoryWrite>:
{
 8004cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ccc:	4690      	mov	r8, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cce:	6802      	ldr	r2, [r0, #0]
{
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd4:	6813      	ldr	r3, [r2, #0]
{
 8004cd6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004cd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cde:	6013      	str	r3, [r2, #0]
{
 8004ce0:	460d      	mov	r5, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce2:	4633      	mov	r3, r6
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cea:	9700      	str	r7, [sp, #0]
{
 8004cec:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cee:	f7ff ffb3 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf2:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf4:	bb20      	cbnz	r0, 8004d40 <I2C_RequestMemoryWrite+0x78>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cf6:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004cfa:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	463b      	mov	r3, r7
 8004d00:	4620      	mov	r0, r4
 8004d02:	4923      	ldr	r1, [pc, #140]	; (8004d90 <I2C_RequestMemoryWrite+0xc8>)
 8004d04:	f7ff feee 	bl	8004ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d08:	b118      	cbz	r0, 8004d12 <I2C_RequestMemoryWrite+0x4a>
    return HAL_ERROR;
 8004d0a:	2001      	movs	r0, #1
}
 8004d0c:	b005      	add	sp, #20
 8004d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	9003      	str	r0, [sp, #12]
 8004d16:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d18:	463a      	mov	r2, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1a:	9103      	str	r1, [sp, #12]
 8004d1c:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1e:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d20:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d22:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d24:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d26:	f7ff ff27 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d2a:	bb30      	cbnz	r0, 8004d7a <I2C_RequestMemoryWrite+0xb2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d2c:	f1b9 0f01 	cmp.w	r9, #1
 8004d30:	d114      	bne.n	8004d5c <I2C_RequestMemoryWrite+0x94>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	fa5f f288 	uxtb.w	r2, r8
 8004d38:	611a      	str	r2, [r3, #16]
}
 8004d3a:	b005      	add	sp, #20
 8004d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	05db      	lsls	r3, r3, #23
 8004d44:	d506      	bpl.n	8004d54 <I2C_RequestMemoryWrite+0x8c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d46:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8004d4a:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d4c:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004d4e:	b005      	add	sp, #20
 8004d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_TIMEOUT;
 8004d54:	2003      	movs	r0, #3
}
 8004d56:	b005      	add	sp, #20
 8004d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8004d62:	6103      	str	r3, [r0, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d64:	463a      	mov	r2, r7
 8004d66:	4631      	mov	r1, r6
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f7ff ff05 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d6e:	b920      	cbnz	r0, 8004d7a <I2C_RequestMemoryWrite+0xb2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	fa5f f388 	uxtb.w	r3, r8
 8004d76:	6113      	str	r3, [r2, #16]
 8004d78:	e7c8      	b.n	8004d0c <I2C_RequestMemoryWrite+0x44>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d1c4      	bne.n	8004d0a <I2C_RequestMemoryWrite+0x42>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8004d82:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	e7be      	b.n	8004d0c <I2C_RequestMemoryWrite+0x44>
 8004d8e:	bf00      	nop
 8004d90:	00010002 	.word	0x00010002

08004d94 <I2C_RequestMemoryRead>:
{
 8004d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d98:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9a:	6802      	ldr	r2, [r0, #0]
{
 8004d9c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	6813      	ldr	r3, [r2, #0]
{
 8004da0:	460d      	mov	r5, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da6:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da8:	6811      	ldr	r1, [r2, #0]
{
 8004daa:	b084      	sub	sp, #16
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004db0:	6011      	str	r1, [r2, #0]
{
 8004db2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004db6:	4633      	mov	r3, r6
 8004db8:	9100      	str	r1, [sp, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8004dc0:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc2:	f7ff ff49 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dc6:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d145      	bne.n	8004e58 <I2C_RequestMemoryRead+0xc4>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dcc:	f005 02fe 	and.w	r2, r5, #254	; 0xfe
 8004dd0:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dd8:	4931      	ldr	r1, [pc, #196]	; (8004ea0 <I2C_RequestMemoryRead+0x10c>)
 8004dda:	f7ff fe83 	bl	8004ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dde:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004de0:	b118      	cbz	r0, 8004dea <I2C_RequestMemoryRead+0x56>
    return HAL_ERROR;
 8004de2:	2001      	movs	r0, #1
}
 8004de4:	b004      	add	sp, #16
 8004de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	9003      	str	r0, [sp, #12]
 8004dee:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df2:	9103      	str	r1, [sp, #12]
 8004df4:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df6:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df8:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfe:	f7ff febb 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d132      	bne.n	8004e6c <I2C_RequestMemoryRead+0xd8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e06:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e0c:	d13c      	bne.n	8004e88 <I2C_RequestMemoryRead+0xf4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0e:	b2ff      	uxtb	r7, r7
 8004e10:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e14:	4631      	mov	r1, r6
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7ff feae 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	bb28      	cbnz	r0, 8004e6c <I2C_RequestMemoryRead+0xd8>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e20:	6820      	ldr	r0, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e22:	4633      	mov	r3, r6
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e24:	6801      	ldr	r1, [r0, #0]
 8004e26:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004e2a:	6001      	str	r1, [r0, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e32:	9000      	str	r0, [sp, #0]
 8004e34:	4620      	mov	r0, r4
 8004e36:	f7ff ff0f 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e3a:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3c:	b960      	cbnz	r0, 8004e58 <I2C_RequestMemoryRead+0xc4>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e3e:	f045 0501 	orr.w	r5, r5, #1
 8004e42:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e44:	4632      	mov	r2, r6
 8004e46:	4620      	mov	r0, r4
 8004e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e4a:	4915      	ldr	r1, [pc, #84]	; (8004ea0 <I2C_RequestMemoryRead+0x10c>)
 8004e4c:	f7ff fe4a 	bl	8004ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8004e50:	3800      	subs	r0, #0
 8004e52:	bf18      	it	ne
 8004e54:	2001      	movne	r0, #1
 8004e56:	e7c5      	b.n	8004de4 <I2C_RequestMemoryRead+0x50>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	05db      	lsls	r3, r3, #23
 8004e5c:	d510      	bpl.n	8004e80 <I2C_RequestMemoryRead+0xec>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8004e62:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e64:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004e66:	b004      	add	sp, #16
 8004e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d1b7      	bne.n	8004de2 <I2C_RequestMemoryRead+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e72:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 8004e74:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e7b1      	b.n	8004de4 <I2C_RequestMemoryRead+0x50>
    return HAL_TIMEOUT;
 8004e80:	2003      	movs	r0, #3
}
 8004e82:	b004      	add	sp, #16
 8004e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e88:	0a3a      	lsrs	r2, r7, #8
 8004e8a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	4620      	mov	r0, r4
 8004e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e92:	f7ff fe71 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d1e8      	bne.n	8004e6c <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	e7b7      	b.n	8004e0e <I2C_RequestMemoryRead+0x7a>
 8004e9e:	bf00      	nop
 8004ea0:	00010002 	.word	0x00010002

08004ea4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004ea4:	b530      	push	{r4, r5, lr}
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eaa:	6820      	ldr	r0, [r4, #0]
 8004eac:	6943      	ldr	r3, [r0, #20]
 8004eae:	f013 0304 	ands.w	r3, r3, #4
 8004eb2:	d130      	bne.n	8004f16 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb4:	6945      	ldr	r5, [r0, #20]
 8004eb6:	056d      	lsls	r5, r5, #21
 8004eb8:	d41b      	bmi.n	8004ef2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8004eba:	1c4b      	adds	r3, r1, #1
 8004ebc:	d0f6      	beq.n	8004eac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ebe:	e9cd 1200 	strd	r1, r2, [sp]
 8004ec2:	f7ff f9b7 	bl	8004234 <HAL_GetTick>
 8004ec6:	9a01      	ldr	r2, [sp, #4]
 8004ec8:	9900      	ldr	r1, [sp, #0]
 8004eca:	1a80      	subs	r0, r0, r2
 8004ecc:	4288      	cmp	r0, r1
 8004ece:	d801      	bhi.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x30>
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	d1ea      	bne.n	8004eaa <I2C_WaitOnBTFFlagUntilTimeout+0x6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ed4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ed6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ed8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ede:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004ee4:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ee6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004eea:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004eee:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004ef0:	e00f      	b.n	8004f12 <I2C_WaitOnBTFFlagUntilTimeout+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ef6:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef8:	6141      	str	r1, [r0, #20]
      return HAL_ERROR;
 8004efa:	2001      	movs	r0, #1
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004efc:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004efe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f06:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004f08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f0c:	f042 0204 	orr.w	r2, r2, #4
 8004f10:	6422      	str	r2, [r4, #64]	; 0x40
}
 8004f12:	b003      	add	sp, #12
 8004f14:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8004f16:	2000      	movs	r0, #0
}
 8004f18:	b003      	add	sp, #12
 8004f1a:	bd30      	pop	{r4, r5, pc}

08004f1c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	f000 80b5 	beq.w	800508c <HAL_I2C_Init+0x170>
{
 8004f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f24:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f28:	4604      	mov	r4, r0
 8004f2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8094 	beq.w	800505c <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f34:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004f36:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f52:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f54:	f001 fd44 	bl	80069e0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f58:	6865      	ldr	r5, [r4, #4]
 8004f5a:	4b4d      	ldr	r3, [pc, #308]	; (8005090 <HAL_I2C_Init+0x174>)
 8004f5c:	429d      	cmp	r5, r3
 8004f5e:	d84c      	bhi.n	8004ffa <HAL_I2C_Init+0xde>
 8004f60:	4b4c      	ldr	r3, [pc, #304]	; (8005094 <HAL_I2C_Init+0x178>)
 8004f62:	4298      	cmp	r0, r3
 8004f64:	d978      	bls.n	8005058 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f66:	1e42      	subs	r2, r0, #1
 8004f68:	006d      	lsls	r5, r5, #1
 8004f6a:	fbb2 f2f5 	udiv	r2, r2, r5
 8004f6e:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 8004f72:	4949      	ldr	r1, [pc, #292]	; (8005098 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f74:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004f76:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f7a:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f7c:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f7e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004f82:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 8004f86:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f88:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8004f8a:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f8c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004f90:	3001      	adds	r0, #1
 8004f92:	4308      	orrs	r0, r1
 8004f94:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f96:	69d9      	ldr	r1, [r3, #28]
 8004f98:	4232      	tst	r2, r6
 8004f9a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004f9e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004fa2:	d160      	bne.n	8005066 <HAL_I2C_Init+0x14a>
 8004fa4:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa6:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004fa8:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004faa:	430a      	orrs	r2, r1
 8004fac:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8004fb4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004fb8:	4302      	orrs	r2, r0
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fbe:	6899      	ldr	r1, [r3, #8]
 8004fc0:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8004fc4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004fc8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004fcc:	4302      	orrs	r2, r0
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fd2:	68d9      	ldr	r1, [r3, #12]
 8004fd4:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8004fd8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004fdc:	4302      	orrs	r2, r0
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004fe2:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004fe4:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fec:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff2:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8004ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ffa:	4b28      	ldr	r3, [pc, #160]	; (800509c <HAL_I2C_Init+0x180>)
 8004ffc:	4298      	cmp	r0, r3
 8004ffe:	d92b      	bls.n	8005058 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005000:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8005004:	4e24      	ldr	r6, [pc, #144]	; (8005098 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005006:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005008:	fba6 2600 	umull	r2, r6, r6, r0
 800500c:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800500e:	fb01 f102 	mul.w	r1, r1, r2
 8005012:	4f23      	ldr	r7, [pc, #140]	; (80050a0 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005014:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005016:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800501a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800501e:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8005022:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	0989      	lsrs	r1, r1, #6
 8005028:	3101      	adds	r1, #1
 800502a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800502e:	4311      	orrs	r1, r2
 8005030:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005032:	69d9      	ldr	r1, [r3, #28]
 8005034:	68a6      	ldr	r6, [r4, #8]
 8005036:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800503a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800503e:	b9ae      	cbnz	r6, 800506c <HAL_I2C_Init+0x150>
 8005040:	3801      	subs	r0, #1
 8005042:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8005046:	fbb0 f2f2 	udiv	r2, r0, r2
 800504a:	3201      	adds	r2, #1
 800504c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005050:	b1d2      	cbz	r2, 8005088 <HAL_I2C_Init+0x16c>
 8005052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005056:	e7a6      	b.n	8004fa6 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8005058:	2001      	movs	r0, #1
}
 800505a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800505c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005060:	f7fe fd34 	bl	8003acc <HAL_I2C_MspInit>
 8005064:	e766      	b.n	8004f34 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005066:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800506a:	e79c      	b.n	8004fa6 <HAL_I2C_Init+0x8a>
 800506c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8005070:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8005074:	1e42      	subs	r2, r0, #1
 8005076:	fbb2 f2f5 	udiv	r2, r2, r5
 800507a:	3201      	adds	r2, #1
 800507c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005080:	b112      	cbz	r2, 8005088 <HAL_I2C_Init+0x16c>
 8005082:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005086:	e78e      	b.n	8004fa6 <HAL_I2C_Init+0x8a>
 8005088:	2201      	movs	r2, #1
 800508a:	e78c      	b.n	8004fa6 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 800508c:	2001      	movs	r0, #1
}
 800508e:	4770      	bx	lr
 8005090:	000186a0 	.word	0x000186a0
 8005094:	001e847f 	.word	0x001e847f
 8005098:	431bde83 	.word	0x431bde83
 800509c:	003d08ff 	.word	0x003d08ff
 80050a0:	10624dd3 	.word	0x10624dd3

080050a4 <HAL_I2C_Mem_Write>:
{
 80050a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a8:	4604      	mov	r4, r0
 80050aa:	b082      	sub	sp, #8
 80050ac:	4699      	mov	r9, r3
 80050ae:	460f      	mov	r7, r1
 80050b0:	4690      	mov	r8, r2
 80050b2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80050b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80050b8:	f7ff f8bc 	bl	8004234 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80050bc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d003      	beq.n	80050cc <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80050c4:	2002      	movs	r0, #2
}
 80050c6:	b002      	add	sp, #8
 80050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050cc:	4605      	mov	r5, r0
 80050ce:	9000      	str	r0, [sp, #0]
 80050d0:	2319      	movs	r3, #25
 80050d2:	2201      	movs	r2, #1
 80050d4:	4620      	mov	r0, r4
 80050d6:	4943      	ldr	r1, [pc, #268]	; (80051e4 <HAL_I2C_Mem_Write+0x140>)
 80050d8:	f7ff fdbe 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d1f1      	bne.n	80050c4 <HAL_I2C_Mem_Write+0x20>
    __HAL_LOCK(hi2c);
 80050e0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d0ed      	beq.n	80050c4 <HAL_I2C_Mem_Write+0x20>
 80050e8:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ea:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hi2c);
 80050ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050f0:	6813      	ldr	r3, [r2, #0]
 80050f2:	07db      	lsls	r3, r3, #31
 80050f4:	d566      	bpl.n	80051c4 <HAL_I2C_Mem_Write+0x120>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050f6:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050fa:	2000      	movs	r0, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050fc:	f04f 0e21 	mov.w	lr, #33	; 0x21
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005100:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005102:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005104:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005108:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800510a:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800510e:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005112:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005114:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005118:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800511c:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 800511e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005120:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 8005124:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005126:	4642      	mov	r2, r8
 8005128:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800512c:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800512e:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005132:	4620      	mov	r0, r4
 8005134:	f7ff fdc8 	bl	8004cc8 <I2C_RequestMemoryWrite>
 8005138:	2800      	cmp	r0, #0
 800513a:	d13f      	bne.n	80051bc <HAL_I2C_Mem_Write+0x118>
    while (hi2c->XferSize > 0U)
 800513c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800513e:	b353      	cbz	r3, 8005196 <HAL_I2C_Mem_Write+0xf2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005140:	462a      	mov	r2, r5
 8005142:	4631      	mov	r1, r6
 8005144:	4620      	mov	r0, r4
 8005146:	f7ff fd17 	bl	8004b78 <I2C_WaitOnTXEFlagUntilTimeout>
 800514a:	2800      	cmp	r0, #0
 800514c:	d13f      	bne.n	80051ce <HAL_I2C_Mem_Write+0x12a>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800514e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005150:	6820      	ldr	r0, [r4, #0]
 8005152:	4639      	mov	r1, r7
 8005154:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 8005158:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800515c:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 800515e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005160:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->XferCount--;
 8005164:	3b01      	subs	r3, #1
 8005166:	b29b      	uxth	r3, r3
 8005168:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800516a:	f8d0 e014 	ldr.w	lr, [r0, #20]
      hi2c->XferSize--;
 800516e:	b293      	uxth	r3, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005170:	f01e 0f04 	tst.w	lr, #4
      hi2c->pBuffPtr++;
 8005174:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005176:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005178:	d0e1      	beq.n	800513e <HAL_I2C_Mem_Write+0x9a>
 800517a:	b163      	cbz	r3, 8005196 <HAL_I2C_Mem_Write+0xf2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800517c:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 800517e:	f1ac 0302 	sub.w	r3, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005182:	6102      	str	r2, [r0, #16]
        hi2c->XferCount--;
 8005184:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005186:	b29b      	uxth	r3, r3
        hi2c->XferCount--;
 8005188:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 800518a:	3702      	adds	r7, #2
        hi2c->XferCount--;
 800518c:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800518e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005190:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005192:	8562      	strh	r2, [r4, #42]	; 0x2a
 8005194:	e7d3      	b.n	800513e <HAL_I2C_Mem_Write+0x9a>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005196:	462a      	mov	r2, r5
 8005198:	4631      	mov	r1, r6
 800519a:	4620      	mov	r0, r4
 800519c:	f7ff fe82 	bl	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout>
 80051a0:	b9a8      	cbnz	r0, 80051ce <HAL_I2C_Mem_Write+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80051a2:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051ac:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80051b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80051ba:	e784      	b.n	80050c6 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80051bc:	2001      	movs	r0, #1
}
 80051be:	b002      	add	sp, #8
 80051c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 80051c4:	6813      	ldr	r3, [r2, #0]
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	e793      	b.n	80050f6 <HAL_I2C_Mem_Write+0x52>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d1f3      	bne.n	80051bc <HAL_I2C_Mem_Write+0x118>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 80051d6:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	6813      	ldr	r3, [r2, #0]
 80051da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e771      	b.n	80050c6 <HAL_I2C_Mem_Write+0x22>
 80051e2:	bf00      	nop
 80051e4:	00100002 	.word	0x00100002

080051e8 <HAL_I2C_Mem_Read>:
{
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80051ee:	2500      	movs	r5, #0
{
 80051f0:	b088      	sub	sp, #32
 80051f2:	4699      	mov	r9, r3
 80051f4:	460e      	mov	r6, r1
 80051f6:	4690      	mov	r8, r2
 80051f8:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 80051fc:	9f12      	ldr	r7, [sp, #72]	; 0x48
  __IO uint32_t count = 0U;
 80051fe:	9503      	str	r5, [sp, #12]
  uint32_t tickstart = HAL_GetTick();
 8005200:	f7ff f818 	bl	8004234 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005204:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005208:	2b20      	cmp	r3, #32
 800520a:	d004      	beq.n	8005216 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 800520c:	2602      	movs	r6, #2
}
 800520e:	4630      	mov	r0, r6
 8005210:	b008      	add	sp, #32
 8005212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005216:	4605      	mov	r5, r0
 8005218:	9000      	str	r0, [sp, #0]
 800521a:	2319      	movs	r3, #25
 800521c:	2201      	movs	r2, #1
 800521e:	4620      	mov	r0, r4
 8005220:	49a0      	ldr	r1, [pc, #640]	; (80054a4 <HAL_I2C_Mem_Read+0x2bc>)
 8005222:	f7ff fd19 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
 8005226:	2800      	cmp	r0, #0
 8005228:	d1f0      	bne.n	800520c <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 800522a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d0ec      	beq.n	800520c <HAL_I2C_Mem_Read+0x24>
 8005232:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005234:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hi2c);
 8005236:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	07d9      	lsls	r1, r3, #31
 800523e:	d53a      	bpl.n	80052b6 <HAL_I2C_Mem_Read+0xce>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005240:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005244:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005248:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800524a:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800524c:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800524e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005252:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005254:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005258:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800525c:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800525e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005262:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005266:	4631      	mov	r1, r6
    hi2c->pBuffPtr    = pData;
 8005268:	9e10      	ldr	r6, [sp, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800526a:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 800526e:	6266      	str	r6, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005270:	4642      	mov	r2, r8
 8005272:	e9cd 7500 	strd	r7, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005276:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005278:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800527c:	4620      	mov	r0, r4
 800527e:	f7ff fd89 	bl	8004d94 <I2C_RequestMemoryRead>
 8005282:	4606      	mov	r6, r0
 8005284:	2800      	cmp	r0, #0
 8005286:	f040 8094 	bne.w	80053b2 <HAL_I2C_Mem_Read+0x1ca>
    if (hi2c->XferSize == 0U)
 800528a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800528c:	b9c3      	cbnz	r3, 80052c0 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	9004      	str	r0, [sp, #16]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	9204      	str	r2, [sp, #16]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	9204      	str	r2, [sp, #16]
 800529a:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a2:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80052a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80052ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80052b4:	e7ab      	b.n	800520e <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 80052b6:	6813      	ldr	r3, [r2, #0]
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e7bf      	b.n	8005240 <HAL_I2C_Mem_Read+0x58>
    else if (hi2c->XferSize == 1U)
 80052c0:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c2:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 80052c4:	f000 80f6 	beq.w	80054b4 <HAL_I2C_Mem_Read+0x2cc>
    else if (hi2c->XferSize == 2U)
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d077      	beq.n	80053bc <HAL_I2C_Mem_Read+0x1d4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052cc:	6811      	ldr	r1, [r2, #0]
 80052ce:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80052d2:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d4:	9007      	str	r0, [sp, #28]
 80052d6:	6951      	ldr	r1, [r2, #20]
 80052d8:	9107      	str	r1, [sp, #28]
 80052da:	6992      	ldr	r2, [r2, #24]
 80052dc:	9207      	str	r2, [sp, #28]
 80052de:	9a07      	ldr	r2, [sp, #28]
      if (hi2c->XferSize <= 3U)
 80052e0:	2b03      	cmp	r3, #3
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052e2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80054a8 <HAL_I2C_Mem_Read+0x2c0>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80052e6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80054ac <HAL_I2C_Mem_Read+0x2c4>
 80052ea:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80054b0 <HAL_I2C_Mem_Read+0x2c8>
      if (hi2c->XferSize <= 3U)
 80052ee:	d835      	bhi.n	800535c <HAL_I2C_Mem_Read+0x174>
        if (hi2c->XferSize == 1U)
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f000 80b9 	beq.w	8005468 <HAL_I2C_Mem_Read+0x280>
        else if (hi2c->XferSize == 2U)
 80052f6:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	463b      	mov	r3, r7
 80052fe:	4641      	mov	r1, r8
 8005300:	4620      	mov	r0, r4
 8005302:	9500      	str	r5, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8005304:	d170      	bne.n	80053e8 <HAL_I2C_Mem_Read+0x200>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005306:	f7ff fca7 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
 800530a:	2800      	cmp	r0, #0
 800530c:	d151      	bne.n	80053b2 <HAL_I2C_Mem_Read+0x1ca>
  __ASM volatile ("cpsid i" : : : "memory");
 800530e:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005310:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005312:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8005320:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005322:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005324:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005326:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8005328:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800532a:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800532c:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800532e:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005330:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005332:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005334:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800533a:	6912      	ldr	r2, [r2, #16]
 800533c:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 800533e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005340:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005342:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8005344:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8005346:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8005348:	3101      	adds	r1, #1
          hi2c->XferCount--;
 800534a:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 800534c:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800534e:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8005350:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005352:	8523      	strh	r3, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0a5      	beq.n	80052a4 <HAL_I2C_Mem_Read+0xbc>
      if (hi2c->XferSize <= 3U)
 8005358:	2b03      	cmp	r3, #3
 800535a:	d9c9      	bls.n	80052f0 <HAL_I2C_Mem_Read+0x108>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800535c:	462a      	mov	r2, r5
 800535e:	4639      	mov	r1, r7
 8005360:	4620      	mov	r0, r4
 8005362:	f7ff fc45 	bl	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005366:	bb20      	cbnz	r0, 80053b2 <HAL_I2C_Mem_Read+0x1ca>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	6822      	ldr	r2, [r4, #0]
 800536a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800536c:	6912      	ldr	r2, [r2, #16]
 800536e:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8005370:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005372:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8005374:	3a01      	subs	r2, #1
 8005376:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8005378:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800537a:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800537c:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 800537e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005380:	3b01      	subs	r3, #1
 8005382:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8005384:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005388:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 800538a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800538c:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005390:	d5e0      	bpl.n	8005354 <HAL_I2C_Mem_Read+0x16c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005392:	690b      	ldr	r3, [r1, #16]
 8005394:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8005396:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005398:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800539a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800539c:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 800539e:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 80053a0:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 80053a2:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 80053a4:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80053a6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80053a8:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80053aa:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1d3      	bne.n	8005358 <HAL_I2C_Mem_Read+0x170>
 80053b0:	e778      	b.n	80052a4 <HAL_I2C_Mem_Read+0xbc>
      return HAL_ERROR;
 80053b2:	2601      	movs	r6, #1
}
 80053b4:	4630      	mov	r0, r6
 80053b6:	b008      	add	sp, #32
 80053b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053bc:	6813      	ldr	r3, [r2, #0]
 80053be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053c2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053c4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	9006      	str	r0, [sp, #24]
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	9206      	str	r2, [sp, #24]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	9206      	str	r2, [sp, #24]
 80053d2:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80053dc:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80053de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f47f af7d 	bne.w	80052e0 <HAL_I2C_Mem_Read+0xf8>
 80053e6:	e75d      	b.n	80052a4 <HAL_I2C_Mem_Read+0xbc>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053e8:	f7ff fc36 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1e0      	bne.n	80053b2 <HAL_I2C_Mem_Read+0x1ca>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	6813      	ldr	r3, [r2, #0]
 80053f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053fa:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fc:	6822      	ldr	r2, [r4, #0]
 80053fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005400:	6912      	ldr	r2, [r2, #16]
 8005402:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005404:	f8da 3000 	ldr.w	r3, [sl]
          hi2c->XferCount--;
 8005408:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800540a:	08db      	lsrs	r3, r3, #3
 800540c:	fba9 1303 	umull	r1, r3, r9, r3
          hi2c->XferSize--;
 8005410:	8d20      	ldrh	r0, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005412:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005414:	0a1b      	lsrs	r3, r3, #8
          hi2c->XferCount--;
 8005416:	3a01      	subs	r2, #1
 8005418:	b292      	uxth	r2, r2
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800541a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 800541e:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005420:	3801      	subs	r0, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005422:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->pBuffPtr++;
 8005426:	1c4a      	adds	r2, r1, #1
 8005428:	6262      	str	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800542a:	8520      	strh	r0, [r4, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800542c:	9303      	str	r3, [sp, #12]
 800542e:	e003      	b.n	8005438 <HAL_I2C_Mem_Read+0x250>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	0752      	lsls	r2, r2, #29
 8005436:	d423      	bmi.n	8005480 <HAL_I2C_Mem_Read+0x298>
            count--;
 8005438:	9b03      	ldr	r3, [sp, #12]
 800543a:	3b01      	subs	r3, #1
 800543c:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 800543e:	9b03      	ldr	r3, [sp, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f5      	bne.n	8005430 <HAL_I2C_Mem_Read+0x248>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005444:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005446:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005448:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005450:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005452:	f042 0220 	orr.w	r2, r2, #32
 8005456:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005458:	b662      	cpsie	i
              return HAL_ERROR;
 800545a:	2601      	movs	r6, #1
}
 800545c:	4630      	mov	r0, r6
              __HAL_UNLOCK(hi2c);
 800545e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005462:	b008      	add	sp, #32
 8005464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005468:	462a      	mov	r2, r5
 800546a:	4639      	mov	r1, r7
 800546c:	4620      	mov	r0, r4
 800546e:	f7ff fbbf 	bl	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005472:	2800      	cmp	r0, #0
 8005474:	d19d      	bne.n	80053b2 <HAL_I2C_Mem_Read+0x1ca>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800547a:	6912      	ldr	r2, [r2, #16]
 800547c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800547e:	e78a      	b.n	8005396 <HAL_I2C_Mem_Read+0x1ae>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005486:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	704b      	strb	r3, [r1, #1]
          hi2c->XferCount--;
 800548c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800548e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005490:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005492:	3b01      	subs	r3, #1
 8005494:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8005496:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8005498:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800549a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800549c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800549e:	8522      	strh	r2, [r4, #40]	; 0x28
 80054a0:	e748      	b.n	8005334 <HAL_I2C_Mem_Read+0x14c>
 80054a2:	bf00      	nop
 80054a4:	00100002 	.word	0x00100002
 80054a8:	00010004 	.word	0x00010004
 80054ac:	200000ac 	.word	0x200000ac
 80054b0:	14f8b589 	.word	0x14f8b589
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b4:	6813      	ldr	r3, [r2, #0]
 80054b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054bc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	9005      	str	r0, [sp, #20]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	9205      	str	r2, [sp, #20]
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	9205      	str	r2, [sp, #20]
 80054ca:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054d4:	b662      	cpsie	i
}
 80054d6:	e782      	b.n	80053de <HAL_I2C_Mem_Read+0x1f6>

080054d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054da:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054dc:	2800      	cmp	r0, #0
 80054de:	d072      	beq.n	80055c6 <HAL_PCD_Init+0xee>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054e0:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80054e4:	4605      	mov	r5, r0
 80054e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d066      	beq.n	80055bc <HAL_PCD_Init+0xe4>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054ee:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054f0:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 80054f2:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80054f6:	6828      	ldr	r0, [r5, #0]
 80054f8:	f001 fdc4 	bl	8007084 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054fc:	f856 cb10 	ldr.w	ip, [r6], #16
 8005500:	466c      	mov	r4, sp
 8005502:	4637      	mov	r7, r6
 8005504:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	1d2f      	adds	r7, r5, #4
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	4660      	mov	r0, ip
 8005510:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005514:	f001 fda4 	bl	8007060 <USB_CoreInit>
 8005518:	4604      	mov	r4, r0
 800551a:	b130      	cbz	r0, 800552a <HAL_PCD_Init+0x52>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800551c:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800551e:	2302      	movs	r3, #2
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8005520:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005522:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
}
 8005526:	b007      	add	sp, #28
 8005528:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800552a:	4601      	mov	r1, r0
 800552c:	6828      	ldr	r0, [r5, #0]
 800552e:	f001 fdb3 	bl	8007098 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005532:	6868      	ldr	r0, [r5, #4]
 8005534:	b350      	cbz	r0, 800558c <HAL_PCD_Init+0xb4>
 8005536:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8005538:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800553c:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800553e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005542:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005546:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 800554a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800554e:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005550:	fa5f f28c 	uxtb.w	r2, ip
 8005554:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005556:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800555a:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800555e:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8005562:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005564:	d3eb      	bcc.n	800553e <HAL_PCD_Init+0x66>
    hpcd->OUT_ep[i].is_in = 0U;
 8005566:	2200      	movs	r2, #0
 8005568:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800556c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005570:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8005572:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005576:	b2cc      	uxtb	r4, r1
 8005578:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800557a:	e9c3 225e 	strd	r2, r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800557e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005582:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005586:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800558a:	d3ed      	bcc.n	8005568 <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800558c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800558e:	466c      	mov	r4, sp
 8005590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005592:	6836      	ldr	r6, [r6, #0]
 8005594:	6828      	ldr	r0, [r5, #0]
 8005596:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800559a:	6026      	str	r6, [r4, #0]
 800559c:	f001 fd7e 	bl	800709c <USB_DevInit>
 80055a0:	4604      	mov	r4, r0
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d1ba      	bne.n	800551c <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 80055a6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80055a8:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 80055ac:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80055ae:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80055b2:	f002 fd8b 	bl	80080cc <USB_DevDisconnect>
}
 80055b6:	4620      	mov	r0, r4
 80055b8:	b007      	add	sp, #28
 80055ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80055bc:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80055c0:	f003 ff6a 	bl	8009498 <HAL_PCD_MspInit>
 80055c4:	e793      	b.n	80054ee <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80055c6:	2401      	movs	r4, #1
}
 80055c8:	4620      	mov	r0, r4
 80055ca:	b007      	add	sp, #28
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ce:	bf00      	nop

080055d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80055d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80055d2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d011      	beq.n	80055fe <HAL_PCD_Start+0x2e>
 80055da:	4604      	mov	r4, r0
 80055dc:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 80055de:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80055e0:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80055e4:	f001 fd44 	bl	8007070 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80055e8:	4629      	mov	r1, r5
 80055ea:	4620      	mov	r0, r4
 80055ec:	f004 f880 	bl	80096f0 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	f002 fd69 	bl	80080c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055f6:	2000      	movs	r0, #0
 80055f8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80055fe:	2002      	movs	r0, #2
}
 8005600:	bd38      	pop	{r3, r4, r5, pc}
 8005602:	bf00      	nop

08005604 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005608:	4605      	mov	r5, r0
 800560a:	b085      	sub	sp, #20
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800560c:	6800      	ldr	r0, [r0, #0]
 800560e:	f002 fd5f 	bl	80080d0 <USB_ReadInterrupts>
 8005612:	0400      	lsls	r0, r0, #16
 8005614:	f100 80e1 	bmi.w	80057da <HAL_PCD_IRQHandler+0x1d6>
 8005618:	6828      	ldr	r0, [r5, #0]
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800561a:	f002 fd59 	bl	80080d0 <USB_ReadInterrupts>
 800561e:	0542      	lsls	r2, r0, #21
 8005620:	f100 80bd 	bmi.w	800579e <HAL_PCD_IRQHandler+0x19a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005624:	6828      	ldr	r0, [r5, #0]
 8005626:	f002 fd53 	bl	80080d0 <USB_ReadInterrupts>
 800562a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800562e:	6828      	ldr	r0, [r5, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005630:	d007      	beq.n	8005642 <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005632:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563a:	041b      	lsls	r3, r3, #16
 800563c:	0c1b      	lsrs	r3, r3, #16
 800563e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005642:	f002 fd45 	bl	80080d0 <USB_ReadInterrupts>
 8005646:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800564a:	6828      	ldr	r0, [r5, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800564c:	d11f      	bne.n	800568e <HAL_PCD_IRQHandler+0x8a>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800564e:	f002 fd3f 	bl	80080d0 <USB_ReadInterrupts>
 8005652:	04c3      	lsls	r3, r0, #19
 8005654:	d427      	bmi.n	80056a6 <HAL_PCD_IRQHandler+0xa2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005656:	6828      	ldr	r0, [r5, #0]
 8005658:	f002 fd3a 	bl	80080d0 <USB_ReadInterrupts>
 800565c:	0507      	lsls	r7, r0, #20
 800565e:	d443      	bmi.n	80056e8 <HAL_PCD_IRQHandler+0xe4>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005660:	6828      	ldr	r0, [r5, #0]
 8005662:	f002 fd35 	bl	80080d0 <USB_ReadInterrupts>
 8005666:	0582      	lsls	r2, r0, #22
 8005668:	f100 808c 	bmi.w	8005784 <HAL_PCD_IRQHandler+0x180>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800566c:	6828      	ldr	r0, [r5, #0]
 800566e:	f002 fd2f 	bl	80080d0 <USB_ReadInterrupts>
 8005672:	05c3      	lsls	r3, r0, #23
 8005674:	d508      	bpl.n	8005688 <HAL_PCD_IRQHandler+0x84>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005676:	682a      	ldr	r2, [r5, #0]
 8005678:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800567c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8005688:	b005      	add	sp, #20
 800568a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800568e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800569e:	f002 fd17 	bl	80080d0 <USB_ReadInterrupts>
 80056a2:	04c3      	lsls	r3, r0, #19
 80056a4:	d5d7      	bpl.n	8005656 <HAL_PCD_IRQHandler+0x52>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80056a6:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80056a8:	4628      	mov	r0, r5
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80056aa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80056ae:	f023 0304 	bic.w	r3, r3, #4
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80056ba:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80056be:	f023 0308 	bic.w	r3, r3, #8
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80056ca:	f003 ff4d 	bl	8009568 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80056ce:	6828      	ldr	r0, [r5, #0]
 80056d0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80056d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056d8:	041b      	lsls	r3, r3, #16
 80056da:	0c1b      	lsrs	r3, r3, #16
 80056dc:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80056e0:	f002 fcf6 	bl	80080d0 <USB_ReadInterrupts>
 80056e4:	0507      	lsls	r7, r0, #20
 80056e6:	d5bb      	bpl.n	8005660 <HAL_PCD_IRQHandler+0x5c>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80056e8:	6829      	ldr	r1, [r5, #0]
 80056ea:	f1ad 0302 	sub.w	r3, sp, #2
 80056ee:	460c      	mov	r4, r1
 80056f0:	460e      	mov	r6, r1
 80056f2:	461a      	mov	r2, r3
 80056f4:	f10d 000e 	add.w	r0, sp, #14
 80056f8:	f836 7b04 	ldrh.w	r7, [r6], #4
 80056fc:	f822 7f02 	strh.w	r7, [r2, #2]!
    for (i = 0U; i < 8U; i++)
 8005700:	4290      	cmp	r0, r2
 8005702:	d1f9      	bne.n	80056f8 <HAL_PCD_IRQHandler+0xf4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005704:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 8005708:	b292      	uxth	r2, r2
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005712:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	0412      	lsls	r2, r2, #16
 800571c:	0c12      	lsrs	r2, r2, #16
 800571e:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005722:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 8005726:	0556      	lsls	r6, r2, #21
 8005728:	d5fb      	bpl.n	8005722 <HAL_PCD_IRQHandler+0x11e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800572a:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 800572e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005732:	0412      	lsls	r2, r2, #16
 8005734:	0c12      	lsrs	r2, r2, #16
 8005736:	f8a1 2044 	strh.w	r2, [r1, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800573a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 800573e:	4298      	cmp	r0, r3
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005740:	f824 2b04 	strh.w	r2, [r4], #4
    for (i = 0U; i < 8U; i++)
 8005744:	d1f9      	bne.n	800573a <HAL_PCD_IRQHandler+0x136>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005746:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800574a:	4628      	mov	r0, r5
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800574c:	b29b      	uxth	r3, r3
 800574e:	f043 0308 	orr.w	r3, r3, #8
 8005752:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005756:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 800575a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	0c1b      	lsrs	r3, r3, #16
 8005762:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005766:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 800576a:	b29b      	uxth	r3, r3
 800576c:	f043 0304 	orr.w	r3, r3, #4
 8005770:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005774:	f003 fee8 	bl	8009548 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005778:	6828      	ldr	r0, [r5, #0]
 800577a:	f002 fca9 	bl	80080d0 <USB_ReadInterrupts>
 800577e:	0582      	lsls	r2, r0, #22
 8005780:	f57f af74 	bpl.w	800566c <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005784:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_SOFCallback(hpcd);
 8005786:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005788:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800578c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005790:	041b      	lsls	r3, r3, #16
 8005792:	0c1b      	lsrs	r3, r3, #16
 8005794:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005798:	f003 fec0 	bl	800951c <HAL_PCD_SOFCallback>
 800579c:	e766      	b.n	800566c <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800579e:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResetCallback(hpcd);
 80057a0:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80057a2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80057a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057aa:	041b      	lsls	r3, r3, #16
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80057b2:	f003 feb7 	bl	8009524 <HAL_PCD_ResetCallback>
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80057b6:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	f43f af32 	beq.w	8005624 <HAL_PCD_IRQHandler+0x20>
  hpcd->USB_Address = address;
 80057c0:	2400      	movs	r4, #0
  __HAL_LOCK(hpcd);
 80057c2:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057c4:	4621      	mov	r1, r4
 80057c6:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80057c8:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80057cc:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057d0:	f002 fc74 	bl	80080bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057d4:	f885 42a8 	strb.w	r4, [r5, #680]	; 0x2a8

  return HAL_OK;
 80057d8:	e724      	b.n	8005624 <HAL_PCD_IRQHandler+0x20>
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80057da:	682c      	ldr	r4, [r5, #0]
 80057dc:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80057e0:	4620      	mov	r0, r4
 80057e2:	0419      	lsls	r1, r3, #16
 80057e4:	f57f af19 	bpl.w	800561a <HAL_PCD_IRQHandler+0x16>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80057e8:	f8df a9a8 	ldr.w	sl, [pc, #2472]	; 8006194 <HAL_PCD_IRQHandler+0xb90>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80057ec:	f8df b9a8 	ldr.w	fp, [pc, #2472]	; 8006198 <HAL_PCD_IRQHandler+0xb94>
    wIstr = hpcd->Instance->ISTR;
 80057f0:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 80057f4:	b2a1      	uxth	r1, r4
    if (epindex == 0U)
 80057f6:	f014 040f 	ands.w	r4, r4, #15
 80057fa:	d164      	bne.n	80058c6 <HAL_PCD_IRQHandler+0x2c2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80057fc:	f011 0110 	ands.w	r1, r1, #16
 8005800:	f000 8174 	beq.w	8005aec <HAL_PCD_IRQHandler+0x4e8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005804:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005806:	f411 6400 	ands.w	r4, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800580a:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800580c:	f040 819b 	bne.w	8005b46 <HAL_PCD_IRQHandler+0x542>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005810:	041a      	lsls	r2, r3, #16
 8005812:	d406      	bmi.n	8005822 <HAL_PCD_IRQHandler+0x21e>
 8005814:	4602      	mov	r2, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005816:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800581a:	0419      	lsls	r1, r3, #16
 800581c:	d4e8      	bmi.n	80057f0 <HAL_PCD_IRQHandler+0x1ec>
 800581e:	4610      	mov	r0, r2
 8005820:	e6fb      	b.n	800561a <HAL_PCD_IRQHandler+0x16>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005822:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005826:	8802      	ldrh	r2, [r0, #0]
 8005828:	4013      	ands	r3, r2
 800582a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005830:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005834:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8005838:	b29b      	uxth	r3, r3
 800583a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800583e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005842:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8005846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800584a:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800584e:	b193      	cbz	r3, 8005876 <HAL_PCD_IRQHandler+0x272>
 8005850:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8005854:	b179      	cbz	r1, 8005876 <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005856:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 800585a:	f002 fc4f 	bl	80080fc <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800585e:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8005862:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005866:	4628      	mov	r0, r5
            ep->xfer_buff += ep->xfer_count;
 8005868:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800586a:	4621      	mov	r1, r4
            ep->xfer_buff += ep->xfer_count;
 800586c:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005870:	f003 fe40 	bl	80094f4 <HAL_PCD_DataOutStageCallback>
 8005874:	6828      	ldr	r0, [r5, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005876:	8803      	ldrh	r3, [r0, #0]
 8005878:	4602      	mov	r2, r0
 800587a:	051b      	lsls	r3, r3, #20
 800587c:	d4cb      	bmi.n	8005816 <HAL_PCD_IRQHandler+0x212>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800587e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005882:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8005886:	b29b      	uxth	r3, r3
 8005888:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 800588c:	2900      	cmp	r1, #0
 800588e:	f040 8253 	bne.w	8005d38 <HAL_PCD_IRQHandler+0x734>
 8005892:	5ae1      	ldrh	r1, [r4, r3]
 8005894:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005898:	0409      	lsls	r1, r1, #16
 800589a:	0c09      	lsrs	r1, r1, #16
 800589c:	52e1      	strh	r1, [r4, r3]
 800589e:	5ae1      	ldrh	r1, [r4, r3]
 80058a0:	b289      	uxth	r1, r1
 80058a2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80058a6:	52e1      	strh	r1, [r4, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80058a8:	8803      	ldrh	r3, [r0, #0]
 80058aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	0c1b      	lsrs	r3, r3, #16
 80058b6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80058ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c2:	8003      	strh	r3, [r0, #0]
 80058c4:	e7a7      	b.n	8005816 <HAL_PCD_IRQHandler+0x212>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80058c6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80058ca:	00a6      	lsls	r6, r4, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058cc:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80058ce:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058d2:	f100 809f 	bmi.w	8005a14 <HAL_PCD_IRQHandler+0x410>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80058d6:	f018 0f80 	tst.w	r8, #128	; 0x80
 80058da:	d09b      	beq.n	8005814 <HAL_PCD_IRQHandler+0x210>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80058dc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80058e0:	1937      	adds	r7, r6, r4
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	ea03 030a 	and.w	r3, r3, sl
 80058e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ec:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80058f0:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 80058f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80058f8:	4602      	mov	r2, r0
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	f000 80cd 	beq.w	8005a9a <HAL_PCD_IRQHandler+0x496>
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80ca 	beq.w	8005a9a <HAL_PCD_IRQHandler+0x496>
 8005906:	2b02      	cmp	r3, #2
 8005908:	d103      	bne.n	8005912 <HAL_PCD_IRQHandler+0x30e>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800590a:	f418 7f80 	tst.w	r8, #256	; 0x100
 800590e:	f000 80c4 	beq.w	8005a9a <HAL_PCD_IRQHandler+0x496>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005912:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005916:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800591a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800591e:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005920:	f000 8193 	beq.w	8005c4a <HAL_PCD_IRQHandler+0x646>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005924:	3302      	adds	r3, #2
 8005926:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800592a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (ep->xfer_len > TxByteNbre)
 800592e:	eb06 0c04 	add.w	ip, r6, r4
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005932:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 8005936:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 800593a:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800593e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8005942:	459e      	cmp	lr, r3
 8005944:	f240 82a3 	bls.w	8005e8e <HAL_PCD_IRQHandler+0x88a>
      ep->xfer_len -= TxByteNbre;
 8005948:	ebae 0e03 	sub.w	lr, lr, r3
 800594c:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8005950:	f1be 0f00 	cmp.w	lr, #0
 8005954:	f000 829e 	beq.w	8005e94 <HAL_PCD_IRQHandler+0x890>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005958:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 800595c:	d00f      	beq.n	800597e <HAL_PCD_IRQHandler+0x37a>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800595e:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8005962:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8005966:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800596a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800596e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005972:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8005976:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800597a:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800597e:	eb06 0c04 	add.w	ip, r6, r4
 8005982:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8005986:	f89c 104c 	ldrb.w	r1, [ip, #76]	; 0x4c
 800598a:	2901      	cmp	r1, #1
 800598c:	f040 826f 	bne.w	8005e6e <HAL_PCD_IRQHandler+0x86a>
        if (ep->xfer_len_db >= ep->maxpacket)
 8005990:	e9dc 2811 	ldrd	r2, r8, [ip, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8005994:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005998:	f8dc e038 	ldr.w	lr, [ip, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800599c:	4419      	add	r1, r3
        ep->xfer_count += TxByteNbre;
 800599e:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 80059a0:	45f0      	cmp	r8, lr
        ep->xfer_buff += TxByteNbre;
 80059a2:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80059a6:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80059aa:	f0c0 8345 	bcc.w	8006038 <HAL_PCD_IRQHandler+0xa34>
          ep->xfer_len_db -= len;
 80059ae:	eba8 030e 	sub.w	r3, r8, lr
 80059b2:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 80059b6:	fa1f f38e 	uxth.w	r3, lr
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059ba:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80059be:	2a00      	cmp	r2, #0
 80059c0:	f040 8329 	bne.w	8006016 <HAL_PCD_IRQHandler+0xa12>
 80059c4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80059c8:	f897 8028 	ldrb.w	r8, [r7, #40]	; 0x28
 80059cc:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 80059d0:	b292      	uxth	r2, r2
 80059d2:	4494      	add	ip, r2
 80059d4:	eb0c 1908 	add.w	r9, ip, r8, lsl #4
 80059d8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80059dc:	f1be 0f00 	cmp.w	lr, #0
 80059e0:	f040 83a7 	bne.w	8006132 <HAL_PCD_IRQHandler+0xb2e>
 80059e4:	f83c 2008 	ldrh.w	r2, [ip, r8]
 80059e8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80059ec:	0412      	lsls	r2, r2, #16
 80059ee:	0c12      	lsrs	r2, r2, #16
 80059f0:	f82c 2008 	strh.w	r2, [ip, r8]
 80059f4:	f83c 2008 	ldrh.w	r2, [ip, r8]
 80059f8:	b292      	uxth	r2, r2
 80059fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059fe:	f82c 2008 	strh.w	r2, [ip, r8]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a02:	1932      	adds	r2, r6, r4
 8005a04:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005a08:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8005a0a:	f002 fb67 	bl	80080dc <USB_WritePMA>
 8005a0e:	6828      	ldr	r0, [r5, #0]
 8005a10:	4602      	mov	r2, r0
 8005a12:	e22c      	b.n	8005e6e <HAL_PCD_IRQHandler+0x86a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a18:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8005a1c:	1931      	adds	r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a1e:	4013      	ands	r3, r2
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8005a28:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005a2c:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f040 80ab 	bne.w	8005b8c <HAL_PCD_IRQHandler+0x588>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a36:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005a3a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3306      	adds	r3, #6
 8005a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a46:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005a4a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8005a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (count != 0U)
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f040 80e9 	bne.w	8005c2a <HAL_PCD_IRQHandler+0x626>
 8005a58:	461f      	mov	r7, r3
        ep->xfer_count += count;
 8005a5a:	1931      	adds	r1, r6, r4
 8005a5c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 8005a60:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8005a64:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
        ep->xfer_count += count;
 8005a68:	4438      	add	r0, r7
 8005a6a:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a6e:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
        ep->xfer_buff += count;
 8005a72:	443a      	add	r2, r7
        ep->xfer_count += count;
 8005a74:	00c9      	lsls	r1, r1, #3
        ep->xfer_buff += count;
 8005a76:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a7a:	b120      	cbz	r0, 8005a86 <HAL_PCD_IRQHandler+0x482>
 8005a7c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8005a80:	42bb      	cmp	r3, r7
 8005a82:	f240 80da 	bls.w	8005c3a <HAL_PCD_IRQHandler+0x636>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a86:	1933      	adds	r3, r6, r4
 8005a88:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8005a92:	f003 fd2f 	bl	80094f4 <HAL_PCD_DataOutStageCallback>
 8005a96:	6828      	ldr	r0, [r5, #0]
 8005a98:	e71d      	b.n	80058d6 <HAL_PCD_IRQHandler+0x2d2>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a9a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005a9e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8005aaa:	4426      	add	r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005aac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005ab0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8005ab4:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8005ab8:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	f240 8097 	bls.w	8005bf2 <HAL_PCD_IRQHandler+0x5ee>
            ep->xfer_len -= TxByteNbre;
 8005ac4:	1ad2      	subs	r2, r2, r3
 8005ac6:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	f000 8094 	beq.w	8005bf6 <HAL_PCD_IRQHandler+0x5f2>
            ep->xfer_buff += TxByteNbre;
 8005ace:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8005ad0:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8005ad2:	3401      	adds	r4, #1
            ep->xfer_buff += TxByteNbre;
 8005ad4:	441f      	add	r7, r3
        ep = &hpcd->IN_ep[epindex];
 8005ad6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
            ep->xfer_count += TxByteNbre;
 8005ada:	4413      	add	r3, r2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005adc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
            ep->xfer_buff += TxByteNbre;
 8005ae0:	63f7      	str	r7, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8005ae2:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ae4:	f001 fd66 	bl	80075b4 <USB_EPStartXfer>
 8005ae8:	6828      	ldr	r0, [r5, #0]
 8005aea:	e693      	b.n	8005814 <HAL_PCD_IRQHandler+0x210>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005aec:	8803      	ldrh	r3, [r0, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ea03 030a 	and.w	r3, r3, sl
 8005af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005afa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005afe:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8005b0c:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8005b10:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8005b16:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005b18:	646b      	str	r3, [r5, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005b1a:	4628      	mov	r0, r5
        ep->xfer_buff += ep->xfer_count;
 8005b1c:	63ea      	str	r2, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005b1e:	f003 fcf3 	bl	8009508 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005b22:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0de      	beq.n	8005ae8 <HAL_PCD_IRQHandler+0x4e4>
 8005b2a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1db      	bne.n	8005ae8 <HAL_PCD_IRQHandler+0x4e4>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005b30:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8005b34:	6828      	ldr	r0, [r5, #0]
 8005b36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b3a:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8005b3e:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8005b40:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8005b44:	e667      	b.n	8005816 <HAL_PCD_IRQHandler+0x212>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b46:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005b4a:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005b58:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b5c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8005b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b64:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b68:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8005b6c:	f002 fac6 	bl	80080fc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b74:	682a      	ldr	r2, [r5, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005b76:	4628      	mov	r0, r5
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b78:	8811      	ldrh	r1, [r2, #0]
 8005b7a:	400b      	ands	r3, r1
 8005b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b80:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005b82:	f003 fcb1 	bl	80094e8 <HAL_PCD_SetupStageCallback>
 8005b86:	6828      	ldr	r0, [r5, #0]
 8005b88:	4602      	mov	r2, r0
 8005b8a:	e644      	b.n	8005816 <HAL_PCD_IRQHandler+0x212>
          if (ep->type == EP_TYPE_BULK)
 8005b8c:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	f000 80dc 	beq.w	8005d4e <HAL_PCD_IRQHandler+0x74a>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b96:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8005b9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	0c1b      	lsrs	r3, r3, #16
 8005baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bb2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005bb6:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8005bba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bbe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bc2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005bc6:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005bc8:	d01b      	beq.n	8005c02 <HAL_PCD_IRQHandler+0x5fe>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bca:	3302      	adds	r3, #2
 8005bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005bd4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8005bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f43f af3b 	beq.w	8005a58 <HAL_PCD_IRQHandler+0x454>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005be2:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8005be6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005bea:	461f      	mov	r7, r3
 8005bec:	f002 fa86 	bl	80080fc <USB_ReadPMA>
 8005bf0:	e733      	b.n	8005a5a <HAL_PCD_IRQHandler+0x456>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005bfc:	f003 fc84 	bl	8009508 <HAL_PCD_DataInStageCallback>
 8005c00:	e772      	b.n	8005ae8 <HAL_PCD_IRQHandler+0x4e4>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c02:	3306      	adds	r3, #6
 8005c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005c0c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8005c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f43f af1f 	beq.w	8005a58 <HAL_PCD_IRQHandler+0x454>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c1a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005c1e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005c22:	461f      	mov	r7, r3
 8005c24:	f002 fa6a 	bl	80080fc <USB_ReadPMA>
 8005c28:	e717      	b.n	8005a5a <HAL_PCD_IRQHandler+0x456>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005c2a:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8005c2e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005c32:	461f      	mov	r7, r3
 8005c34:	f002 fa62 	bl	80080fc <USB_ReadPMA>
 8005c38:	e70f      	b.n	8005a5a <HAL_PCD_IRQHandler+0x456>
        ep = &hpcd->OUT_ep[epindex];
 8005c3a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005c3e:	6828      	ldr	r0, [r5, #0]
 8005c40:	4429      	add	r1, r5
 8005c42:	f001 fcb7 	bl	80075b4 <USB_EPStartXfer>
 8005c46:	6828      	ldr	r0, [r5, #0]
 8005c48:	e645      	b.n	80058d6 <HAL_PCD_IRQHandler+0x2d2>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c4a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005c4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (ep->xfer_len >= TxByteNbre)
 8005c52:	eb06 0e04 	add.w	lr, r6, r4
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c56:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8005c5a:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8005c5e:	f8de 9040 	ldr.w	r9, [lr, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8005c66:	4599      	cmp	r9, r3
 8005c68:	f0c0 80b4 	bcc.w	8005dd4 <HAL_PCD_IRQHandler+0x7d0>
      ep->xfer_len -= TxByteNbre;
 8005c6c:	eba9 0903 	sub.w	r9, r9, r3
 8005c70:	f8ce 9040 	str.w	r9, [lr, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8005c74:	f1b9 0f00 	cmp.w	r9, #0
 8005c78:	f000 80ae 	beq.w	8005dd8 <HAL_PCD_IRQHandler+0x7d4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c7c:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8005c80:	d10f      	bne.n	8005ca2 <HAL_PCD_IRQHandler+0x69e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c82:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8005c86:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8005c8a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8005c8e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8005c92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c96:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8005c9a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8005c9e:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005ca2:	eb06 0c04 	add.w	ip, r6, r4
 8005ca6:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8005caa:	f89c 104c 	ldrb.w	r1, [ip, #76]	; 0x4c
 8005cae:	2901      	cmp	r1, #1
 8005cb0:	f040 80dd 	bne.w	8005e6e <HAL_PCD_IRQHandler+0x86a>
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cb4:	e9dc 2811 	ldrd	r2, r8, [ip, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8005cb8:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cbc:	f8dc e038 	ldr.w	lr, [ip, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8005cc0:	4419      	add	r1, r3
        ep->xfer_count += TxByteNbre;
 8005cc2:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cc4:	45f0      	cmp	r8, lr
        ep->xfer_buff += TxByteNbre;
 8005cc6:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8005cca:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cce:	f0c0 81dc 	bcc.w	800608a <HAL_PCD_IRQHandler+0xa86>
          ep->xfer_len_db -= len;
 8005cd2:	eba8 030e 	sub.w	r3, r8, lr
 8005cd6:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 8005cda:	fa1f f38e 	uxth.w	r3, lr
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cde:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	f040 81c0 	bne.w	8006068 <HAL_PCD_IRQHandler+0xa64>
 8005ce8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005cec:	f897 8028 	ldrb.w	r8, [r7, #40]	; 0x28
 8005cf0:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8005cf4:	b292      	uxth	r2, r2
 8005cf6:	4494      	add	ip, r2
 8005cf8:	eb0c 1908 	add.w	r9, ip, r8, lsl #4
 8005cfc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005d00:	f1be 0f00 	cmp.w	lr, #0
 8005d04:	f040 81ed 	bne.w	80060e2 <HAL_PCD_IRQHandler+0xade>
 8005d08:	f83c 2008 	ldrh.w	r2, [ip, r8]
 8005d0c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005d10:	0412      	lsls	r2, r2, #16
 8005d12:	0c12      	lsrs	r2, r2, #16
 8005d14:	f82c 2008 	strh.w	r2, [ip, r8]
 8005d18:	f83c 2008 	ldrh.w	r2, [ip, r8]
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d22:	f82c 2008 	strh.w	r2, [ip, r8]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d26:	1932      	adds	r2, r6, r4
 8005d28:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d2c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005d2e:	f002 f9d5 	bl	80080dc <USB_WritePMA>
 8005d32:	6828      	ldr	r0, [r5, #0]
 8005d34:	4602      	mov	r2, r0
 8005d36:	e09a      	b.n	8005e6e <HAL_PCD_IRQHandler+0x86a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005d38:	293e      	cmp	r1, #62	; 0x3e
 8005d3a:	f200 80e6 	bhi.w	8005f0a <HAL_PCD_IRQHandler+0x906>
 8005d3e:	084e      	lsrs	r6, r1, #1
 8005d40:	07cf      	lsls	r7, r1, #31
 8005d42:	bf48      	it	mi
 8005d44:	3601      	addmi	r6, #1
 8005d46:	02b1      	lsls	r1, r6, #10
 8005d48:	b289      	uxth	r1, r1
 8005d4a:	52e1      	strh	r1, [r4, r3]
 8005d4c:	e5ac      	b.n	80058a8 <HAL_PCD_IRQHandler+0x2a4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d4e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d52:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d56:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8005d5a:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d5c:	f000 80e0 	beq.w	8005f20 <HAL_PCD_IRQHandler+0x91c>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d60:	3302      	adds	r3, #2
 8005d62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005d6a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8005d6e:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8005d76:	459c      	cmp	ip, r3
 8005d78:	461f      	mov	r7, r3
 8005d7a:	f0c0 8122 	bcc.w	8005fc2 <HAL_PCD_IRQHandler+0x9be>
      ep->xfer_len -= count;
 8005d7e:	ebac 0c03 	sub.w	ip, ip, r3
 8005d82:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8005d86:	f1bc 0f00 	cmp.w	ip, #0
 8005d8a:	f000 811e 	beq.w	8005fca <HAL_PCD_IRQHandler+0x9c6>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d8e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005d92:	d012      	beq.n	8005dba <HAL_PCD_IRQHandler+0x7b6>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005d94:	1932      	adds	r2, r6, r4
 8005d96:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005d9a:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 8005d9e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8005da2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005da6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005daa:	0412      	lsls	r2, r2, #16
 8005dac:	0c12      	lsrs	r2, r2, #16
 8005dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005db2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005db6:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f43f ae4c 	beq.w	8005a58 <HAL_PCD_IRQHandler+0x454>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005dc0:	1931      	adds	r1, r6, r4
 8005dc2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005dc6:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8005dca:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005dce:	f002 f995 	bl	80080fc <USB_ReadPMA>
 8005dd2:	e642      	b.n	8005a5a <HAL_PCD_IRQHandler+0x456>
 8005dd4:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dd8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f040 80d7 	bne.w	8005f90 <HAL_PCD_IRQHandler+0x98c>
 8005de2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005de6:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005dea:	b292      	uxth	r2, r2
 8005dec:	0109      	lsls	r1, r1, #4
 8005dee:	4413      	add	r3, r2
 8005df0:	5a5a      	ldrh	r2, [r3, r1]
 8005df2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005df6:	0412      	lsls	r2, r2, #16
 8005df8:	0c12      	lsrs	r2, r2, #16
 8005dfa:	525a      	strh	r2, [r3, r1]
 8005dfc:	5a5a      	ldrh	r2, [r3, r1]
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e04:	525a      	strh	r2, [r3, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e06:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f040 811b 	bne.w	8006046 <HAL_PCD_IRQHandler+0xa42>
 8005e10:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005e14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8005e1e:	4419      	add	r1, r3
 8005e20:	0112      	lsls	r2, r2, #4
 8005e22:	5a8b      	ldrh	r3, [r1, r2]
 8005e24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	528b      	strh	r3, [r1, r2]
 8005e2e:	5a8b      	ldrh	r3, [r1, r2]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e36:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005e3e:	f003 fb63 	bl	8009508 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e42:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e46:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e48:	f47f af74 	bne.w	8005d34 <HAL_PCD_IRQHandler+0x730>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005e52:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	0c1b      	lsrs	r3, r3, #16
 8005e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e6e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005e72:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	ea03 030b 	and.w	r3, r3, fp
 8005e7c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8005e8c:	e4c3      	b.n	8005816 <HAL_PCD_IRQHandler+0x212>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 8086 	bne.w	8005faa <HAL_PCD_IRQHandler+0x9a6>
 8005e9e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005ea2:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005ea6:	b292      	uxth	r2, r2
 8005ea8:	0109      	lsls	r1, r1, #4
 8005eaa:	4413      	add	r3, r2
 8005eac:	5a5a      	ldrh	r2, [r3, r1]
 8005eae:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005eb2:	0412      	lsls	r2, r2, #16
 8005eb4:	0c12      	lsrs	r2, r2, #16
 8005eb6:	525a      	strh	r2, [r3, r1]
 8005eb8:	5a5a      	ldrh	r2, [r3, r1]
 8005eba:	b292      	uxth	r2, r2
 8005ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec0:	525a      	strh	r2, [r3, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ec2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 80e6 	bne.w	8006098 <HAL_PCD_IRQHandler+0xa94>
 8005ecc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005ed0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8005eda:	441a      	add	r2, r3
 8005edc:	0109      	lsls	r1, r1, #4
 8005ede:	5a8b      	ldrh	r3, [r1, r2]
 8005ee0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ee4:	041b      	lsls	r3, r3, #16
 8005ee6:	0c1b      	lsrs	r3, r3, #16
 8005ee8:	528b      	strh	r3, [r1, r2]
 8005eea:	5a8b      	ldrh	r3, [r1, r2]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef2:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8005efa:	f003 fb05 	bl	8009508 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005efe:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005f02:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f04:	d1a2      	bne.n	8005e4c <HAL_PCD_IRQHandler+0x848>
 8005f06:	4602      	mov	r2, r0
 8005f08:	e7b1      	b.n	8005e6e <HAL_PCD_IRQHandler+0x86a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005f0a:	094e      	lsrs	r6, r1, #5
 8005f0c:	06c9      	lsls	r1, r1, #27
 8005f0e:	49a0      	ldr	r1, [pc, #640]	; (8006190 <HAL_PCD_IRQHandler+0xb8c>)
 8005f10:	bf08      	it	eq
 8005f12:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005f16:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005f1a:	b289      	uxth	r1, r1
 8005f1c:	52e1      	strh	r1, [r4, r3]
 8005f1e:	e4c3      	b.n	80058a8 <HAL_PCD_IRQHandler+0x2a4>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f20:	3306      	adds	r3, #6
 8005f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f26:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005f2a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8005f2e:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8005f36:	459e      	cmp	lr, r3
 8005f38:	461f      	mov	r7, r3
 8005f3a:	d357      	bcc.n	8005fec <HAL_PCD_IRQHandler+0x9e8>
      ep->xfer_len -= count;
 8005f3c:	ebae 0e03 	sub.w	lr, lr, r3
 8005f40:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8005f44:	f1be 0f00 	cmp.w	lr, #0
 8005f48:	d052      	beq.n	8005ff0 <HAL_PCD_IRQHandler+0x9ec>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005f4a:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005f4e:	d112      	bne.n	8005f76 <HAL_PCD_IRQHandler+0x972>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005f50:	1932      	adds	r2, r6, r4
 8005f52:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005f56:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 8005f5a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8005f5e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005f62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f66:	0412      	lsls	r2, r2, #16
 8005f68:	0c12      	lsrs	r2, r2, #16
 8005f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f6e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005f72:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f43f ad6e 	beq.w	8005a58 <HAL_PCD_IRQHandler+0x454>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f7c:	1931      	adds	r1, r6, r4
 8005f7e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005f82:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005f86:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005f8a:	f002 f8b7 	bl	80080fc <USB_ReadPMA>
 8005f8e:	e564      	b.n	8005a5a <HAL_PCD_IRQHandler+0x456>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	f47f af51 	bne.w	8005e38 <HAL_PCD_IRQHandler+0x834>
 8005f96:	2400      	movs	r4, #0
 8005f98:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005f9c:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005fa0:	b292      	uxth	r2, r2
 8005fa2:	0109      	lsls	r1, r1, #4
 8005fa4:	4413      	add	r3, r2
 8005fa6:	525c      	strh	r4, [r3, r1]
 8005fa8:	e72d      	b.n	8005e06 <HAL_PCD_IRQHandler+0x802>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d1a2      	bne.n	8005ef4 <HAL_PCD_IRQHandler+0x8f0>
 8005fae:	2400      	movs	r4, #0
 8005fb0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005fb4:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005fb8:	b292      	uxth	r2, r2
 8005fba:	0109      	lsls	r1, r1, #4
 8005fbc:	4413      	add	r3, r2
 8005fbe:	525c      	strh	r4, [r3, r1]
 8005fc0:	e77f      	b.n	8005ec2 <HAL_PCD_IRQHandler+0x8be>
 8005fc2:	f04f 0c00 	mov.w	ip, #0
 8005fc6:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005fca:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8005fce:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005fd2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005fd6:	0409      	lsls	r1, r1, #16
 8005fd8:	0c09      	lsrs	r1, r1, #16
 8005fda:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8005fde:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005fe2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005fe6:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8005fea:	e6d0      	b.n	8005d8e <HAL_PCD_IRQHandler+0x78a>
 8005fec:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ff0:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8005ff4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005ff8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005ffc:	0409      	lsls	r1, r1, #16
 8005ffe:	0c09      	lsrs	r1, r1, #16
 8006000:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8006004:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006008:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800600c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8006010:	e79b      	b.n	8005f4a <HAL_PCD_IRQHandler+0x946>
 8006012:	fa1f f388 	uxth.w	r3, r8
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006016:	2a01      	cmp	r2, #1
 8006018:	f47f acf3 	bne.w	8005a02 <HAL_PCD_IRQHandler+0x3fe>
 800601c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006020:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8006024:	fa1f fe82 	uxth.w	lr, r2
 8006028:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800602c:	4472      	add	r2, lr
 800602e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8006032:	f82c 3002 	strh.w	r3, [ip, r2]
 8006036:	e4e4      	b.n	8005a02 <HAL_PCD_IRQHandler+0x3fe>
        else if (ep->xfer_len_db == 0U)
 8006038:	f1b8 0f00 	cmp.w	r8, #0
 800603c:	d162      	bne.n	8006104 <HAL_PCD_IRQHandler+0xb00>
          ep->xfer_fill_db = 0U;
 800603e:	469e      	mov	lr, r3
 8006040:	f88c 804c 	strb.w	r8, [ip, #76]	; 0x4c
 8006044:	e4b9      	b.n	80059ba <HAL_PCD_IRQHandler+0x3b6>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006046:	2b01      	cmp	r3, #1
 8006048:	f47f aef6 	bne.w	8005e38 <HAL_PCD_IRQHandler+0x834>
 800604c:	2400      	movs	r4, #0
 800604e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006052:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006056:	b299      	uxth	r1, r3
 8006058:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 800605c:	440b      	add	r3, r1
 800605e:	0112      	lsls	r2, r2, #4
 8006060:	52d4      	strh	r4, [r2, r3]
 8006062:	e6e9      	b.n	8005e38 <HAL_PCD_IRQHandler+0x834>
 8006064:	fa1f f388 	uxth.w	r3, r8
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006068:	2a01      	cmp	r2, #1
 800606a:	f47f ae5c 	bne.w	8005d26 <HAL_PCD_IRQHandler+0x722>
 800606e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006072:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8006076:	fa1f fe82 	uxth.w	lr, r2
 800607a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800607e:	4472      	add	r2, lr
 8006080:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8006084:	f82c 3002 	strh.w	r3, [ip, r2]
 8006088:	e64d      	b.n	8005d26 <HAL_PCD_IRQHandler+0x722>
        else if (ep->xfer_len_db == 0U)
 800608a:	f1b8 0f00 	cmp.w	r8, #0
 800608e:	d112      	bne.n	80060b6 <HAL_PCD_IRQHandler+0xab2>
          ep->xfer_fill_db = 0U;
 8006090:	469e      	mov	lr, r3
 8006092:	f88c 804c 	strb.w	r8, [ip, #76]	; 0x4c
 8006096:	e622      	b.n	8005cde <HAL_PCD_IRQHandler+0x6da>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006098:	2b01      	cmp	r3, #1
 800609a:	f47f af2b 	bne.w	8005ef4 <HAL_PCD_IRQHandler+0x8f0>
 800609e:	2400      	movs	r4, #0
 80060a0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80060a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060a8:	b291      	uxth	r1, r2
 80060aa:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80060ae:	440a      	add	r2, r1
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	52d4      	strh	r4, [r2, r3]
 80060b4:	e71e      	b.n	8005ef4 <HAL_PCD_IRQHandler+0x8f0>
          ep->xfer_len_db = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80060bc:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060c0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80060c4:	2a00      	cmp	r2, #0
 80060c6:	d1cd      	bne.n	8006064 <HAL_PCD_IRQHandler+0xa60>
 80060c8:	46c6      	mov	lr, r8
 80060ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80060ce:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80060d8:	441a      	add	r2, r3
 80060da:	eb02 190c 	add.w	r9, r2, ip, lsl #4
 80060de:	fa1f f388 	uxth.w	r3, r8
 80060e2:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 80060e6:	d835      	bhi.n	8006154 <HAL_PCD_IRQHandler+0xb50>
 80060e8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80060ec:	f01e 0f01 	tst.w	lr, #1
 80060f0:	bf18      	it	ne
 80060f2:	f10c 0c01 	addne.w	ip, ip, #1
 80060f6:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80060fa:	fa1f fc8c 	uxth.w	ip, ip
 80060fe:	f8a9 c000 	strh.w	ip, [r9]
 8006102:	e610      	b.n	8005d26 <HAL_PCD_IRQHandler+0x722>
          ep->xfer_fill_db = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800610a:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800610e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006112:	2a00      	cmp	r2, #0
 8006114:	f47f af7d 	bne.w	8006012 <HAL_PCD_IRQHandler+0xa0e>
 8006118:	46c6      	mov	lr, r8
 800611a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800611e:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8006122:	b29b      	uxth	r3, r3
 8006124:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8006128:	441a      	add	r2, r3
 800612a:	eb02 190c 	add.w	r9, r2, ip, lsl #4
 800612e:	fa1f f388 	uxth.w	r3, r8
 8006132:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 8006136:	d81c      	bhi.n	8006172 <HAL_PCD_IRQHandler+0xb6e>
 8006138:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800613c:	f01e 0f01 	tst.w	lr, #1
 8006140:	bf18      	it	ne
 8006142:	f10c 0c01 	addne.w	ip, ip, #1
 8006146:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800614a:	fa1f fc8c 	uxth.w	ip, ip
 800614e:	f8a9 c000 	strh.w	ip, [r9]
 8006152:	e456      	b.n	8005a02 <HAL_PCD_IRQHandler+0x3fe>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006154:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
 8006158:	4a0d      	ldr	r2, [pc, #52]	; (8006190 <HAL_PCD_IRQHandler+0xb8c>)
 800615a:	f01e 0f1f 	tst.w	lr, #31
 800615e:	bf08      	it	eq
 8006160:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006164:	ea42 2c8c 	orr.w	ip, r2, ip, lsl #10
 8006168:	fa1f fc8c 	uxth.w	ip, ip
 800616c:	f8a9 c000 	strh.w	ip, [r9]
 8006170:	e5d9      	b.n	8005d26 <HAL_PCD_IRQHandler+0x722>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006172:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
 8006176:	4a06      	ldr	r2, [pc, #24]	; (8006190 <HAL_PCD_IRQHandler+0xb8c>)
 8006178:	f01e 0f1f 	tst.w	lr, #31
 800617c:	bf08      	it	eq
 800617e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006182:	ea42 2c8c 	orr.w	ip, r2, ip, lsl #10
 8006186:	fa1f fc8c 	uxth.w	ip, ip
 800618a:	f8a9 c000 	strh.w	ip, [r9]
 800618e:	e438      	b.n	8005a02 <HAL_PCD_IRQHandler+0x3fe>
 8006190:	ffff8000 	.word	0xffff8000
 8006194:	ffff8f0f 	.word	0xffff8f0f
 8006198:	ffff8fbf 	.word	0xffff8fbf

0800619c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800619c:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 80061a0:	2a01      	cmp	r2, #1
 80061a2:	d00d      	beq.n	80061c0 <HAL_PCD_SetAddress+0x24>
 80061a4:	2201      	movs	r2, #1
{
 80061a6:	b510      	push	{r4, lr}
 80061a8:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 80061aa:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80061ae:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061b2:	6800      	ldr	r0, [r0, #0]
 80061b4:	f001 ff82 	bl	80080bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061b8:	2000      	movs	r0, #0
 80061ba:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80061be:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80061c0:	2002      	movs	r0, #2
}
 80061c2:	4770      	bx	lr

080061c4 <HAL_PCD_EP_Open>:
{
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	4606      	mov	r6, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80061c8:	0608      	lsls	r0, r1, #24
 80061ca:	d423      	bmi.n	8006214 <HAL_PCD_EP_Open+0x50>
    ep->is_in = 0U;
 80061cc:	2400      	movs	r4, #0
 80061ce:	f001 0507 	and.w	r5, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061d2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80061d6:	00c0      	lsls	r0, r0, #3
 80061d8:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 80061dc:	4430      	add	r0, r6
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061de:	4431      	add	r1, r6
    ep->is_in = 0U;
 80061e0:	f880 4169 	strb.w	r4, [r0, #361]	; 0x169
  if (ep->is_in != 0U)
 80061e4:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061e6:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 80061e8:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80061ea:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80061ec:	b100      	cbz	r0, 80061f0 <HAL_PCD_EP_Open+0x2c>
    ep->tx_fifo_num = ep->num;
 80061ee:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80061f0:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80061f2:	bf04      	itt	eq
 80061f4:	2300      	moveq	r3, #0
 80061f6:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80061f8:	f896 32a8 	ldrb.w	r3, [r6, #680]	; 0x2a8
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d013      	beq.n	8006228 <HAL_PCD_EP_Open+0x64>
 8006200:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006202:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 8006204:	f886 32a8 	strb.w	r3, [r6, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006208:	f000 ff5c 	bl	80070c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800620c:	2000      	movs	r0, #0
 800620e:	f886 02a8 	strb.w	r0, [r6, #680]	; 0x2a8
}
 8006212:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 1U;
 8006214:	2001      	movs	r0, #1
 8006216:	f001 0507 	and.w	r5, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800621a:	182c      	adds	r4, r5, r0
 800621c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006220:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
    ep->is_in = 1U;
 8006224:	7048      	strb	r0, [r1, #1]
 8006226:	e7dd      	b.n	80061e4 <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 8006228:	2002      	movs	r0, #2
}
 800622a:	bd70      	pop	{r4, r5, r6, pc}

0800622c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800622c:	060b      	lsls	r3, r1, #24
{
 800622e:	b510      	push	{r4, lr}
 8006230:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8006232:	d41a      	bmi.n	800626a <HAL_PCD_EP_Close+0x3e>
    ep->is_in = 0U;
 8006234:	2000      	movs	r0, #0
 8006236:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800623a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800623e:	00d2      	lsls	r2, r2, #3
 8006240:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8006244:	4421      	add	r1, r4
    ep->is_in = 0U;
 8006246:	4422      	add	r2, r4
 8006248:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800624c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800624e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006252:	2b01      	cmp	r3, #1
 8006254:	d017      	beq.n	8006286 <HAL_PCD_EP_Close+0x5a>
 8006256:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006258:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800625a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800625e:	f001 f8b3 	bl	80073c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006262:	2000      	movs	r0, #0
 8006264:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8006268:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800626a:	2201      	movs	r2, #1
 800626c:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006270:	1899      	adds	r1, r3, r2
 8006272:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006276:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800627a:	704a      	strb	r2, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800627c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800627e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006282:	2b01      	cmp	r3, #1
 8006284:	d1e7      	bne.n	8006256 <HAL_PCD_EP_Close+0x2a>
 8006286:	2002      	movs	r0, #2
}
 8006288:	bd10      	pop	{r4, pc}
 800628a:	bf00      	nop

0800628c <HAL_PCD_EP_Receive>:
{
 800628c:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 800628e:	2600      	movs	r6, #0
 8006290:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8006294:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8006298:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  ep->xfer_len = len;
 800629c:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062a0:	6800      	ldr	r0, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062a2:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062a6:	f504 71b4 	add.w	r1, r4, #360	; 0x168
  ep->xfer_count = 0U;
 80062aa:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 80062ae:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062b2:	f001 f97f 	bl	80075b4 <USB_EPStartXfer>
}
 80062b6:	4630      	mov	r0, r6
 80062b8:	bd70      	pop	{r4, r5, r6, pc}
 80062ba:	bf00      	nop

080062bc <HAL_PCD_EP_Transmit>:
{
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep->xfer_fill_db = 1U;
 80062be:	2701      	movs	r7, #1
  ep->xfer_count = 0U;
 80062c0:	2600      	movs	r6, #0
 80062c2:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 80062c6:	eb05 0485 	add.w	r4, r5, r5, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ca:	19e9      	adds	r1, r5, r7
  ep->xfer_buff = pBuf;
 80062cc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80062d8:	63e2      	str	r2, [r4, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062da:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 80062dc:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_len_db = len;
 80062de:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->num = ep_addr & EP_ADDR_MSK;
 80062e0:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 80062e4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
  ep->is_in = 1U;
 80062e8:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 80062ec:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062ee:	f001 f961 	bl	80075b4 <USB_EPStartXfer>
}
 80062f2:	4630      	mov	r0, r6
 80062f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f6:	bf00      	nop

080062f8 <HAL_PCD_EP_SetStall>:
{
 80062f8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062fa:	6843      	ldr	r3, [r0, #4]
 80062fc:	f001 0507 	and.w	r5, r1, #7
 8006300:	429d      	cmp	r5, r3
 8006302:	d82d      	bhi.n	8006360 <HAL_PCD_EP_SetStall+0x68>
  if ((0x80U & ep_addr) == 0x80U)
 8006304:	060b      	lsls	r3, r1, #24
 8006306:	4604      	mov	r4, r0
 8006308:	d41a      	bmi.n	8006340 <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 0U;
 800630a:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800630c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006310:	00c9      	lsls	r1, r1, #3
    ep->is_in = 0U;
 8006312:	1863      	adds	r3, r4, r1
 8006314:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8006318:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 800631a:	f501 72b4 	add.w	r2, r1, #360	; 0x168
 800631e:	18a1      	adds	r1, r4, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 8006320:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006322:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006324:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8006328:	429a      	cmp	r2, r3
 800632a:	d017      	beq.n	800635c <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800632c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800632e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006332:	f001 fe43 	bl	8007fbc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006336:	b1ad      	cbz	r5, 8006364 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8006338:	2000      	movs	r0, #0
 800633a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800633e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8006340:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006342:	18e9      	adds	r1, r5, r3
 8006344:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006348:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800634c:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 800634e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006350:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006352:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006354:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8006358:	429a      	cmp	r2, r3
 800635a:	d1e7      	bne.n	800632c <HAL_PCD_EP_SetStall+0x34>
 800635c:	2002      	movs	r0, #2
}
 800635e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006360:	2001      	movs	r0, #1
}
 8006362:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800636a:	f001 feb5 	bl	80080d8 <USB_EP0_OutStart>
 800636e:	e7e3      	b.n	8006338 <HAL_PCD_EP_SetStall+0x40>

08006370 <HAL_PCD_EP_ClrStall>:
{
 8006370:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006372:	6843      	ldr	r3, [r0, #4]
 8006374:	f001 020f 	and.w	r2, r1, #15
 8006378:	429a      	cmp	r2, r3
 800637a:	d831      	bhi.n	80063e0 <HAL_PCD_EP_ClrStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 800637c:	060b      	lsls	r3, r1, #24
 800637e:	4604      	mov	r4, r0
 8006380:	d41c      	bmi.n	80063bc <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 0U;
 8006382:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8006384:	2500      	movs	r5, #0
 8006386:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800638a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800638e:	00d2      	lsls	r2, r2, #3
 8006390:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8006394:	4421      	add	r1, r4
    ep->is_in = 0U;
 8006396:	4422      	add	r2, r4
 8006398:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800639c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800639e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80063a0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d019      	beq.n	80063dc <HAL_PCD_EP_ClrStall+0x6c>
 80063a8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063aa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80063ac:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063b0:	f001 fe2c 	bl	800800c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063b4:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 80063b8:	4628      	mov	r0, r5
}
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80063bc:	2201      	movs	r2, #1
  ep->is_stall = 0U;
 80063be:	2500      	movs	r5, #0
 80063c0:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063c4:	1899      	adds	r1, r3, r2
 80063c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80063ca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80063ce:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063d0:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 80063d2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80063d4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d1e5      	bne.n	80063a8 <HAL_PCD_EP_ClrStall+0x38>
 80063dc:	2002      	movs	r0, #2
}
 80063de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80063e0:	2001      	movs	r0, #1
}
 80063e2:	bd38      	pop	{r3, r4, r5, pc}

080063e4 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80063e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80063e8:	d00b      	beq.n	8006402 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063ea:	f001 0107 	and.w	r1, r1, #7
 80063ee:	3101      	adds	r1, #1
 80063f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80063f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80063f8:	b95a      	cbnz	r2, 8006412 <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80063fa:	2000      	movs	r0, #0
    ep->doublebuffer = 0U;
 80063fc:	730a      	strb	r2, [r1, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80063fe:	80cb      	strh	r3, [r1, #6]
}
 8006400:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8006402:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006406:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800640a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800640e:	2a00      	cmp	r2, #0
 8006410:	d0f3      	beq.n	80063fa <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 8006412:	2201      	movs	r2, #1
}
 8006414:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006416:	608b      	str	r3, [r1, #8]
    ep->doublebuffer = 1U;
 8006418:	730a      	strb	r2, [r1, #12]
}
 800641a:	4770      	bx	lr

0800641c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800641c:	2800      	cmp	r0, #0
 800641e:	f000 81c3 	beq.w	80067a8 <HAL_RCC_OscConfig+0x38c>
{
 8006422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006426:	6803      	ldr	r3, [r0, #0]
 8006428:	4604      	mov	r4, r0
 800642a:	07dd      	lsls	r5, r3, #31
{
 800642c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800642e:	d535      	bpl.n	800649c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006430:	49a6      	ldr	r1, [pc, #664]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006432:	684a      	ldr	r2, [r1, #4]
 8006434:	f002 020c 	and.w	r2, r2, #12
 8006438:	2a04      	cmp	r2, #4
 800643a:	f000 80ef 	beq.w	800661c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800643e:	684a      	ldr	r2, [r1, #4]
 8006440:	f002 020c 	and.w	r2, r2, #12
 8006444:	2a08      	cmp	r2, #8
 8006446:	f000 80e5 	beq.w	8006614 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800644a:	6863      	ldr	r3, [r4, #4]
 800644c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006450:	d010      	beq.n	8006474 <HAL_RCC_OscConfig+0x58>
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 810d 	beq.w	8006672 <HAL_RCC_OscConfig+0x256>
 8006458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800645c:	f000 818f 	beq.w	800677e <HAL_RCC_OscConfig+0x362>
 8006460:	4b9a      	ldr	r3, [pc, #616]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e004      	b.n	800647e <HAL_RCC_OscConfig+0x62>
 8006474:	4a95      	ldr	r2, [pc, #596]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800647c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647e:	f7fd fed9 	bl	8004234 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006482:	4e92      	ldr	r6, [pc, #584]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8006484:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006486:	e005      	b.n	8006494 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006488:	f7fd fed4 	bl	8004234 <HAL_GetTick>
 800648c:	1b40      	subs	r0, r0, r5
 800648e:	2864      	cmp	r0, #100	; 0x64
 8006490:	f200 80eb 	bhi.w	800666a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006494:	6833      	ldr	r3, [r6, #0]
 8006496:	039a      	lsls	r2, r3, #14
 8006498:	d5f6      	bpl.n	8006488 <HAL_RCC_OscConfig+0x6c>
 800649a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800649c:	079f      	lsls	r7, r3, #30
 800649e:	d528      	bpl.n	80064f2 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064a0:	4a8a      	ldr	r2, [pc, #552]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064a2:	6851      	ldr	r1, [r2, #4]
 80064a4:	f011 0f0c 	tst.w	r1, #12
 80064a8:	f000 808e 	beq.w	80065c8 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064ac:	6851      	ldr	r1, [r2, #4]
 80064ae:	f001 010c 	and.w	r1, r1, #12
 80064b2:	2908      	cmp	r1, #8
 80064b4:	f000 8084 	beq.w	80065c0 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 8125 	beq.w	800670a <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c0:	2201      	movs	r2, #1
 80064c2:	4b83      	ldr	r3, [pc, #524]	; (80066d0 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c4:	4e81      	ldr	r6, [pc, #516]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 80064c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80064c8:	f7fd feb4 	bl	8004234 <HAL_GetTick>
 80064cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ce:	e005      	b.n	80064dc <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d0:	f7fd feb0 	bl	8004234 <HAL_GetTick>
 80064d4:	1b40      	subs	r0, r0, r5
 80064d6:	2802      	cmp	r0, #2
 80064d8:	f200 80c7 	bhi.w	800666a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064dc:	6833      	ldr	r3, [r6, #0]
 80064de:	0798      	lsls	r0, r3, #30
 80064e0:	d5f6      	bpl.n	80064d0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e2:	6833      	ldr	r3, [r6, #0]
 80064e4:	6962      	ldr	r2, [r4, #20]
 80064e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80064ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80064ee:	6033      	str	r3, [r6, #0]
 80064f0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064f2:	071a      	lsls	r2, r3, #28
 80064f4:	d41f      	bmi.n	8006536 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064f6:	075d      	lsls	r5, r3, #29
 80064f8:	d541      	bpl.n	800657e <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064fa:	4b74      	ldr	r3, [pc, #464]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	00d0      	lsls	r0, r2, #3
 8006500:	d57d      	bpl.n	80065fe <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8006502:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006504:	4b73      	ldr	r3, [pc, #460]	; (80066d4 <HAL_RCC_OscConfig+0x2b8>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	05d1      	lsls	r1, r2, #23
 800650a:	f140 809d 	bpl.w	8006648 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	2b01      	cmp	r3, #1
 8006512:	f000 810b 	beq.w	800672c <HAL_RCC_OscConfig+0x310>
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80c5 	beq.w	80066a6 <HAL_RCC_OscConfig+0x28a>
 800651c:	2b05      	cmp	r3, #5
 800651e:	4b6b      	ldr	r3, [pc, #428]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006520:	6a1a      	ldr	r2, [r3, #32]
 8006522:	f000 8139 	beq.w	8006798 <HAL_RCC_OscConfig+0x37c>
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	621a      	str	r2, [r3, #32]
 800652c:	6a1a      	ldr	r2, [r3, #32]
 800652e:	f022 0204 	bic.w	r2, r2, #4
 8006532:	621a      	str	r2, [r3, #32]
 8006534:	e0ff      	b.n	8006736 <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006536:	69a3      	ldr	r3, [r4, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d050      	beq.n	80065de <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 800653c:	2201      	movs	r2, #1
 800653e:	4b66      	ldr	r3, [pc, #408]	; (80066d8 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006540:	4e62      	ldr	r6, [pc, #392]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8006542:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006544:	f7fd fe76 	bl	8004234 <HAL_GetTick>
 8006548:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654a:	e005      	b.n	8006558 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800654c:	f7fd fe72 	bl	8004234 <HAL_GetTick>
 8006550:	1b40      	subs	r0, r0, r5
 8006552:	2802      	cmp	r0, #2
 8006554:	f200 8089 	bhi.w	800666a <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006558:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800655a:	079b      	lsls	r3, r3, #30
 800655c:	d5f6      	bpl.n	800654c <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800655e:	4b5f      	ldr	r3, [pc, #380]	; (80066dc <HAL_RCC_OscConfig+0x2c0>)
 8006560:	4a5f      	ldr	r2, [pc, #380]	; (80066e0 <HAL_RCC_OscConfig+0x2c4>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	0a5b      	lsrs	r3, r3, #9
 800656a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800656c:	bf00      	nop
  }
  while (Delay --);
 800656e:	9b01      	ldr	r3, [sp, #4]
 8006570:	1e5a      	subs	r2, r3, #1
 8006572:	9201      	str	r2, [sp, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1f9      	bne.n	800656c <HAL_RCC_OscConfig+0x150>
 8006578:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800657a:	075d      	lsls	r5, r3, #29
 800657c:	d4bd      	bmi.n	80064fa <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800657e:	69e0      	ldr	r0, [r4, #28]
 8006580:	b1d0      	cbz	r0, 80065b8 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006582:	4d52      	ldr	r5, [pc, #328]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006584:	686a      	ldr	r2, [r5, #4]
 8006586:	f002 020c 	and.w	r2, r2, #12
 800658a:	2a08      	cmp	r2, #8
 800658c:	f000 80e6 	beq.w	800675c <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006590:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006592:	f04f 0100 	mov.w	r1, #0
 8006596:	4a53      	ldr	r2, [pc, #332]	; (80066e4 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006598:	f000 8108 	beq.w	80067ac <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 800659c:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800659e:	f7fd fe49 	bl	8004234 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80065a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a6:	e004      	b.n	80065b2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a8:	f7fd fe44 	bl	8004234 <HAL_GetTick>
 80065ac:	1b40      	subs	r0, r0, r5
 80065ae:	2802      	cmp	r0, #2
 80065b0:	d85b      	bhi.n	800666a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	019b      	lsls	r3, r3, #6
 80065b6:	d4f7      	bmi.n	80065a8 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 80065b8:	2000      	movs	r0, #0
}
 80065ba:	b002      	add	sp, #8
 80065bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065c0:	6852      	ldr	r2, [r2, #4]
 80065c2:	03d6      	lsls	r6, r2, #15
 80065c4:	f53f af78 	bmi.w	80064b8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065c8:	4a40      	ldr	r2, [pc, #256]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	0795      	lsls	r5, r2, #30
 80065ce:	d52f      	bpl.n	8006630 <HAL_RCC_OscConfig+0x214>
 80065d0:	6922      	ldr	r2, [r4, #16]
 80065d2:	2a01      	cmp	r2, #1
 80065d4:	d02c      	beq.n	8006630 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80065d6:	2001      	movs	r0, #1
}
 80065d8:	b002      	add	sp, #8
 80065da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80065de:	4a3e      	ldr	r2, [pc, #248]	; (80066d8 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e0:	4e3a      	ldr	r6, [pc, #232]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 80065e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80065e4:	f7fd fe26 	bl	8004234 <HAL_GetTick>
 80065e8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ea:	e004      	b.n	80065f6 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065ec:	f7fd fe22 	bl	8004234 <HAL_GetTick>
 80065f0:	1b40      	subs	r0, r0, r5
 80065f2:	2802      	cmp	r0, #2
 80065f4:	d839      	bhi.n	800666a <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065f8:	079f      	lsls	r7, r3, #30
 80065fa:	d4f7      	bmi.n	80065ec <HAL_RCC_OscConfig+0x1d0>
 80065fc:	e7bc      	b.n	8006578 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80065fe:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8006600:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006602:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006606:	61da      	str	r2, [r3, #28]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8006612:	e777      	b.n	8006504 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006614:	684a      	ldr	r2, [r1, #4]
 8006616:	03d0      	lsls	r0, r2, #15
 8006618:	f57f af17 	bpl.w	800644a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661c:	4a2b      	ldr	r2, [pc, #172]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	0391      	lsls	r1, r2, #14
 8006622:	f57f af3b 	bpl.w	800649c <HAL_RCC_OscConfig+0x80>
 8006626:	6862      	ldr	r2, [r4, #4]
 8006628:	2a00      	cmp	r2, #0
 800662a:	f47f af37 	bne.w	800649c <HAL_RCC_OscConfig+0x80>
 800662e:	e7d2      	b.n	80065d6 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006630:	4926      	ldr	r1, [pc, #152]	; (80066cc <HAL_RCC_OscConfig+0x2b0>)
 8006632:	6960      	ldr	r0, [r4, #20]
 8006634:	680a      	ldr	r2, [r1, #0]
 8006636:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800663a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800663e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006640:	071a      	lsls	r2, r3, #28
 8006642:	f57f af58 	bpl.w	80064f6 <HAL_RCC_OscConfig+0xda>
 8006646:	e776      	b.n	8006536 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006648:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664a:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800664c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006650:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006652:	f7fd fdef 	bl	8004234 <HAL_GetTick>
 8006656:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	05da      	lsls	r2, r3, #23
 800665c:	f53f af57 	bmi.w	800650e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006660:	f7fd fde8 	bl	8004234 <HAL_GetTick>
 8006664:	1b80      	subs	r0, r0, r6
 8006666:	2864      	cmp	r0, #100	; 0x64
 8006668:	d9f6      	bls.n	8006658 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 800666a:	2003      	movs	r0, #3
}
 800666c:	b002      	add	sp, #8
 800666e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006672:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006676:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800667a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667c:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800667e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800668a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800668c:	f7fd fdd2 	bl	8004234 <HAL_GetTick>
 8006690:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006692:	e004      	b.n	800669e <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006694:	f7fd fdce 	bl	8004234 <HAL_GetTick>
 8006698:	1b40      	subs	r0, r0, r5
 800669a:	2864      	cmp	r0, #100	; 0x64
 800669c:	d8e5      	bhi.n	800666a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669e:	6833      	ldr	r3, [r6, #0]
 80066a0:	039b      	lsls	r3, r3, #14
 80066a2:	d4f7      	bmi.n	8006694 <HAL_RCC_OscConfig+0x278>
 80066a4:	e6f9      	b.n	800649a <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80066ae:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b0:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	621a      	str	r2, [r3, #32]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066be:	f022 0204 	bic.w	r2, r2, #4
 80066c2:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80066c4:	f7fd fdb6 	bl	8004234 <HAL_GetTick>
 80066c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ca:	e012      	b.n	80066f2 <HAL_RCC_OscConfig+0x2d6>
 80066cc:	40021000 	.word	0x40021000
 80066d0:	42420000 	.word	0x42420000
 80066d4:	40007000 	.word	0x40007000
 80066d8:	42420480 	.word	0x42420480
 80066dc:	200000ac 	.word	0x200000ac
 80066e0:	10624dd3 	.word	0x10624dd3
 80066e4:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fd fda4 	bl	8004234 <HAL_GetTick>
 80066ec:	1b80      	subs	r0, r0, r6
 80066ee:	4540      	cmp	r0, r8
 80066f0:	d8bb      	bhi.n	800666a <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	0798      	lsls	r0, r3, #30
 80066f6:	d4f7      	bmi.n	80066e8 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 80066f8:	2d00      	cmp	r5, #0
 80066fa:	f43f af40 	beq.w	800657e <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fe:	4a44      	ldr	r2, [pc, #272]	; (8006810 <HAL_RCC_OscConfig+0x3f4>)
 8006700:	69d3      	ldr	r3, [r2, #28]
 8006702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006706:	61d3      	str	r3, [r2, #28]
 8006708:	e739      	b.n	800657e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800670a:	4a42      	ldr	r2, [pc, #264]	; (8006814 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800670c:	4e40      	ldr	r6, [pc, #256]	; (8006810 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 800670e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006710:	f7fd fd90 	bl	8004234 <HAL_GetTick>
 8006714:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006716:	e004      	b.n	8006722 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006718:	f7fd fd8c 	bl	8004234 <HAL_GetTick>
 800671c:	1b40      	subs	r0, r0, r5
 800671e:	2802      	cmp	r0, #2
 8006720:	d8a3      	bhi.n	800666a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006722:	6833      	ldr	r3, [r6, #0]
 8006724:	0799      	lsls	r1, r3, #30
 8006726:	d4f7      	bmi.n	8006718 <HAL_RCC_OscConfig+0x2fc>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	e6e2      	b.n	80064f2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672c:	4a38      	ldr	r2, [pc, #224]	; (8006810 <HAL_RCC_OscConfig+0x3f4>)
 800672e:	6a13      	ldr	r3, [r2, #32]
 8006730:	f043 0301 	orr.w	r3, r3, #1
 8006734:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8006736:	f7fd fd7d 	bl	8004234 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800673e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006740:	4f33      	ldr	r7, [pc, #204]	; (8006810 <HAL_RCC_OscConfig+0x3f4>)
 8006742:	e004      	b.n	800674e <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006744:	f7fd fd76 	bl	8004234 <HAL_GetTick>
 8006748:	1b80      	subs	r0, r0, r6
 800674a:	4540      	cmp	r0, r8
 800674c:	d88d      	bhi.n	800666a <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	079b      	lsls	r3, r3, #30
 8006752:	d5f7      	bpl.n	8006744 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8006754:	2d00      	cmp	r5, #0
 8006756:	f43f af12 	beq.w	800657e <HAL_RCC_OscConfig+0x162>
 800675a:	e7d0      	b.n	80066fe <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800675c:	2801      	cmp	r0, #1
 800675e:	f43f af2c 	beq.w	80065ba <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8006762:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006764:	6a22      	ldr	r2, [r4, #32]
 8006766:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800676a:	4291      	cmp	r1, r2
 800676c:	f47f af33 	bne.w	80065d6 <HAL_RCC_OscConfig+0x1ba>
 8006770:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006772:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8006776:	1a18      	subs	r0, r3, r0
 8006778:	bf18      	it	ne
 800677a:	2001      	movne	r0, #1
 800677c:	e71d      	b.n	80065ba <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800677e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006782:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	e672      	b.n	800647e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006798:	f042 0204 	orr.w	r2, r2, #4
 800679c:	621a      	str	r2, [r3, #32]
 800679e:	6a1a      	ldr	r2, [r3, #32]
 80067a0:	f042 0201 	orr.w	r2, r2, #1
 80067a4:	621a      	str	r2, [r3, #32]
 80067a6:	e7c6      	b.n	8006736 <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 80067a8:	2001      	movs	r0, #1
}
 80067aa:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 80067ac:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80067ae:	f7fd fd41 	bl	8004234 <HAL_GetTick>
 80067b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b4:	e005      	b.n	80067c2 <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b6:	f7fd fd3d 	bl	8004234 <HAL_GetTick>
 80067ba:	1b80      	subs	r0, r0, r6
 80067bc:	2802      	cmp	r0, #2
 80067be:	f63f af54 	bhi.w	800666a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c2:	682b      	ldr	r3, [r5, #0]
 80067c4:	0199      	lsls	r1, r3, #6
 80067c6:	d4f6      	bmi.n	80067b6 <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067c8:	6a23      	ldr	r3, [r4, #32]
 80067ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ce:	d105      	bne.n	80067dc <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067d0:	686a      	ldr	r2, [r5, #4]
 80067d2:	68a1      	ldr	r1, [r4, #8]
 80067d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80067d8:	430a      	orrs	r2, r1
 80067da:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80067dc:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067de:	4d0c      	ldr	r5, [pc, #48]	; (8006810 <HAL_RCC_OscConfig+0x3f4>)
 80067e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80067e2:	686a      	ldr	r2, [r5, #4]
 80067e4:	430b      	orrs	r3, r1
 80067e6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80067ea:	490b      	ldr	r1, [pc, #44]	; (8006818 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067ec:	4313      	orrs	r3, r2
 80067ee:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80067f0:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 80067f2:	f7fd fd1f 	bl	8004234 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067f6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80067f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067fa:	e005      	b.n	8006808 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067fc:	f7fd fd1a 	bl	8004234 <HAL_GetTick>
 8006800:	1b40      	subs	r0, r0, r5
 8006802:	2802      	cmp	r0, #2
 8006804:	f63f af31 	bhi.w	800666a <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	019a      	lsls	r2, r3, #6
 800680c:	d5f6      	bpl.n	80067fc <HAL_RCC_OscConfig+0x3e0>
 800680e:	e6d3      	b.n	80065b8 <HAL_RCC_OscConfig+0x19c>
 8006810:	40021000 	.word	0x40021000
 8006814:	42420000 	.word	0x42420000
 8006818:	42420060 	.word	0x42420060

0800681c <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800681c:	f240 2201 	movw	r2, #513	; 0x201
{
 8006820:	b410      	push	{r4}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006822:	4b1a      	ldr	r3, [pc, #104]	; (800688c <HAL_RCC_GetSysClockFreq+0x70>)
{
 8006824:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006826:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006828:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800682c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800682e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8006832:	4917      	ldr	r1, [pc, #92]	; (8006890 <HAL_RCC_GetSysClockFreq+0x74>)
 8006834:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006836:	f002 030c 	and.w	r3, r2, #12
 800683a:	2b04      	cmp	r3, #4
 800683c:	d01b      	beq.n	8006876 <HAL_RCC_GetSysClockFreq+0x5a>
 800683e:	2b08      	cmp	r3, #8
 8006840:	d115      	bne.n	800686e <HAL_RCC_GetSysClockFreq+0x52>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006842:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8006846:	4423      	add	r3, r4
 8006848:	f813 4c10 	ldrb.w	r4, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800684c:	03d3      	lsls	r3, r2, #15
 800684e:	d516      	bpl.n	800687e <HAL_RCC_GetSysClockFreq+0x62>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006850:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006852:	4810      	ldr	r0, [pc, #64]	; (8006894 <HAL_RCC_GetSysClockFreq+0x78>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006854:	aa06      	add	r2, sp, #24
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006856:	fb00 f004 	mul.w	r0, r0, r4
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800685a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800685e:	4413      	add	r3, r2
 8006860:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006864:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8006868:	b007      	add	sp, #28
 800686a:	bc10      	pop	{r4}
 800686c:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 800686e:	480a      	ldr	r0, [pc, #40]	; (8006898 <HAL_RCC_GetSysClockFreq+0x7c>)
}
 8006870:	b007      	add	sp, #28
 8006872:	bc10      	pop	{r4}
 8006874:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8006876:	4807      	ldr	r0, [pc, #28]	; (8006894 <HAL_RCC_GetSysClockFreq+0x78>)
}
 8006878:	b007      	add	sp, #28
 800687a:	bc10      	pop	{r4}
 800687c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800687e:	4807      	ldr	r0, [pc, #28]	; (800689c <HAL_RCC_GetSysClockFreq+0x80>)
 8006880:	fb00 f004 	mul.w	r0, r0, r4
}
 8006884:	b007      	add	sp, #28
 8006886:	bc10      	pop	{r4}
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	08009780 	.word	0x08009780
 8006890:	40021000 	.word	0x40021000
 8006894:	00b71b00 	.word	0x00b71b00
 8006898:	007a1200 	.word	0x007a1200
 800689c:	003d0900 	.word	0x003d0900

080068a0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80068a0:	2800      	cmp	r0, #0
 80068a2:	f000 808c 	beq.w	80069be <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068a6:	4a49      	ldr	r2, [pc, #292]	; (80069cc <HAL_RCC_ClockConfig+0x12c>)
{
 80068a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068ac:	6813      	ldr	r3, [r2, #0]
 80068ae:	4604      	mov	r4, r0
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	428b      	cmp	r3, r1
 80068b6:	460d      	mov	r5, r1
 80068b8:	d20c      	bcs.n	80068d4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	f023 0307 	bic.w	r3, r3, #7
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c4:	6813      	ldr	r3, [r2, #0]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	428b      	cmp	r3, r1
 80068cc:	d002      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80068ce:	2001      	movs	r0, #1
}
 80068d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	0798      	lsls	r0, r3, #30
 80068d8:	d514      	bpl.n	8006904 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068da:	0759      	lsls	r1, r3, #29
 80068dc:	d504      	bpl.n	80068e8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068de:	493c      	ldr	r1, [pc, #240]	; (80069d0 <HAL_RCC_ClockConfig+0x130>)
 80068e0:	684a      	ldr	r2, [r1, #4]
 80068e2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80068e6:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e8:	071a      	lsls	r2, r3, #28
 80068ea:	d504      	bpl.n	80068f6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068ec:	4938      	ldr	r1, [pc, #224]	; (80069d0 <HAL_RCC_ClockConfig+0x130>)
 80068ee:	684a      	ldr	r2, [r1, #4]
 80068f0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80068f4:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f6:	4936      	ldr	r1, [pc, #216]	; (80069d0 <HAL_RCC_ClockConfig+0x130>)
 80068f8:	68a0      	ldr	r0, [r4, #8]
 80068fa:	684a      	ldr	r2, [r1, #4]
 80068fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006900:	4302      	orrs	r2, r0
 8006902:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006904:	07df      	lsls	r7, r3, #31
 8006906:	d520      	bpl.n	800694a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006908:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800690a:	4b31      	ldr	r3, [pc, #196]	; (80069d0 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800690e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006910:	d057      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006912:	2a02      	cmp	r2, #2
 8006914:	d050      	beq.n	80069b8 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006916:	0799      	lsls	r1, r3, #30
 8006918:	d5d9      	bpl.n	80068ce <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800691a:	4e2d      	ldr	r6, [pc, #180]	; (80069d0 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800691c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006920:	6873      	ldr	r3, [r6, #4]
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	4313      	orrs	r3, r2
 8006928:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800692a:	f7fd fc83 	bl	8004234 <HAL_GetTick>
 800692e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006930:	e004      	b.n	800693c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006932:	f7fd fc7f 	bl	8004234 <HAL_GetTick>
 8006936:	1bc0      	subs	r0, r0, r7
 8006938:	4540      	cmp	r0, r8
 800693a:	d845      	bhi.n	80069c8 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693c:	6873      	ldr	r3, [r6, #4]
 800693e:	6862      	ldr	r2, [r4, #4]
 8006940:	f003 030c 	and.w	r3, r3, #12
 8006944:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006948:	d1f3      	bne.n	8006932 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800694a:	4a20      	ldr	r2, [pc, #128]	; (80069cc <HAL_RCC_ClockConfig+0x12c>)
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	42ab      	cmp	r3, r5
 8006954:	d909      	bls.n	800696a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006956:	6813      	ldr	r3, [r2, #0]
 8006958:	f023 0307 	bic.w	r3, r3, #7
 800695c:	432b      	orrs	r3, r5
 800695e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006960:	6813      	ldr	r3, [r2, #0]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	42ab      	cmp	r3, r5
 8006968:	d1b1      	bne.n	80068ce <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	075a      	lsls	r2, r3, #29
 800696e:	d506      	bpl.n	800697e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006970:	4917      	ldr	r1, [pc, #92]	; (80069d0 <HAL_RCC_ClockConfig+0x130>)
 8006972:	68e0      	ldr	r0, [r4, #12]
 8006974:	684a      	ldr	r2, [r1, #4]
 8006976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800697a:	4302      	orrs	r2, r0
 800697c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697e:	071b      	lsls	r3, r3, #28
 8006980:	d507      	bpl.n	8006992 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006982:	4a13      	ldr	r2, [pc, #76]	; (80069d0 <HAL_RCC_ClockConfig+0x130>)
 8006984:	6921      	ldr	r1, [r4, #16]
 8006986:	6853      	ldr	r3, [r2, #4]
 8006988:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800698c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006990:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006992:	f7ff ff43 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8006996:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <HAL_RCC_ClockConfig+0x130>)
 8006998:	4a0e      	ldr	r2, [pc, #56]	; (80069d4 <HAL_RCC_ClockConfig+0x134>)
 800699a:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 800699c:	490e      	ldr	r1, [pc, #56]	; (80069d8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800699e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80069a2:	5cd3      	ldrb	r3, [r2, r3]
 80069a4:	4a0d      	ldr	r2, [pc, #52]	; (80069dc <HAL_RCC_ClockConfig+0x13c>)
 80069a6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 80069aa:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069ac:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80069ae:	f7fd fbff 	bl	80041b0 <HAL_InitTick>
  return HAL_OK;
 80069b2:	2000      	movs	r0, #0
}
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b8:	0198      	lsls	r0, r3, #6
 80069ba:	d4ae      	bmi.n	800691a <HAL_RCC_ClockConfig+0x7a>
 80069bc:	e787      	b.n	80068ce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80069be:	2001      	movs	r0, #1
}
 80069c0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c2:	039e      	lsls	r6, r3, #14
 80069c4:	d4a9      	bmi.n	800691a <HAL_RCC_ClockConfig+0x7a>
 80069c6:	e782      	b.n	80068ce <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80069c8:	2003      	movs	r0, #3
 80069ca:	e781      	b.n	80068d0 <HAL_RCC_ClockConfig+0x30>
 80069cc:	40022000 	.word	0x40022000
 80069d0:	40021000 	.word	0x40021000
 80069d4:	08009768 	.word	0x08009768
 80069d8:	200000b4 	.word	0x200000b4
 80069dc:	200000ac 	.word	0x200000ac

080069e0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80069e2:	4905      	ldr	r1, [pc, #20]	; (80069f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80069e4:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80069e6:	4a05      	ldr	r2, [pc, #20]	; (80069fc <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80069ec:	5ccb      	ldrb	r3, [r1, r3]
 80069ee:	6810      	ldr	r0, [r2, #0]
}
 80069f0:	40d8      	lsrs	r0, r3
 80069f2:	4770      	bx	lr
 80069f4:	40021000 	.word	0x40021000
 80069f8:	08009778 	.word	0x08009778
 80069fc:	200000ac 	.word	0x200000ac

08006a00 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006a02:	4905      	ldr	r1, [pc, #20]	; (8006a18 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006a04:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8006a06:	4a05      	ldr	r2, [pc, #20]	; (8006a1c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a08:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006a0c:	5ccb      	ldrb	r3, [r1, r3]
 8006a0e:	6810      	ldr	r0, [r2, #0]
}
 8006a10:	40d8      	lsrs	r0, r3
 8006a12:	4770      	bx	lr
 8006a14:	40021000 	.word	0x40021000
 8006a18:	08009778 	.word	0x08009778
 8006a1c:	200000ac 	.word	0x200000ac

08006a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a24:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a26:	6800      	ldr	r0, [r0, #0]
{
 8006a28:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a2a:	07c3      	lsls	r3, r0, #31
 8006a2c:	d52a      	bpl.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x64>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a2e:	4b39      	ldr	r3, [pc, #228]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006a30:	69da      	ldr	r2, [r3, #28]
 8006a32:	00d7      	lsls	r7, r2, #3
 8006a34:	d53d      	bpl.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a36:	4b38      	ldr	r3, [pc, #224]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 8006a38:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	05d6      	lsls	r6, r2, #23
 8006a3e:	d546      	bpl.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a40:	4e34      	ldr	r6, [pc, #208]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006a42:	6a33      	ldr	r3, [r6, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a44:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006a48:	d00f      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006a4a:	6861      	ldr	r1, [r4, #4]
 8006a4c:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d00b      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a54:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a56:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a58:	6a33      	ldr	r3, [r6, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a5a:	4a30      	ldr	r2, [pc, #192]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a5c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a60:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a62:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a64:	6231      	str	r1, [r6, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a66:	07d9      	lsls	r1, r3, #31
 8006a68:	d445      	bmi.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8006a6a:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a6c:	4a29      	ldr	r2, [pc, #164]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006a6e:	6a13      	ldr	r3, [r2, #32]
 8006a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a74:	430b      	orrs	r3, r1
 8006a76:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a78:	b11d      	cbz	r5, 8006a82 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a7a:	69d3      	ldr	r3, [r2, #28]
 8006a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a80:	61d3      	str	r3, [r2, #28]
 8006a82:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a84:	0783      	lsls	r3, r0, #30
 8006a86:	d506      	bpl.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a88:	4922      	ldr	r1, [pc, #136]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006a8a:	68a3      	ldr	r3, [r4, #8]
 8006a8c:	684a      	ldr	r2, [r1, #4]
 8006a8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a92:	431a      	orrs	r2, r3
 8006a94:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a96:	f010 0010 	ands.w	r0, r0, #16
 8006a9a:	d007      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006a9c:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a9e:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006aa0:	6961      	ldr	r1, [r4, #20]
 8006aa2:	6853      	ldr	r3, [r2, #4]
 8006aa4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	6053      	str	r3, [r2, #4]
}
 8006aac:	b002      	add	sp, #8
 8006aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ab2:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8006ab4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ab6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006aba:	61da      	str	r2, [r3, #28]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	05d6      	lsls	r6, r2, #23
 8006acc:	d4b8      	bmi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ace:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad0:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ad6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006ad8:	f7fd fbac 	bl	8004234 <HAL_GetTick>
 8006adc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	05d8      	lsls	r0, r3, #23
 8006ae2:	d4ad      	bmi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae4:	f7fd fba6 	bl	8004234 <HAL_GetTick>
 8006ae8:	1b83      	subs	r3, r0, r6
 8006aea:	2b64      	cmp	r3, #100	; 0x64
 8006aec:	d9f7      	bls.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8006aee:	2003      	movs	r0, #3
}
 8006af0:	b002      	add	sp, #8
 8006af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8006af6:	f7fd fb9d 	bl	8004234 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afa:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006afe:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b00:	e004      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xec>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b02:	f7fd fb97 	bl	8004234 <HAL_GetTick>
 8006b06:	1bc0      	subs	r0, r0, r7
 8006b08:	4540      	cmp	r0, r8
 8006b0a:	d8f0      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xce>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0c:	6a33      	ldr	r3, [r6, #32]
 8006b0e:	079a      	lsls	r2, r3, #30
 8006b10:	d5f7      	bpl.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006b12:	e7aa      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006b14:	40021000 	.word	0x40021000
 8006b18:	40007000 	.word	0x40007000
 8006b1c:	42420440 	.word	0x42420440

08006b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b24:	6803      	ldr	r3, [r0, #0]
 8006b26:	68c0      	ldr	r0, [r0, #12]
 8006b28:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b2a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b2c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006b30:	4301      	orrs	r1, r0
 8006b32:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006b34:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b36:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006b3a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b3e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8006b40:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b44:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006b46:	430a      	orrs	r2, r1
 8006b48:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8006b4e:	4913      	ldr	r1, [pc, #76]	; (8006b9c <UART_SetConfig+0x7c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b54:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8006b56:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b58:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8006b5a:	d01b      	beq.n	8006b94 <UART_SetConfig+0x74>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b5c:	f7ff ff40 	bl	80069e0 <HAL_RCC_GetPCLK1Freq>
 8006b60:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b62:	6862      	ldr	r2, [r4, #4]
 8006b64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b68:	0092      	lsls	r2, r2, #2
 8006b6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b72:	2264      	movs	r2, #100	; 0x64
 8006b74:	480a      	ldr	r0, [pc, #40]	; (8006ba0 <UART_SetConfig+0x80>)
 8006b76:	6824      	ldr	r4, [r4, #0]
 8006b78:	fba0 5103 	umull	r5, r1, r0, r3
 8006b7c:	0949      	lsrs	r1, r1, #5
 8006b7e:	fb02 3311 	mls	r3, r2, r1, r3
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	3332      	adds	r3, #50	; 0x32
 8006b86:	fba0 2303 	umull	r2, r3, r0, r3
 8006b8a:	0109      	lsls	r1, r1, #4
 8006b8c:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8006b90:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b92:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b94:	f7ff ff34 	bl	8006a00 <HAL_RCC_GetPCLK2Freq>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	e7e2      	b.n	8006b62 <UART_SetConfig+0x42>
 8006b9c:	40013800 	.word	0x40013800
 8006ba0:	51eb851f 	.word	0x51eb851f

08006ba4 <HAL_UART_Init>:
  if (huart == NULL)
 8006ba4:	b360      	cbz	r0, 8006c00 <HAL_UART_Init+0x5c>
{
 8006ba6:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006ba8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006bac:	4604      	mov	r4, r0
 8006bae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006bb2:	b303      	cbz	r3, 8006bf6 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8006bb4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006bb6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006bb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006bbc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8006bbe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8006bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bc4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006bc6:	f7ff ffab 	bl	8006b20 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bca:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006bcc:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bce:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8006bd0:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006be0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006be8:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bea:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bec:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bf0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8006bf4:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8006bf6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006bfa:	f7fc ff99 	bl	8003b30 <HAL_UART_MspInit>
 8006bfe:	e7d9      	b.n	8006bb4 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8006c00:	2001      	movs	r0, #1
}
 8006c02:	4770      	bx	lr

08006c04 <HAL_UART_Transmit_DMA>:
{
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8006c08:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8006c0c:	2820      	cmp	r0, #32
 8006c0e:	d12b      	bne.n	8006c68 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8006c10:	b341      	cbz	r1, 8006c64 <HAL_UART_Transmit_DMA+0x60>
 8006c12:	b33a      	cbz	r2, 8006c64 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8006c14:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8006c18:	2801      	cmp	r0, #1
 8006c1a:	d025      	beq.n	8006c68 <HAL_UART_Transmit_DMA+0x64>
 8006c1c:	2601      	movs	r6, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c20:	2721      	movs	r7, #33	; 0x21
    huart->TxXferCount = Size;
 8006c22:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 8006c24:	84a2      	strh	r2, [r4, #36]	; 0x24
    __HAL_LOCK(huart);
 8006c26:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c2a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c2c:	4613      	mov	r3, r2
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c2e:	4e0f      	ldr	r6, [pc, #60]	; (8006c6c <HAL_UART_Transmit_DMA+0x68>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c30:	4a0f      	ldr	r2, [pc, #60]	; (8006c70 <HAL_UART_Transmit_DMA+0x6c>)
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c32:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 8006c34:	6221      	str	r1, [r4, #32]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c36:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c3a:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c3c:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c3e:	4e0d      	ldr	r6, [pc, #52]	; (8006c74 <HAL_UART_Transmit_DMA+0x70>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c40:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8006c42:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c44:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006c46:	3204      	adds	r2, #4
 8006c48:	f7fd fbc4 	bl	80043d4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c50:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8006c52:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c54:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8006c56:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c5a:	695a      	ldr	r2, [r3, #20]
 8006c5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c60:	615a      	str	r2, [r3, #20]
}
 8006c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8006c64:	2001      	movs	r0, #1
}
 8006c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006c68:	2002      	movs	r0, #2
}
 8006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6c:	08006c79 	.word	0x08006c79
 8006c70:	08006ca9 	.word	0x08006ca9
 8006c74:	08006cbd 	.word	0x08006cbd

08006c78 <UART_DMATransmitCplt>:
{
 8006c78:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c7a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f013 0320 	ands.w	r3, r3, #32
 8006c84:	d10a      	bne.n	8006c9c <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c86:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8006c88:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c8a:	6953      	ldr	r3, [r2, #20]
 8006c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c90:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c92:	68d3      	ldr	r3, [r2, #12]
 8006c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c98:	60d3      	str	r3, [r2, #12]
}
 8006c9a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006c9c:	f7fc fcc0 	bl	8003620 <HAL_UART_TxCpltCallback>
}
 8006ca0:	bd08      	pop	{r3, pc}
 8006ca2:	bf00      	nop

08006ca4 <HAL_UART_TxHalfCpltCallback>:
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop

08006ca8 <UART_DMATxHalfCplt>:
{
 8006ca8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006caa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006cac:	f7ff fffa 	bl	8006ca4 <HAL_UART_TxHalfCpltCallback>
}
 8006cb0:	bd08      	pop	{r3, pc}
 8006cb2:	bf00      	nop

08006cb4 <HAL_UART_RxCpltCallback>:
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop

08006cb8 <HAL_UART_ErrorCallback>:
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop

08006cbc <UART_DMAError>:
{
 8006cbc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cbe:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cc0:	6803      	ldr	r3, [r0, #0]
 8006cc2:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cc4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8006cc8:	2a21      	cmp	r2, #33	; 0x21
 8006cca:	d00b      	beq.n	8006ce4 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ccc:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006cce:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8006cd2:	2a22      	cmp	r2, #34	; 0x22
 8006cd4:	d016      	beq.n	8006d04 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006cd8:	f043 0310 	orr.w	r3, r3, #16
 8006cdc:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8006cde:	f7ff ffeb 	bl	8006cb8 <HAL_UART_ErrorCallback>
}
 8006ce2:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ce4:	0609      	lsls	r1, r1, #24
 8006ce6:	d5f1      	bpl.n	8006ccc <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8006ce8:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8006cea:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8006cec:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006cf4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfa:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006cfc:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8006d00:	2a22      	cmp	r2, #34	; 0x22
 8006d02:	d1e8      	bne.n	8006cd6 <UART_DMAError+0x1a>
 8006d04:	064a      	lsls	r2, r1, #25
 8006d06:	d5e6      	bpl.n	8006cd6 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8006d08:	2200      	movs	r2, #0
 8006d0a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d1c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006d1e:	2a01      	cmp	r2, #1
 8006d20:	d103      	bne.n	8006d2a <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	f022 0210 	bic.w	r2, r2, #16
 8006d28:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d32:	6303      	str	r3, [r0, #48]	; 0x30
}
 8006d34:	e7cf      	b.n	8006cd6 <UART_DMAError+0x1a>
 8006d36:	bf00      	nop

08006d38 <UART_DMAAbortOnError>:
{
 8006d38:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8006d3a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8006d3e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d40:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006d42:	f7ff ffb9 	bl	8006cb8 <HAL_UART_ErrorCallback>
}
 8006d46:	bd08      	pop	{r3, pc}

08006d48 <HAL_UARTEx_RxEventCallback>:
}
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop

08006d4c <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d4c:	6883      	ldr	r3, [r0, #8]
 8006d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d52:	d03b      	beq.n	8006dcc <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d54:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d02f      	beq.n	8006dba <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d5a:	6803      	ldr	r3, [r0, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d62:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8006d64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d66:	3301      	adds	r3, #1
 8006d68:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8006d6a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8006d72:	bb4b      	cbnz	r3, 8006dc8 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006d74:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8006d76:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d78:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006d7a:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d7c:	68d1      	ldr	r1, [r2, #12]
 8006d7e:	f021 0120 	bic.w	r1, r1, #32
 8006d82:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d84:	68d1      	ldr	r1, [r2, #12]
 8006d86:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006d8a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d8c:	6951      	ldr	r1, [r2, #20]
 8006d8e:	f021 0101 	bic.w	r1, r1, #1
 8006d92:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006d94:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d98:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006d9a:	2901      	cmp	r1, #1
 8006d9c:	d121      	bne.n	8006de2 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9e:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da0:	68d1      	ldr	r1, [r2, #12]
 8006da2:	f021 0110 	bic.w	r1, r1, #16
 8006da6:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006da8:	6811      	ldr	r1, [r2, #0]
 8006daa:	06c9      	lsls	r1, r1, #27
 8006dac:	d423      	bmi.n	8006df6 <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dae:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006db0:	f7ff ffca 	bl	8006d48 <HAL_UARTEx_RxEventCallback>
}
 8006db4:	2000      	movs	r0, #0
 8006db6:	b002      	add	sp, #8
 8006db8:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dba:	6903      	ldr	r3, [r0, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1cc      	bne.n	8006d5a <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dc0:	6803      	ldr	r3, [r0, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	7013      	strb	r3, [r2, #0]
 8006dc6:	e7cd      	b.n	8006d64 <UART_Receive_IT.part.0+0x18>
}
 8006dc8:	2000      	movs	r0, #0
 8006dca:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dcc:	6903      	ldr	r3, [r0, #16]
 8006dce:	b96b      	cbnz	r3, 8006dec <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dd0:	6802      	ldr	r2, [r0, #0]
 8006dd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006dd4:	6852      	ldr	r2, [r2, #4]
 8006dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dda:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8006dde:	6283      	str	r3, [r0, #40]	; 0x28
 8006de0:	e7c3      	b.n	8006d6a <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8006de2:	f7ff ff67 	bl	8006cb4 <HAL_UART_RxCpltCallback>
}
 8006de6:	2000      	movs	r0, #0
 8006de8:	b002      	add	sp, #8
 8006dea:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dec:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dee:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	7013      	strb	r3, [r2, #0]
 8006df4:	e7b6      	b.n	8006d64 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	6813      	ldr	r3, [r2, #0]
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	6853      	ldr	r3, [r2, #4]
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	9b01      	ldr	r3, [sp, #4]
 8006e02:	e7d4      	b.n	8006dae <UART_Receive_IT.part.0+0x62>

08006e04 <HAL_UART_IRQHandler>:
{
 8006e04:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e06:	6803      	ldr	r3, [r0, #0]
{
 8006e08:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e0a:	681a      	ldr	r2, [r3, #0]
{
 8006e0c:	b082      	sub	sp, #8
  if (errorflags == RESET)
 8006e0e:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e10:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e12:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8006e14:	d14e      	bne.n	8006eb4 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e16:	0696      	lsls	r6, r2, #26
 8006e18:	d502      	bpl.n	8006e20 <HAL_UART_IRQHandler+0x1c>
 8006e1a:	068d      	lsls	r5, r1, #26
 8006e1c:	f100 8090 	bmi.w	8006f40 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e20:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006e22:	2801      	cmp	r0, #1
 8006e24:	d00b      	beq.n	8006e3e <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e26:	0616      	lsls	r6, r2, #24
 8006e28:	d502      	bpl.n	8006e30 <HAL_UART_IRQHandler+0x2c>
 8006e2a:	060d      	lsls	r5, r1, #24
 8006e2c:	f100 8092 	bmi.w	8006f54 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e30:	0650      	lsls	r0, r2, #25
 8006e32:	d502      	bpl.n	8006e3a <HAL_UART_IRQHandler+0x36>
 8006e34:	064a      	lsls	r2, r1, #25
 8006e36:	f100 80ab 	bmi.w	8006f90 <HAL_UART_IRQHandler+0x18c>
}
 8006e3a:	b002      	add	sp, #8
 8006e3c:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006e3e:	06d5      	lsls	r5, r2, #27
 8006e40:	d5f1      	bpl.n	8006e26 <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006e42:	06c8      	lsls	r0, r1, #27
 8006e44:	d5ef      	bpl.n	8006e26 <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e46:	2100      	movs	r1, #0
 8006e48:	9101      	str	r1, [sp, #4]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	9201      	str	r2, [sp, #4]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	9201      	str	r2, [sp, #4]
 8006e52:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e54:	695a      	ldr	r2, [r3, #20]
 8006e56:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8006e5a:	f000 80d2 	beq.w	8007002 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e5e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006e60:	6802      	ldr	r2, [r0, #0]
 8006e62:	6852      	ldr	r2, [r2, #4]
 8006e64:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8006e66:	2a00      	cmp	r2, #0
 8006e68:	d0e7      	beq.n	8006e3a <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006e6a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8006e6c:	4295      	cmp	r5, r2
 8006e6e:	d9e4      	bls.n	8006e3a <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e70:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 8006e72:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e74:	2e20      	cmp	r6, #32
 8006e76:	d016      	beq.n	8006ea6 <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 8006e78:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e80:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e82:	695a      	ldr	r2, [r3, #20]
 8006e84:	f022 0201 	bic.w	r2, r2, #1
 8006e88:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e90:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8006e92:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	f022 0210 	bic.w	r2, r2, #16
 8006e9e:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ea0:	f7fd fada 	bl	8004458 <HAL_DMA_Abort>
 8006ea4:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ea6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	1a69      	subs	r1, r5, r1
 8006eac:	b289      	uxth	r1, r1
 8006eae:	f7ff ff4b 	bl	8006d48 <HAL_UARTEx_RxEventCallback>
 8006eb2:	e7c2      	b.n	8006e3a <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006eb4:	f005 0501 	and.w	r5, r5, #1
 8006eb8:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8006ebc:	4328      	orrs	r0, r5
 8006ebe:	d0af      	beq.n	8006e20 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ec0:	07d0      	lsls	r0, r2, #31
 8006ec2:	d505      	bpl.n	8006ed0 <HAL_UART_IRQHandler+0xcc>
 8006ec4:	05ce      	lsls	r6, r1, #23
 8006ec6:	d503      	bpl.n	8006ed0 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ec8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006eca:	f040 0001 	orr.w	r0, r0, #1
 8006ece:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ed0:	0750      	lsls	r0, r2, #29
 8006ed2:	d52c      	bpl.n	8006f2e <HAL_UART_IRQHandler+0x12a>
 8006ed4:	b12d      	cbz	r5, 8006ee2 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ed6:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ed8:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eda:	f040 0002 	orr.w	r0, r0, #2
 8006ede:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ee0:	d429      	bmi.n	8006f36 <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ee2:	0716      	lsls	r6, r2, #28
 8006ee4:	d507      	bpl.n	8006ef6 <HAL_UART_IRQHandler+0xf2>
 8006ee6:	f001 0020 	and.w	r0, r1, #32
 8006eea:	4328      	orrs	r0, r5
 8006eec:	d003      	beq.n	8006ef6 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006ef0:	f040 0008 	orr.w	r0, r0, #8
 8006ef4:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ef6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d09e      	beq.n	8006e3a <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006efc:	0690      	lsls	r0, r2, #26
 8006efe:	d509      	bpl.n	8006f14 <HAL_UART_IRQHandler+0x110>
 8006f00:	068a      	lsls	r2, r1, #26
 8006f02:	d507      	bpl.n	8006f14 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f04:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8006f08:	2a22      	cmp	r2, #34	; 0x22
 8006f0a:	d103      	bne.n	8006f14 <HAL_UART_IRQHandler+0x110>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f7ff ff1d 	bl	8006d4c <UART_Receive_IT.part.0>
 8006f12:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f14:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f16:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f18:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f1c:	f005 0508 	and.w	r5, r5, #8
 8006f20:	4315      	orrs	r5, r2
 8006f22:	d140      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 8006f24:	4620      	mov	r0, r4
 8006f26:	f7ff fec7 	bl	8006cb8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2a:	6425      	str	r5, [r4, #64]	; 0x40
 8006f2c:	e785      	b.n	8006e3a <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f2e:	0790      	lsls	r0, r2, #30
 8006f30:	d5d7      	bpl.n	8006ee2 <HAL_UART_IRQHandler+0xde>
 8006f32:	2d00      	cmp	r5, #0
 8006f34:	d0d5      	beq.n	8006ee2 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f36:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006f38:	f040 0004 	orr.w	r0, r0, #4
 8006f3c:	6420      	str	r0, [r4, #64]	; 0x40
 8006f3e:	e7d0      	b.n	8006ee2 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f40:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006f44:	2b22      	cmp	r3, #34	; 0x22
 8006f46:	f47f af78 	bne.w	8006e3a <HAL_UART_IRQHandler+0x36>
}
 8006f4a:	b002      	add	sp, #8
 8006f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f50:	f7ff befc 	b.w	8006d4c <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f54:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8006f58:	2a21      	cmp	r2, #33	; 0x21
 8006f5a:	f47f af6e 	bne.w	8006e3a <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5e:	68a2      	ldr	r2, [r4, #8]
 8006f60:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006f64:	d06e      	beq.n	8007044 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f66:	6a22      	ldr	r2, [r4, #32]
 8006f68:	1c51      	adds	r1, r2, #1
 8006f6a:	6221      	str	r1, [r4, #32]
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8006f70:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8006f72:	3a01      	subs	r2, #1
 8006f74:	b292      	uxth	r2, r2
 8006f76:	84e2      	strh	r2, [r4, #38]	; 0x26
 8006f78:	2a00      	cmp	r2, #0
 8006f7a:	f47f af5e 	bne.w	8006e3a <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f84:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	e754      	b.n	8006e3a <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8006f90:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f92:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8006f94:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006f9c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8006fa0:	f7fc fb3e 	bl	8003620 <HAL_UART_TxCpltCallback>
    return;
 8006fa4:	e749      	b.n	8006e3a <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	695a      	ldr	r2, [r3, #20]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006fb8:	2a01      	cmp	r2, #1
 8006fba:	d103      	bne.n	8006fc4 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	f022 0210 	bic.w	r2, r2, #16
 8006fc2:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006fc6:	2120      	movs	r1, #32
 8006fc8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fcc:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fce:	695a      	ldr	r2, [r3, #20]
 8006fd0:	0656      	lsls	r6, r2, #25
 8006fd2:	d512      	bpl.n	8006ffa <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd4:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006fd6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fdc:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006fde:	b160      	cbz	r0, 8006ffa <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fe0:	4b1e      	ldr	r3, [pc, #120]	; (800705c <HAL_UART_IRQHandler+0x258>)
 8006fe2:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fe4:	f7fd fa5a 	bl	800449c <HAL_DMA_Abort_IT>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f43f af26 	beq.w	8006e3a <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006ff0:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8006ff2:	b002      	add	sp, #8
 8006ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ff8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff fe5c 	bl	8006cb8 <HAL_UART_ErrorCallback>
 8007000:	e71b      	b.n	8006e3a <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007002:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8007004:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007006:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8007008:	b289      	uxth	r1, r1
 800700a:	2900      	cmp	r1, #0
 800700c:	f43f af15 	beq.w	8006e3a <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007010:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007012:	1a08      	subs	r0, r1, r0
 8007014:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8007016:	2900      	cmp	r1, #0
 8007018:	f43f af0f 	beq.w	8006e3a <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 800701c:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800701e:	68d8      	ldr	r0, [r3, #12]
 8007020:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8007024:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007026:	6958      	ldr	r0, [r3, #20]
 8007028:	f020 0001 	bic.w	r0, r0, #1
 800702c:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800702e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007032:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007034:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007036:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007038:	f022 0210 	bic.w	r2, r2, #16
 800703c:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800703e:	f7ff fe83 	bl	8006d48 <HAL_UARTEx_RxEventCallback>
 8007042:	e6fa      	b.n	8006e3a <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007044:	6922      	ldr	r2, [r4, #16]
 8007046:	2a00      	cmp	r2, #0
 8007048:	d18d      	bne.n	8006f66 <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800704a:	6a22      	ldr	r2, [r4, #32]
 800704c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007050:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007054:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007056:	6222      	str	r2, [r4, #32]
 8007058:	e78a      	b.n	8006f70 <HAL_UART_IRQHandler+0x16c>
 800705a:	bf00      	nop
 800705c:	08006d39 	.word	0x08006d39

08007060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007060:	b084      	sub	sp, #16
 8007062:	a801      	add	r0, sp, #4
 8007064:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8007068:	b004      	add	sp, #16
 800706a:	2000      	movs	r0, #0
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop

08007070 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007070:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007072:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8007076:	2000      	movs	r0, #0
 8007078:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800707c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop

08007084 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007084:	f244 02ff 	movw	r2, #16639	; 0x40ff
{
 8007088:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800708a:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 800708e:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007090:	400a      	ands	r2, r1
 8007092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8007096:	4770      	bx	lr

08007098 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007098:	2000      	movs	r0, #0
 800709a:	4770      	bx	lr

0800709c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800709c:	b084      	sub	sp, #16
 800709e:	b430      	push	{r4, r5}
 80070a0:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070a2:	2501      	movs	r5, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80070a4:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070a6:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
{
 80070aa:	ad03      	add	r5, sp, #12
  USBx->CNTR = 0U;
 80070ac:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
{
 80070b0:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070b4:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80070b8:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80070bc:	bc30      	pop	{r4, r5}
 80070be:	b004      	add	sp, #16
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop

080070c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070c4:	4603      	mov	r3, r0
 80070c6:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070c8:	780d      	ldrb	r5, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80070ca:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070cc:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80070d0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80070d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80070d8:	0412      	lsls	r2, r2, #16
 80070da:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80070dc:	2803      	cmp	r0, #3
 80070de:	f200 816c 	bhi.w	80073ba <USB_ActivateEndpoint+0x2f6>
 80070e2:	e8df f000 	tbb	[pc, r0]
 80070e6:	5054      	.short	0x5054
 80070e8:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80070ea:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80070ee:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80070f0:	f248 0480 	movw	r4, #32896	; 0x8080
 80070f4:	4322      	orrs	r2, r4
 80070f6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80070fa:	780e      	ldrb	r6, [r1, #0]
 80070fc:	4db0      	ldr	r5, [pc, #704]	; (80073c0 <USB_ActivateEndpoint+0x2fc>)
 80070fe:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8007102:	b292      	uxth	r2, r2
 8007104:	402a      	ands	r2, r5
 8007106:	4332      	orrs	r2, r6
 8007108:	4322      	orrs	r2, r4
 800710a:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800710e:	7b0a      	ldrb	r2, [r1, #12]
 8007110:	2a00      	cmp	r2, #0
 8007112:	f040 8089 	bne.w	8007228 <USB_ActivateEndpoint+0x164>
  {
    if (ep->is_in != 0U)
 8007116:	784a      	ldrb	r2, [r1, #1]
 8007118:	2a00      	cmp	r2, #0
 800711a:	d03b      	beq.n	8007194 <USB_ActivateEndpoint+0xd0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800711c:	780a      	ldrb	r2, [r1, #0]
 800711e:	88cc      	ldrh	r4, [r1, #6]
 8007120:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8007124:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007128:	0864      	lsrs	r4, r4, #1
 800712a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800712e:	0064      	lsls	r4, r4, #1
 8007130:	b2b6      	uxth	r6, r6
 8007132:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007134:	780c      	ldrb	r4, [r1, #0]
 8007136:	f833 6024 	ldrh.w	r6, [r3, r4, lsl #2]
 800713a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 800713e:	0676      	lsls	r6, r6, #25
 8007140:	d50c      	bpl.n	800715c <USB_ActivateEndpoint+0x98>
 8007142:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007146:	b292      	uxth	r2, r2
 8007148:	4015      	ands	r5, r2
 800714a:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 800714e:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8007152:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
 8007156:	780a      	ldrb	r2, [r1, #0]
 8007158:	eb03 0282 	add.w	r2, r3, r2, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 800715c:	78cb      	ldrb	r3, [r1, #3]
 800715e:	2b01      	cmp	r3, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007160:	8813      	ldrh	r3, [r2, #0]
 8007162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800716a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800716e:	ea4f 4313 	mov.w	r3, r3, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8007172:	d052      	beq.n	800721a <USB_ActivateEndpoint+0x156>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8007174:	bc70      	pop	{r4, r5, r6}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007176:	f083 0320 	eor.w	r3, r3, #32
 800717a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007182:	8013      	strh	r3, [r2, #0]
}
 8007184:	4770      	bx	lr
  HAL_StatusTypeDef ret = HAL_OK;
 8007186:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 800718c:	e7b0      	b.n	80070f0 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_CONTROL;
 800718e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8007192:	e7ad      	b.n	80070f0 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007194:	780a      	ldrb	r2, [r1, #0]
 8007196:	88cc      	ldrh	r4, [r1, #6]
 8007198:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800719c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80071a0:	0864      	lsrs	r4, r4, #1
 80071a2:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80071a6:	0064      	lsls	r4, r4, #1
 80071a8:	b2ad      	uxth	r5, r5
 80071aa:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80071ac:	780a      	ldrb	r2, [r1, #0]
 80071ae:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80071b2:	690d      	ldr	r5, [r1, #16]
 80071b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80071b8:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80071bc:	b2a4      	uxth	r4, r4
 80071be:	2d00      	cmp	r5, #0
 80071c0:	f000 80e2 	beq.w	8007388 <USB_ActivateEndpoint+0x2c4>
 80071c4:	2d3e      	cmp	r5, #62	; 0x3e
 80071c6:	f200 80ed 	bhi.w	80073a4 <USB_ActivateEndpoint+0x2e0>
 80071ca:	086e      	lsrs	r6, r5, #1
 80071cc:	07ed      	lsls	r5, r5, #31
 80071ce:	bf48      	it	mi
 80071d0:	3601      	addmi	r6, #1
 80071d2:	02b6      	lsls	r6, r6, #10
 80071d4:	b2b6      	uxth	r6, r6
 80071d6:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071d8:	780c      	ldrb	r4, [r1, #0]
 80071da:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80071de:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 80071e2:	046d      	lsls	r5, r5, #17
 80071e4:	d510      	bpl.n	8007208 <USB_ActivateEndpoint+0x144>
 80071e6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80071ea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80071ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80071f2:	0412      	lsls	r2, r2, #16
 80071f4:	0c12      	lsrs	r2, r2, #16
 80071f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80071fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071fe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8007202:	780a      	ldrb	r2, [r1, #0]
 8007204:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007208:	8813      	ldrh	r3, [r2, #0]
 800720a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800720e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800721a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007222:	8013      	strh	r3, [r2, #0]
}
 8007224:	bc70      	pop	{r4, r5, r6}
 8007226:	4770      	bx	lr
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007228:	780c      	ldrb	r4, [r1, #0]
 800722a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800722e:	b292      	uxth	r2, r2
 8007230:	402a      	ands	r2, r5
 8007232:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8007236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800723a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800723e:	780a      	ldrb	r2, [r1, #0]
 8007240:	890c      	ldrh	r4, [r1, #8]
 8007242:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8007246:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800724a:	0864      	lsrs	r4, r4, #1
 800724c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007250:	0064      	lsls	r4, r4, #1
 8007252:	b2b6      	uxth	r6, r6
 8007254:	5394      	strh	r4, [r2, r6]
 8007256:	780a      	ldrb	r2, [r1, #0]
 8007258:	894c      	ldrh	r4, [r1, #10]
 800725a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800725e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007262:	0864      	lsrs	r4, r4, #1
 8007264:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8007268:	b2b6      	uxth	r6, r6
 800726a:	0064      	lsls	r4, r4, #1
 800726c:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 800726e:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007270:	780e      	ldrb	r6, [r1, #0]
    if (ep->is_in == 0U)
 8007272:	2a00      	cmp	r2, #0
 8007274:	d13f      	bne.n	80072f6 <USB_ActivateEndpoint+0x232>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007276:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800727a:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 800727e:	0452      	lsls	r2, r2, #17
 8007280:	d50c      	bpl.n	800729c <USB_ActivateEndpoint+0x1d8>
 8007282:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8007286:	b292      	uxth	r2, r2
 8007288:	4015      	ands	r5, r2
 800728a:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 800728e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8007292:	f823 5026 	strh.w	r5, [r3, r6, lsl #2]
 8007296:	780c      	ldrb	r4, [r1, #0]
 8007298:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800729c:	8822      	ldrh	r2, [r4, #0]
 800729e:	0655      	lsls	r5, r2, #25
 80072a0:	d50e      	bpl.n	80072c0 <USB_ActivateEndpoint+0x1fc>
 80072a2:	8822      	ldrh	r2, [r4, #0]
 80072a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80072a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072ac:	0412      	lsls	r2, r2, #16
 80072ae:	0c12      	lsrs	r2, r2, #16
 80072b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072b4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80072b8:	8022      	strh	r2, [r4, #0]
 80072ba:	780c      	ldrb	r4, [r1, #0]
 80072bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072c0:	f248 0580 	movw	r5, #32896	; 0x8080
 80072c4:	8822      	ldrh	r2, [r4, #0]
 80072c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072ce:	0412      	lsls	r2, r2, #16
 80072d0:	0c12      	lsrs	r2, r2, #16
 80072d2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80072d6:	432a      	orrs	r2, r5
 80072d8:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072da:	7809      	ldrb	r1, [r1, #0]
 80072dc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80072e0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80072e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e8:	0412      	lsls	r2, r2, #16
 80072ea:	0c12      	lsrs	r2, r2, #16
 80072ec:	432a      	orrs	r2, r5
 80072ee:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 80072f2:	bc70      	pop	{r4, r5, r6}
 80072f4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072f6:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80072fa:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 80072fe:	0452      	lsls	r2, r2, #17
 8007300:	d50c      	bpl.n	800731c <USB_ActivateEndpoint+0x258>
 8007302:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8007306:	b292      	uxth	r2, r2
 8007308:	4015      	ands	r5, r2
 800730a:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 800730e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8007312:	f823 5026 	strh.w	r5, [r3, r6, lsl #2]
 8007316:	780c      	ldrb	r4, [r1, #0]
 8007318:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800731c:	8822      	ldrh	r2, [r4, #0]
 800731e:	0652      	lsls	r2, r2, #25
 8007320:	d50e      	bpl.n	8007340 <USB_ActivateEndpoint+0x27c>
 8007322:	8822      	ldrh	r2, [r4, #0]
 8007324:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007328:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800732c:	0412      	lsls	r2, r2, #16
 800732e:	0c12      	lsrs	r2, r2, #16
 8007330:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007334:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007338:	8022      	strh	r2, [r4, #0]
 800733a:	780c      	ldrb	r4, [r1, #0]
 800733c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      if (ep->type != EP_TYPE_ISOC)
 8007340:	78ca      	ldrb	r2, [r1, #3]
 8007342:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007344:	8822      	ldrh	r2, [r4, #0]
 8007346:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800734a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800734e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8007352:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007356:	bf18      	it	ne
 8007358:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800735c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007360:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007364:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007366:	7809      	ldrb	r1, [r1, #0]
}
 8007368:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800736a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800736e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007372:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007376:	0412      	lsls	r2, r2, #16
 8007378:	0c12      	lsrs	r2, r2, #16
 800737a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800737e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007382:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8007386:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007388:	5b15      	ldrh	r5, [r2, r4]
 800738a:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800738e:	042d      	lsls	r5, r5, #16
 8007390:	0c2d      	lsrs	r5, r5, #16
 8007392:	5315      	strh	r5, [r2, r4]
 8007394:	5b15      	ldrh	r5, [r2, r4]
 8007396:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800739a:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800739e:	b2ad      	uxth	r5, r5
 80073a0:	5315      	strh	r5, [r2, r4]
 80073a2:	e719      	b.n	80071d8 <USB_ActivateEndpoint+0x114>
 80073a4:	096e      	lsrs	r6, r5, #5
 80073a6:	06ed      	lsls	r5, r5, #27
 80073a8:	4d06      	ldr	r5, [pc, #24]	; (80073c4 <USB_ActivateEndpoint+0x300>)
 80073aa:	bf08      	it	eq
 80073ac:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80073b0:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 80073b4:	b2ad      	uxth	r5, r5
 80073b6:	5315      	strh	r5, [r2, r4]
 80073b8:	e70e      	b.n	80071d8 <USB_ActivateEndpoint+0x114>
      ret = HAL_ERROR;
 80073ba:	2001      	movs	r0, #1
 80073bc:	e698      	b.n	80070f0 <USB_ActivateEndpoint+0x2c>
 80073be:	bf00      	nop
 80073c0:	ffff8f8f 	.word	0xffff8f8f
 80073c4:	ffff8000 	.word	0xffff8000

080073c8 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80073c8:	7b0b      	ldrb	r3, [r1, #12]
{
 80073ca:	b410      	push	{r4}
  if (ep->doublebuffer == 0U)
 80073cc:	b9d3      	cbnz	r3, 8007404 <USB_DeactivateEndpoint+0x3c>
  {
    if (ep->is_in != 0U)
 80073ce:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073d0:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in != 0U)
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80be 	beq.w	8007554 <USB_DeactivateEndpoint+0x18c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073d8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80073dc:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80073e0:	065b      	lsls	r3, r3, #25
 80073e2:	f100 80d4 	bmi.w	800758e <USB_DeactivateEndpoint+0x1c6>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073e6:	8813      	ldrh	r3, [r2, #0]
 80073e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073f0:	041b      	lsls	r3, r3, #16
 80073f2:	0c1b      	lsrs	r3, r3, #16
 80073f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80073fc:	2000      	movs	r0, #0
 80073fe:	bc10      	pop	{r4}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007400:	8013      	strh	r3, [r2, #0]
}
 8007402:	4770      	bx	lr
    if (ep->is_in == 0U)
 8007404:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007406:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in == 0U)
 8007408:	2b00      	cmp	r3, #0
 800740a:	d151      	bne.n	80074b0 <USB_DeactivateEndpoint+0xe8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800740c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007410:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8007414:	045b      	lsls	r3, r3, #17
 8007416:	d510      	bpl.n	800743a <USB_DeactivateEndpoint+0x72>
 8007418:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800741c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	0c1b      	lsrs	r3, r3, #16
 8007428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800742c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007430:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8007434:	780a      	ldrb	r2, [r1, #0]
 8007436:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800743a:	8813      	ldrh	r3, [r2, #0]
 800743c:	065c      	lsls	r4, r3, #25
 800743e:	d50e      	bpl.n	800745e <USB_DeactivateEndpoint+0x96>
 8007440:	8813      	ldrh	r3, [r2, #0]
 8007442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	0c1b      	lsrs	r3, r3, #16
 800744e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007452:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007456:	8013      	strh	r3, [r2, #0]
 8007458:	780a      	ldrb	r2, [r1, #0]
 800745a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800745e:	f248 0480 	movw	r4, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8007462:	8813      	ldrh	r3, [r2, #0]
 8007464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746c:	041b      	lsls	r3, r3, #16
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007478:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800747a:	780a      	ldrb	r2, [r1, #0]
 800747c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007488:	041b      	lsls	r3, r3, #16
 800748a:	0c1b      	lsrs	r3, r3, #16
 800748c:	4323      	orrs	r3, r4
 800748e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007492:	780a      	ldrb	r2, [r1, #0]
 8007494:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800749c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	0c1b      	lsrs	r3, r3, #16
 80074a4:	4323      	orrs	r3, r4
 80074a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80074aa:	bc10      	pop	{r4}
 80074ac:	2000      	movs	r0, #0
 80074ae:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074b0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80074b4:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80074b8:	045b      	lsls	r3, r3, #17
 80074ba:	d510      	bpl.n	80074de <USB_DeactivateEndpoint+0x116>
 80074bc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80074c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c8:	041b      	lsls	r3, r3, #16
 80074ca:	0c1b      	lsrs	r3, r3, #16
 80074cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80074d8:	780a      	ldrb	r2, [r1, #0]
 80074da:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074de:	8813      	ldrh	r3, [r2, #0]
 80074e0:	065b      	lsls	r3, r3, #25
 80074e2:	d50e      	bpl.n	8007502 <USB_DeactivateEndpoint+0x13a>
 80074e4:	8813      	ldrh	r3, [r2, #0]
 80074e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	0c1b      	lsrs	r3, r3, #16
 80074f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074fa:	8013      	strh	r3, [r2, #0]
 80074fc:	780a      	ldrb	r2, [r1, #0]
 80074fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007502:	f248 0480 	movw	r4, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8007506:	8813      	ldrh	r3, [r2, #0]
 8007508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007510:	041b      	lsls	r3, r3, #16
 8007512:	0c1b      	lsrs	r3, r3, #16
 8007514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800751c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800751e:	780a      	ldrb	r2, [r1, #0]
 8007520:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800752c:	041b      	lsls	r3, r3, #16
 800752e:	0c1b      	lsrs	r3, r3, #16
 8007530:	4323      	orrs	r3, r4
 8007532:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007536:	780a      	ldrb	r2, [r1, #0]
 8007538:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800753c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	4323      	orrs	r3, r4
 800754a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800754e:	bc10      	pop	{r4}
 8007550:	2000      	movs	r0, #0
 8007552:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007554:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007558:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 800755c:	045b      	lsls	r3, r3, #17
 800755e:	d510      	bpl.n	8007582 <USB_DeactivateEndpoint+0x1ba>
 8007560:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756c:	041b      	lsls	r3, r3, #16
 800756e:	0c1b      	lsrs	r3, r3, #16
 8007570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007578:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800757c:	780a      	ldrb	r2, [r1, #0]
 800757e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007582:	8813      	ldrh	r3, [r2, #0]
 8007584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758c:	e730      	b.n	80073f0 <USB_DeactivateEndpoint+0x28>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800758e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075a6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80075aa:	780a      	ldrb	r2, [r1, #0]
 80075ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80075b0:	e719      	b.n	80073e6 <USB_DeactivateEndpoint+0x1e>
 80075b2:	bf00      	nop

080075b4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075b6:	784a      	ldrb	r2, [r1, #1]
{
 80075b8:	4603      	mov	r3, r0
  if (ep->is_in == 1U)
 80075ba:	2a01      	cmp	r2, #1
 80075bc:	d06d      	beq.n	800769a <USB_EPStartXfer+0xe6>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075be:	7b08      	ldrb	r0, [r1, #12]
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d03b      	beq.n	800763c <USB_EPStartXfer+0x88>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075c4:	78c8      	ldrb	r0, [r1, #3]
 80075c6:	2802      	cmp	r0, #2
 80075c8:	f000 8124 	beq.w	8007814 <USB_EPStartXfer+0x260>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075cc:	2801      	cmp	r0, #1
 80075ce:	f040 811f 	bne.w	8007810 <USB_EPStartXfer+0x25c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075d2:	6988      	ldr	r0, [r1, #24]
 80075d4:	690c      	ldr	r4, [r1, #16]
 80075d6:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 80075d8:	bf94      	ite	ls
 80075da:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 80075dc:	1b05      	subhi	r5, r0, r4
 80075de:	618d      	str	r5, [r1, #24]
 80075e0:	bf88      	it	hi
 80075e2:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075e4:	bb32      	cbnz	r2, 8007634 <USB_EPStartXfer+0x80>
 80075e6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80075ea:	780c      	ldrb	r4, [r1, #0]
 80075ec:	b292      	uxth	r2, r2
 80075ee:	f203 4504 	addw	r5, r3, #1028	; 0x404
 80075f2:	442a      	add	r2, r5
 80075f4:	0124      	lsls	r4, r4, #4
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f000 829d 	beq.w	8007b36 <USB_EPStartXfer+0x582>
 80075fc:	283e      	cmp	r0, #62	; 0x3e
 80075fe:	f200 838f 	bhi.w	8007d20 <USB_EPStartXfer+0x76c>
 8007602:	0845      	lsrs	r5, r0, #1
 8007604:	462e      	mov	r6, r5
 8007606:	f010 0701 	ands.w	r7, r0, #1
 800760a:	bf18      	it	ne
 800760c:	1c6e      	addne	r6, r5, #1
 800760e:	02b6      	lsls	r6, r6, #10
 8007610:	b2b6      	uxth	r6, r6
 8007612:	52a6      	strh	r6, [r4, r2]
 8007614:	784c      	ldrb	r4, [r1, #1]
 8007616:	2c00      	cmp	r4, #0
 8007618:	f000 8370 	beq.w	8007cfc <USB_EPStartXfer+0x748>
 800761c:	2c01      	cmp	r4, #1
 800761e:	d109      	bne.n	8007634 <USB_EPStartXfer+0x80>
 8007620:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007624:	780c      	ldrb	r4, [r1, #0]
 8007626:	b292      	uxth	r2, r2
 8007628:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800762c:	b280      	uxth	r0, r0
 800762e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8007632:	5298      	strh	r0, [r3, r2]
 8007634:	780a      	ldrb	r2, [r1, #0]
 8007636:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800763a:	e01e      	b.n	800767a <USB_EPStartXfer+0xc6>
      if (ep->xfer_len > ep->maxpacket)
 800763c:	698c      	ldr	r4, [r1, #24]
 800763e:	690a      	ldr	r2, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007640:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 8007642:	4294      	cmp	r4, r2
        ep->xfer_len -= len;
 8007644:	bf84      	itt	hi
 8007646:	1aa0      	subhi	r0, r4, r2
 8007648:	4614      	movhi	r4, r2
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800764a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800764e:	6188      	str	r0, [r1, #24]
 8007650:	b292      	uxth	r2, r2
 8007652:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8007656:	4402      	add	r2, r0
 8007658:	0128      	lsls	r0, r5, #4
 800765a:	2c00      	cmp	r4, #0
 800765c:	f000 80c7 	beq.w	80077ee <USB_EPStartXfer+0x23a>
 8007660:	2c3e      	cmp	r4, #62	; 0x3e
 8007662:	f200 811f 	bhi.w	80078a4 <USB_EPStartXfer+0x2f0>
 8007666:	0865      	lsrs	r5, r4, #1
 8007668:	07e4      	lsls	r4, r4, #31
 800766a:	bf48      	it	mi
 800766c:	3501      	addmi	r5, #1
 800766e:	02ad      	lsls	r5, r5, #10
 8007670:	b2ad      	uxth	r5, r5
 8007672:	5285      	strh	r5, [r0, r2]
 8007674:	780a      	ldrb	r2, [r1, #0]
 8007676:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800767a:	8813      	ldrh	r3, [r2, #0]
  }

  return HAL_OK;
 800767c:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800767e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	0c1b      	lsrs	r3, r3, #16
 800768a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800768e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007696:	8013      	strh	r3, [r2, #0]
}
 8007698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 800769a:	690e      	ldr	r6, [r1, #16]
 800769c:	698a      	ldr	r2, [r1, #24]
    if (ep->doublebuffer == 0U)
 800769e:	7b08      	ldrb	r0, [r1, #12]
 80076a0:	42b2      	cmp	r2, r6
 80076a2:	bf28      	it	cs
 80076a4:	4632      	movcs	r2, r6
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d071      	beq.n	800778e <USB_EPStartXfer+0x1da>
      if (ep->type == EP_TYPE_BULK)
 80076aa:	78c8      	ldrb	r0, [r1, #3]
 80076ac:	2802      	cmp	r0, #2
 80076ae:	f000 8107 	beq.w	80078c0 <USB_EPStartXfer+0x30c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 80076b2:	780d      	ldrb	r5, [r1, #0]
        ep->xfer_len_db -= len;
 80076b4:	6a08      	ldr	r0, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 80076b6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
        ep->xfer_len_db -= len;
 80076ba:	1a80      	subs	r0, r0, r2
        PCD_SET_EP_DBUF(USBx, ep->num);
 80076bc:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80076c0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80076c4:	0424      	lsls	r4, r4, #16
 80076c6:	0c24      	lsrs	r4, r4, #16
 80076c8:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80076cc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80076d0:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076d4:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 80076d6:	6208      	str	r0, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076d8:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80076dc:	f015 0f40 	tst.w	r5, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076e0:	784d      	ldrb	r5, [r1, #1]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076e2:	f000 814d 	beq.w	8007980 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	f000 81cc 	beq.w	8007a84 <USB_EPStartXfer+0x4d0>
 80076ec:	2d01      	cmp	r5, #1
 80076ee:	d108      	bne.n	8007702 <USB_EPStartXfer+0x14e>
 80076f0:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 80076f4:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 80076f8:	b2bf      	uxth	r7, r7
 80076fa:	443d      	add	r5, r7
 80076fc:	0124      	lsls	r4, r4, #4
 80076fe:	b297      	uxth	r7, r2
 8007700:	532f      	strh	r7, [r5, r4]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007702:	b297      	uxth	r7, r2
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007704:	894d      	ldrh	r5, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007706:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007708:	f503 6480 	add.w	r4, r3, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800770c:	087f      	lsrs	r7, r7, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800770e:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007712:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  for (i = n; i != 0U; i--)
 8007716:	d008      	beq.n	800772a <USB_EPStartXfer+0x176>
              ep->xfer_len_db = 0U;
 8007718:	4675      	mov	r5, lr
 800771a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  {
    temp1 = *pBuf;
 800771e:	f835 cb02 	ldrh.w	ip, [r5], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8007722:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 8007726:	42bc      	cmp	r4, r7
 8007728:	d1f9      	bne.n	800771e <USB_EPStartXfer+0x16a>
          if (ep->xfer_len_db > ep->maxpacket)
 800772a:	4286      	cmp	r6, r0
            ep->xfer_len_db -= len;
 800772c:	bf36      	itet	cc
 800772e:	1a85      	subcc	r5, r0, r2
            ep->xfer_len_db = 0U;
 8007730:	2500      	movcs	r5, #0
 8007732:	4610      	movcc	r0, r2
          ep->xfer_buff += len;
 8007734:	eb0e 0402 	add.w	r4, lr, r2
 8007738:	614c      	str	r4, [r1, #20]
            ep->xfer_len_db -= len;
 800773a:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800773c:	2800      	cmp	r0, #0
 800773e:	d043      	beq.n	80077c8 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007740:	784a      	ldrb	r2, [r1, #1]
 8007742:	2a00      	cmp	r2, #0
 8007744:	f040 8297 	bne.w	8007c76 <USB_EPStartXfer+0x6c2>
 8007748:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800774c:	780e      	ldrb	r6, [r1, #0]
 800774e:	b292      	uxth	r2, r2
 8007750:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007754:	283e      	cmp	r0, #62	; 0x3e
 8007756:	442a      	add	r2, r5
 8007758:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800775c:	f200 8392 	bhi.w	8007e84 <USB_EPStartXfer+0x8d0>
 8007760:	0845      	lsrs	r5, r0, #1
 8007762:	07c7      	lsls	r7, r0, #31
 8007764:	bf48      	it	mi
 8007766:	3501      	addmi	r5, #1
 8007768:	02ad      	lsls	r5, r5, #10
 800776a:	b2ad      	uxth	r5, r5
 800776c:	52b5      	strh	r5, [r6, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800776e:	890e      	ldrh	r6, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007770:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007772:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007776:	0845      	lsrs	r5, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007778:	eb02 0246 	add.w	r2, r2, r6, lsl #1
  for (i = n; i != 0U; i--)
 800777c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
    temp1 = *pBuf;
 8007780:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 8007784:	42a5      	cmp	r5, r4
    *pdwVal = (uint16_t)temp2;
 8007786:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 800778a:	d1f9      	bne.n	8007780 <USB_EPStartXfer+0x1cc>
 800778c:	e01c      	b.n	80077c8 <USB_EPStartXfer+0x214>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800778e:	b295      	uxth	r5, r2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007790:	88cc      	ldrh	r4, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007792:	3501      	adds	r5, #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007794:	b296      	uxth	r6, r2
 8007796:	694a      	ldr	r2, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007798:	f503 6080 	add.w	r0, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800779c:	086d      	lsrs	r5, r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800779e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
  for (i = n; i != 0U; i--)
 80077a2:	bf18      	it	ne
 80077a4:	eb02 0545 	addne.w	r5, r2, r5, lsl #1
 80077a8:	d005      	beq.n	80077b6 <USB_EPStartXfer+0x202>
    temp1 = *pBuf;
 80077aa:	f832 4b02 	ldrh.w	r4, [r2], #2
  for (i = n; i != 0U; i--)
 80077ae:	42aa      	cmp	r2, r5
    *pdwVal = (uint16_t)temp2;
 80077b0:	f820 4b04 	strh.w	r4, [r0], #4
  for (i = n; i != 0U; i--)
 80077b4:	d1f9      	bne.n	80077aa <USB_EPStartXfer+0x1f6>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077b6:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 80077ba:	780c      	ldrb	r4, [r1, #0]
 80077bc:	b282      	uxth	r2, r0
 80077be:	f203 4004 	addw	r0, r3, #1028	; 0x404
 80077c2:	4410      	add	r0, r2
 80077c4:	0124      	lsls	r4, r4, #4
 80077c6:	5226      	strh	r6, [r4, r0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077c8:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 80077ca:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077cc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80077d0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80077d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d8:	0412      	lsls	r2, r2, #16
 80077da:	0c12      	lsrs	r2, r2, #16
 80077dc:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 80077e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077e8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 80077ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80077ee:	5a84      	ldrh	r4, [r0, r2]
 80077f0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80077f4:	0424      	lsls	r4, r4, #16
 80077f6:	0c24      	lsrs	r4, r4, #16
 80077f8:	5284      	strh	r4, [r0, r2]
 80077fa:	5a84      	ldrh	r4, [r0, r2]
 80077fc:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007800:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007804:	b2a4      	uxth	r4, r4
 8007806:	5284      	strh	r4, [r0, r2]
 8007808:	780a      	ldrb	r2, [r1, #0]
 800780a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800780e:	e734      	b.n	800767a <USB_EPStartXfer+0xc6>
        return HAL_ERROR;
 8007810:	2001      	movs	r0, #1
}
 8007812:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007814:	bb12      	cbnz	r2, 800785c <USB_EPStartXfer+0x2a8>
 8007816:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800781a:	7808      	ldrb	r0, [r1, #0]
 800781c:	690c      	ldr	r4, [r1, #16]
 800781e:	b292      	uxth	r2, r2
 8007820:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007824:	442a      	add	r2, r5
 8007826:	0100      	lsls	r0, r0, #4
 8007828:	2c00      	cmp	r4, #0
 800782a:	f000 8146 	beq.w	8007aba <USB_EPStartXfer+0x506>
 800782e:	2c3e      	cmp	r4, #62	; 0x3e
 8007830:	f200 81ac 	bhi.w	8007b8c <USB_EPStartXfer+0x5d8>
 8007834:	0865      	lsrs	r5, r4, #1
 8007836:	07e6      	lsls	r6, r4, #31
 8007838:	bf48      	it	mi
 800783a:	3501      	addmi	r5, #1
 800783c:	02ad      	lsls	r5, r5, #10
 800783e:	b2ad      	uxth	r5, r5
 8007840:	5285      	strh	r5, [r0, r2]
 8007842:	784a      	ldrb	r2, [r1, #1]
 8007844:	2a00      	cmp	r2, #0
 8007846:	f040 81af 	bne.w	8007ba8 <USB_EPStartXfer+0x5f4>
 800784a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800784e:	7808      	ldrb	r0, [r1, #0]
 8007850:	b294      	uxth	r4, r2
 8007852:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007856:	4422      	add	r2, r4
 8007858:	0100      	lsls	r0, r0, #4
 800785a:	5285      	strh	r5, [r0, r2]
        if (ep->xfer_count != 0U)
 800785c:	69ca      	ldr	r2, [r1, #28]
 800785e:	2a00      	cmp	r2, #0
 8007860:	f43f aee8 	beq.w	8007634 <USB_EPStartXfer+0x80>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007864:	f244 0440 	movw	r4, #16448	; 0x4040
 8007868:	7808      	ldrb	r0, [r1, #0]
 800786a:	f833 5020 	ldrh.w	r5, [r3, r0, lsl #2]
 800786e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007872:	ea04 0605 	and.w	r6, r4, r5
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007876:	43ac      	bics	r4, r5
 8007878:	d002      	beq.n	8007880 <USB_EPStartXfer+0x2cc>
 800787a:	2e00      	cmp	r6, #0
 800787c:	f47f aefd 	bne.w	800767a <USB_EPStartXfer+0xc6>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007880:	f833 2020 	ldrh.w	r2, [r3, r0, lsl #2]
 8007884:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007888:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800788c:	0412      	lsls	r2, r2, #16
 800788e:	0c12      	lsrs	r2, r2, #16
 8007890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007894:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007898:	f823 2020 	strh.w	r2, [r3, r0, lsl #2]
 800789c:	780a      	ldrb	r2, [r1, #0]
 800789e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80078a2:	e6ea      	b.n	800767a <USB_EPStartXfer+0xc6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80078a4:	0965      	lsrs	r5, r4, #5
 80078a6:	06e7      	lsls	r7, r4, #27
 80078a8:	4cb7      	ldr	r4, [pc, #732]	; (8007b88 <USB_EPStartXfer+0x5d4>)
 80078aa:	bf08      	it	eq
 80078ac:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80078b0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 80078b4:	b2a4      	uxth	r4, r4
 80078b6:	5284      	strh	r4, [r0, r2]
 80078b8:	780a      	ldrb	r2, [r1, #0]
 80078ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80078be:	e6dc      	b.n	800767a <USB_EPStartXfer+0xc6>
        if (ep->xfer_len_db > ep->maxpacket)
 80078c0:	6a08      	ldr	r0, [r1, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 80078c2:	780d      	ldrb	r5, [r1, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 80078c4:	4286      	cmp	r6, r0
 80078c6:	f080 80b0 	bcs.w	8007a2a <USB_EPStartXfer+0x476>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80078ca:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
          ep->xfer_len_db -= len;
 80078ce:	1a80      	subs	r0, r0, r2
          PCD_SET_EP_DBUF(USBx, ep->num);
 80078d0:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80078d4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80078d8:	0424      	lsls	r4, r4, #16
 80078da:	0c24      	lsrs	r4, r4, #16
 80078dc:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80078e0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80078e4:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078e8:	780c      	ldrb	r4, [r1, #0]
          ep->xfer_len_db -= len;
 80078ea:	6208      	str	r0, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078ec:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80078f0:	f015 0f40 	tst.w	r5, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078f4:	784d      	ldrb	r5, [r1, #1]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078f6:	f000 8165 	beq.w	8007bc4 <USB_EPStartXfer+0x610>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078fa:	2d00      	cmp	r5, #0
 80078fc:	f040 8253 	bne.w	8007da6 <USB_EPStartXfer+0x7f2>
 8007900:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8007904:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 8007908:	b2bf      	uxth	r7, r7
 800790a:	0124      	lsls	r4, r4, #4
 800790c:	443d      	add	r5, r7
 800790e:	2a00      	cmp	r2, #0
 8007910:	f040 82ff 	bne.w	8007f12 <USB_EPStartXfer+0x95e>
 8007914:	5b2f      	ldrh	r7, [r5, r4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007916:	f8d1 e014 	ldr.w	lr, [r1, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800791a:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 800791e:	043f      	lsls	r7, r7, #16
 8007920:	0c3f      	lsrs	r7, r7, #16
 8007922:	532f      	strh	r7, [r5, r4]
 8007924:	5b2f      	ldrh	r7, [r5, r4]
 8007926:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 800792a:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 800792e:	b2bf      	uxth	r7, r7
 8007930:	532f      	strh	r7, [r5, r4]
            if (ep->xfer_len_db > ep->maxpacket)
 8007932:	4286      	cmp	r6, r0
              ep->xfer_len_db = 0U;
 8007934:	bf2c      	ite	cs
 8007936:	2500      	movcs	r5, #0
              ep->xfer_len_db -= len;
 8007938:	1a85      	subcc	r5, r0, r2
            ep->xfer_buff += len;
 800793a:	eb0e 0402 	add.w	r4, lr, r2
 800793e:	bf38      	it	cc
 8007940:	4610      	movcc	r0, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007942:	784a      	ldrb	r2, [r1, #1]
            ep->xfer_buff += len;
 8007944:	614c      	str	r4, [r1, #20]
              ep->xfer_len_db -= len;
 8007946:	620d      	str	r5, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007948:	2a00      	cmp	r2, #0
 800794a:	f040 820d 	bne.w	8007d68 <USB_EPStartXfer+0x7b4>
 800794e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8007952:	780a      	ldrb	r2, [r1, #0]
 8007954:	b2ad      	uxth	r5, r5
 8007956:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800795a:	4435      	add	r5, r6
 800795c:	0112      	lsls	r2, r2, #4
 800795e:	2800      	cmp	r0, #0
 8007960:	f040 82eb 	bne.w	8007f3a <USB_EPStartXfer+0x986>
 8007964:	5b50      	ldrh	r0, [r2, r5]
 8007966:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800796a:	0400      	lsls	r0, r0, #16
 800796c:	0c00      	lsrs	r0, r0, #16
 800796e:	5350      	strh	r0, [r2, r5]
 8007970:	5b50      	ldrh	r0, [r2, r5]
 8007972:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8007976:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800797a:	b280      	uxth	r0, r0
 800797c:	5350      	strh	r0, [r2, r5]
  for (i = n; i != 0U; i--)
 800797e:	e723      	b.n	80077c8 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007980:	2d00      	cmp	r5, #0
 8007982:	f000 80be 	beq.w	8007b02 <USB_EPStartXfer+0x54e>
 8007986:	2d01      	cmp	r5, #1
 8007988:	d108      	bne.n	800799c <USB_EPStartXfer+0x3e8>
 800798a:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800798e:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007992:	b2bf      	uxth	r7, r7
 8007994:	443d      	add	r5, r7
 8007996:	0124      	lsls	r4, r4, #4
 8007998:	b297      	uxth	r7, r2
 800799a:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800799c:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800799e:	b297      	uxth	r7, r2
 80079a0:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079a2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 80079a6:	087f      	lsrs	r7, r7, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079a8:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80079b0:	d008      	beq.n	80079c4 <USB_EPStartXfer+0x410>
            ep->xfer_len_db = 0U;
 80079b2:	4674      	mov	r4, lr
 80079b4:	eb0e 0747 	add.w	r7, lr, r7, lsl #1
    temp1 = *pBuf;
 80079b8:	f834 cb02 	ldrh.w	ip, [r4], #2
  for (i = n; i != 0U; i--)
 80079bc:	42bc      	cmp	r4, r7
    *pdwVal = (uint16_t)temp2;
 80079be:	f825 cb04 	strh.w	ip, [r5], #4
  for (i = n; i != 0U; i--)
 80079c2:	d1f9      	bne.n	80079b8 <USB_EPStartXfer+0x404>
          if (ep->xfer_len_db > ep->maxpacket)
 80079c4:	4286      	cmp	r6, r0
            ep->xfer_len_db -= len;
 80079c6:	bf36      	itet	cc
 80079c8:	1a84      	subcc	r4, r0, r2
            ep->xfer_len_db = 0U;
 80079ca:	2400      	movcs	r4, #0
 80079cc:	4610      	movcc	r0, r2
          ep->xfer_buff += len;
 80079ce:	eb0e 0502 	add.w	r5, lr, r2
 80079d2:	614d      	str	r5, [r1, #20]
            ep->xfer_len_db -= len;
 80079d4:	620c      	str	r4, [r1, #32]
          if (len > 0U)
 80079d6:	2800      	cmp	r0, #0
 80079d8:	f43f aef6 	beq.w	80077c8 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079dc:	784a      	ldrb	r2, [r1, #1]
 80079de:	2a00      	cmp	r2, #0
 80079e0:	f040 8175 	bne.w	8007cce <USB_EPStartXfer+0x71a>
 80079e4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80079e8:	780c      	ldrb	r4, [r1, #0]
 80079ea:	b292      	uxth	r2, r2
 80079ec:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80079f0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80079f4:	283e      	cmp	r0, #62	; 0x3e
 80079f6:	441a      	add	r2, r3
 80079f8:	f200 824f 	bhi.w	8007e9a <USB_EPStartXfer+0x8e6>
 80079fc:	0844      	lsrs	r4, r0, #1
 80079fe:	07c6      	lsls	r6, r0, #31
 8007a00:	bf48      	it	mi
 8007a02:	3401      	addmi	r4, #1
 8007a04:	02a4      	lsls	r4, r4, #10
 8007a06:	b2a4      	uxth	r4, r4
 8007a08:	8014      	strh	r4, [r2, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a0a:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a0c:	1c42      	adds	r2, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a0e:	eb03 0044 	add.w	r0, r3, r4, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a12:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a14:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007a18:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    temp1 = *pBuf;
 8007a1c:	f835 4b02 	ldrh.w	r4, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8007a20:	f820 4b04 	strh.w	r4, [r0], #4
  for (i = n; i != 0U; i--)
 8007a24:	4282      	cmp	r2, r0
 8007a26:	d1f9      	bne.n	8007a1c <USB_EPStartXfer+0x468>
 8007a28:	e6ce      	b.n	80077c8 <USB_EPStartXfer+0x214>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a2a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a2e:	f203 4404 	addw	r4, r3, #1028	; 0x404
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a32:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8007a36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a3a:	0412      	lsls	r2, r2, #16
 8007a3c:	0c12      	lsrs	r2, r2, #16
 8007a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a46:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a4a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007a4e:	b287      	uxth	r7, r0
 8007a50:	b296      	uxth	r6, r2
 8007a52:	4622      	mov	r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a54:	4638      	mov	r0, r7
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a56:	780d      	ldrb	r5, [r1, #0]
 8007a58:	4432      	add	r2, r6
 8007a5a:	012c      	lsls	r4, r5, #4
 8007a5c:	52a7      	strh	r7, [r4, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a5e:	890c      	ldrh	r4, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a60:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a62:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007a66:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a68:	eb02 0244 	add.w	r2, r2, r4, lsl #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a6c:	694c      	ldr	r4, [r1, #20]
  for (i = n; i != 0U; i--)
 8007a6e:	f43f aeab 	beq.w	80077c8 <USB_EPStartXfer+0x214>
 8007a72:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    temp1 = *pBuf;
 8007a76:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8007a7a:	f822 5b04 	strh.w	r5, [r2], #4
  for (i = n; i != 0U; i--)
 8007a7e:	4290      	cmp	r0, r2
 8007a80:	d1f9      	bne.n	8007a76 <USB_EPStartXfer+0x4c2>
 8007a82:	e6a1      	b.n	80077c8 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a84:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 8007a88:	f203 470c 	addw	r7, r3, #1036	; 0x40c
 8007a8c:	fa1f fc8c 	uxth.w	ip, ip
 8007a90:	0125      	lsls	r5, r4, #4
 8007a92:	4467      	add	r7, ip
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	f040 8105 	bne.w	8007ca4 <USB_EPStartXfer+0x6f0>
 8007a9a:	5b7c      	ldrh	r4, [r7, r5]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a9c:	f8d1 e014 	ldr.w	lr, [r1, #20]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007aa0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8007aa4:	0424      	lsls	r4, r4, #16
 8007aa6:	0c24      	lsrs	r4, r4, #16
 8007aa8:	537c      	strh	r4, [r7, r5]
 8007aaa:	5b7c      	ldrh	r4, [r7, r5]
 8007aac:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8007ab0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007ab4:	b2a4      	uxth	r4, r4
 8007ab6:	537c      	strh	r4, [r7, r5]
  for (i = n; i != 0U; i--)
 8007ab8:	e637      	b.n	800772a <USB_EPStartXfer+0x176>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007aba:	5a85      	ldrh	r5, [r0, r2]
 8007abc:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8007ac0:	042d      	lsls	r5, r5, #16
 8007ac2:	0c2d      	lsrs	r5, r5, #16
 8007ac4:	5285      	strh	r5, [r0, r2]
 8007ac6:	5a85      	ldrh	r5, [r0, r2]
 8007ac8:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8007acc:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8007ad0:	b2ad      	uxth	r5, r5
 8007ad2:	5285      	strh	r5, [r0, r2]
 8007ad4:	784a      	ldrb	r2, [r1, #1]
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	d166      	bne.n	8007ba8 <USB_EPStartXfer+0x5f4>
 8007ada:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8007ade:	7808      	ldrb	r0, [r1, #0]
 8007ae0:	b2a2      	uxth	r2, r4
 8007ae2:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8007ae6:	4414      	add	r4, r2
 8007ae8:	0100      	lsls	r0, r0, #4
 8007aea:	5a22      	ldrh	r2, [r4, r0]
 8007aec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007af0:	0412      	lsls	r2, r2, #16
 8007af2:	0c12      	lsrs	r2, r2, #16
 8007af4:	5222      	strh	r2, [r4, r0]
 8007af6:	5a22      	ldrh	r2, [r4, r0]
 8007af8:	b292      	uxth	r2, r2
 8007afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007afe:	5222      	strh	r2, [r4, r0]
 8007b00:	e6ac      	b.n	800785c <USB_EPStartXfer+0x2a8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b02:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8007b06:	f203 4704 	addw	r7, r3, #1028	; 0x404
 8007b0a:	b2ad      	uxth	r5, r5
 8007b0c:	0124      	lsls	r4, r4, #4
 8007b0e:	442f      	add	r7, r5
 8007b10:	2a00      	cmp	r2, #0
 8007b12:	f040 809b 	bne.w	8007c4c <USB_EPStartXfer+0x698>
 8007b16:	5b3d      	ldrh	r5, [r7, r4]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b18:	f8d1 e014 	ldr.w	lr, [r1, #20]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b1c:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8007b20:	042d      	lsls	r5, r5, #16
 8007b22:	0c2d      	lsrs	r5, r5, #16
 8007b24:	533d      	strh	r5, [r7, r4]
 8007b26:	5b3d      	ldrh	r5, [r7, r4]
 8007b28:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8007b2c:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8007b30:	b2ad      	uxth	r5, r5
 8007b32:	533d      	strh	r5, [r7, r4]
  for (i = n; i != 0U; i--)
 8007b34:	e746      	b.n	80079c4 <USB_EPStartXfer+0x410>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b36:	5aa5      	ldrh	r5, [r4, r2]
 8007b38:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8007b3c:	042d      	lsls	r5, r5, #16
 8007b3e:	0c2d      	lsrs	r5, r5, #16
 8007b40:	52a5      	strh	r5, [r4, r2]
 8007b42:	5aa5      	ldrh	r5, [r4, r2]
 8007b44:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8007b48:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8007b4c:	b2ad      	uxth	r5, r5
 8007b4e:	52a5      	strh	r5, [r4, r2]
 8007b50:	784c      	ldrb	r4, [r1, #1]
 8007b52:	2c00      	cmp	r4, #0
 8007b54:	f47f ad62 	bne.w	800761c <USB_EPStartXfer+0x68>
 8007b58:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8007b5c:	7808      	ldrb	r0, [r1, #0]
 8007b5e:	b2a2      	uxth	r2, r4
 8007b60:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8007b64:	4414      	add	r4, r2
 8007b66:	0100      	lsls	r0, r0, #4
 8007b68:	5a22      	ldrh	r2, [r4, r0]
 8007b6a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007b6e:	0412      	lsls	r2, r2, #16
 8007b70:	0c12      	lsrs	r2, r2, #16
 8007b72:	5222      	strh	r2, [r4, r0]
 8007b74:	5a22      	ldrh	r2, [r4, r0]
 8007b76:	b292      	uxth	r2, r2
 8007b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b7c:	5222      	strh	r2, [r4, r0]
 8007b7e:	780a      	ldrb	r2, [r1, #0]
 8007b80:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007b84:	e579      	b.n	800767a <USB_EPStartXfer+0xc6>
 8007b86:	bf00      	nop
 8007b88:	ffff8000 	.word	0xffff8000
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b8c:	0966      	lsrs	r6, r4, #5
 8007b8e:	06e5      	lsls	r5, r4, #27
 8007b90:	4dbb      	ldr	r5, [pc, #748]	; (8007e80 <USB_EPStartXfer+0x8cc>)
 8007b92:	bf08      	it	eq
 8007b94:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007b98:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8007b9c:	b2ad      	uxth	r5, r5
 8007b9e:	5285      	strh	r5, [r0, r2]
 8007ba0:	784a      	ldrb	r2, [r1, #1]
 8007ba2:	2a00      	cmp	r2, #0
 8007ba4:	f43f ae51 	beq.w	800784a <USB_EPStartXfer+0x296>
 8007ba8:	2a01      	cmp	r2, #1
 8007baa:	f47f ae57 	bne.w	800785c <USB_EPStartXfer+0x2a8>
 8007bae:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007bb2:	7808      	ldrb	r0, [r1, #0]
 8007bb4:	b295      	uxth	r5, r2
 8007bb6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007bba:	b2a4      	uxth	r4, r4
 8007bbc:	442a      	add	r2, r5
 8007bbe:	0100      	lsls	r0, r0, #4
 8007bc0:	5284      	strh	r4, [r0, r2]
 8007bc2:	e64b      	b.n	800785c <USB_EPStartXfer+0x2a8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bc4:	2d00      	cmp	r5, #0
 8007bc6:	f040 812e 	bne.w	8007e26 <USB_EPStartXfer+0x872>
 8007bca:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8007bce:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007bd2:	b2bf      	uxth	r7, r7
 8007bd4:	0124      	lsls	r4, r4, #4
 8007bd6:	443d      	add	r5, r7
 8007bd8:	2a00      	cmp	r2, #0
 8007bda:	f040 8186 	bne.w	8007eea <USB_EPStartXfer+0x936>
 8007bde:	5b2f      	ldrh	r7, [r5, r4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007be0:	f8d1 e014 	ldr.w	lr, [r1, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007be4:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8007be8:	043f      	lsls	r7, r7, #16
 8007bea:	0c3f      	lsrs	r7, r7, #16
 8007bec:	532f      	strh	r7, [r5, r4]
 8007bee:	5b2f      	ldrh	r7, [r5, r4]
 8007bf0:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8007bf4:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8007bf8:	b2bf      	uxth	r7, r7
 8007bfa:	532f      	strh	r7, [r5, r4]
            if (ep->xfer_len_db > ep->maxpacket)
 8007bfc:	4286      	cmp	r6, r0
              ep->xfer_len_db = 0U;
 8007bfe:	bf2c      	ite	cs
 8007c00:	2500      	movcs	r5, #0
              ep->xfer_len_db -= len;
 8007c02:	1a85      	subcc	r5, r0, r2
            ep->xfer_buff += len;
 8007c04:	eb0e 0402 	add.w	r4, lr, r2
 8007c08:	bf38      	it	cc
 8007c0a:	4610      	movcc	r0, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c0c:	784a      	ldrb	r2, [r1, #1]
            ep->xfer_buff += len;
 8007c0e:	614c      	str	r4, [r1, #20]
              ep->xfer_len_db -= len;
 8007c10:	620d      	str	r5, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c12:	2a00      	cmp	r2, #0
 8007c14:	f040 80e8 	bne.w	8007de8 <USB_EPStartXfer+0x834>
 8007c18:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007c1c:	780d      	ldrb	r5, [r1, #0]
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007c24:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8007c28:	189d      	adds	r5, r3, r2
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f040 814c 	bne.w	8007ec8 <USB_EPStartXfer+0x914>
 8007c30:	5a98      	ldrh	r0, [r3, r2]
 8007c32:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8007c36:	0400      	lsls	r0, r0, #16
 8007c38:	0c00      	lsrs	r0, r0, #16
 8007c3a:	5298      	strh	r0, [r3, r2]
 8007c3c:	5a98      	ldrh	r0, [r3, r2]
 8007c3e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8007c42:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8007c46:	b280      	uxth	r0, r0
 8007c48:	5298      	strh	r0, [r3, r2]
  for (i = n; i != 0U; i--)
 8007c4a:	e5bd      	b.n	80077c8 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c4c:	2a3e      	cmp	r2, #62	; 0x3e
 8007c4e:	f200 810b 	bhi.w	8007e68 <USB_EPStartXfer+0x8b4>
 8007c52:	0855      	lsrs	r5, r2, #1
 8007c54:	f012 0f01 	tst.w	r2, #1
 8007c58:	bf18      	it	ne
 8007c5a:	3501      	addne	r5, #1
 8007c5c:	02ad      	lsls	r5, r5, #10
 8007c5e:	b2ad      	uxth	r5, r5
 8007c60:	533d      	strh	r5, [r7, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c62:	890c      	ldrh	r4, [r1, #8]
 8007c64:	f503 6580 	add.w	r5, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c68:	1c57      	adds	r7, r2, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c6a:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c6e:	eb05 0544 	add.w	r5, r5, r4, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c72:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8007c74:	e69d      	b.n	80079b2 <USB_EPStartXfer+0x3fe>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c76:	2a01      	cmp	r2, #1
 8007c78:	d109      	bne.n	8007c8e <USB_EPStartXfer+0x6da>
 8007c7a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007c7e:	780d      	ldrb	r5, [r1, #0]
 8007c80:	b296      	uxth	r6, r2
 8007c82:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007c86:	4432      	add	r2, r6
 8007c88:	012d      	lsls	r5, r5, #4
 8007c8a:	b286      	uxth	r6, r0
 8007c8c:	52ae      	strh	r6, [r5, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c8e:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c90:	b280      	uxth	r0, r0
 8007c92:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c94:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8007c98:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8007c9c:	0845      	lsrs	r5, r0, #1
 8007c9e:	f47f ad6d 	bne.w	800777c <USB_EPStartXfer+0x1c8>
 8007ca2:	e591      	b.n	80077c8 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ca4:	2a3e      	cmp	r2, #62	; 0x3e
 8007ca6:	f200 8103 	bhi.w	8007eb0 <USB_EPStartXfer+0x8fc>
 8007caa:	0854      	lsrs	r4, r2, #1
 8007cac:	f012 0f01 	tst.w	r2, #1
 8007cb0:	bf18      	it	ne
 8007cb2:	3401      	addne	r4, #1
 8007cb4:	02a4      	lsls	r4, r4, #10
 8007cb6:	b2a4      	uxth	r4, r4
 8007cb8:	537c      	strh	r4, [r7, r5]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cba:	894d      	ldrh	r5, [r1, #10]
 8007cbc:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cc0:	1c57      	adds	r7, r2, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cc2:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cc6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cca:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8007ccc:	e524      	b.n	8007718 <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cce:	2a01      	cmp	r2, #1
 8007cd0:	d109      	bne.n	8007ce6 <USB_EPStartXfer+0x732>
 8007cd2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007cd6:	780c      	ldrb	r4, [r1, #0]
 8007cd8:	b292      	uxth	r2, r2
 8007cda:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007cde:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8007ce2:	b284      	uxth	r4, r0
 8007ce4:	529c      	strh	r4, [r3, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ce6:	b282      	uxth	r2, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ce8:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cea:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cec:	eb03 0044 	add.w	r0, r3, r4, lsl #1
  for (i = n; i != 0U; i--)
 8007cf0:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cf2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007cf6:	f47f ae8f 	bne.w	8007a18 <USB_EPStartXfer+0x464>
 8007cfa:	e565      	b.n	80077c8 <USB_EPStartXfer+0x214>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007cfc:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 8007d00:	780c      	ldrb	r4, [r1, #0]
 8007d02:	b286      	uxth	r6, r0
 8007d04:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8007d08:	462a      	mov	r2, r5
 8007d0a:	4430      	add	r0, r6
 8007d0c:	0124      	lsls	r4, r4, #4
 8007d0e:	b107      	cbz	r7, 8007d12 <USB_EPStartXfer+0x75e>
 8007d10:	3201      	adds	r2, #1
 8007d12:	0292      	lsls	r2, r2, #10
 8007d14:	b292      	uxth	r2, r2
 8007d16:	5222      	strh	r2, [r4, r0]
 8007d18:	780a      	ldrb	r2, [r1, #0]
 8007d1a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007d1e:	e4ac      	b.n	800767a <USB_EPStartXfer+0xc6>
 8007d20:	0947      	lsrs	r7, r0, #5
 8007d22:	46bc      	mov	ip, r7
 8007d24:	4d56      	ldr	r5, [pc, #344]	; (8007e80 <USB_EPStartXfer+0x8cc>)
 8007d26:	f010 061f 	ands.w	r6, r0, #31
 8007d2a:	bf08      	it	eq
 8007d2c:	f107 3cff 	addeq.w	ip, r7, #4294967295
 8007d30:	ea45 258c 	orr.w	r5, r5, ip, lsl #10
 8007d34:	b2ad      	uxth	r5, r5
 8007d36:	52a5      	strh	r5, [r4, r2]
 8007d38:	784c      	ldrb	r4, [r1, #1]
 8007d3a:	2c00      	cmp	r4, #0
 8007d3c:	f47f ac6e 	bne.w	800761c <USB_EPStartXfer+0x68>
 8007d40:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 8007d44:	780d      	ldrb	r5, [r1, #0]
 8007d46:	b284      	uxth	r4, r0
 8007d48:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8007d4c:	463a      	mov	r2, r7
 8007d4e:	4420      	add	r0, r4
 8007d50:	012d      	lsls	r5, r5, #4
 8007d52:	b906      	cbnz	r6, 8007d56 <USB_EPStartXfer+0x7a2>
 8007d54:	3a01      	subs	r2, #1
 8007d56:	4c4a      	ldr	r4, [pc, #296]	; (8007e80 <USB_EPStartXfer+0x8cc>)
 8007d58:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
 8007d5c:	b292      	uxth	r2, r2
 8007d5e:	522a      	strh	r2, [r5, r0]
 8007d60:	780a      	ldrb	r2, [r1, #0]
 8007d62:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007d66:	e488      	b.n	800767a <USB_EPStartXfer+0xc6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d68:	2a01      	cmp	r2, #1
 8007d6a:	d109      	bne.n	8007d80 <USB_EPStartXfer+0x7cc>
 8007d6c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007d70:	780d      	ldrb	r5, [r1, #0]
 8007d72:	b296      	uxth	r6, r2
 8007d74:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007d78:	4432      	add	r2, r6
 8007d7a:	012d      	lsls	r5, r5, #4
 8007d7c:	b286      	uxth	r6, r0
 8007d7e:	52ae      	strh	r6, [r5, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d80:	b280      	uxth	r0, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d82:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d84:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d86:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007d8a:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d8c:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8007d90:	f43f ad1a 	beq.w	80077c8 <USB_EPStartXfer+0x214>
 8007d94:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    temp1 = *pBuf;
 8007d98:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 8007d9c:	42a5      	cmp	r5, r4
    *pdwVal = (uint16_t)temp2;
 8007d9e:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8007da2:	d1f9      	bne.n	8007d98 <USB_EPStartXfer+0x7e4>
 8007da4:	e510      	b.n	80077c8 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007da6:	2d01      	cmp	r5, #1
 8007da8:	d108      	bne.n	8007dbc <USB_EPStartXfer+0x808>
 8007daa:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8007dae:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 8007db2:	b2bf      	uxth	r7, r7
 8007db4:	443d      	add	r5, r7
 8007db6:	0124      	lsls	r4, r4, #4
 8007db8:	b297      	uxth	r7, r2
 8007dba:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dbc:	894f      	ldrh	r7, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dbe:	b295      	uxth	r5, r2
 8007dc0:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dc2:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8007dc6:	eb04 0447 	add.w	r4, r4, r7, lsl #1
  for (i = n; i != 0U; i--)
 8007dca:	086f      	lsrs	r7, r5, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dcc:	f8d1 e014 	ldr.w	lr, [r1, #20]
  for (i = n; i != 0U; i--)
 8007dd0:	f43f adaf 	beq.w	8007932 <USB_EPStartXfer+0x37e>
{
 8007dd4:	4675      	mov	r5, lr
 8007dd6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    temp1 = *pBuf;
 8007dda:	f835 cb02 	ldrh.w	ip, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8007dde:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 8007de2:	42bc      	cmp	r4, r7
 8007de4:	d1f9      	bne.n	8007dda <USB_EPStartXfer+0x826>
 8007de6:	e5a4      	b.n	8007932 <USB_EPStartXfer+0x37e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007de8:	2a01      	cmp	r2, #1
 8007dea:	d109      	bne.n	8007e00 <USB_EPStartXfer+0x84c>
 8007dec:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8007df0:	780d      	ldrb	r5, [r1, #0]
 8007df2:	b292      	uxth	r2, r2
 8007df4:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007df8:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8007dfc:	b285      	uxth	r5, r0
 8007dfe:	529d      	strh	r5, [r3, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e00:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e02:	b280      	uxth	r0, r0
 8007e04:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e06:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  for (i = n; i != 0U; i--)
 8007e0a:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007e10:	f43f acda 	beq.w	80077c8 <USB_EPStartXfer+0x214>
 8007e14:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    temp1 = *pBuf;
 8007e18:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8007e1c:	f822 5b04 	strh.w	r5, [r2], #4
  for (i = n; i != 0U; i--)
 8007e20:	4290      	cmp	r0, r2
 8007e22:	d1f9      	bne.n	8007e18 <USB_EPStartXfer+0x864>
 8007e24:	e4d0      	b.n	80077c8 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e26:	2d01      	cmp	r5, #1
 8007e28:	d108      	bne.n	8007e3c <USB_EPStartXfer+0x888>
 8007e2a:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8007e2e:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8007e32:	b2bf      	uxth	r7, r7
 8007e34:	443d      	add	r5, r7
 8007e36:	0124      	lsls	r4, r4, #4
 8007e38:	b297      	uxth	r7, r2
 8007e3a:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e3c:	890c      	ldrh	r4, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e3e:	b295      	uxth	r5, r2
 8007e40:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e42:	eb03 0444 	add.w	r4, r3, r4, lsl #1
  for (i = n; i != 0U; i--)
 8007e46:	086f      	lsrs	r7, r5, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e48:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e4c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007e50:	f43f aed4 	beq.w	8007bfc <USB_EPStartXfer+0x648>
              ep->xfer_len_db = 0U;
 8007e54:	4675      	mov	r5, lr
 8007e56:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    temp1 = *pBuf;
 8007e5a:	f835 cb02 	ldrh.w	ip, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8007e5e:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 8007e62:	42a7      	cmp	r7, r4
 8007e64:	d1f9      	bne.n	8007e5a <USB_EPStartXfer+0x8a6>
 8007e66:	e6c9      	b.n	8007bfc <USB_EPStartXfer+0x648>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e68:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8007e6c:	06d5      	lsls	r5, r2, #27
 8007e6e:	4d04      	ldr	r5, [pc, #16]	; (8007e80 <USB_EPStartXfer+0x8cc>)
 8007e70:	bf08      	it	eq
 8007e72:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007e76:	ea45 258c 	orr.w	r5, r5, ip, lsl #10
 8007e7a:	b2ad      	uxth	r5, r5
 8007e7c:	533d      	strh	r5, [r7, r4]
 8007e7e:	e58d      	b.n	800799c <USB_EPStartXfer+0x3e8>
 8007e80:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e84:	0947      	lsrs	r7, r0, #5
 8007e86:	06c5      	lsls	r5, r0, #27
 8007e88:	4d4b      	ldr	r5, [pc, #300]	; (8007fb8 <USB_EPStartXfer+0xa04>)
 8007e8a:	bf08      	it	eq
 8007e8c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007e90:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8007e94:	b2ad      	uxth	r5, r5
 8007e96:	52b5      	strh	r5, [r6, r2]
 8007e98:	e6f9      	b.n	8007c8e <USB_EPStartXfer+0x6da>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e9a:	0946      	lsrs	r6, r0, #5
 8007e9c:	4c46      	ldr	r4, [pc, #280]	; (8007fb8 <USB_EPStartXfer+0xa04>)
 8007e9e:	06c7      	lsls	r7, r0, #27
 8007ea0:	bf08      	it	eq
 8007ea2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007ea6:	ea44 2486 	orr.w	r4, r4, r6, lsl #10
 8007eaa:	b2a4      	uxth	r4, r4
 8007eac:	8014      	strh	r4, [r2, #0]
 8007eae:	e71a      	b.n	8007ce6 <USB_EPStartXfer+0x732>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007eb0:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8007eb4:	06d4      	lsls	r4, r2, #27
 8007eb6:	4c40      	ldr	r4, [pc, #256]	; (8007fb8 <USB_EPStartXfer+0xa04>)
 8007eb8:	bf08      	it	eq
 8007eba:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007ebe:	ea44 248c 	orr.w	r4, r4, ip, lsl #10
 8007ec2:	b2a4      	uxth	r4, r4
 8007ec4:	537c      	strh	r4, [r7, r5]
 8007ec6:	e41c      	b.n	8007702 <USB_EPStartXfer+0x14e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ec8:	283e      	cmp	r0, #62	; 0x3e
 8007eca:	d847      	bhi.n	8007f5c <USB_EPStartXfer+0x9a8>
 8007ecc:	0842      	lsrs	r2, r0, #1
 8007ece:	07c6      	lsls	r6, r0, #31
 8007ed0:	bf48      	it	mi
 8007ed2:	3201      	addmi	r2, #1
 8007ed4:	0292      	lsls	r2, r2, #10
 8007ed6:	b292      	uxth	r2, r2
 8007ed8:	802a      	strh	r2, [r5, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007eda:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007edc:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ede:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ee2:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ee4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8007ee8:	e794      	b.n	8007e14 <USB_EPStartXfer+0x860>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007eea:	2a3e      	cmp	r2, #62	; 0x3e
 8007eec:	d84c      	bhi.n	8007f88 <USB_EPStartXfer+0x9d4>
 8007eee:	0857      	lsrs	r7, r2, #1
 8007ef0:	f012 0f01 	tst.w	r2, #1
 8007ef4:	bf18      	it	ne
 8007ef6:	3701      	addne	r7, #1
 8007ef8:	02bf      	lsls	r7, r7, #10
 8007efa:	b2bf      	uxth	r7, r7
 8007efc:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007efe:	890d      	ldrh	r5, [r1, #8]
 8007f00:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f04:	1c57      	adds	r7, r2, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f06:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f0a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f0e:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8007f10:	e7a0      	b.n	8007e54 <USB_EPStartXfer+0x8a0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f12:	2a3e      	cmp	r2, #62	; 0x3e
 8007f14:	d844      	bhi.n	8007fa0 <USB_EPStartXfer+0x9ec>
 8007f16:	0857      	lsrs	r7, r2, #1
 8007f18:	f012 0f01 	tst.w	r2, #1
 8007f1c:	bf18      	it	ne
 8007f1e:	3701      	addne	r7, #1
 8007f20:	02bf      	lsls	r7, r7, #10
 8007f22:	b2bf      	uxth	r7, r7
 8007f24:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f26:	894d      	ldrh	r5, [r1, #10]
 8007f28:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f2c:	1c57      	adds	r7, r2, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f2e:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f32:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f36:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8007f38:	e74c      	b.n	8007dd4 <USB_EPStartXfer+0x820>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f3a:	283e      	cmp	r0, #62	; 0x3e
 8007f3c:	d819      	bhi.n	8007f72 <USB_EPStartXfer+0x9be>
 8007f3e:	0846      	lsrs	r6, r0, #1
 8007f40:	07c7      	lsls	r7, r0, #31
 8007f42:	bf48      	it	mi
 8007f44:	3601      	addmi	r6, #1
 8007f46:	02b6      	lsls	r6, r6, #10
 8007f48:	b2b6      	uxth	r6, r6
 8007f4a:	5356      	strh	r6, [r2, r5]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f4c:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f4e:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f50:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f54:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f56:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8007f5a:	e71b      	b.n	8007d94 <USB_EPStartXfer+0x7e0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f5c:	0946      	lsrs	r6, r0, #5
 8007f5e:	06c2      	lsls	r2, r0, #27
 8007f60:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <USB_EPStartXfer+0xa04>)
 8007f62:	bf08      	it	eq
 8007f64:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007f68:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8007f6c:	b292      	uxth	r2, r2
 8007f6e:	802a      	strh	r2, [r5, #0]
 8007f70:	e746      	b.n	8007e00 <USB_EPStartXfer+0x84c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f72:	0947      	lsrs	r7, r0, #5
 8007f74:	06c6      	lsls	r6, r0, #27
 8007f76:	4e10      	ldr	r6, [pc, #64]	; (8007fb8 <USB_EPStartXfer+0xa04>)
 8007f78:	bf08      	it	eq
 8007f7a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007f7e:	ea46 2687 	orr.w	r6, r6, r7, lsl #10
 8007f82:	b2b6      	uxth	r6, r6
 8007f84:	5356      	strh	r6, [r2, r5]
 8007f86:	e6fb      	b.n	8007d80 <USB_EPStartXfer+0x7cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f88:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8007f8c:	06d7      	lsls	r7, r2, #27
 8007f8e:	4f0a      	ldr	r7, [pc, #40]	; (8007fb8 <USB_EPStartXfer+0xa04>)
 8007f90:	bf08      	it	eq
 8007f92:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007f96:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8007f9a:	b2bf      	uxth	r7, r7
 8007f9c:	532f      	strh	r7, [r5, r4]
 8007f9e:	e74d      	b.n	8007e3c <USB_EPStartXfer+0x888>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fa0:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8007fa4:	06d7      	lsls	r7, r2, #27
 8007fa6:	4f04      	ldr	r7, [pc, #16]	; (8007fb8 <USB_EPStartXfer+0xa04>)
 8007fa8:	bf08      	it	eq
 8007faa:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007fae:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8007fb2:	b2bf      	uxth	r7, r7
 8007fb4:	532f      	strh	r7, [r5, r4]
 8007fb6:	e701      	b.n	8007dbc <USB_EPStartXfer+0x808>
 8007fb8:	ffff8000 	.word	0xffff8000

08007fbc <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8007fbc:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fbe:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8007fc0:	b18b      	cbz	r3, 8007fe6 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fce:	041b      	lsls	r3, r3, #16
 8007fd0:	0c1b      	lsrs	r3, r3, #16
 8007fd2:	f083 0310 	eor.w	r3, r3, #16
 8007fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fde:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007fe6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008002:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008006:	2000      	movs	r0, #0
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop

0800800c <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800800c:	7b0b      	ldrb	r3, [r1, #12]
 800800e:	bb43      	cbnz	r3, 8008062 <USB_EPClearStall+0x56>
    if (ep->is_in != 0U)
 8008010:	784b      	ldrb	r3, [r1, #1]
 8008012:	b343      	cbz	r3, 8008066 <USB_EPClearStall+0x5a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008014:	780a      	ldrb	r2, [r1, #0]
 8008016:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800801a:	065b      	lsls	r3, r3, #25
 800801c:	d50d      	bpl.n	800803a <USB_EPClearStall+0x2e>
 800801e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802a:	041b      	lsls	r3, r3, #16
 800802c:	0c1b      	lsrs	r3, r3, #16
 800802e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008032:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008036:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800803a:	78cb      	ldrb	r3, [r1, #3]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d010      	beq.n	8008062 <USB_EPClearStall+0x56>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008040:	780a      	ldrb	r2, [r1, #0]
 8008042:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	0c1b      	lsrs	r3, r3, #16
 8008052:	f083 0320 	eor.w	r3, r3, #32
 8008056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800805a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008062:	2000      	movs	r0, #0
 8008064:	4770      	bx	lr
{
 8008066:	b410      	push	{r4}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008068:	780c      	ldrb	r4, [r1, #0]
 800806a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800806e:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8008072:	045b      	lsls	r3, r3, #17
 8008074:	d510      	bpl.n	8008098 <USB_EPClearStall+0x8c>
 8008076:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800807a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	0c1b      	lsrs	r3, r3, #16
 8008086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800808a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8008092:	780a      	ldrb	r2, [r1, #0]
 8008094:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008098:	8813      	ldrh	r3, [r2, #0]
}
 800809a:	2000      	movs	r0, #0
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800809c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a4:	041b      	lsls	r3, r3, #16
 80080a6:	0c1b      	lsrs	r3, r3, #16
 80080a8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80080ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 80080b4:	bc10      	pop	{r4}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080b6:	8013      	strh	r3, [r2, #0]
}
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop

080080bc <USB_SetDevAddress>:
  if (address == 0U)
 80080bc:	b911      	cbnz	r1, 80080c4 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080be:	2380      	movs	r3, #128	; 0x80
 80080c0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80080c4:	2000      	movs	r0, #0
 80080c6:	4770      	bx	lr

080080c8 <USB_DevConnect>:
 80080c8:	2000      	movs	r0, #0
 80080ca:	4770      	bx	lr

080080cc <USB_DevDisconnect>:
 80080cc:	2000      	movs	r0, #0
 80080ce:	4770      	bx	lr

080080d0 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 80080d0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 80080d4:	b280      	uxth	r0, r0
 80080d6:	4770      	bx	lr

080080d8 <USB_EP0_OutStart>:
}
 80080d8:	2000      	movs	r0, #0
 80080da:	4770      	bx	lr

080080dc <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80080dc:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080de:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 80080e2:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80080e8:	d007      	beq.n	80080fa <USB_WritePMA+0x1e>
 80080ea:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80080ee:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80080f2:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 80080f6:	4282      	cmp	r2, r0
 80080f8:	d1f9      	bne.n	80080ee <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80080fa:	4770      	bx	lr

080080fc <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080fc:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8008100:	ea5f 0c53 	movs.w	ip, r3, lsr #1
{
 8008104:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008106:	f500 6780 	add.w	r7, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800810a:	d013      	beq.n	8008134 <USB_ReadPMA+0x38>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800810c:	463d      	mov	r5, r7
  for (i = n; i != 0U; i--)
 800810e:	4664      	mov	r4, ip
 8008110:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008112:	f835 2b04 	ldrh.w	r2, [r5], #4
  for (i = n; i != 0U; i--)
 8008116:	3c01      	subs	r4, #1
    temp = *(__IO uint16_t *)pdwVal;
 8008118:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800811a:	ea4f 2612 	mov.w	r6, r2, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800811e:	f800 2c02 	strb.w	r2, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008122:	f800 6c01 	strb.w	r6, [r0, #-1]
  for (i = n; i != 0U; i--)
 8008126:	f100 0002 	add.w	r0, r0, #2
 800812a:	d1f2      	bne.n	8008112 <USB_ReadPMA+0x16>
 800812c:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 8008130:	eb07 078c 	add.w	r7, r7, ip, lsl #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008134:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8008136:	bf48      	it	mi
 8008138:	883b      	ldrhmi	r3, [r7, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 800813a:	bcf0      	pop	{r4, r5, r6, r7}
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800813c:	bf48      	it	mi
 800813e:	700b      	strbmi	r3, [r1, #0]
}
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop

08008144 <USBD_MIDI_DataIn>:
  return 0;
}

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){

  if (USB_Tx_State == 1){
 8008144:	4b03      	ldr	r3, [pc, #12]	; (8008154 <USBD_MIDI_DataIn+0x10>)
    USB_Tx_State = 0;
  }
  return USBD_OK;
}
 8008146:	2000      	movs	r0, #0
  if (USB_Tx_State == 1){
 8008148:	781a      	ldrb	r2, [r3, #0]
 800814a:	2a01      	cmp	r2, #1
    USB_Tx_State = 0;
 800814c:	bf04      	itt	eq
 800814e:	2200      	moveq	r2, #0
 8008150:	701a      	strbeq	r2, [r3, #0]
}
 8008152:	4770      	bx	lr
 8008154:	200001ed 	.word	0x200001ed

08008158 <USBD_MIDI_GetCfgDesc>:
    while(USBD_LL_Transmit(pInstance, MIDI_IN_EP,buffer,len) != USBD_OK)
    	;

}

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 8008158:	4603      	mov	r3, r0
  *length = sizeof (USBD_MIDI_CfgDesc);
 800815a:	2265      	movs	r2, #101	; 0x65
  return USBD_MIDI_CfgDesc;
}
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <USBD_MIDI_GetCfgDesc+0xc>)
  *length = sizeof (USBD_MIDI_CfgDesc);
 800815e:	801a      	strh	r2, [r3, #0]
}
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	200000f0 	.word	0x200000f0

08008168 <USBD_MIDI_DataOut>:
{      
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4604      	mov	r4, r0
  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800816c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  pmidi->pIf_MidiRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8008170:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8008174:	4d08      	ldr	r5, [pc, #32]	; (8008198 <USBD_MIDI_DataOut+0x30>)
  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8008176:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800817a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  pmidi->pIf_MidiRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800817e:	4628      	mov	r0, r5
 8008180:	6813      	ldr	r3, [r2, #0]
 8008182:	f8b1 1184 	ldrh.w	r1, [r1, #388]	; 0x184
 8008186:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,USB_Rx_Buffer,MIDI_DATA_OUT_PACKET_SIZE);
 8008188:	4620      	mov	r0, r4
 800818a:	462a      	mov	r2, r5
 800818c:	2340      	movs	r3, #64	; 0x40
 800818e:	2101      	movs	r1, #1
 8008190:	f001 faa0 	bl	80096d4 <USBD_LL_PrepareReceive>
}
 8008194:	2000      	movs	r0, #0
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	20000c50 	.word	0x20000c50

0800819c <USBD_MIDI_DeInit>:
static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800819c:	b538      	push	{r3, r4, r5, lr}
  pInstance = NULL;
 800819e:	2500      	movs	r5, #0
static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80081a0:	4604      	mov	r4, r0
  pInstance = NULL;
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <USBD_MIDI_DeInit+0x1c>)
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 80081a4:	2181      	movs	r1, #129	; 0x81
  pInstance = NULL;
 80081a6:	601d      	str	r5, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 80081a8:	f001 fa3a 	bl	8009620 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 80081ac:	4620      	mov	r0, r4
 80081ae:	2101      	movs	r1, #1
 80081b0:	f001 fa36 	bl	8009620 <USBD_LL_CloseEP>
}
 80081b4:	4628      	mov	r0, r5
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	200001f0 	.word	0x200001f0

080081bc <USBD_MIDI_Init>:
static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4604      	mov	r4, r0
  pInstance = pdev;
 80081c0:	4d0b      	ldr	r5, [pc, #44]	; (80081f0 <USBD_MIDI_Init+0x34>)
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 80081c2:	2340      	movs	r3, #64	; 0x40
 80081c4:	2202      	movs	r2, #2
 80081c6:	2181      	movs	r1, #129	; 0x81
  pInstance = pdev;
 80081c8:	6028      	str	r0, [r5, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 80081ca:	f001 fa19 	bl	8009600 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 80081ce:	4620      	mov	r0, r4
 80081d0:	2340      	movs	r3, #64	; 0x40
 80081d2:	2202      	movs	r2, #2
 80081d4:	2101      	movs	r1, #1
 80081d6:	f001 fa13 	bl	8009600 <USBD_LL_OpenEP>
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 80081da:	2101      	movs	r1, #1
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80081dc:	4620      	mov	r0, r4
 80081de:	2340      	movs	r3, #64	; 0x40
 80081e0:	4a04      	ldr	r2, [pc, #16]	; (80081f4 <USBD_MIDI_Init+0x38>)
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 80081e2:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 1U;
 80081e6:	62e1      	str	r1, [r4, #44]	; 0x2c
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80081e8:	f001 fa74 	bl	80096d4 <USBD_LL_PrepareReceive>
}
 80081ec:	2000      	movs	r0, #0
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	200001f0 	.word	0x200001f0
 80081f4:	20000c50 	.word	0x20000c50

080081f8 <USBD_MIDI_SendPacket>:
void USBD_MIDI_SendPacket (uint8_t* buffer, uint8_t len){
 80081f8:	b570      	push	{r4, r5, r6, lr}
	if(pInstance->dev_state != USBD_STATE_CONFIGURED)
 80081fa:	4e0c      	ldr	r6, [pc, #48]	; (800822c <USBD_MIDI_SendPacket+0x34>)
void USBD_MIDI_SendPacket (uint8_t* buffer, uint8_t len){
 80081fc:	4605      	mov	r5, r0
	if(pInstance->dev_state != USBD_STATE_CONFIGURED)
 80081fe:	6830      	ldr	r0, [r6, #0]
 8008200:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008204:	2b03      	cmp	r3, #3
 8008206:	d10f      	bne.n	8008228 <USBD_MIDI_SendPacket+0x30>
 8008208:	4b09      	ldr	r3, [pc, #36]	; (8008230 <USBD_MIDI_SendPacket+0x38>)
	while(USB_Tx_State)
 800820a:	781c      	ldrb	r4, [r3, #0]
 800820c:	2c00      	cmp	r4, #0
 800820e:	d1fc      	bne.n	800820a <USBD_MIDI_SendPacket+0x12>
    USB_Tx_State = 1;
 8008210:	2201      	movs	r2, #1
 8008212:	b28c      	uxth	r4, r1
 8008214:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance, MIDI_IN_EP,buffer,len) != USBD_OK)
 8008216:	e000      	b.n	800821a <USBD_MIDI_SendPacket+0x22>
 8008218:	6830      	ldr	r0, [r6, #0]
 800821a:	4623      	mov	r3, r4
 800821c:	462a      	mov	r2, r5
 800821e:	2181      	movs	r1, #129	; 0x81
 8008220:	f001 fa4a 	bl	80096b8 <USBD_LL_Transmit>
 8008224:	2800      	cmp	r0, #0
 8008226:	d1f7      	bne.n	8008218 <USBD_MIDI_SendPacket+0x20>
}
 8008228:	bd70      	pop	{r4, r5, r6, pc}
 800822a:	bf00      	nop
 800822c:	200001f0 	.word	0x200001f0
 8008230:	200001ed 	.word	0x200001ed

08008234 <USBD_MIDI_RegisterInterface>:

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
  uint8_t ret = USBD_FAIL;
  
  if(fops != NULL){
 8008234:	b119      	cbz	r1, 800823e <USBD_MIDI_RegisterInterface+0xa>
    pdev->pUserData= fops;
 8008236:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;    
 800823a:	2000      	movs	r0, #0
 800823c:	4770      	bx	lr
  uint8_t ret = USBD_FAIL;
 800823e:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop

08008244 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008244:	b188      	cbz	r0, 800826a <USBD_Init+0x26>
{
 8008246:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008248:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800824c:	b113      	cbz	r3, 8008254 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800824e:	2300      	movs	r3, #0
 8008250:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008254:	b109      	cbz	r1, 800825a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008256:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800825a:	2301      	movs	r3, #1
  pdev->id = id;
 800825c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800825e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008262:	f001 f985 	bl	8009570 <USBD_LL_Init>

  return USBD_OK;
 8008266:	2000      	movs	r0, #0
}
 8008268:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800826a:	2002      	movs	r0, #2
}
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008270:	b119      	cbz	r1, 800827a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008272:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8008276:	2000      	movs	r0, #0
 8008278:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800827a:	2002      	movs	r0, #2
  }

  return status;
}
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008280:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008282:	f001 f9af 	bl	80095e4 <USBD_LL_Start>

  return USBD_OK;
}
 8008286:	2000      	movs	r0, #0
 8008288:	bd08      	pop	{r3, pc}
 800828a:	bf00      	nop

0800828c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800828c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800828e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008292:	b11b      	cbz	r3, 800829c <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4798      	blx	r3
 8008298:	b900      	cbnz	r0, 800829c <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800829a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800829c:	2002      	movs	r0, #2
}
 800829e:	bd08      	pop	{r3, pc}

080082a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082a0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80082a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	4798      	blx	r3

  return USBD_OK;
}
 80082aa:	2000      	movs	r0, #0
 80082ac:	bd08      	pop	{r3, pc}
 80082ae:	bf00      	nop

080082b0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082b4:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80082b8:	4628      	mov	r0, r5
 80082ba:	f000 fb59 	bl	8008970 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082be:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80082c0:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 80082c4:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
 80082c8:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 80082cc:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 80082ce:	e9c4 02a5 	strd	r0, r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80082d2:	d009      	beq.n	80082e8 <USBD_LL_SetupStage+0x38>
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d013      	beq.n	8008300 <USBD_LL_SetupStage+0x50>
 80082d8:	b163      	cbz	r3, 80082f4 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082da:	4620      	mov	r0, r4
 80082dc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80082e0:	f001 f9ac 	bl	800963c <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 80082e4:	2000      	movs	r0, #0
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80082e8:	4629      	mov	r1, r5
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fa74 	bl	80087d8 <USBD_StdItfReq>
}
 80082f0:	2000      	movs	r0, #0
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 80082f4:	4629      	mov	r1, r5
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 f8f4 	bl	80084e4 <USBD_StdDevReq>
}
 80082fc:	2000      	movs	r0, #0
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8008300:	4629      	mov	r1, r5
 8008302:	4620      	mov	r0, r4
 8008304:	f000 fa9c 	bl	8008840 <USBD_StdEPReq>
}
 8008308:	2000      	movs	r0, #0
 800830a:	bd38      	pop	{r3, r4, r5, pc}

0800830c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008310:	b969      	cbnz	r1, 800832e <USBD_LL_DataOutStage+0x22>
 8008312:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008314:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008318:	2a03      	cmp	r2, #3
 800831a:	d015      	beq.n	8008348 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800831c:	2a05      	cmp	r2, #5
 800831e:	460c      	mov	r4, r1
 8008320:	d10e      	bne.n	8008340 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008322:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008326:	f001 f989 	bl	800963c <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800832a:	4620      	mov	r0, r4
}
 800832c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 800832e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	b133      	cbz	r3, 8008344 <USBD_LL_DataOutStage+0x38>
 8008336:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800833a:	2a03      	cmp	r2, #3
 800833c:	d102      	bne.n	8008344 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800833e:	4798      	blx	r3
  return USBD_OK;
 8008340:	2000      	movs	r0, #0
}
 8008342:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008344:	2002      	movs	r0, #2
}
 8008346:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008348:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 800834c:	4291      	cmp	r1, r2
 800834e:	d90c      	bls.n	800836a <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 8008350:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx(pdev, pdata,
 8008352:	428a      	cmp	r2, r1
 8008354:	bf88      	it	hi
 8008356:	b28a      	uxthhi	r2, r1
        pep->rem_length -= pep->maxpacket;
 8008358:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800835c:	bf98      	it	ls
 800835e:	b292      	uxthls	r2, r2
 8008360:	4619      	mov	r1, r3
 8008362:	f000 fb57 	bl	8008a14 <USBD_CtlContinueRx>
  return USBD_OK;
 8008366:	2000      	movs	r0, #0
}
 8008368:	bd38      	pop	{r3, r4, r5, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800836a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	b11b      	cbz	r3, 800837a <USBD_LL_DataOutStage+0x6e>
 8008372:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008376:	2a03      	cmp	r2, #3
 8008378:	d004      	beq.n	8008384 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 800837a:	4628      	mov	r0, r5
 800837c:	f000 fb54 	bl	8008a28 <USBD_CtlSendStatus>
  return USBD_OK;
 8008380:	2000      	movs	r0, #0
}
 8008382:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 8008384:	4798      	blx	r3
 8008386:	e7f8      	b.n	800837a <USBD_LL_DataOutStage+0x6e>

08008388 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800838c:	b981      	cbnz	r1, 80083b0 <USBD_LL_DataInStage+0x28>
 800838e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008390:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008394:	2a02      	cmp	r2, #2
 8008396:	d01b      	beq.n	80083d0 <USBD_LL_DataInStage+0x48>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008398:	f032 0304 	bics.w	r3, r2, #4
 800839c:	d102      	bne.n	80083a4 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800839e:	2180      	movs	r1, #128	; 0x80
 80083a0:	f001 f94c 	bl	800963c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80083a4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80083a8:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d00d      	beq.n	80083ca <USBD_LL_DataInStage+0x42>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80083b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	b133      	cbz	r3, 80083c6 <USBD_LL_DataInStage+0x3e>
 80083b8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80083bc:	2a03      	cmp	r2, #3
 80083be:	d102      	bne.n	80083c6 <USBD_LL_DataInStage+0x3e>
    pdev->pClass->DataIn(pdev, epnum);
 80083c0:	4798      	blx	r3
  return USBD_OK;
 80083c2:	2000      	movs	r0, #0
}
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80083c6:	2002      	movs	r0, #2
}
 80083c8:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 80083ca:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80083d0:	e9d0 2608 	ldrd	r2, r6, [r0, #32]
 80083d4:	42b2      	cmp	r2, r6
 80083d6:	d826      	bhi.n	8008426 <USBD_LL_DataInStage+0x9e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083d8:	69c3      	ldr	r3, [r0, #28]
 80083da:	fbb3 f5f6 	udiv	r5, r3, r6
 80083de:	fb06 3515 	mls	r5, r6, r5, r3
 80083e2:	b95d      	cbnz	r5, 80083fc <USBD_LL_DataInStage+0x74>
 80083e4:	429e      	cmp	r6, r3
 80083e6:	d809      	bhi.n	80083fc <USBD_LL_DataInStage+0x74>
            (pep->total_length >= pep->maxpacket) &&
 80083e8:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d205      	bcs.n	80083fc <USBD_LL_DataInStage+0x74>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083f0:	462a      	mov	r2, r5
 80083f2:	f000 fb05 	bl	8008a00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083f6:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80083fa:	e01b      	b.n	8008434 <USBD_LL_DataInStage+0xac>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083fc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	b11b      	cbz	r3, 800840c <USBD_LL_DataInStage+0x84>
 8008404:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8008408:	2a03      	cmp	r2, #3
 800840a:	d01a      	beq.n	8008442 <USBD_LL_DataInStage+0xba>
          USBD_LL_StallEP(pdev, 0x80U);
 800840c:	2180      	movs	r1, #128	; 0x80
 800840e:	4620      	mov	r0, r4
 8008410:	f001 f914 	bl	800963c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008414:	4620      	mov	r0, r4
 8008416:	f000 fb13 	bl	8008a40 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800841a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 800841e:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8008420:	2b01      	cmp	r3, #1
 8008422:	d1c4      	bne.n	80083ae <USBD_LL_DataInStage+0x26>
 8008424:	e7d1      	b.n	80083ca <USBD_LL_DataInStage+0x42>
        pep->rem_length -= pep->maxpacket;
 8008426:	1b92      	subs	r2, r2, r6
 8008428:	460d      	mov	r5, r1
 800842a:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800842c:	4619      	mov	r1, r3
 800842e:	b292      	uxth	r2, r2
 8008430:	f000 fae6 	bl	8008a00 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008434:	462b      	mov	r3, r5
 8008436:	462a      	mov	r2, r5
 8008438:	4629      	mov	r1, r5
 800843a:	4620      	mov	r0, r4
 800843c:	f001 f94a 	bl	80096d4 <USBD_LL_PrepareReceive>
 8008440:	e7b0      	b.n	80083a4 <USBD_LL_DataInStage+0x1c>
            pdev->pClass->EP0_TxSent(pdev);
 8008442:	4620      	mov	r0, r4
 8008444:	4798      	blx	r3
 8008446:	e7e1      	b.n	800840c <USBD_LL_DataInStage+0x84>

08008448 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008448:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800844a:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800844c:	2640      	movs	r6, #64	; 0x40
{
 800844e:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008450:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008452:	4611      	mov	r1, r2
 8008454:	4633      	mov	r3, r6
 8008456:	f001 f8d3 	bl	8009600 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800845a:	4633      	mov	r3, r6
 800845c:	2180      	movs	r1, #128	; 0x80
 800845e:	4620      	mov	r0, r4
 8008460:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008462:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008466:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800846a:	f001 f8c9 	bl	8009600 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800846e:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008470:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008474:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008476:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008478:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800847c:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8008480:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008482:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8008486:	b123      	cbz	r3, 8008492 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008488:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800848c:	4620      	mov	r0, r4
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008492:	2000      	movs	r0, #0
 8008494:	bd70      	pop	{r4, r5, r6, pc}
 8008496:	bf00      	nop

08008498 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008498:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800849a:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800849c:	7419      	strb	r1, [r3, #16]
}
 800849e:	4770      	bx	lr

080084a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084a0:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084a2:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 80084a4:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80084a8:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 80084aa:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 80084b2:	4770      	bx	lr

080084b4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80084b8:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80084ba:	bf04      	itt	eq
 80084bc:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80084c0:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80084c4:	2000      	movs	r0, #0
 80084c6:	4770      	bx	lr

080084c8 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80084cc:	2a03      	cmp	r2, #3
 80084ce:	d001      	beq.n	80084d4 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80084d0:	2000      	movs	r0, #0
 80084d2:	4770      	bx	lr
{
 80084d4:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 80084d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	b103      	cbz	r3, 80084e0 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80084de:	4798      	blx	r3
}
 80084e0:	2000      	movs	r0, #0
 80084e2:	bd08      	pop	{r3, pc}

080084e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80084e4:	b530      	push	{r4, r5, lr}
 80084e6:	780b      	ldrb	r3, [r1, #0]
 80084e8:	460d      	mov	r5, r1
 80084ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ee:	2b20      	cmp	r3, #32
{
 80084f0:	4604      	mov	r4, r0
 80084f2:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f4:	d00d      	beq.n	8008512 <USBD_StdDevReq+0x2e>
 80084f6:	2b40      	cmp	r3, #64	; 0x40
 80084f8:	d00b      	beq.n	8008512 <USBD_StdDevReq+0x2e>
 80084fa:	b19b      	cbz	r3, 8008524 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80084fc:	2180      	movs	r1, #128	; 0x80
 80084fe:	4620      	mov	r0, r4
 8008500:	f001 f89c 	bl	800963c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008504:	4620      	mov	r0, r4
 8008506:	2100      	movs	r1, #0
 8008508:	f001 f898 	bl	800963c <USBD_LL_StallEP>
}
 800850c:	2000      	movs	r0, #0
 800850e:	b003      	add	sp, #12
 8008510:	bd30      	pop	{r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8008512:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008516:	4629      	mov	r1, r5
 8008518:	4620      	mov	r0, r4
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	4798      	blx	r3
}
 800851e:	2000      	movs	r0, #0
 8008520:	b003      	add	sp, #12
 8008522:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8008524:	784b      	ldrb	r3, [r1, #1]
 8008526:	2b09      	cmp	r3, #9
 8008528:	d8e8      	bhi.n	80084fc <USBD_StdDevReq+0x18>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <USBD_StdDevReq+0x4c>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	0800858b 	.word	0x0800858b
 8008534:	080085b7 	.word	0x080085b7
 8008538:	080084fd 	.word	0x080084fd
 800853c:	080085d3 	.word	0x080085d3
 8008540:	080084fd 	.word	0x080084fd
 8008544:	080085e5 	.word	0x080085e5
 8008548:	0800861f 	.word	0x0800861f
 800854c:	080084fd 	.word	0x080084fd
 8008550:	08008655 	.word	0x08008655
 8008554:	08008559 	.word	0x08008559
  cfgidx = (uint8_t)(req->wValue);
 8008558:	7889      	ldrb	r1, [r1, #2]
 800855a:	4d9e      	ldr	r5, [pc, #632]	; (80087d4 <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800855c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800855e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008560:	d8cc      	bhi.n	80084fc <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8008562:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008566:	2b02      	cmp	r3, #2
 8008568:	f000 810f 	beq.w	800878a <USBD_StdDevReq+0x2a6>
 800856c:	2b03      	cmp	r3, #3
 800856e:	f000 80fb 	beq.w	8008768 <USBD_StdDevReq+0x284>
  USBD_LL_StallEP(pdev, 0x80U);
 8008572:	2180      	movs	r1, #128	; 0x80
 8008574:	f001 f862 	bl	800963c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008578:	2100      	movs	r1, #0
 800857a:	4620      	mov	r0, r4
 800857c:	f001 f85e 	bl	800963c <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008580:	4620      	mov	r0, r4
 8008582:	7829      	ldrb	r1, [r5, #0]
 8008584:	f7ff fe8c 	bl	80082a0 <USBD_ClrClassConfig>
        break;
 8008588:	e7c0      	b.n	800850c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800858a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800858e:	3b01      	subs	r3, #1
 8008590:	2b02      	cmp	r3, #2
 8008592:	d8b3      	bhi.n	80084fc <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8008594:	88cb      	ldrh	r3, [r1, #6]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d1b0      	bne.n	80084fc <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800859a:	2201      	movs	r2, #1
      if (pdev->dev_remote_wakeup)
 800859c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085a0:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80085a2:	b10b      	cbz	r3, 80085a8 <USBD_StdDevReq+0xc4>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085a4:	2303      	movs	r3, #3
 80085a6:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085a8:	2202      	movs	r2, #2
 80085aa:	4620      	mov	r0, r4
 80085ac:	f104 010c 	add.w	r1, r4, #12
 80085b0:	f000 fa18 	bl	80089e4 <USBD_CtlSendData>
      break;
 80085b4:	e7aa      	b.n	800850c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80085b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80085ba:	3b01      	subs	r3, #1
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d89d      	bhi.n	80084fc <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085c0:	884b      	ldrh	r3, [r1, #2]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d1a2      	bne.n	800850c <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80085cc:	f000 fa2c 	bl	8008a28 <USBD_CtlSendStatus>
 80085d0:	e79c      	b.n	800850c <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085d2:	884b      	ldrh	r3, [r1, #2]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d199      	bne.n	800850c <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 80085d8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 fa23 	bl	8008a28 <USBD_CtlSendStatus>
 80085e2:	e793      	b.n	800850c <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085e4:	888b      	ldrh	r3, [r1, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d188      	bne.n	80084fc <USBD_StdDevReq+0x18>
 80085ea:	88cb      	ldrh	r3, [r1, #6]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d185      	bne.n	80084fc <USBD_StdDevReq+0x18>
 80085f0:	884d      	ldrh	r5, [r1, #2]
 80085f2:	2d7f      	cmp	r5, #127	; 0x7f
 80085f4:	d882      	bhi.n	80084fc <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	f43f af7e 	beq.w	80084fc <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008600:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8008602:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008606:	f001 f849 	bl	800969c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800860a:	4620      	mov	r0, r4
 800860c:	f000 fa0c 	bl	8008a28 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008610:	2d00      	cmp	r5, #0
 8008612:	f000 80db 	beq.w	80087cc <USBD_StdDevReq+0x2e8>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008616:	2302      	movs	r3, #2
 8008618:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800861c:	e776      	b.n	800850c <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 800861e:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 8008620:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8008622:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008626:	0a13      	lsrs	r3, r2, #8
 8008628:	3b01      	subs	r3, #1
 800862a:	2b06      	cmp	r3, #6
 800862c:	f63f af66 	bhi.w	80084fc <USBD_StdDevReq+0x18>
 8008630:	a101      	add	r1, pc, #4	; (adr r1, 8008638 <USBD_StdDevReq+0x154>)
 8008632:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	080086f9 	.word	0x080086f9
 800863c:	080086e1 	.word	0x080086e1
 8008640:	080086cf 	.word	0x080086cf
 8008644:	080084fd 	.word	0x080084fd
 8008648:	080084fd 	.word	0x080084fd
 800864c:	080086b9 	.word	0x080086b9
 8008650:	08008679 	.word	0x08008679
  if (req->wLength != 1U)
 8008654:	88ca      	ldrh	r2, [r1, #6]
 8008656:	2a01      	cmp	r2, #1
 8008658:	f47f af50 	bne.w	80084fc <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800865c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008660:	2b02      	cmp	r3, #2
 8008662:	d87a      	bhi.n	800875a <USBD_StdDevReq+0x276>
 8008664:	2b00      	cmp	r3, #0
 8008666:	f43f af49 	beq.w	80084fc <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	4601      	mov	r1, r0
 800866e:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008672:	f000 f9b7 	bl	80089e4 <USBD_CtlSendData>
        break;
 8008676:	e749      	b.n	800850c <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008678:	7c03      	ldrb	r3, [r0, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f47f af3e 	bne.w	80084fc <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008680:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008684:	f10d 0006 	add.w	r0, sp, #6
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800868c:	2307      	movs	r3, #7
 800868e:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 8008690:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008694:	b15a      	cbz	r2, 80086ae <USBD_StdDevReq+0x1ca>
 8008696:	88eb      	ldrh	r3, [r5, #6]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d09f      	beq.n	80085dc <USBD_StdDevReq+0xf8>
      len = MIN(len, req->wLength);
 800869c:	429a      	cmp	r2, r3
 800869e:	bf28      	it	cs
 80086a0:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086a2:	4601      	mov	r1, r0
 80086a4:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80086a6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086aa:	f000 f99b 	bl	80089e4 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80086ae:	88eb      	ldrh	r3, [r5, #6]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f47f af2b 	bne.w	800850c <USBD_StdDevReq+0x28>
 80086b6:	e791      	b.n	80085dc <USBD_StdDevReq+0xf8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b8:	7c03      	ldrb	r3, [r0, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f47f af1e 	bne.w	80084fc <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086c0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80086c4:	f10d 0006 	add.w	r0, sp, #6
 80086c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ca:	4798      	blx	r3
  if (err != 0U)
 80086cc:	e7e0      	b.n	8008690 <USBD_StdDevReq+0x1ac>
      switch ((uint8_t)(req->wValue))
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	2a05      	cmp	r2, #5
 80086d2:	f63f af13 	bhi.w	80084fc <USBD_StdDevReq+0x18>
 80086d6:	e8df f002 	tbb	[pc, r2]
 80086da:	343a      	.short	0x343a
 80086dc:	1722282e 	.word	0x1722282e
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e0:	7c03      	ldrb	r3, [r0, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d15f      	bne.n	80087a6 <USBD_StdDevReq+0x2c2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80086ea:	f10d 0006 	add.w	r0, sp, #6
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086f2:	2302      	movs	r3, #2
 80086f4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80086f6:	e7cb      	b.n	8008690 <USBD_StdDevReq+0x1ac>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086f8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80086fc:	f10d 0106 	add.w	r1, sp, #6
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	7c00      	ldrb	r0, [r0, #16]
 8008704:	4798      	blx	r3
  if (err != 0U)
 8008706:	e7c3      	b.n	8008690 <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008708:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f43f aef4 	beq.w	80084fc <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008714:	7c20      	ldrb	r0, [r4, #16]
 8008716:	f10d 0106 	add.w	r1, sp, #6
 800871a:	4798      	blx	r3
  if (err != 0U)
 800871c:	e7b8      	b.n	8008690 <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800871e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1f5      	bne.n	8008714 <USBD_StdDevReq+0x230>
 8008728:	e6e8      	b.n	80084fc <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800872a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1ef      	bne.n	8008714 <USBD_StdDevReq+0x230>
 8008734:	e6e2      	b.n	80084fc <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008736:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e9      	bne.n	8008714 <USBD_StdDevReq+0x230>
 8008740:	e6dc      	b.n	80084fc <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008742:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e3      	bne.n	8008714 <USBD_StdDevReq+0x230>
 800874c:	e6d6      	b.n	80084fc <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800874e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1dd      	bne.n	8008714 <USBD_StdDevReq+0x230>
 8008758:	e6d0      	b.n	80084fc <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800875a:	2b03      	cmp	r3, #3
 800875c:	f47f aece 	bne.w	80084fc <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008760:	1d01      	adds	r1, r0, #4
 8008762:	f000 f93f 	bl	80089e4 <USBD_CtlSendData>
        break;
 8008766:	e6d1      	b.n	800850c <USBD_StdDevReq+0x28>
        if (cfgidx == 0U)
 8008768:	b331      	cbz	r1, 80087b8 <USBD_StdDevReq+0x2d4>
        else if (cfgidx != pdev->dev_config)
 800876a:	6841      	ldr	r1, [r0, #4]
 800876c:	2901      	cmp	r1, #1
 800876e:	f43f af35 	beq.w	80085dc <USBD_StdDevReq+0xf8>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008772:	b2c9      	uxtb	r1, r1
 8008774:	f7ff fd94 	bl	80082a0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008778:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800877a:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 800877c:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800877e:	f7ff fd85 	bl	800828c <USBD_SetClassConfig>
 8008782:	2802      	cmp	r0, #2
 8008784:	f47f af2a 	bne.w	80085dc <USBD_StdDevReq+0xf8>
 8008788:	e6b8      	b.n	80084fc <USBD_StdDevReq+0x18>
        if (cfgidx)
 800878a:	2900      	cmp	r1, #0
 800878c:	f43f af26 	beq.w	80085dc <USBD_StdDevReq+0xf8>
          pdev->dev_config = cfgidx;
 8008790:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008792:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8008794:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008796:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800879a:	f7ff fd77 	bl	800828c <USBD_SetClassConfig>
 800879e:	2802      	cmp	r0, #2
 80087a0:	f47f af1c 	bne.w	80085dc <USBD_StdDevReq+0xf8>
 80087a4:	e6aa      	b.n	80084fc <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80087a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80087aa:	f10d 0006 	add.w	r0, sp, #6
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087b2:	2302      	movs	r3, #2
 80087b4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80087b6:	e76b      	b.n	8008690 <USBD_StdDevReq+0x1ac>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087b8:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80087ba:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087bc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80087c0:	f7ff fd6e 	bl	80082a0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 f92f 	bl	8008a28 <USBD_CtlSendStatus>
 80087ca:	e69f      	b.n	800850c <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087cc:	2301      	movs	r3, #1
 80087ce:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80087d2:	e69b      	b.n	800850c <USBD_StdDevReq+0x28>
 80087d4:	200001f4 	.word	0x200001f4

080087d8 <USBD_StdItfReq>:
{
 80087d8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087da:	780b      	ldrb	r3, [r1, #0]
{
 80087dc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087de:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80087e2:	2a40      	cmp	r2, #64	; 0x40
{
 80087e4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087e6:	d00a      	beq.n	80087fe <USBD_StdItfReq+0x26>
 80087e8:	065b      	lsls	r3, r3, #25
 80087ea:	d508      	bpl.n	80087fe <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev, 0x80U);
 80087ec:	2180      	movs	r1, #128	; 0x80
 80087ee:	f000 ff25 	bl	800963c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80087f2:	4620      	mov	r0, r4
 80087f4:	2100      	movs	r1, #0
 80087f6:	f000 ff21 	bl	800963c <USBD_LL_StallEP>
}
 80087fa:	2000      	movs	r0, #0
 80087fc:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80087fe:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8008802:	3b01      	subs	r3, #1
 8008804:	2b02      	cmp	r3, #2
 8008806:	d811      	bhi.n	800882c <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008808:	792b      	ldrb	r3, [r5, #4]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d80e      	bhi.n	800882c <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800880e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008812:	4629      	mov	r1, r5
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	4620      	mov	r0, r4
 8008818:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800881a:	88eb      	ldrh	r3, [r5, #6]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1ec      	bne.n	80087fa <USBD_StdItfReq+0x22>
 8008820:	2800      	cmp	r0, #0
 8008822:	d1ea      	bne.n	80087fa <USBD_StdItfReq+0x22>
              USBD_CtlSendStatus(pdev);
 8008824:	4620      	mov	r0, r4
 8008826:	f000 f8ff 	bl	8008a28 <USBD_CtlSendStatus>
 800882a:	e7e6      	b.n	80087fa <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev, 0x80U);
 800882c:	2180      	movs	r1, #128	; 0x80
 800882e:	4620      	mov	r0, r4
 8008830:	f000 ff04 	bl	800963c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008834:	4620      	mov	r0, r4
 8008836:	2100      	movs	r1, #0
 8008838:	f000 ff00 	bl	800963c <USBD_LL_StallEP>
}
 800883c:	2000      	movs	r0, #0
 800883e:	bd38      	pop	{r3, r4, r5, pc}

08008840 <USBD_StdEPReq>:
{
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	780b      	ldrb	r3, [r1, #0]
 8008844:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800884a:	2b20      	cmp	r3, #32
 800884c:	d00c      	beq.n	8008868 <USBD_StdEPReq+0x28>
 800884e:	2b40      	cmp	r3, #64	; 0x40
 8008850:	d00a      	beq.n	8008868 <USBD_StdEPReq+0x28>
 8008852:	b183      	cbz	r3, 8008876 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 8008854:	2180      	movs	r1, #128	; 0x80
 8008856:	4620      	mov	r0, r4
 8008858:	f000 fef0 	bl	800963c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800885c:	4620      	mov	r0, r4
 800885e:	2100      	movs	r1, #0
 8008860:	f000 feec 	bl	800963c <USBD_LL_StallEP>
}
 8008864:	2000      	movs	r0, #0
 8008866:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8008868:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800886c:	4620      	mov	r0, r4
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	4798      	blx	r3
}
 8008872:	2000      	movs	r0, #0
 8008874:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 8008876:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008878:	888a      	ldrh	r2, [r1, #4]
 800887a:	2b01      	cmp	r3, #1
 800887c:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 800887e:	d03d      	beq.n	80088fc <USBD_StdEPReq+0xbc>
 8008880:	2b03      	cmp	r3, #3
 8008882:	d02a      	beq.n	80088da <USBD_StdEPReq+0x9a>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e5      	bne.n	8008854 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 8008888:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800888c:	2b02      	cmp	r3, #2
 800888e:	d04e      	beq.n	800892e <USBD_StdEPReq+0xee>
 8008890:	2b03      	cmp	r3, #3
 8008892:	d1df      	bne.n	8008854 <USBD_StdEPReq+0x14>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008894:	f005 030f 	and.w	r3, r5, #15
 8008898:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800889c:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800889e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80088a2:	d453      	bmi.n	800894c <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088a4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0d3      	beq.n	8008854 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088ac:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80088b0:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 80088b4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80088b8:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088bc:	b133      	cbz	r3, 80088cc <USBD_StdEPReq+0x8c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80088be:	4629      	mov	r1, r5
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fed7 	bl	8009674 <USBD_LL_IsStallEP>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d04b      	beq.n	8008962 <USBD_StdEPReq+0x122>
                pep->status = 0x0001U;
 80088ca:	2301      	movs	r3, #1
 80088cc:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088ce:	4631      	mov	r1, r6
 80088d0:	4620      	mov	r0, r4
 80088d2:	2202      	movs	r2, #2
 80088d4:	f000 f886 	bl	80089e4 <USBD_CtlSendData>
              break;
 80088d8:	e7c4      	b.n	8008864 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80088da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d01b      	beq.n	800891a <USBD_StdEPReq+0xda>
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d1b6      	bne.n	8008854 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088e6:	884b      	ldrh	r3, [r1, #2]
 80088e8:	b923      	cbnz	r3, 80088f4 <USBD_StdEPReq+0xb4>
                if ((ep_addr != 0x00U) &&
 80088ea:	066a      	lsls	r2, r5, #25
 80088ec:	d002      	beq.n	80088f4 <USBD_StdEPReq+0xb4>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088ee:	88cb      	ldrh	r3, [r1, #6]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d038      	beq.n	8008966 <USBD_StdEPReq+0x126>
              USBD_CtlSendStatus(pdev);
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 f897 	bl	8008a28 <USBD_CtlSendStatus>
              break;
 80088fa:	e7b3      	b.n	8008864 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80088fc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008900:	2b02      	cmp	r3, #2
 8008902:	d00a      	beq.n	800891a <USBD_StdEPReq+0xda>
 8008904:	2b03      	cmp	r3, #3
 8008906:	d1a5      	bne.n	8008854 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008908:	884b      	ldrh	r3, [r1, #2]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1aa      	bne.n	8008864 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 800890e:	066e      	lsls	r6, r5, #25
 8008910:	d0f0      	beq.n	80088f4 <USBD_StdEPReq+0xb4>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008912:	4629      	mov	r1, r5
 8008914:	f000 fea0 	bl	8009658 <USBD_LL_ClearStallEP>
 8008918:	e7ec      	b.n	80088f4 <USBD_StdEPReq+0xb4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800891a:	066b      	lsls	r3, r5, #25
 800891c:	d09a      	beq.n	8008854 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 800891e:	4629      	mov	r1, r5
 8008920:	f000 fe8c 	bl	800963c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008924:	4620      	mov	r0, r4
 8008926:	2180      	movs	r1, #128	; 0x80
 8008928:	f000 fe88 	bl	800963c <USBD_LL_StallEP>
 800892c:	e79a      	b.n	8008864 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800892e:	0668      	lsls	r0, r5, #25
 8008930:	d190      	bne.n	8008854 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 8008932:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008934:	0611      	lsls	r1, r2, #24
 8008936:	bf4c      	ite	mi
 8008938:	f104 0114 	addmi.w	r1, r4, #20
 800893c:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008940:	4620      	mov	r0, r4
 8008942:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8008944:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008946:	f000 f84d 	bl	80089e4 <USBD_CtlSendData>
              break;
 800894a:	e78b      	b.n	8008864 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d080      	beq.n	8008854 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008952:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8008956:	1c5e      	adds	r6, r3, #1
 8008958:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800895c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008960:	e7ac      	b.n	80088bc <USBD_StdEPReq+0x7c>
                pep->status = 0x0000U;
 8008962:	6030      	str	r0, [r6, #0]
 8008964:	e7b3      	b.n	80088ce <USBD_StdEPReq+0x8e>
                  USBD_LL_StallEP(pdev, ep_addr);
 8008966:	4629      	mov	r1, r5
 8008968:	f000 fe68 	bl	800963c <USBD_LL_StallEP>
 800896c:	e7c2      	b.n	80088f4 <USBD_StdEPReq+0xb4>
 800896e:	bf00      	nop

08008970 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8008970:	780b      	ldrb	r3, [r1, #0]
 8008972:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008974:	784b      	ldrb	r3, [r1, #1]
 8008976:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008978:	78ca      	ldrb	r2, [r1, #3]
 800897a:	788b      	ldrb	r3, [r1, #2]
 800897c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008980:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008982:	794a      	ldrb	r2, [r1, #5]
 8008984:	790b      	ldrb	r3, [r1, #4]
 8008986:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800898a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800898c:	79ca      	ldrb	r2, [r1, #7]
 800898e:	798b      	ldrb	r3, [r1, #6]
 8008990:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008994:	80c3      	strh	r3, [r0, #6]
}
 8008996:	4770      	bx	lr

08008998 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8008998:	b308      	cbz	r0, 80089de <USBD_GetString+0x46>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800899a:	7803      	ldrb	r3, [r0, #0]
{
 800899c:	b470      	push	{r4, r5, r6}
  while (*buf != '\0')
 800899e:	b1fb      	cbz	r3, 80089e0 <USBD_GetString+0x48>
 80089a0:	4604      	mov	r4, r0
 80089a2:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 80089a6:	19a3      	adds	r3, r4, r6
  while (*buf != '\0')
 80089a8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2d00      	cmp	r5, #0
 80089b0:	d1f9      	bne.n	80089a6 <USBD_GetString+0xe>
 80089b2:	3301      	adds	r3, #1
 80089b4:	005b      	lsls	r3, r3, #1
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089b6:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089b8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80089ba:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089bc:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 80089be:	7804      	ldrb	r4, [r0, #0]
 80089c0:	b15c      	cbz	r4, 80089da <USBD_GetString+0x42>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089c2:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80089c4:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 80089cc:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 80089ce:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 80089d2:	3302      	adds	r3, #2
 80089d4:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 80089d6:	2c00      	cmp	r4, #0
 80089d8:	d1f5      	bne.n	80089c6 <USBD_GetString+0x2e>
}
 80089da:	bc70      	pop	{r4, r5, r6}
 80089dc:	4770      	bx	lr
 80089de:	4770      	bx	lr
  while (*buf != '\0')
 80089e0:	2302      	movs	r3, #2
 80089e2:	e7e8      	b.n	80089b6 <USBD_GetString+0x1e>

080089e4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089e8:	2502      	movs	r5, #2
{
 80089ea:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80089ec:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089f2:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f6:	f000 fe5f 	bl	80096b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80089fa:	2000      	movs	r0, #0
 80089fc:	bd38      	pop	{r3, r4, r5, pc}
 80089fe:	bf00      	nop

08008a00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a00:	b510      	push	{r4, lr}
 8008a02:	460c      	mov	r4, r1
 8008a04:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a06:	2100      	movs	r1, #0
 8008a08:	4622      	mov	r2, r4
 8008a0a:	f000 fe55 	bl	80096b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008a0e:	2000      	movs	r0, #0
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	bf00      	nop

08008a14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a14:	b510      	push	{r4, lr}
 8008a16:	460c      	mov	r4, r1
 8008a18:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	f000 fe59 	bl	80096d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a22:	2000      	movs	r0, #0
 8008a24:	bd10      	pop	{r4, pc}
 8008a26:	bf00      	nop

08008a28 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a28:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a2a:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a2c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a2e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a32:	4619      	mov	r1, r3
 8008a34:	461a      	mov	r2, r3
 8008a36:	f000 fe3f 	bl	80096b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	bd08      	pop	{r3, pc}
 8008a3e:	bf00      	nop

08008a40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a40:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a42:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a44:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a46:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	f000 fe41 	bl	80096d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008a52:	2000      	movs	r0, #0
 8008a54:	bd08      	pop	{r3, pc}
 8008a56:	bf00      	nop

08008a58 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	bf14      	ite	ne
 8008a5c:	22ff      	movne	r2, #255	; 0xff
 8008a5e:	2200      	moveq	r2, #0
 8008a60:	4b03      	ldr	r3, [pc, #12]	; (8008a70 <ssd1306_Fill+0x18>)
 8008a62:	f503 6182 	add.w	r1, r3, #1040	; 0x410
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008a66:	f803 2f01 	strb.w	r2, [r3, #1]!
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008a6a:	428b      	cmp	r3, r1
 8008a6c:	d1fb      	bne.n	8008a66 <ssd1306_Fill+0xe>
    }
}
 8008a6e:	4770      	bx	lr
 8008a70:	200001ff 	.word	0x200001ff

08008a74 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8008a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	25b0      	movs	r5, #176	; 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008a7a:	f04f 0a00 	mov.w	sl, #0
void ssd1306_UpdateScreen(void) {
 8008a7e:	b086      	sub	sp, #24
 8008a80:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8008b08 <ssd1306_UpdateScreen+0x94>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008a84:	4f1f      	ldr	r7, [pc, #124]	; (8008b04 <ssd1306_UpdateScreen+0x90>)
 8008a86:	f10d 0817 	add.w	r8, sp, #23
 8008a8a:	2401      	movs	r4, #1
 8008a8c:	f04f 36ff 	mov.w	r6, #4294967295
 8008a90:	4623      	mov	r3, r4
 8008a92:	2200      	movs	r2, #0
 8008a94:	2178      	movs	r1, #120	; 0x78
 8008a96:	4638      	mov	r0, r7
 8008a98:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8008a9c:	f8cd 8000 	str.w	r8, [sp]
 8008aa0:	f88d 5017 	strb.w	r5, [sp, #23]
 8008aa4:	f7fc fafe 	bl	80050a4 <HAL_I2C_Mem_Write>
 8008aa8:	4623      	mov	r3, r4
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2178      	movs	r1, #120	; 0x78
 8008aae:	4638      	mov	r0, r7
 8008ab0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8008ab4:	f8cd 8000 	str.w	r8, [sp]
 8008ab8:	f88d a017 	strb.w	sl, [sp, #23]
 8008abc:	f7fc faf2 	bl	80050a4 <HAL_I2C_Mem_Write>
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
 8008ac0:	f04f 0c10 	mov.w	ip, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008ac4:	4623      	mov	r3, r4
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2178      	movs	r1, #120	; 0x78
 8008aca:	4638      	mov	r0, r7
 8008acc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8008ad0:	f8cd 8000 	str.w	r8, [sp]
 8008ad4:	f88d c017 	strb.w	ip, [sp, #23]
 8008ad8:	f7fc fae4 	bl	80050a4 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8008adc:	2282      	movs	r2, #130	; 0x82
 8008ade:	4425      	add	r5, r4
 8008ae0:	e9cd 9200 	strd	r9, r2, [sp]
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	2240      	movs	r2, #64	; 0x40
 8008ae8:	2178      	movs	r1, #120	; 0x78
 8008aea:	4638      	mov	r0, r7
 8008aec:	9602      	str	r6, [sp, #8]
 8008aee:	b2ed      	uxtb	r5, r5
 8008af0:	f7fc fad8 	bl	80050a4 <HAL_I2C_Mem_Write>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008af4:	2db8      	cmp	r5, #184	; 0xb8
 8008af6:	f109 0982 	add.w	r9, r9, #130	; 0x82
 8008afa:	d1c6      	bne.n	8008a8a <ssd1306_UpdateScreen+0x16>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }
}
 8008afc:	b006      	add	sp, #24
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	bf00      	nop
 8008b04:	20000a20 	.word	0x20000a20
 8008b08:	20000200 	.word	0x20000200

08008b0c <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8008b0c:	2881      	cmp	r0, #129	; 0x81
 8008b0e:	d81b      	bhi.n	8008b48 <ssd1306_DrawPixel+0x3c>
 8008b10:	293f      	cmp	r1, #63	; 0x3f
 8008b12:	d819      	bhi.n	8008b48 <ssd1306_DrawPixel+0x3c>
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8008b14:	b410      	push	{r4}
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8008b16:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <ssd1306_DrawPixel+0x5c>)
 8008b18:	791b      	ldrb	r3, [r3, #4]
 8008b1a:	b113      	cbz	r3, 8008b22 <ssd1306_DrawPixel+0x16>
        color = (SSD1306_COLOR)!color;
 8008b1c:	fab2 f282 	clz	r2, r2
 8008b20:	0952      	lsrs	r2, r2, #5
    }
    
    // Draw in the right color
    if(color == White) {
 8008b22:	2a01      	cmp	r2, #1
 8008b24:	d011      	beq.n	8008b4a <ssd1306_DrawPixel+0x3e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008b26:	2201      	movs	r2, #1
 8008b28:	08cb      	lsrs	r3, r1, #3
 8008b2a:	4c10      	ldr	r4, [pc, #64]	; (8008b6c <ssd1306_DrawPixel+0x60>)
 8008b2c:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8008b30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008b34:	5c23      	ldrb	r3, [r4, r0]
 8008b36:	f001 0107 	and.w	r1, r1, #7
 8008b3a:	fa02 f101 	lsl.w	r1, r2, r1
 8008b3e:	ea23 0101 	bic.w	r1, r3, r1
 8008b42:	5421      	strb	r1, [r4, r0]
    }
}
 8008b44:	bc10      	pop	{r4}
 8008b46:	4770      	bx	lr
 8008b48:	4770      	bx	lr
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008b4a:	08cb      	lsrs	r3, r1, #3
 8008b4c:	4c07      	ldr	r4, [pc, #28]	; (8008b6c <ssd1306_DrawPixel+0x60>)
 8008b4e:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8008b52:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008b56:	5c23      	ldrb	r3, [r4, r0]
 8008b58:	f001 0107 	and.w	r1, r1, #7
 8008b5c:	408a      	lsls	r2, r1
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	5422      	strb	r2, [r4, r0]
}
 8008b62:	bc10      	pop	{r4}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	200001f8 	.word	0x200001f8
 8008b6c:	20000200 	.word	0x20000200

08008b70 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	b085      	sub	sp, #20
 8008b76:	9000      	str	r0, [sp, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8008b78:	3820      	subs	r0, #32
 8008b7a:	b2c4      	uxtb	r4, r0
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008b7c:	461e      	mov	r6, r3
    if (ch < 32 || ch > 126)
 8008b7e:	2c5e      	cmp	r4, #94	; 0x5e
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008b80:	ab04      	add	r3, sp, #16
 8008b82:	e903 0006 	stmdb	r3, {r1, r2}
    if (ch < 32 || ch > 126)
 8008b86:	d845      	bhi.n	8008c14 <ssd1306_WriteChar+0xa4>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008b88:	4924      	ldr	r1, [pc, #144]	; (8008c1c <ssd1306_WriteChar+0xac>)
 8008b8a:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8008b8e:	f8b1 9000 	ldrh.w	r9, [r1]
 8008b92:	eb09 0305 	add.w	r3, r9, r5
 8008b96:	2b82      	cmp	r3, #130	; 0x82
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	dc3b      	bgt.n	8008c14 <ssd1306_WriteChar+0xa4>
 8008b9c:	f89d 2009 	ldrb.w	r2, [sp, #9]
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8008ba0:	8849      	ldrh	r1, [r1, #2]
 8008ba2:	188c      	adds	r4, r1, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008ba4:	2c40      	cmp	r4, #64	; 0x40
 8008ba6:	dc35      	bgt.n	8008c14 <ssd1306_WriteChar+0xa4>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8008ba8:	b36a      	cbz	r2, 8008c06 <ssd1306_WriteChar+0x96>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008baa:	fb02 f000 	mul.w	r0, r2, r0
 8008bae:	9f03      	ldr	r7, [sp, #12]
 8008bb0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8008bb4:	3c01      	subs	r4, #1
 8008bb6:	4410      	add	r0, r2
 8008bb8:	f1a7 0a02 	sub.w	sl, r7, #2
 8008bbc:	fa5f fb81 	uxtb.w	fp, r1
 8008bc0:	eb07 0844 	add.w	r8, r7, r4, lsl #1
 8008bc4:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
        for(j = 0; j < Font.FontWidth; j++) {
 8008bc8:	2400      	movs	r4, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008bca:	f838 7f02 	ldrh.w	r7, [r8, #2]!
        for(j = 0; j < Font.FontWidth; j++) {
 8008bce:	b1a5      	cbz	r5, 8008bfa <ssd1306_WriteChar+0x8a>
            if((b << j) & 0x8000)  {
 8008bd0:	fa07 f304 	lsl.w	r3, r7, r4
 8008bd4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008bd8:	eb09 0004 	add.w	r0, r9, r4
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008bdc:	4601      	mov	r1, r0
 8008bde:	bf0c      	ite	eq
 8008be0:	fab6 f286 	clzeq	r2, r6
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008be4:	4632      	movne	r2, r6
 8008be6:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008be8:	bf04      	itt	eq
 8008bea:	0952      	lsreq	r2, r2, #5
 8008bec:	b2c8      	uxtbeq	r0, r1
        for(j = 0; j < Font.FontWidth; j++) {
 8008bee:	3401      	adds	r4, #1
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008bf0:	4659      	mov	r1, fp
 8008bf2:	f7ff ff8b 	bl	8008b0c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8008bf6:	42ac      	cmp	r4, r5
 8008bf8:	d1ea      	bne.n	8008bd0 <ssd1306_WriteChar+0x60>
    for(i = 0; i < Font.FontHeight; i++) {
 8008bfa:	f10b 0b01 	add.w	fp, fp, #1
 8008bfe:	45d0      	cmp	r8, sl
 8008c00:	fa5f fb8b 	uxtb.w	fp, fp
 8008c04:	d1e0      	bne.n	8008bc8 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008c06:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <ssd1306_WriteChar+0xac>)
 8008c08:	9a01      	ldr	r2, [sp, #4]
    
    // Return written char for validation
    return ch;
 8008c0a:	9800      	ldr	r0, [sp, #0]
    SSD1306.CurrentX += Font.FontWidth;
 8008c0c:	801a      	strh	r2, [r3, #0]
}
 8008c0e:	b005      	add	sp, #20
 8008c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8008c14:	2000      	movs	r0, #0
}
 8008c16:	b005      	add	sp, #20
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	200001f8 	.word	0x200001f8

08008c20 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	466d      	mov	r5, sp
 8008c26:	4604      	mov	r4, r0
    // Write until null-byte
    while (*str) {
 8008c28:	7800      	ldrb	r0, [r0, #0]
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008c2a:	e885 0006 	stmia.w	r5, {r1, r2}
    while (*str) {
 8008c2e:	b178      	cbz	r0, 8008c50 <ssd1306_WriteString+0x30>
 8008c30:	461e      	mov	r6, r3
 8008c32:	e002      	b.n	8008c3a <ssd1306_WriteString+0x1a>
 8008c34:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8008c38:	b150      	cbz	r0, 8008c50 <ssd1306_WriteString+0x30>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8008c3a:	e895 0006 	ldmia.w	r5, {r1, r2}
 8008c3e:	4633      	mov	r3, r6
 8008c40:	f7ff ff96 	bl	8008b70 <ssd1306_WriteChar>
 8008c44:	7822      	ldrb	r2, [r4, #0]
 8008c46:	4290      	cmp	r0, r2
 8008c48:	d0f4      	beq.n	8008c34 <ssd1306_WriteString+0x14>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008c50:	2200      	movs	r2, #0
}
 8008c52:	4610      	mov	r0, r2
 8008c54:	b002      	add	sp, #8
 8008c56:	bd70      	pop	{r4, r5, r6, pc}

08008c58 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8008c58:	4b01      	ldr	r3, [pc, #4]	; (8008c60 <ssd1306_SetCursor+0x8>)
 8008c5a:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8008c5c:	8059      	strh	r1, [r3, #2]
}
 8008c5e:	4770      	bx	lr
 8008c60:	200001f8 	.word	0x200001f8

08008c64 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8008c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008c68:	2401      	movs	r4, #1
 8008c6a:	f04f 38ff 	mov.w	r8, #4294967295
 8008c6e:	f04f 0c81 	mov.w	ip, #129	; 0x81
void ssd1306_SetContrast(const uint8_t value) {
 8008c72:	4605      	mov	r5, r0
 8008c74:	b086      	sub	sp, #24
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008c76:	4e0e      	ldr	r6, [pc, #56]	; (8008cb0 <ssd1306_SetContrast+0x4c>)
 8008c78:	f10d 0717 	add.w	r7, sp, #23
 8008c7c:	4623      	mov	r3, r4
 8008c7e:	4630      	mov	r0, r6
 8008c80:	2200      	movs	r2, #0
 8008c82:	2178      	movs	r1, #120	; 0x78
 8008c84:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8008c88:	9700      	str	r7, [sp, #0]
 8008c8a:	f88d c017 	strb.w	ip, [sp, #23]
 8008c8e:	f7fc fa09 	bl	80050a4 <HAL_I2C_Mem_Write>
 8008c92:	4623      	mov	r3, r4
 8008c94:	4630      	mov	r0, r6
 8008c96:	2200      	movs	r2, #0
 8008c98:	2178      	movs	r1, #120	; 0x78
 8008c9a:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8008c9e:	9700      	str	r7, [sp, #0]
 8008ca0:	f88d 5017 	strb.w	r5, [sp, #23]
 8008ca4:	f7fc f9fe 	bl	80050a4 <HAL_I2C_Mem_Write>
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
    ssd1306_WriteCommand(value);
}
 8008ca8:	b006      	add	sp, #24
 8008caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000a20 	.word	0x20000a20

08008cb4 <ssd1306_SetDisplayOn>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008cb4:	2301      	movs	r3, #1
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
    } else {
        value = 0xAE;   // Display off
 8008cb6:	2800      	cmp	r0, #0
void ssd1306_SetDisplayOn(const uint8_t on) {
 8008cb8:	b530      	push	{r4, r5, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008cba:	f04f 31ff 	mov.w	r1, #4294967295
    if (on) {
 8008cbe:	4604      	mov	r4, r0
        value = 0xAE;   // Display off
 8008cc0:	bf16      	itet	ne
 8008cc2:	20af      	movne	r0, #175	; 0xaf
 8008cc4:	20ae      	moveq	r0, #174	; 0xae
 8008cc6:	461c      	movne	r4, r3
void ssd1306_SetDisplayOn(const uint8_t on) {
 8008cc8:	b087      	sub	sp, #28
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008cca:	f10d 0217 	add.w	r2, sp, #23
 8008cce:	4d07      	ldr	r5, [pc, #28]	; (8008cec <ssd1306_SetDisplayOn+0x38>)
 8008cd0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008cd4:	9200      	str	r2, [sp, #0]
 8008cd6:	f88d 0017 	strb.w	r0, [sp, #23]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2178      	movs	r1, #120	; 0x78
 8008cde:	4804      	ldr	r0, [pc, #16]	; (8008cf0 <ssd1306_SetDisplayOn+0x3c>)
 8008ce0:	71ac      	strb	r4, [r5, #6]
 8008ce2:	f7fc f9df 	bl	80050a4 <HAL_I2C_Mem_Write>
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
}
 8008ce6:	b007      	add	sp, #28
 8008ce8:	bd30      	pop	{r4, r5, pc}
 8008cea:	bf00      	nop
 8008cec:	200001f8 	.word	0x200001f8
 8008cf0:	20000a20 	.word	0x20000a20

08008cf4 <ssd1306_Init>:
void ssd1306_Init(void) {
 8008cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf8:	2600      	movs	r6, #0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008cfa:	2501      	movs	r5, #1
 8008cfc:	f04f 38ff 	mov.w	r8, #4294967295
 8008d00:	2420      	movs	r4, #32
void ssd1306_Init(void) {
 8008d02:	b086      	sub	sp, #24
    HAL_Delay(100);
 8008d04:	2064      	movs	r0, #100	; 0x64
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d06:	f10d 0717 	add.w	r7, sp, #23
    HAL_Delay(100);
 8008d0a:	f7fb fa99 	bl	8004240 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f7ff ffd0 	bl	8008cb4 <ssd1306_SetDisplayOn>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d14:	462b      	mov	r3, r5
 8008d16:	4632      	mov	r2, r6
 8008d18:	2178      	movs	r1, #120	; 0x78
 8008d1a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d1e:	489f      	ldr	r0, [pc, #636]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008d20:	9700      	str	r7, [sp, #0]
 8008d22:	f88d 4017 	strb.w	r4, [sp, #23]
 8008d26:	f7fc f9bd 	bl	80050a4 <HAL_I2C_Mem_Write>
 8008d2a:	462b      	mov	r3, r5
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	2178      	movs	r1, #120	; 0x78
 8008d30:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d34:	4899      	ldr	r0, [pc, #612]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008d36:	9700      	str	r7, [sp, #0]
 8008d38:	f88d 6017 	strb.w	r6, [sp, #23]
 8008d3c:	f7fc f9b2 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008d40:	f04f 0cb0 	mov.w	ip, #176	; 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d44:	462b      	mov	r3, r5
 8008d46:	4632      	mov	r2, r6
 8008d48:	2178      	movs	r1, #120	; 0x78
 8008d4a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d4e:	4893      	ldr	r0, [pc, #588]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008d50:	9700      	str	r7, [sp, #0]
 8008d52:	f88d c017 	strb.w	ip, [sp, #23]
 8008d56:	f7fc f9a5 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8008d5a:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d5e:	462b      	mov	r3, r5
 8008d60:	4632      	mov	r2, r6
 8008d62:	2178      	movs	r1, #120	; 0x78
 8008d64:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d68:	488c      	ldr	r0, [pc, #560]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008d6a:	9700      	str	r7, [sp, #0]
 8008d6c:	f88d c017 	strb.w	ip, [sp, #23]
 8008d70:	f7fc f998 	bl	80050a4 <HAL_I2C_Mem_Write>
 8008d74:	462b      	mov	r3, r5
 8008d76:	4632      	mov	r2, r6
 8008d78:	2178      	movs	r1, #120	; 0x78
 8008d7a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d7e:	4887      	ldr	r0, [pc, #540]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008d80:	9700      	str	r7, [sp, #0]
 8008d82:	f88d 6017 	strb.w	r6, [sp, #23]
 8008d86:	f7fc f98d 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x10); //---set high column address
 8008d8a:	f04f 0c10 	mov.w	ip, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008d8e:	462b      	mov	r3, r5
 8008d90:	4632      	mov	r2, r6
 8008d92:	2178      	movs	r1, #120	; 0x78
 8008d94:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008d98:	4880      	ldr	r0, [pc, #512]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008d9a:	9700      	str	r7, [sp, #0]
 8008d9c:	f88d c017 	strb.w	ip, [sp, #23]
 8008da0:	f7fc f980 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8008da4:	f04f 0c40 	mov.w	ip, #64	; 0x40
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008da8:	462b      	mov	r3, r5
 8008daa:	4632      	mov	r2, r6
 8008dac:	2178      	movs	r1, #120	; 0x78
 8008dae:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008db2:	487a      	ldr	r0, [pc, #488]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008db4:	9700      	str	r7, [sp, #0]
 8008db6:	f88d c017 	strb.w	ip, [sp, #23]
 8008dba:	f7fc f973 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_SetContrast(0xFF);
 8008dbe:	20ff      	movs	r0, #255	; 0xff
 8008dc0:	f7ff ff50 	bl	8008c64 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8008dc4:	f04f 0ca1 	mov.w	ip, #161	; 0xa1
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008dc8:	462b      	mov	r3, r5
 8008dca:	4632      	mov	r2, r6
 8008dcc:	2178      	movs	r1, #120	; 0x78
 8008dce:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008dd2:	4872      	ldr	r0, [pc, #456]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008dd4:	9700      	str	r7, [sp, #0]
 8008dd6:	f88d c017 	strb.w	ip, [sp, #23]
 8008dda:	f7fc f963 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8008dde:	f04f 0ca6 	mov.w	ip, #166	; 0xa6
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008de2:	462b      	mov	r3, r5
 8008de4:	4632      	mov	r2, r6
 8008de6:	2178      	movs	r1, #120	; 0x78
 8008de8:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008dec:	486b      	ldr	r0, [pc, #428]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008dee:	9700      	str	r7, [sp, #0]
 8008df0:	f88d c017 	strb.w	ip, [sp, #23]
 8008df4:	f7fc f956 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008df8:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	4632      	mov	r2, r6
 8008e00:	2178      	movs	r1, #120	; 0x78
 8008e02:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e06:	4865      	ldr	r0, [pc, #404]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008e08:	9700      	str	r7, [sp, #0]
 8008e0a:	f88d c017 	strb.w	ip, [sp, #23]
 8008e0e:	f7fc f949 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x3F); //
 8008e12:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e16:	462b      	mov	r3, r5
 8008e18:	4632      	mov	r2, r6
 8008e1a:	2178      	movs	r1, #120	; 0x78
 8008e1c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e20:	485e      	ldr	r0, [pc, #376]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008e22:	9700      	str	r7, [sp, #0]
 8008e24:	f88d c017 	strb.w	ip, [sp, #23]
 8008e28:	f7fc f93c 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008e2c:	f04f 0ca4 	mov.w	ip, #164	; 0xa4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e30:	462b      	mov	r3, r5
 8008e32:	4632      	mov	r2, r6
 8008e34:	2178      	movs	r1, #120	; 0x78
 8008e36:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e3a:	4858      	ldr	r0, [pc, #352]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008e3c:	9700      	str	r7, [sp, #0]
 8008e3e:	f88d c017 	strb.w	ip, [sp, #23]
 8008e42:	f7fc f92f 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8008e46:	f04f 0cd3 	mov.w	ip, #211	; 0xd3
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e4a:	462b      	mov	r3, r5
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	2178      	movs	r1, #120	; 0x78
 8008e50:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e54:	4851      	ldr	r0, [pc, #324]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008e56:	9700      	str	r7, [sp, #0]
 8008e58:	f88d c017 	strb.w	ip, [sp, #23]
 8008e5c:	f7fc f922 	bl	80050a4 <HAL_I2C_Mem_Write>
 8008e60:	462b      	mov	r3, r5
 8008e62:	4632      	mov	r2, r6
 8008e64:	2178      	movs	r1, #120	; 0x78
 8008e66:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e6a:	484c      	ldr	r0, [pc, #304]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008e6c:	9700      	str	r7, [sp, #0]
 8008e6e:	f88d 6017 	strb.w	r6, [sp, #23]
 8008e72:	f7fc f917 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8008e76:	f04f 0cd5 	mov.w	ip, #213	; 0xd5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	2178      	movs	r1, #120	; 0x78
 8008e80:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e84:	4845      	ldr	r0, [pc, #276]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008e86:	9700      	str	r7, [sp, #0]
 8008e88:	f88d c017 	strb.w	ip, [sp, #23]
 8008e8c:	f7fc f90a 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8008e90:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008e94:	462b      	mov	r3, r5
 8008e96:	4632      	mov	r2, r6
 8008e98:	2178      	movs	r1, #120	; 0x78
 8008e9a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008e9e:	483f      	ldr	r0, [pc, #252]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008ea0:	9700      	str	r7, [sp, #0]
 8008ea2:	f88d c017 	strb.w	ip, [sp, #23]
 8008ea6:	f7fc f8fd 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8008eaa:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008eae:	462b      	mov	r3, r5
 8008eb0:	4632      	mov	r2, r6
 8008eb2:	2178      	movs	r1, #120	; 0x78
 8008eb4:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008eb8:	4838      	ldr	r0, [pc, #224]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008eba:	9700      	str	r7, [sp, #0]
 8008ebc:	f88d c017 	strb.w	ip, [sp, #23]
 8008ec0:	f7fc f8f0 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x22); //
 8008ec4:	f04f 0c22 	mov.w	ip, #34	; 0x22
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008ec8:	462b      	mov	r3, r5
 8008eca:	4632      	mov	r2, r6
 8008ecc:	2178      	movs	r1, #120	; 0x78
 8008ece:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008ed2:	4832      	ldr	r0, [pc, #200]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008ed4:	9700      	str	r7, [sp, #0]
 8008ed6:	f88d c017 	strb.w	ip, [sp, #23]
 8008eda:	f7fc f8e3 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8008ede:	f04f 0cda 	mov.w	ip, #218	; 0xda
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	2178      	movs	r1, #120	; 0x78
 8008ee8:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008eec:	482b      	ldr	r0, [pc, #172]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008eee:	9700      	str	r7, [sp, #0]
 8008ef0:	f88d c017 	strb.w	ip, [sp, #23]
 8008ef4:	f7fc f8d6 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x12);
 8008ef8:	f04f 0c12 	mov.w	ip, #18
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008efc:	462b      	mov	r3, r5
 8008efe:	4632      	mov	r2, r6
 8008f00:	2178      	movs	r1, #120	; 0x78
 8008f02:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f06:	4825      	ldr	r0, [pc, #148]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008f08:	9700      	str	r7, [sp, #0]
 8008f0a:	f88d c017 	strb.w	ip, [sp, #23]
 8008f0e:	f7fc f8c9 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8008f12:	f04f 0cdb 	mov.w	ip, #219	; 0xdb
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008f16:	462b      	mov	r3, r5
 8008f18:	4632      	mov	r2, r6
 8008f1a:	2178      	movs	r1, #120	; 0x78
 8008f1c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f20:	481e      	ldr	r0, [pc, #120]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008f22:	9700      	str	r7, [sp, #0]
 8008f24:	f88d c017 	strb.w	ip, [sp, #23]
 8008f28:	f7fc f8bc 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8008f2c:	f88d 4017 	strb.w	r4, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008f30:	248d      	movs	r4, #141	; 0x8d
 8008f32:	462b      	mov	r3, r5
 8008f34:	4632      	mov	r2, r6
 8008f36:	2178      	movs	r1, #120	; 0x78
 8008f38:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f3c:	4817      	ldr	r0, [pc, #92]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008f3e:	9700      	str	r7, [sp, #0]
 8008f40:	f7fc f8b0 	bl	80050a4 <HAL_I2C_Mem_Write>
 8008f44:	462b      	mov	r3, r5
 8008f46:	4632      	mov	r2, r6
 8008f48:	2178      	movs	r1, #120	; 0x78
 8008f4a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f4e:	4813      	ldr	r0, [pc, #76]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008f50:	9700      	str	r7, [sp, #0]
 8008f52:	f88d 4017 	strb.w	r4, [sp, #23]
 8008f56:	f7fc f8a5 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_WriteCommand(0x14); //
 8008f5a:	f04f 0c14 	mov.w	ip, #20
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008f5e:	4634      	mov	r4, r6
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008f60:	462b      	mov	r3, r5
 8008f62:	4632      	mov	r2, r6
 8008f64:	2178      	movs	r1, #120	; 0x78
 8008f66:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008f6a:	480c      	ldr	r0, [pc, #48]	; (8008f9c <ssd1306_Init+0x2a8>)
 8008f6c:	9700      	str	r7, [sp, #0]
 8008f6e:	f88d c017 	strb.w	ip, [sp, #23]
 8008f72:	f7fc f897 	bl	80050a4 <HAL_I2C_Mem_Write>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8008f76:	4628      	mov	r0, r5
 8008f78:	f7ff fe9c 	bl	8008cb4 <ssd1306_SetDisplayOn>
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008f7c:	4b08      	ldr	r3, [pc, #32]	; (8008fa0 <ssd1306_Init+0x2ac>)
 8008f7e:	f503 6282 	add.w	r2, r3, #1040	; 0x410
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008f82:	f803 4f01 	strb.w	r4, [r3, #1]!
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d1fb      	bne.n	8008f82 <ssd1306_Init+0x28e>
    ssd1306_UpdateScreen();
 8008f8a:	f7ff fd73 	bl	8008a74 <ssd1306_UpdateScreen>
    SSD1306.Initialized = 1;
 8008f8e:	2201      	movs	r2, #1
    SSD1306.CurrentX = 0;
 8008f90:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <ssd1306_Init+0x2b0>)
    SSD1306.Initialized = 1;
 8008f92:	715a      	strb	r2, [r3, #5]
    SSD1306.CurrentX = 0;
 8008f94:	601c      	str	r4, [r3, #0]
}
 8008f96:	b006      	add	sp, #24
 8008f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f9c:	20000a20 	.word	0x20000a20
 8008fa0:	200001ff 	.word	0x200001ff
 8008fa4:	200001f8 	.word	0x200001f8

08008fa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

	// This is a bit hackey, but we don't want to register the USB sound device, just the MIDI device.
	// So we register that class then return.

  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008faa:	2200      	movs	r2, #0
 8008fac:	490a      	ldr	r1, [pc, #40]	; (8008fd8 <MX_USB_DEVICE_Init+0x30>)
 8008fae:	480b      	ldr	r0, [pc, #44]	; (8008fdc <MX_USB_DEVICE_Init+0x34>)
 8008fb0:	f7ff f948 	bl	8008244 <USBD_Init>
 8008fb4:	b960      	cbnz	r0, 8008fd0 <MX_USB_DEVICE_Init+0x28>
  {
	Error_Handler();
  }

	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8008fb6:	490a      	ldr	r1, [pc, #40]	; (8008fe0 <MX_USB_DEVICE_Init+0x38>)
 8008fb8:	4808      	ldr	r0, [pc, #32]	; (8008fdc <MX_USB_DEVICE_Init+0x34>)
 8008fba:	f7ff f959 	bl	8008270 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8008fbe:	4909      	ldr	r1, [pc, #36]	; (8008fe4 <MX_USB_DEVICE_Init+0x3c>)
 8008fc0:	4806      	ldr	r0, [pc, #24]	; (8008fdc <MX_USB_DEVICE_Init+0x34>)
 8008fc2:	f7ff f937 	bl	8008234 <USBD_MIDI_RegisterInterface>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */


  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008fc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	USBD_Start(&hUsbDeviceFS);
 8008fca:	4804      	ldr	r0, [pc, #16]	; (8008fdc <MX_USB_DEVICE_Init+0x34>)
 8008fcc:	f7ff b958 	b.w	8008280 <USBD_Start>
	Error_Handler();
 8008fd0:	f7fa faf2 	bl	80035b8 <Error_Handler>
 8008fd4:	e7ef      	b.n	8008fb6 <MX_USB_DEVICE_Init+0xe>
 8008fd6:	bf00      	nop
 8008fd8:	20000168 	.word	0x20000168
 8008fdc:	20000d90 	.word	0x20000d90
 8008fe0:	200000b8 	.word	0x200000b8
 8008fe4:	200001b8 	.word	0x200001b8

08008fe8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fe8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8008fea:	4801      	ldr	r0, [pc, #4]	; (8008ff0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fec:	800b      	strh	r3, [r1, #0]
}
 8008fee:	4770      	bx	lr
 8008ff0:	20000184 	.word	0x20000184

08008ff4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ff4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8008ff6:	4801      	ldr	r0, [pc, #4]	; (8008ffc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8008ff8:	800b      	strh	r3, [r1, #0]
}
 8008ffa:	4770      	bx	lr
 8008ffc:	20000198 	.word	0x20000198

08009000 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009000:	2300      	movs	r3, #0
 8009002:	b4f0      	push	{r4, r5, r6, r7}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009004:	461f      	mov	r7, r3
 8009006:	0052      	lsls	r2, r2, #1
 8009008:	1c4e      	adds	r6, r1, #1
    if (((value >> 28)) < 0xA)
 800900a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800900e:	ea4f 7410 	mov.w	r4, r0, lsr #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8009012:	f104 0530 	add.w	r5, r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009016:	bf2a      	itet	cs
 8009018:	3437      	addcs	r4, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800901a:	54cd      	strbcc	r5, [r1, r3]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800901c:	54cc      	strbcs	r4, [r1, r3]
    pbuf[2 * idx + 1] = 0;
 800901e:	54f7      	strb	r7, [r6, r3]
 8009020:	3302      	adds	r3, #2
  for (idx = 0; idx < len; idx++)
 8009022:	429a      	cmp	r2, r3
    value = value << 4;
 8009024:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8009028:	d1ef      	bne.n	800900a <IntToUnicode+0xa>
  }
}
 800902a:	bcf0      	pop	{r4, r5, r6, r7}
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop

08009030 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8009030:	221a      	movs	r2, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009032:	480b      	ldr	r0, [pc, #44]	; (8009060 <USBD_FS_SerialStrDescriptor+0x30>)
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009034:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009036:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 8009038:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800903a:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 800903c:	18c0      	adds	r0, r0, r3
 800903e:	d101      	bne.n	8009044 <USBD_FS_SerialStrDescriptor+0x14>
}
 8009040:	4809      	ldr	r0, [pc, #36]	; (8009068 <USBD_FS_SerialStrDescriptor+0x38>)
 8009042:	4770      	bx	lr
{
 8009044:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009046:	4b09      	ldr	r3, [pc, #36]	; (800906c <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009048:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800904a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800904c:	4908      	ldr	r1, [pc, #32]	; (8009070 <USBD_FS_SerialStrDescriptor+0x40>)
 800904e:	f7ff ffd7 	bl	8009000 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009052:	4620      	mov	r0, r4
 8009054:	2204      	movs	r2, #4
 8009056:	4907      	ldr	r1, [pc, #28]	; (8009074 <USBD_FS_SerialStrDescriptor+0x44>)
 8009058:	f7ff ffd2 	bl	8009000 <IntToUnicode>
}
 800905c:	4802      	ldr	r0, [pc, #8]	; (8009068 <USBD_FS_SerialStrDescriptor+0x38>)
 800905e:	bd10      	pop	{r4, pc}
 8009060:	1ffff7e8 	.word	0x1ffff7e8
 8009064:	1ffff7f0 	.word	0x1ffff7f0
 8009068:	2000019c 	.word	0x2000019c
 800906c:	1ffff7ec 	.word	0x1ffff7ec
 8009070:	2000019e 	.word	0x2000019e
 8009074:	200001ae 	.word	0x200001ae

08009078 <USBD_FS_ManufacturerStrDescriptor>:
{
 8009078:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800907a:	4c04      	ldr	r4, [pc, #16]	; (800908c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800907c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800907e:	4804      	ldr	r0, [pc, #16]	; (8009090 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8009080:	4621      	mov	r1, r4
 8009082:	f7ff fc89 	bl	8008998 <USBD_GetString>
}
 8009086:	4620      	mov	r0, r4
 8009088:	bd10      	pop	{r4, pc}
 800908a:	bf00      	nop
 800908c:	20001054 	.word	0x20001054
 8009090:	0800ac5c 	.word	0x0800ac5c

08009094 <USBD_FS_ProductStrDescriptor>:
{
 8009094:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009096:	4c04      	ldr	r4, [pc, #16]	; (80090a8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8009098:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800909a:	4804      	ldr	r0, [pc, #16]	; (80090ac <USBD_FS_ProductStrDescriptor+0x18>)
 800909c:	4621      	mov	r1, r4
 800909e:	f7ff fc7b 	bl	8008998 <USBD_GetString>
}
 80090a2:	4620      	mov	r0, r4
 80090a4:	bd10      	pop	{r4, pc}
 80090a6:	bf00      	nop
 80090a8:	20001054 	.word	0x20001054
 80090ac:	0800ac70 	.word	0x0800ac70

080090b0 <USBD_FS_ConfigStrDescriptor>:
{
 80090b0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090b2:	4c04      	ldr	r4, [pc, #16]	; (80090c4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80090b4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090b6:	4804      	ldr	r0, [pc, #16]	; (80090c8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80090b8:	4621      	mov	r1, r4
 80090ba:	f7ff fc6d 	bl	8008998 <USBD_GetString>
}
 80090be:	4620      	mov	r0, r4
 80090c0:	bd10      	pop	{r4, pc}
 80090c2:	bf00      	nop
 80090c4:	20001054 	.word	0x20001054
 80090c8:	0800ac84 	.word	0x0800ac84

080090cc <USBD_FS_InterfaceStrDescriptor>:
{
 80090cc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ce:	4c04      	ldr	r4, [pc, #16]	; (80090e0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80090d0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090d2:	4804      	ldr	r0, [pc, #16]	; (80090e4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80090d4:	4621      	mov	r1, r4
 80090d6:	f7ff fc5f 	bl	8008998 <USBD_GetString>
}
 80090da:	4620      	mov	r0, r4
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	bf00      	nop
 80090e0:	20001054 	.word	0x20001054
 80090e4:	0800ac94 	.word	0x0800ac94

080090e8 <MIDI_DataTx>:

	return 0;
}

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 80090e8:	b508      	push	{r3, lr}
  USBD_MIDI_SendPacket(msg, length);
 80090ea:	b2c9      	uxtb	r1, r1
 80090ec:	f7ff f884 	bl	80081f8 <USBD_MIDI_SendPacket>
  return USBD_OK;
}
 80090f0:	2000      	movs	r0, #0
 80090f2:	bd08      	pop	{r3, pc}

080090f4 <sysex_send_message>:
void sysex_send_message(uint8_t* buffer, uint8_t length){
 80090f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while(buff_ptr < length + buffer){
 80090f8:	1844      	adds	r4, r0, r1
 80090fa:	42a0      	cmp	r0, r4
 80090fc:	d243      	bcs.n	8009186 <sysex_send_message+0x92>
	uint8_t *assembly_ptr = sysex_tx_assembly_buffer;
 80090fe:	4925      	ldr	r1, [pc, #148]	; (8009194 <sysex_send_message+0xa0>)
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_SINGLE_BYTE;
 8009100:	f04f 0905 	mov.w	r9, #5
	uint8_t *assembly_ptr = sysex_tx_assembly_buffer;
 8009104:	460a      	mov	r2, r1
			*assembly_ptr++ = 0xFF;
 8009106:	27ff      	movs	r7, #255	; 0xff
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_TWO_BYTES;
 8009108:	f04f 0e06 	mov.w	lr, #6
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_THREE_BYTES;
 800910c:	f04f 0807 	mov.w	r8, #7
			assembly_ptr[0] = CIN_SYSEX_STARTS_OR_CONTINUES;
 8009110:	f04f 0c04 	mov.w	ip, #4
 8009114:	e011      	b.n	800913a <sysex_send_message+0x46>
		} else if (data_to_go == 3) {
 8009116:	d032      	beq.n	800917e <sysex_send_message+0x8a>
		} else if (data_to_go == 2) {
 8009118:	2b02      	cmp	r3, #2
 800911a:	d026      	beq.n	800916a <sysex_send_message+0x76>
		} else if (data_to_go == 1) {
 800911c:	2b01      	cmp	r3, #1
 800911e:	d10a      	bne.n	8009136 <sysex_send_message+0x42>
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_SINGLE_BYTE;
 8009120:	f882 9000 	strb.w	r9, [r2]
			memcpy(assembly_ptr+1, buff_ptr, 1);
 8009124:	f810 3b01 	ldrb.w	r3, [r0], #1
			*assembly_ptr++ = 0xFF;
 8009128:	3204      	adds	r2, #4
			*assembly_ptr++ = 0xFF;
 800912a:	f802 7c02 	strb.w	r7, [r2, #-2]
			memcpy(assembly_ptr+1, buff_ptr, 1);
 800912e:	f802 3c03 	strb.w	r3, [r2, #-3]
			*assembly_ptr++ = 0xFF;
 8009132:	f802 7c01 	strb.w	r7, [r2, #-1]
	while(buff_ptr < length + buffer){
 8009136:	42a0      	cmp	r0, r4
 8009138:	d210      	bcs.n	800915c <sysex_send_message+0x68>
		uint8_t data_to_go = length + buffer - buff_ptr;
 800913a:	1a23      	subs	r3, r4, r0
 800913c:	b2db      	uxtb	r3, r3
		if(data_to_go > 3){
 800913e:	2b03      	cmp	r3, #3
 8009140:	d9e9      	bls.n	8009116 <sysex_send_message+0x22>
			assembly_ptr[0] = CIN_SYSEX_STARTS_OR_CONTINUES;
 8009142:	4613      	mov	r3, r2
 8009144:	f803 cb01 	strb.w	ip, [r3], #1
			memcpy(assembly_ptr+1, buff_ptr, 3);
 8009148:	8806      	ldrh	r6, [r0, #0]
 800914a:	7885      	ldrb	r5, [r0, #2]
			buff_ptr += 3;
 800914c:	3003      	adds	r0, #3
	while(buff_ptr < length + buffer){
 800914e:	42a0      	cmp	r0, r4
			memcpy(assembly_ptr+1, buff_ptr, 3);
 8009150:	f8a2 6001 	strh.w	r6, [r2, #1]
 8009154:	709d      	strb	r5, [r3, #2]
			assembly_ptr += 4;
 8009156:	f102 0204 	add.w	r2, r2, #4
	while(buff_ptr < length + buffer){
 800915a:	d3ee      	bcc.n	800913a <sysex_send_message+0x46>
}
 800915c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009160:	1a51      	subs	r1, r2, r1
  USBD_MIDI_SendPacket(msg, length);
 8009162:	480c      	ldr	r0, [pc, #48]	; (8009194 <sysex_send_message+0xa0>)
 8009164:	b2c9      	uxtb	r1, r1
 8009166:	f7ff b847 	b.w	80081f8 <USBD_MIDI_SendPacket>
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_TWO_BYTES;
 800916a:	f882 e000 	strb.w	lr, [r2]
			memcpy(assembly_ptr+1, buff_ptr, 2);
 800916e:	f830 3b02 	ldrh.w	r3, [r0], #2
			*assembly_ptr++ = 0xFF;
 8009172:	3204      	adds	r2, #4
 8009174:	f802 7c01 	strb.w	r7, [r2, #-1]
			memcpy(assembly_ptr+1, buff_ptr, 2);
 8009178:	f822 3c03 	strh.w	r3, [r2, #-3]
			*assembly_ptr++ = 0xFF;
 800917c:	e7db      	b.n	8009136 <sysex_send_message+0x42>
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_THREE_BYTES;
 800917e:	4613      	mov	r3, r2
 8009180:	f803 8b01 	strb.w	r8, [r3], #1
 8009184:	e7e0      	b.n	8009148 <sysex_send_message+0x54>
	while(buff_ptr < length + buffer){
 8009186:	2100      	movs	r1, #0
}
 8009188:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USBD_MIDI_SendPacket(msg, length);
 800918c:	4801      	ldr	r0, [pc, #4]	; (8009194 <sysex_send_message+0xa0>)
 800918e:	f7ff b833 	b.w	80081f8 <USBD_MIDI_SendPacket>
 8009192:	bf00      	nop
 8009194:	20001294 	.word	0x20001294

08009198 <sysex_erase_eeprom>:
	if(data_packet_start[0] != 0x42 || data_packet_start[1] != 0x24){
 8009198:	7803      	ldrb	r3, [r0, #0]
 800919a:	2b42      	cmp	r3, #66	; 0x42
 800919c:	d133      	bne.n	8009206 <sysex_erase_eeprom+0x6e>
 800919e:	7843      	ldrb	r3, [r0, #1]
 80091a0:	2b24      	cmp	r3, #36	; 0x24
 80091a2:	d130      	bne.n	8009206 <sysex_erase_eeprom+0x6e>
void sysex_erase_eeprom(uint8_t* data_packet_start){
 80091a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bytes = 0;
 80091a8:	2400      	movs	r4, #0
		HAL_I2C_Mem_Write(&hi2c1, 0xA0 | ((bytes & 0x0300) >> 7), (bytes & 0xff), I2C_MEMADD_SIZE_8BIT, eraseData, sizeof(eraseData), 100);
 80091aa:	f04f 0864 	mov.w	r8, #100	; 0x64
 80091ae:	2708      	movs	r7, #8
	uint8_t eraseData[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
 80091b0:	4b15      	ldr	r3, [pc, #84]	; (8009208 <sysex_erase_eeprom+0x70>)
void sysex_erase_eeprom(uint8_t* data_packet_start){
 80091b2:	b086      	sub	sp, #24
	uint8_t eraseData[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
 80091b4:	ad04      	add	r5, sp, #16
 80091b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80091ba:	e885 0003 	stmia.w	r5, {r0, r1}
		HAL_I2C_Mem_Write(&hi2c1, 0xA0 | ((bytes & 0x0300) >> 7), (bytes & 0xff), I2C_MEMADD_SIZE_8BIT, eraseData, sizeof(eraseData), 100);
 80091be:	4e13      	ldr	r6, [pc, #76]	; (800920c <sysex_erase_eeprom+0x74>)
 80091c0:	09e1      	lsrs	r1, r4, #7
 80091c2:	f001 0106 	and.w	r1, r1, #6
 80091c6:	b2e2      	uxtb	r2, r4
 80091c8:	2301      	movs	r3, #1
 80091ca:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 80091ce:	4630      	mov	r0, r6
 80091d0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80091d4:	9500      	str	r5, [sp, #0]
 80091d6:	f7fb ff65 	bl	80050a4 <HAL_I2C_Mem_Write>
		bytes += sizeof(eraseData);
 80091da:	3408      	adds	r4, #8
		HAL_Delay(5);
 80091dc:	2005      	movs	r0, #5
 80091de:	f7fb f82f 	bl	8004240 <HAL_Delay>
	while ( bytes < 1024)
 80091e2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80091e6:	d1eb      	bne.n	80091c0 <sysex_erase_eeprom+0x28>
	midi_msg_tx_buffer[2] = SYSEX_RSP_ERASE_EEPROM;
 80091e8:	2235      	movs	r2, #53	; 0x35
	midi_msg_tx_buffer[3] = SYSEX_END;
 80091ea:	23f7      	movs	r3, #247	; 0xf7
	midi_msg_tx_buffer[0] = SYSEX_START;
 80091ec:	25f0      	movs	r5, #240	; 0xf0
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 80091ee:	247d      	movs	r4, #125	; 0x7d
	midi_msg_tx_buffer[0] = SYSEX_START;
 80091f0:	4807      	ldr	r0, [pc, #28]	; (8009210 <sysex_erase_eeprom+0x78>)
	sysex_send_message(midi_msg_tx_buffer, 4);
 80091f2:	2104      	movs	r1, #4
	midi_msg_tx_buffer[0] = SYSEX_START;
 80091f4:	7005      	strb	r5, [r0, #0]
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 80091f6:	7044      	strb	r4, [r0, #1]
	midi_msg_tx_buffer[2] = SYSEX_RSP_ERASE_EEPROM;
 80091f8:	7082      	strb	r2, [r0, #2]
	midi_msg_tx_buffer[3] = SYSEX_END;
 80091fa:	70c3      	strb	r3, [r0, #3]
	sysex_send_message(midi_msg_tx_buffer, 4);
 80091fc:	f7ff ff7a 	bl	80090f4 <sysex_send_message>
}
 8009200:	b006      	add	sp, #24
 8009202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009206:	4770      	bx	lr
 8009208:	0800aca4 	.word	0x0800aca4
 800920c:	20000a20 	.word	0x20000a20
 8009210:	20001254 	.word	0x20001254

08009214 <sysex_write_eeprom>:
void sysex_write_eeprom(uint8_t* data_packet_start){
 8009214:	b530      	push	{r4, r5, lr}
 8009216:	4604      	mov	r4, r0
	uint16_t ee_byte_address = data_packet_start[0] * 16;
 8009218:	7802      	ldrb	r2, [r0, #0]
void sysex_write_eeprom(uint8_t* data_packet_start){
 800921a:	b089      	sub	sp, #36	; 0x24
 800921c:	f10d 010f 	add.w	r1, sp, #15
	uint16_t ee_byte_address = data_packet_start[0] * 16;
 8009220:	0112      	lsls	r2, r2, #4
	for (int i=0; i<16; i++){
 8009222:	f10d 051f 	add.w	r5, sp, #31
		reassembled_array[i] = data_packet_start[2*i] << 4 | data_packet_start[2*i + 1];
 8009226:	7860      	ldrb	r0, [r4, #1]
 8009228:	f814 3f02 	ldrb.w	r3, [r4, #2]!
 800922c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8009230:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (int i=0; i<16; i++){
 8009234:	428d      	cmp	r5, r1
 8009236:	d1f6      	bne.n	8009226 <sysex_write_eeprom+0x12>
	HAL_I2C_Mem_Write(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, reassembled_array, 16, 100);
 8009238:	2010      	movs	r0, #16
 800923a:	2464      	movs	r4, #100	; 0x64
 800923c:	11d1      	asrs	r1, r2, #7
 800923e:	eb0d 0300 	add.w	r3, sp, r0
 8009242:	f001 0106 	and.w	r1, r1, #6
 8009246:	e9cd 0401 	strd	r0, r4, [sp, #4]
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8009250:	2301      	movs	r3, #1
 8009252:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009256:	4808      	ldr	r0, [pc, #32]	; (8009278 <sysex_write_eeprom+0x64>)
 8009258:	f7fb ff24 	bl	80050a4 <HAL_I2C_Mem_Write>
	midi_msg_tx_buffer[0] = SYSEX_START;
 800925c:	25f0      	movs	r5, #240	; 0xf0
	midi_msg_tx_buffer[2] = SYSEX_RSP_WRITE_EEPROM;
 800925e:	2237      	movs	r2, #55	; 0x37
	midi_msg_tx_buffer[3] = SYSEX_END;
 8009260:	23f7      	movs	r3, #247	; 0xf7
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 8009262:	247d      	movs	r4, #125	; 0x7d
	midi_msg_tx_buffer[0] = SYSEX_START;
 8009264:	4805      	ldr	r0, [pc, #20]	; (800927c <sysex_write_eeprom+0x68>)
	sysex_send_message(midi_msg_tx_buffer, 4);
 8009266:	2104      	movs	r1, #4
	midi_msg_tx_buffer[0] = SYSEX_START;
 8009268:	7005      	strb	r5, [r0, #0]
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 800926a:	7044      	strb	r4, [r0, #1]
	midi_msg_tx_buffer[2] = SYSEX_RSP_WRITE_EEPROM;
 800926c:	7082      	strb	r2, [r0, #2]
	midi_msg_tx_buffer[3] = SYSEX_END;
 800926e:	70c3      	strb	r3, [r0, #3]
	sysex_send_message(midi_msg_tx_buffer, 4);
 8009270:	f7ff ff40 	bl	80090f4 <sysex_send_message>
}
 8009274:	b009      	add	sp, #36	; 0x24
 8009276:	bd30      	pop	{r4, r5, pc}
 8009278:	20000a20 	.word	0x20000a20
 800927c:	20001254 	.word	0x20001254

08009280 <sysex_dump_eeprom_page>:
void sysex_dump_eeprom_page(uint8_t page_number){
 8009280:	b5f0      	push	{r4, r5, r6, r7, lr}
	midi_msg_tx_buffer[0] = SYSEX_START;
 8009282:	23f0      	movs	r3, #240	; 0xf0
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 8009284:	2710      	movs	r7, #16
 8009286:	f04f 0c64 	mov.w	ip, #100	; 0x64
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 800928a:	267d      	movs	r6, #125	; 0x7d
	midi_msg_tx_buffer[2] = SYSEX_RSP_DUMP_EEPROM;
 800928c:	2433      	movs	r4, #51	; 0x33
	midi_msg_tx_buffer[0] = SYSEX_START;
 800928e:	4d17      	ldr	r5, [pc, #92]	; (80092ec <sysex_dump_eeprom_page+0x6c>)
void sysex_dump_eeprom_page(uint8_t page_number){
 8009290:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 8009292:	08c1      	lsrs	r1, r0, #3
	uint16_t ee_byte_address = page_number * 16;
 8009294:	0102      	lsls	r2, r0, #4
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 8009296:	f001 0106 	and.w	r1, r1, #6
 800929a:	401a      	ands	r2, r3
	midi_msg_tx_buffer[0] = SYSEX_START;
 800929c:	702b      	strb	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 800929e:	eb0d 0307 	add.w	r3, sp, r7
	midi_msg_tx_buffer[3] = page_number;
 80092a2:	70e8      	strb	r0, [r5, #3]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 80092aa:	2301      	movs	r3, #1
 80092ac:	4810      	ldr	r0, [pc, #64]	; (80092f0 <sysex_dump_eeprom_page+0x70>)
 80092ae:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 80092b2:	706e      	strb	r6, [r5, #1]
	midi_msg_tx_buffer[2] = SYSEX_RSP_DUMP_EEPROM;
 80092b4:	70ac      	strb	r4, [r5, #2]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0xA0 | ((ee_byte_address & 0x0300) >> 7), (ee_byte_address & 0xff), I2C_MEMADD_SIZE_8BIT, eeprom_buffer, 16, 100);
 80092b6:	f7fb ff97 	bl	80051e8 <HAL_I2C_Mem_Read>
	if(status == HAL_OK){
 80092ba:	b9a8      	cbnz	r0, 80092e8 <sysex_dump_eeprom_page+0x68>
 80092bc:	462a      	mov	r2, r5
 80092be:	f10d 010f 	add.w	r1, sp, #15
 80092c2:	f10d 041f 	add.w	r4, sp, #31
			midi_msg_tx_buffer[4+(i*2)] = eeprom_buffer[i] >> 4;
 80092c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092ca:	3202      	adds	r2, #2
 80092cc:	0918      	lsrs	r0, r3, #4
		for(int i=0; i<16; i++){
 80092ce:	42a1      	cmp	r1, r4
			midi_msg_tx_buffer[4+(i*2)+1] = eeprom_buffer[i] & 0x0F;
 80092d0:	f003 030f 	and.w	r3, r3, #15
			midi_msg_tx_buffer[4+(i*2)] = eeprom_buffer[i] >> 4;
 80092d4:	7090      	strb	r0, [r2, #2]
			midi_msg_tx_buffer[4+(i*2)+1] = eeprom_buffer[i] & 0x0F;
 80092d6:	70d3      	strb	r3, [r2, #3]
		for(int i=0; i<16; i++){
 80092d8:	d1f5      	bne.n	80092c6 <sysex_dump_eeprom_page+0x46>
		midi_msg_tx_buffer[4+32] = SYSEX_END;
 80092da:	23f7      	movs	r3, #247	; 0xf7
		sysex_send_message(midi_msg_tx_buffer, 37);
 80092dc:	2125      	movs	r1, #37	; 0x25
 80092de:	4803      	ldr	r0, [pc, #12]	; (80092ec <sysex_dump_eeprom_page+0x6c>)
		midi_msg_tx_buffer[4+32] = SYSEX_END;
 80092e0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
		sysex_send_message(midi_msg_tx_buffer, 37);
 80092e4:	f7ff ff06 	bl	80090f4 <sysex_send_message>
}
 80092e8:	b009      	add	sp, #36	; 0x24
 80092ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ec:	20001254 	.word	0x20001254
 80092f0:	20000a20 	.word	0x20000a20

080092f4 <process_sysex_message>:
void process_sysex_message(void){
 80092f4:	b510      	push	{r4, lr}
	if(sysex_rx_buffer[0] != SYSEX_START ||
 80092f6:	4b24      	ldr	r3, [pc, #144]	; (8009388 <process_sysex_message+0x94>)
 80092f8:	4c24      	ldr	r4, [pc, #144]	; (800938c <process_sysex_message+0x98>)
 80092fa:	781a      	ldrb	r2, [r3, #0]
 80092fc:	2af0      	cmp	r2, #240	; 0xf0
 80092fe:	d105      	bne.n	800930c <process_sysex_message+0x18>
			sysex_rx_buffer[sysex_rx_counter -1] != SYSEX_END){
 8009300:	7822      	ldrb	r2, [r4, #0]
 8009302:	441a      	add	r2, r3
	if(sysex_rx_buffer[0] != SYSEX_START ||
 8009304:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8009308:	2af7      	cmp	r2, #247	; 0xf7
 800930a:	d002      	beq.n	8009312 <process_sysex_message+0x1e>
	sysex_rx_counter = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	7023      	strb	r3, [r4, #0]
}
 8009310:	bd10      	pop	{r4, pc}
	if(pSysexHead->manuf_id != MIDI_MANUF_ID){
 8009312:	785a      	ldrb	r2, [r3, #1]
 8009314:	2a7d      	cmp	r2, #125	; 0x7d
 8009316:	d1f9      	bne.n	800930c <process_sysex_message+0x18>
	switch(pSysexHead->msg_cmd){
 8009318:	789a      	ldrb	r2, [r3, #2]
 800931a:	3a32      	subs	r2, #50	; 0x32
 800931c:	2a0a      	cmp	r2, #10
 800931e:	d8f5      	bhi.n	800930c <process_sysex_message+0x18>
 8009320:	a101      	add	r1, pc, #4	; (adr r1, 8009328 <process_sysex_message+0x34>)
 8009322:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009326:	bf00      	nop
 8009328:	08009365 	.word	0x08009365
 800932c:	0800930d 	.word	0x0800930d
 8009330:	0800935d 	.word	0x0800935d
 8009334:	0800930d 	.word	0x0800930d
 8009338:	08009355 	.word	0x08009355
 800933c:	0800930d 	.word	0x0800930d
 8009340:	0800930d 	.word	0x0800930d
 8009344:	0800930d 	.word	0x0800930d
 8009348:	0800930d 	.word	0x0800930d
 800934c:	0800930d 	.word	0x0800930d
 8009350:	0800936d 	.word	0x0800936d
		sysex_write_eeprom(&(pSysexHead->start_parameters));
 8009354:	480e      	ldr	r0, [pc, #56]	; (8009390 <process_sysex_message+0x9c>)
 8009356:	f7ff ff5d 	bl	8009214 <sysex_write_eeprom>
		break;
 800935a:	e7d7      	b.n	800930c <process_sysex_message+0x18>
		sysex_erase_eeprom(&(pSysexHead->start_parameters));
 800935c:	480c      	ldr	r0, [pc, #48]	; (8009390 <process_sysex_message+0x9c>)
 800935e:	f7ff ff1b 	bl	8009198 <sysex_erase_eeprom>
		break;
 8009362:	e7d3      	b.n	800930c <process_sysex_message+0x18>
		sysex_dump_eeprom_page(pSysexHead->start_parameters);
 8009364:	78d8      	ldrb	r0, [r3, #3]
 8009366:	f7ff ff8b 	bl	8009280 <sysex_dump_eeprom_page>
		break;
 800936a:	e7cf      	b.n	800930c <process_sysex_message+0x18>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800936c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009370:	4908      	ldr	r1, [pc, #32]	; (8009394 <process_sysex_message+0xa0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <process_sysex_message+0xa4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009374:	68ca      	ldr	r2, [r1, #12]
 8009376:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800937a:	4313      	orrs	r3, r2
 800937c:	60cb      	str	r3, [r1, #12]
 800937e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009382:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009384:	e7fd      	b.n	8009382 <process_sysex_message+0x8e>
 8009386:	bf00      	nop
 8009388:	200012f4 	.word	0x200012f4
 800938c:	20000610 	.word	0x20000610
 8009390:	200012f7 	.word	0x200012f7
 8009394:	e000ed00 	.word	0xe000ed00
 8009398:	05fa0004 	.word	0x05fa0004

0800939c <MIDI_DataRx>:
	while(processed_data_cnt < length){
 800939c:	2900      	cmp	r1, #0
 800939e:	d072      	beq.n	8009486 <MIDI_DataRx+0xea>
{
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t processed_data_cnt = 0;
 80093a4:	2400      	movs	r4, #0
 80093a6:	4606      	mov	r6, r0
 80093a8:	4689      	mov	r9, r1
	sysex_rx_counter = 0;
 80093aa:	4627      	mov	r7, r4
 80093ac:	4d37      	ldr	r5, [pc, #220]	; (800948c <MIDI_DataRx+0xf0>)
			if(pGlobalSettings[GLOBAL_SETTINGS_REALTIME_PASS]){
 80093ae:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8009490 <MIDI_DataRx+0xf4>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 80093b2:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8009494 <MIDI_DataRx+0xf8>
		uint8_t usb_msg_cin = msg[processed_data_cnt] & 0xF;
 80093b6:	5d33      	ldrb	r3, [r6, r4]
		if(sysex_rx_counter != 0){
 80093b8:	782a      	ldrb	r2, [r5, #0]
		uint8_t usb_msg_cin = msg[processed_data_cnt] & 0xF;
 80093ba:	f003 030f 	and.w	r3, r3, #15
					usb_msg_cin != CIN_SYSEX_ENDS_WITH_FOLLOWING_TWO_BYTES &&
 80093be:	3b04      	subs	r3, #4
		if(sysex_rx_counter != 0){
 80093c0:	b11a      	cbz	r2, 80093ca <MIDI_DataRx+0x2e>
			if(usb_msg_cin != CIN_SYSEX_STARTS_OR_CONTINUES &&
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	2a03      	cmp	r2, #3
	sysex_rx_counter = 0;
 80093c6:	bf88      	it	hi
 80093c8:	702f      	strbhi	r7, [r5, #0]
		switch(usb_msg_cin){
 80093ca:	2b0b      	cmp	r3, #11
 80093cc:	d807      	bhi.n	80093de <MIDI_DataRx+0x42>
 80093ce:	e8df f003 	tbb	[pc, r3]
 80093d2:	2d39      	.short	0x2d39
 80093d4:	06061c48 	.word	0x06061c48
 80093d8:	06060606 	.word	0x06060606
 80093dc:	0d06      	.short	0x0d06
			processed_data_cnt = length;
 80093de:	fa5f f489 	uxtb.w	r4, r9
	while(processed_data_cnt < length){
 80093e2:	454c      	cmp	r4, r9
 80093e4:	d3e7      	bcc.n	80093b6 <MIDI_DataRx+0x1a>
}
 80093e6:	2000      	movs	r0, #0
 80093e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if(pGlobalSettings[GLOBAL_SETTINGS_REALTIME_PASS]){
 80093ec:	f8d8 3000 	ldr.w	r3, [r8]
 80093f0:	785b      	ldrb	r3, [r3, #1]
 80093f2:	b13b      	cbz	r3, 8009404 <MIDI_DataRx+0x68>
				if(msg[processed_data_cnt+1] == 0xF8 || msg[processed_data_cnt+1] == 0xFA ||msg[processed_data_cnt+1] == 0xFC){
 80093f4:	1933      	adds	r3, r6, r4
 80093f6:	7858      	ldrb	r0, [r3, #1]
 80093f8:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 80093fc:	2bf8      	cmp	r3, #248	; 0xf8
 80093fe:	d03d      	beq.n	800947c <MIDI_DataRx+0xe0>
 8009400:	28fc      	cmp	r0, #252	; 0xfc
 8009402:	d03b      	beq.n	800947c <MIDI_DataRx+0xe0>
			processed_data_cnt += 2;
 8009404:	3402      	adds	r4, #2
 8009406:	b2e4      	uxtb	r4, r4
			break;
 8009408:	e7eb      	b.n	80093e2 <MIDI_DataRx+0x46>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 800940a:	1c62      	adds	r2, r4, #1
 800940c:	782b      	ldrb	r3, [r5, #0]
 800940e:	18b1      	adds	r1, r6, r2
 8009410:	5ab0      	ldrh	r0, [r6, r2]
 8009412:	7889      	ldrb	r1, [r1, #2]
 8009414:	eb03 020a 	add.w	r2, r3, sl
 8009418:	f823 000a 	strh.w	r0, [r3, sl]
			processed_data_cnt += 4;
 800941c:	3404      	adds	r4, #4
			sysex_rx_counter += 3;
 800941e:	3303      	adds	r3, #3
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8009420:	7091      	strb	r1, [r2, #2]
			processed_data_cnt += 4;
 8009422:	b2e4      	uxtb	r4, r4
			sysex_rx_counter += 3;
 8009424:	702b      	strb	r3, [r5, #0]
			process_sysex_message();
 8009426:	f7ff ff65 	bl	80092f4 <process_sysex_message>
			break;
 800942a:	e7da      	b.n	80093e2 <MIDI_DataRx+0x46>
			sysex_rx_buffer[sysex_rx_counter] = msg[processed_data_cnt + 1];
 800942c:	782b      	ldrb	r3, [r5, #0]
 800942e:	1932      	adds	r2, r6, r4
 8009430:	7851      	ldrb	r1, [r2, #1]
			processed_data_cnt += 2;
 8009432:	3402      	adds	r4, #2
			sysex_rx_counter++;
 8009434:	1c5a      	adds	r2, r3, #1
			sysex_rx_buffer[sysex_rx_counter] = msg[processed_data_cnt + 1];
 8009436:	f80a 1003 	strb.w	r1, [sl, r3]
			sysex_rx_counter++;
 800943a:	702a      	strb	r2, [r5, #0]
			processed_data_cnt += 2;
 800943c:	b2e4      	uxtb	r4, r4
			process_sysex_message();
 800943e:	f7ff ff59 	bl	80092f4 <process_sysex_message>
			break;
 8009442:	e7ce      	b.n	80093e2 <MIDI_DataRx+0x46>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8009444:	1c62      	adds	r2, r4, #1
 8009446:	782b      	ldrb	r3, [r5, #0]
 8009448:	5ab0      	ldrh	r0, [r6, r2]
 800944a:	18b1      	adds	r1, r6, r2
 800944c:	7889      	ldrb	r1, [r1, #2]
 800944e:	eb03 020a 	add.w	r2, r3, sl
 8009452:	f823 000a 	strh.w	r0, [r3, sl]
			processed_data_cnt += 4;
 8009456:	3404      	adds	r4, #4
			sysex_rx_counter += 3;
 8009458:	3303      	adds	r3, #3
			processed_data_cnt += 4;
 800945a:	b2e4      	uxtb	r4, r4
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 800945c:	7091      	strb	r1, [r2, #2]
			sysex_rx_counter += 3;
 800945e:	702b      	strb	r3, [r5, #0]
			break;
 8009460:	e7bf      	b.n	80093e2 <MIDI_DataRx+0x46>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 2);
 8009462:	782b      	ldrb	r3, [r5, #0]
 8009464:	1932      	adds	r2, r6, r4
 8009466:	f8b2 1001 	ldrh.w	r1, [r2, #1]
			processed_data_cnt += 3;
 800946a:	3403      	adds	r4, #3
			sysex_rx_counter += 2;
 800946c:	1c9a      	adds	r2, r3, #2
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 2);
 800946e:	f823 100a 	strh.w	r1, [r3, sl]
			sysex_rx_counter += 2;
 8009472:	702a      	strb	r2, [r5, #0]
			processed_data_cnt += 3;
 8009474:	b2e4      	uxtb	r4, r4
			process_sysex_message();
 8009476:	f7ff ff3d 	bl	80092f4 <process_sysex_message>
			break;
 800947a:	e7b2      	b.n	80093e2 <MIDI_DataRx+0x46>
			processed_data_cnt += 2;
 800947c:	3402      	adds	r4, #2
					midiCmd_send_byte_serial(msg[processed_data_cnt+1]);
 800947e:	f7fa f91b 	bl	80036b8 <midiCmd_send_byte_serial>
			processed_data_cnt += 2;
 8009482:	b2e4      	uxtb	r4, r4
			break;
 8009484:	e7ad      	b.n	80093e2 <MIDI_DataRx+0x46>
}
 8009486:	2000      	movs	r0, #0
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	20000610 	.word	0x20000610
 8009490:	20000618 	.word	0x20000618
 8009494:	200012f4 	.word	0x200012f4

08009498 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8009498:	4b12      	ldr	r3, [pc, #72]	; (80094e4 <HAL_PCD_MspInit+0x4c>)
 800949a:	6802      	ldr	r2, [r0, #0]
 800949c:	429a      	cmp	r2, r3
 800949e:	d000      	beq.n	80094a2 <HAL_PCD_MspInit+0xa>
 80094a0:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094a2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80094a6:	69d8      	ldr	r0, [r3, #28]
{
 80094a8:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 80094aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80094ae:	61d8      	str	r0, [r3, #28]
 80094b0:	69db      	ldr	r3, [r3, #28]
{
 80094b2:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80094b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 80094b8:	2200      	movs	r2, #0
 80094ba:	2102      	movs	r1, #2
    __HAL_RCC_USB_CLK_ENABLE();
 80094bc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 80094be:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 80094c0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 80094c2:	f7fa fee1 	bl	8004288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80094c6:	2013      	movs	r0, #19
 80094c8:	f7fa ff16 	bl	80042f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 80094cc:	2200      	movs	r2, #0
 80094ce:	2101      	movs	r1, #1
 80094d0:	2014      	movs	r0, #20
 80094d2:	f7fa fed9 	bl	8004288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80094d6:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094d8:	b003      	add	sp, #12
 80094da:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80094de:	f7fa bf0b 	b.w	80042f8 <HAL_NVIC_EnableIRQ>
 80094e2:	bf00      	nop
 80094e4:	40005c00 	.word	0x40005c00

080094e8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094e8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80094ec:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80094f0:	f7fe bede 	b.w	80082b0 <USBD_LL_SetupStage>

080094f4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094f4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80094f8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80094fc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009500:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009504:	f7fe bf02 	b.w	800830c <USBD_LL_DataOutStage>

08009508 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009508:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800950c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009512:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009516:	f7fe bf37 	b.w	8008388 <USBD_LL_DataInStage>
 800951a:	bf00      	nop

0800951c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800951c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009520:	f7fe bfd2 	b.w	80084c8 <USBD_LL_SOF>

08009524 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009524:	6883      	ldr	r3, [r0, #8]
{
 8009526:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009528:	2b02      	cmp	r3, #2
{
 800952a:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800952c:	d001      	beq.n	8009532 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800952e:	f7fa f843 	bl	80035b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009532:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8009536:	2101      	movs	r1, #1
 8009538:	f7fe ffae 	bl	8008498 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800953c:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8009540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009544:	f7fe bf80 	b.w	8008448 <USBD_LL_Reset>

08009548 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009548:	b510      	push	{r4, lr}
 800954a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800954c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009550:	f7fe ffa6 	bl	80084a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009554:	69a3      	ldr	r3, [r4, #24]
 8009556:	b123      	cbz	r3, 8009562 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009558:	4a02      	ldr	r2, [pc, #8]	; (8009564 <HAL_PCD_SuspendCallback+0x1c>)
 800955a:	6913      	ldr	r3, [r2, #16]
 800955c:	f043 0306 	orr.w	r3, r3, #6
 8009560:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009562:	bd10      	pop	{r4, pc}
 8009564:	e000ed00 	.word	0xe000ed00

08009568 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009568:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800956c:	f7fe bfa2 	b.w	80084b4 <USBD_LL_Resume>

08009570 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009574:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009576:	2108      	movs	r1, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009578:	2202      	movs	r2, #2
  hpcd_USB_FS.pData = pdev;
 800957a:	4818      	ldr	r0, [pc, #96]	; (80095dc <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Instance = USB;
 800957c:	4d18      	ldr	r5, [pc, #96]	; (80095e0 <USBD_LL_Init+0x70>)
  hpcd_USB_FS.pData = pdev;
 800957e:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009582:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009586:	e9c0 5100 	strd	r5, r1, [r0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800958a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800958e:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009590:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009592:	f7fb ffa1 	bl	80054d8 <HAL_PCD_Init>
 8009596:	b9e8      	cbnz	r0, 80095d4 <USBD_LL_Init+0x64>
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */

  // Setup the PMA address areas for both control endpoints and the MIDI bulk endpoints
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009598:	2200      	movs	r2, #0
 800959a:	2318      	movs	r3, #24
 800959c:	4611      	mov	r1, r2
 800959e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80095a2:	f7fc ff1f 	bl	80063e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095a6:	2358      	movs	r3, #88	; 0x58
 80095a8:	2200      	movs	r2, #0
 80095aa:	2180      	movs	r1, #128	; 0x80
 80095ac:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80095b0:	f7fc ff18 	bl	80063e4 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, (0x58 + 0x40));
 80095b4:	2398      	movs	r3, #152	; 0x98
 80095b6:	2200      	movs	r2, #0
 80095b8:	2101      	movs	r1, #1
 80095ba:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80095be:	f7fc ff11 	bl	80063e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, (0x58 + 0x40 + 0x40));
 80095c2:	23d8      	movs	r3, #216	; 0xd8
 80095c4:	2200      	movs	r2, #0
 80095c6:	2181      	movs	r1, #129	; 0x81
 80095c8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80095cc:	f7fc ff0a 	bl	80063e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
}
 80095d0:	2000      	movs	r0, #0
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 80095d4:	f7f9 fff0 	bl	80035b8 <Error_Handler>
 80095d8:	e7de      	b.n	8009598 <USBD_LL_Init+0x28>
 80095da:	bf00      	nop
 80095dc:	20001334 	.word	0x20001334
 80095e0:	40005c00 	.word	0x40005c00

080095e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80095e6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80095ea:	f7fb fff1 	bl	80055d0 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80095ee:	2803      	cmp	r0, #3
 80095f0:	bf96      	itet	ls
 80095f2:	4b02      	ldrls	r3, [pc, #8]	; (80095fc <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80095f4:	2002      	movhi	r0, #2
 80095f6:	5c18      	ldrbls	r0, [r3, r0]
}
 80095f8:	bd08      	pop	{r3, pc}
 80095fa:	bf00      	nop
 80095fc:	0800acb0 	.word	0x0800acb0

08009600 <USBD_LL_OpenEP>:
{
 8009600:	b510      	push	{r4, lr}
 8009602:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009604:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8009608:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800960a:	4623      	mov	r3, r4
 800960c:	f7fc fdda 	bl	80061c4 <HAL_PCD_EP_Open>
  switch (hal_status)
 8009610:	2803      	cmp	r0, #3
 8009612:	bf96      	itet	ls
 8009614:	4b01      	ldrls	r3, [pc, #4]	; (800961c <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009616:	2002      	movhi	r0, #2
 8009618:	5c18      	ldrbls	r0, [r3, r0]
}
 800961a:	bd10      	pop	{r4, pc}
 800961c:	0800acb0 	.word	0x0800acb0

08009620 <USBD_LL_CloseEP>:
{
 8009620:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009622:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009626:	f7fc fe01 	bl	800622c <HAL_PCD_EP_Close>
  switch (hal_status)
 800962a:	2803      	cmp	r0, #3
 800962c:	bf96      	itet	ls
 800962e:	4b02      	ldrls	r3, [pc, #8]	; (8009638 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009630:	2002      	movhi	r0, #2
 8009632:	5c18      	ldrbls	r0, [r3, r0]
}
 8009634:	bd08      	pop	{r3, pc}
 8009636:	bf00      	nop
 8009638:	0800acb0 	.word	0x0800acb0

0800963c <USBD_LL_StallEP>:
{
 800963c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800963e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009642:	f7fc fe59 	bl	80062f8 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8009646:	2803      	cmp	r0, #3
 8009648:	bf96      	itet	ls
 800964a:	4b02      	ldrls	r3, [pc, #8]	; (8009654 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800964c:	2002      	movhi	r0, #2
 800964e:	5c18      	ldrbls	r0, [r3, r0]
}
 8009650:	bd08      	pop	{r3, pc}
 8009652:	bf00      	nop
 8009654:	0800acb0 	.word	0x0800acb0

08009658 <USBD_LL_ClearStallEP>:
{
 8009658:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800965a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800965e:	f7fc fe87 	bl	8006370 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8009662:	2803      	cmp	r0, #3
 8009664:	bf96      	itet	ls
 8009666:	4b02      	ldrls	r3, [pc, #8]	; (8009670 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009668:	2002      	movhi	r0, #2
 800966a:	5c18      	ldrbls	r0, [r3, r0]
}
 800966c:	bd08      	pop	{r3, pc}
 800966e:	bf00      	nop
 8009670:	0800acb0 	.word	0x0800acb0

08009674 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8009674:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009676:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800967a:	d406      	bmi.n	800968a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800967c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009680:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009684:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8009688:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800968a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800968e:	3101      	adds	r1, #1
 8009690:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009694:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009698:	7888      	ldrb	r0, [r1, #2]
 800969a:	4770      	bx	lr

0800969c <USBD_LL_SetUSBAddress>:
{
 800969c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800969e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80096a2:	f7fc fd7b 	bl	800619c <HAL_PCD_SetAddress>
  switch (hal_status)
 80096a6:	2803      	cmp	r0, #3
 80096a8:	bf96      	itet	ls
 80096aa:	4b02      	ldrls	r3, [pc, #8]	; (80096b4 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096ac:	2002      	movhi	r0, #2
 80096ae:	5c18      	ldrbls	r0, [r3, r0]
}
 80096b0:	bd08      	pop	{r3, pc}
 80096b2:	bf00      	nop
 80096b4:	0800acb0 	.word	0x0800acb0

080096b8 <USBD_LL_Transmit>:
{
 80096b8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096ba:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80096be:	f7fc fdfd 	bl	80062bc <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80096c2:	2803      	cmp	r0, #3
 80096c4:	bf96      	itet	ls
 80096c6:	4b02      	ldrls	r3, [pc, #8]	; (80096d0 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096c8:	2002      	movhi	r0, #2
 80096ca:	5c18      	ldrbls	r0, [r3, r0]
}
 80096cc:	bd08      	pop	{r3, pc}
 80096ce:	bf00      	nop
 80096d0:	0800acb0 	.word	0x0800acb0

080096d4 <USBD_LL_PrepareReceive>:
{
 80096d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80096da:	f7fc fdd7 	bl	800628c <HAL_PCD_EP_Receive>
  switch (hal_status)
 80096de:	2803      	cmp	r0, #3
 80096e0:	bf96      	itet	ls
 80096e2:	4b02      	ldrls	r3, [pc, #8]	; (80096ec <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096e4:	2002      	movhi	r0, #2
 80096e6:	5c18      	ldrbls	r0, [r3, r0]
}
 80096e8:	bd08      	pop	{r3, pc}
 80096ea:	bf00      	nop
 80096ec:	0800acb0 	.word	0x0800acb0

080096f0 <HAL_PCDEx_SetConnectionState>:
}
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop

080096f4 <__libc_init_array>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	2600      	movs	r6, #0
 80096f8:	4d0c      	ldr	r5, [pc, #48]	; (800972c <__libc_init_array+0x38>)
 80096fa:	4c0d      	ldr	r4, [pc, #52]	; (8009730 <__libc_init_array+0x3c>)
 80096fc:	1b64      	subs	r4, r4, r5
 80096fe:	10a4      	asrs	r4, r4, #2
 8009700:	42a6      	cmp	r6, r4
 8009702:	d109      	bne.n	8009718 <__libc_init_array+0x24>
 8009704:	f000 f81a 	bl	800973c <_init>
 8009708:	2600      	movs	r6, #0
 800970a:	4d0a      	ldr	r5, [pc, #40]	; (8009734 <__libc_init_array+0x40>)
 800970c:	4c0a      	ldr	r4, [pc, #40]	; (8009738 <__libc_init_array+0x44>)
 800970e:	1b64      	subs	r4, r4, r5
 8009710:	10a4      	asrs	r4, r4, #2
 8009712:	42a6      	cmp	r6, r4
 8009714:	d105      	bne.n	8009722 <__libc_init_array+0x2e>
 8009716:	bd70      	pop	{r4, r5, r6, pc}
 8009718:	f855 3b04 	ldr.w	r3, [r5], #4
 800971c:	4798      	blx	r3
 800971e:	3601      	adds	r6, #1
 8009720:	e7ee      	b.n	8009700 <__libc_init_array+0xc>
 8009722:	f855 3b04 	ldr.w	r3, [r5], #4
 8009726:	4798      	blx	r3
 8009728:	3601      	adds	r6, #1
 800972a:	e7f2      	b.n	8009712 <__libc_init_array+0x1e>
 800972c:	0800acb4 	.word	0x0800acb4
 8009730:	0800acb4 	.word	0x0800acb4
 8009734:	0800acb4 	.word	0x0800acb4
 8009738:	0800acb8 	.word	0x0800acb8

0800973c <_init>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	bf00      	nop
 8009740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009742:	bc08      	pop	{r3}
 8009744:	469e      	mov	lr, r3
 8009746:	4770      	bx	lr

08009748 <_fini>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	bf00      	nop
 800974c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974e:	bc08      	pop	{r3}
 8009750:	469e      	mov	lr, r3
 8009752:	4770      	bx	lr
