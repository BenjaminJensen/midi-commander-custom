
MIDI_Commander_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08003000  08003000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd4  080031e4  080031e4  000031e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080081b8  080081b8  000081b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008240  08008240  00010110  2**0
                  CONTENTS
  4 .ARM          00000000  08008240  08008240  00010110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008240  08008240  00010110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008240  08008240  00008240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008244  08008244  00008244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08008248  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b58  20000110  08008358  00010110  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20000c68  08008358  00010c68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002204f  00000000  00000000  00010139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000538c  00000000  00000000  00032188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000124cb  00000000  00000000  00037514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  000499e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002ba0  00000000  00000000  0004a848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000506e  00000000  00000000  0004d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fc38  00000000  00000000  00052456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000998f0  00000000  00000000  0007208e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010b97e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d9c  00000000  00000000  0010b9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080031e4 <__do_global_dtors_aux>:
 80031e4:	b510      	push	{r4, lr}
 80031e6:	4c05      	ldr	r4, [pc, #20]	; (80031fc <__do_global_dtors_aux+0x18>)
 80031e8:	7823      	ldrb	r3, [r4, #0]
 80031ea:	b933      	cbnz	r3, 80031fa <__do_global_dtors_aux+0x16>
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__do_global_dtors_aux+0x1c>)
 80031ee:	b113      	cbz	r3, 80031f6 <__do_global_dtors_aux+0x12>
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <__do_global_dtors_aux+0x20>)
 80031f2:	f3af 8000 	nop.w
 80031f6:	2301      	movs	r3, #1
 80031f8:	7023      	strb	r3, [r4, #0]
 80031fa:	bd10      	pop	{r4, pc}
 80031fc:	20000110 	.word	0x20000110
 8003200:	00000000 	.word	0x00000000
 8003204:	080081a0 	.word	0x080081a0

08003208 <frame_dummy>:
 8003208:	b508      	push	{r3, lr}
 800320a:	4b03      	ldr	r3, [pc, #12]	; (8003218 <frame_dummy+0x10>)
 800320c:	b11b      	cbz	r3, 8003216 <frame_dummy+0xe>
 800320e:	4903      	ldr	r1, [pc, #12]	; (800321c <frame_dummy+0x14>)
 8003210:	4803      	ldr	r0, [pc, #12]	; (8003220 <frame_dummy+0x18>)
 8003212:	f3af 8000 	nop.w
 8003216:	bd08      	pop	{r3, pc}
 8003218:	00000000 	.word	0x00000000
 800321c:	20000114 	.word	0x20000114
 8003220:	080081a0 	.word	0x080081a0

08003224 <flash_settings_erase>:
uint8_t *pGlobalSettings = (uint8_t*)FLASH_SETTINGS_START;
uint8_t *pBankStrings = (uint8_t*)FLASH_SETTINGS_START+32;
uint8_t *pSwitchCmds = (uint8_t*)FLASH_SETTINGS_START+32+96;


void flash_settings_erase(void){
 8003224:	b510      	push	{r4, lr}
	// Erase flash sectors containing the settings
	// This must be done before re-writing them.

	uint32_t pageError;

	FLASH_EraseInitTypeDef eraseInit ={
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <flash_settings_erase+0x30>)
void flash_settings_erase(void){
 8003228:	b086      	sub	sp, #24
	FLASH_EraseInitTypeDef eraseInit ={
 800322a:	ac02      	add	r4, sp, #8
 800322c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800322e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.Banks = FLASH_BANK_1,
			.PageAddress = FLASH_SETTINGS_START,
			.NbPages = FLASH_SETTINGS_NO_PAGES
	};

	HAL_FLASH_Unlock();
 8003232:	f000 fec9 	bl	8003fc8 <HAL_FLASH_Unlock>

	HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&eraseInit, &pageError);
 8003236:	4620      	mov	r0, r4
 8003238:	a901      	add	r1, sp, #4
 800323a:	f000 ff5f 	bl	80040fc <HAL_FLASHEx_Erase>
 800323e:	4604      	mov	r4, r0

	HAL_FLASH_Lock();
 8003240:	f000 fed6 	bl	8003ff0 <HAL_FLASH_Lock>

	if(status != HAL_OK){
 8003244:	b90c      	cbnz	r4, 800324a <flash_settings_erase+0x26>
		// TODO: Display a message of the page that's in error
		Error_Handler();
	}

}
 8003246:	b006      	add	sp, #24
 8003248:	bd10      	pop	{r4, pc}
		Error_Handler();
 800324a:	f000 f95d 	bl	8003508 <Error_Handler>
}
 800324e:	b006      	add	sp, #24
 8003250:	bd10      	pop	{r4, pc}
 8003252:	bf00      	nop
 8003254:	080081b8 	.word	0x080081b8

08003258 <flash_settings_write>:


void flash_settings_write(uint8_t* data, uint32_t offset){
 8003258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325c:	4688      	mov	r8, r1
 800325e:	4604      	mov	r4, r0

	HAL_FLASH_Unlock();

	// Programming 16bytes, so 8 iterations of 16bit
	for(int i=0; i<8; i++){
		uint16_t write_data = data[2*i] + (data[2*i+1] << 8);
 8003260:	4e13      	ldr	r6, [pc, #76]	; (80032b0 <flash_settings_write+0x58>)
	HAL_FLASH_Unlock();
 8003262:	f000 feb1 	bl	8003fc8 <HAL_FLASH_Unlock>
 8003266:	4d13      	ldr	r5, [pc, #76]	; (80032b4 <flash_settings_write+0x5c>)
 8003268:	eba4 0008 	sub.w	r0, r4, r8
		uint16_t write_data = data[2*i] + (data[2*i+1] << 8);
 800326c:	f100 4777 	add.w	r7, r0, #4143972352	; 0xf7000000
	uint32_t flash_address = offset + FLASH_SETTINGS_START;
 8003270:	f108 6400 	add.w	r4, r8, #134217728	; 0x8000000
		uint16_t write_data = data[2*i] + (data[2*i+1] << 8);
 8003274:	f507 077e 	add.w	r7, r7, #16646144	; 0xfe0000
 8003278:	4406      	add	r6, r0
	uint32_t flash_address = offset + FLASH_SETTINGS_START;
 800327a:	f504 3400 	add.w	r4, r4, #131072	; 0x20000
	for(int i=0; i<8; i++){
 800327e:	4445      	add	r5, r8
 8003280:	e001      	b.n	8003286 <flash_settings_write+0x2e>
 8003282:	42a5      	cmp	r5, r4
 8003284:	d010      	beq.n	80032a8 <flash_settings_write+0x50>
		uint16_t write_data = data[2*i] + (data[2*i+1] << 8);
 8003286:	5d33      	ldrb	r3, [r6, r4]
 8003288:	5d3a      	ldrb	r2, [r7, r4]
		HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flash_address + 2*i, write_data);
 800328a:	4621      	mov	r1, r4
		uint16_t write_data = data[2*i] + (data[2*i+1] << 8);
 800328c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flash_address + 2*i, write_data);
 8003290:	2001      	movs	r0, #1
 8003292:	2300      	movs	r3, #0
 8003294:	b292      	uxth	r2, r2
 8003296:	f000 fee1 	bl	800405c <HAL_FLASH_Program>
		if(status != HAL_OK){
 800329a:	3402      	adds	r4, #2
 800329c:	2800      	cmp	r0, #0
 800329e:	d0f0      	beq.n	8003282 <flash_settings_write+0x2a>
			// TODO: Display flash write error
			Error_Handler();
 80032a0:	f000 f932 	bl	8003508 <Error_Handler>
	for(int i=0; i<8; i++){
 80032a4:	42a5      	cmp	r5, r4
 80032a6:	d1ee      	bne.n	8003286 <flash_settings_write+0x2e>
		}
	}

	HAL_FLASH_Lock();

}
 80032a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_FLASH_Lock();
 80032ac:	f000 bea0 	b.w	8003ff0 <HAL_FLASH_Lock>
 80032b0:	f7fe0001 	.word	0xf7fe0001
 80032b4:	08020010 	.word	0x08020010

080032b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ba:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032bc:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80032c4:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
{
 80032c8:	b097      	sub	sp, #92	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ca:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032cc:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80032d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80032dc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032e0:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032e4:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032e8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032ea:	9301      	str	r3, [sp, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032ec:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80032ee:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032f0:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032f2:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80032f4:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032f6:	f002 f8f5 	bl	80054e4 <HAL_RCC_OscConfig>
 80032fa:	b108      	cbz	r0, 8003300 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032fc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032fe:	e7fe      	b.n	80032fe <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003300:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003302:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003306:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003308:	4621      	mov	r1, r4
 800330a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800330c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800330e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003310:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003312:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003314:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003316:	f002 fb27 	bl	8005968 <HAL_RCC_ClockConfig>
 800331a:	4603      	mov	r3, r0
 800331c:	b108      	cbz	r0, 8003322 <SystemClock_Config+0x6a>
 800331e:	b672      	cpsid	i
  while (1)
 8003320:	e7fe      	b.n	8003320 <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003322:	2210      	movs	r2, #16
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003324:	a806      	add	r0, sp, #24
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003326:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003328:	9206      	str	r2, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800332a:	f002 fbdd 	bl	8005ae8 <HAL_RCCEx_PeriphCLKConfig>
 800332e:	b108      	cbz	r0, 8003334 <SystemClock_Config+0x7c>
 8003330:	b672      	cpsid	i
  while (1)
 8003332:	e7fe      	b.n	8003332 <SystemClock_Config+0x7a>
}
 8003334:	b017      	add	sp, #92	; 0x5c
 8003336:	bd30      	pop	{r4, r5, pc}

08003338 <main>:
{
 8003338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	2400      	movs	r4, #0
{
 800333e:	b088      	sub	sp, #32
  HAL_Init();
 8003340:	f000 fad4 	bl	80038ec <HAL_Init>
  SystemClock_Config();
 8003344:	f7ff ffb8 	bl	80032b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800334c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003350:	4d63      	ldr	r5, [pc, #396]	; (80034e0 <main+0x1a8>)
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 8003352:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003354:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 8003356:	f44f 4130 	mov.w	r1, #45056	; 0xb000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800335a:	f043 0310 	orr.w	r3, r3, #16
 800335e:	61ab      	str	r3, [r5, #24]
 8003360:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 8003362:	4860      	ldr	r0, [pc, #384]	; (80034e4 <main+0x1ac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800336c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003370:	f043 0320 	orr.w	r3, r3, #32
 8003374:	61ab      	str	r3, [r5, #24]
 8003376:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003384:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = SW_B_Pin;
 8003386:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	61ab      	str	r3, [r5, #24]
 8003390:	69ab      	ldr	r3, [r5, #24]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	69ab      	ldr	r3, [r5, #24]
 800339c:	f043 0308 	orr.w	r3, r3, #8
 80033a0:	61ab      	str	r3, [r5, #24]
 80033a2:	69ab      	ldr	r3, [r5, #24]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	9303      	str	r3, [sp, #12]
 80033aa:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_C_Pin|LED_B_Pin|USB_ID_Pin, GPIO_PIN_RESET);
 80033ac:	f001 f830 	bl	8004410 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_D_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80033b0:	4622      	mov	r2, r4
 80033b2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80033b6:	484c      	ldr	r0, [pc, #304]	; (80034e8 <main+0x1b0>)
 80033b8:	f001 f82a 	bl	8004410 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_E_Pin|LED_5_Pin|LED_4_Pin|LED_3_Pin
 80033bc:	4622      	mov	r2, r4
 80033be:	f245 011e 	movw	r1, #20510	; 0x501e
 80033c2:	484a      	ldr	r0, [pc, #296]	; (80034ec <main+0x1b4>)
 80033c4:	f001 f824 	bl	8004410 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_C_Pin|LED_B_Pin|USB_ID_Pin;
 80033c8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033cc:	4845      	ldr	r0, [pc, #276]	; (80034e4 <main+0x1ac>)
 80033ce:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d0:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033da:	f000 fef1 	bl	80041c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(SW_B_GPIO_Port, &GPIO_InitStruct);
 80033de:	4841      	ldr	r0, [pc, #260]	; (80034e4 <main+0x1ac>)
 80033e0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e2:	e9cd 4605 	strd	r4, r6, [sp, #20]
  GPIO_InitStruct.Pin = SW_B_Pin;
 80033e6:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(SW_B_GPIO_Port, &GPIO_InitStruct);
 80033e8:	f000 feea 	bl	80041c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_C_Pin|SW_D_Pin|SW_E_Pin|SW_2_Pin
 80033ec:	f248 4351 	movw	r3, #33873	; 0x8451
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f0:	483d      	ldr	r0, [pc, #244]	; (80034e8 <main+0x1b0>)
 80033f2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_C_Pin|SW_D_Pin|SW_E_Pin|SW_2_Pin
 80033f4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f6:	e9cd 4605 	strd	r4, r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fa:	f000 fee1 	bl	80041c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_D_Pin|LED_2_Pin;
 80033fe:	f44f 7390 	mov.w	r3, #288	; 0x120
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003402:	4839      	ldr	r0, [pc, #228]	; (80034e8 <main+0x1b0>)
 8003404:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_D_Pin|LED_2_Pin;
 8003406:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	e9cd 6405 	strd	r6, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003410:	f000 fed6 	bl	80041c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_E_Pin|LED_5_Pin|LED_4_Pin|LED_3_Pin
 8003414:	f245 031e 	movw	r3, #20510	; 0x501e
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003418:	4834      	ldr	r0, [pc, #208]	; (80034ec <main+0x1b4>)
 800341a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_E_Pin|LED_5_Pin|LED_4_Pin|LED_3_Pin
 800341c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	e9cd 6405 	strd	r6, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003426:	f000 fecb 	bl	80041c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_5_Pin|SW_4_Pin|SW_3_Pin|SW_A_Pin;
 800342a:	f24a 4320 	movw	r3, #42016	; 0xa420
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342e:	482f      	ldr	r0, [pc, #188]	; (80034ec <main+0x1b4>)
 8003430:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW_5_Pin|SW_4_Pin|SW_3_Pin|SW_A_Pin;
 8003432:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003434:	e9cd 4605 	strd	r4, r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003438:	f000 fec2 	bl	80041c0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800343c:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800343e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003440:	4333      	orrs	r3, r6
 8003442:	616b      	str	r3, [r5, #20]
 8003444:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003446:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003448:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800344a:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 800344c:	9304      	str	r3, [sp, #16]
 800344e:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003450:	f000 fa94 	bl	800397c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003454:	2011      	movs	r0, #17
 8003456:	f000 fac9 	bl	80039ec <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 31250;
 800345a:	f647 2212 	movw	r2, #31250	; 0x7a12
  huart2.Init.Mode = UART_MODE_TX_RX;
 800345e:	230c      	movs	r3, #12
  huart2.Instance = USART2;
 8003460:	4823      	ldr	r0, [pc, #140]	; (80034f0 <main+0x1b8>)
 8003462:	4924      	ldr	r1, [pc, #144]	; (80034f4 <main+0x1bc>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003464:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003468:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.BaudRate = 31250;
 800346c:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003470:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003472:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003474:	f002 fbfa 	bl	8005c6c <HAL_UART_Init>
 8003478:	b108      	cbz	r0, 800347e <main+0x146>
 800347a:	b672      	cpsid	i
  while (1)
 800347c:	e7fe      	b.n	800347c <main+0x144>
  hi2c1.Instance = I2C1;
 800347e:	4603      	mov	r3, r0
 8003480:	491d      	ldr	r1, [pc, #116]	; (80034f8 <main+0x1c0>)
 8003482:	481e      	ldr	r0, [pc, #120]	; (80034fc <main+0x1c4>)
  hi2c1.Init.ClockSpeed = 400000;
 8003484:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <main+0x1c8>)
  hi2c1.Init.OwnAddress1 = 0;
 8003486:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800348a:	e9c0 7304 	strd	r7, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800348e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.ClockSpeed = 400000;
 8003492:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003496:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003498:	f000 ffbe 	bl	8004418 <HAL_I2C_Init>
 800349c:	4604      	mov	r4, r0
 800349e:	b108      	cbz	r0, 80034a4 <main+0x16c>
 80034a0:	b672      	cpsid	i
  while (1)
 80034a2:	e7fe      	b.n	80034a2 <main+0x16a>
  MX_USB_DEVICE_Init();
 80034a4:	f004 fb3c 	bl	8007b20 <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(USB_ID_GPIO_Port, USB_ID_Pin, GPIO_PIN_RESET);
 80034a8:	4622      	mov	r2, r4
 80034aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034ae:	480d      	ldr	r0, [pc, #52]	; (80034e4 <main+0x1ac>)
 80034b0:	f000 ffae 	bl	8004410 <HAL_GPIO_WritePin>
  uint16_t flash_size = (*(uint16_t*)FLASHSIZE_BASE);
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <main+0x1cc>)
  if(flash_size < 512){
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034bc:	d201      	bcs.n	80034c2 <main+0x18a>
 80034be:	b672      	cpsid	i
  while (1)
 80034c0:	e7fe      	b.n	80034c0 <main+0x188>
  HAL_Delay(1000);
 80034c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034c6:	f000 fa35 	bl	8003934 <HAL_Delay>
  HAL_GPIO_WritePin(USB_ID_GPIO_Port, USB_ID_Pin, GPIO_PIN_SET);
 80034ca:	4806      	ldr	r0, [pc, #24]	; (80034e4 <main+0x1ac>)
 80034cc:	4632      	mov	r2, r6
 80034ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034d2:	f000 ff9d 	bl	8004410 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80034d6:	20c8      	movs	r0, #200	; 0xc8
 80034d8:	f000 fa2c 	bl	8003934 <HAL_Delay>
  while (1)
 80034dc:	e7fe      	b.n	80034dc <main+0x1a4>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40011000 	.word	0x40011000
 80034e8:	40010800 	.word	0x40010800
 80034ec:	40010c00 	.word	0x40010c00
 80034f0:	200001e0 	.word	0x200001e0
 80034f4:	40004400 	.word	0x40004400
 80034f8:	40005400 	.word	0x40005400
 80034fc:	20000148 	.word	0x20000148
 8003500:	00061a80 	.word	0x00061a80
 8003504:	1ffff7e0 	.word	0x1ffff7e0

08003508 <Error_Handler>:
 8003508:	b672      	cpsid	i
  while (1)
 800350a:	e7fe      	b.n	800350a <Error_Handler+0x2>

0800350c <midi_serial_start_next_dma>:
 */
uint32_t midiCmd_get_delay(uint8_t *pRom){
	return (uint32_t)*(pRom+3) * 10;
}

void midi_serial_start_next_dma(void){
 800350c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t buffer_to_transmit = 0xFF;
	// Find the next buffer ready for transmit
	for(int i=0; i<4; i++){
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003510:	4e0e      	ldr	r6, [pc, #56]	; (800354c <midi_serial_start_next_dma+0x40>)
 8003512:	4d0f      	ldr	r5, [pc, #60]	; (8003550 <midi_serial_start_next_dma+0x44>)
 8003514:	7831      	ldrb	r1, [r6, #0]
 8003516:	1c4b      	adds	r3, r1, #1
 8003518:	3105      	adds	r1, #5
 800351a:	f003 0403 	and.w	r4, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] != 0){
 800351e:	5d2a      	ldrb	r2, [r5, r4]
 8003520:	3301      	adds	r3, #1
 8003522:	b91a      	cbnz	r2, 800352c <midi_serial_start_next_dma+0x20>
	for(int i=0; i<4; i++){
 8003524:	4299      	cmp	r1, r3
 8003526:	d1f8      	bne.n	800351a <midi_serial_start_next_dma+0xe>
				midi_uart_out_buffer_bytes_to_tx[buffer_to_transmit]) != HAL_OK)
			;
		last_transmitted_buffer = buffer_to_transmit;
	}

}
 8003528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		while(HAL_UART_Transmit_DMA(&huart2, midi_uart_out_buffer[buffer_to_transmit],
 800352c:	4f09      	ldr	r7, [pc, #36]	; (8003554 <midi_serial_start_next_dma+0x48>)
 800352e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8003558 <midi_serial_start_next_dma+0x4c>
 8003532:	eb07 1704 	add.w	r7, r7, r4, lsl #4
 8003536:	e000      	b.n	800353a <midi_serial_start_next_dma+0x2e>
 8003538:	5d2a      	ldrb	r2, [r5, r4]
 800353a:	4639      	mov	r1, r7
 800353c:	4640      	mov	r0, r8
 800353e:	f002 fbc5 	bl	8005ccc <HAL_UART_Transmit_DMA>
 8003542:	2800      	cmp	r0, #0
 8003544:	d1f8      	bne.n	8003538 <midi_serial_start_next_dma+0x2c>
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003546:	7034      	strb	r4, [r6, #0]
}
 8003548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800354c:	20000004 	.word	0x20000004
 8003550:	20000130 	.word	0x20000130
 8003554:	20000224 	.word	0x20000224
 8003558:	200001e0 	.word	0x200001e0

0800355c <HAL_UART_TxCpltCallback>:
	// nothing to be done.
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == huart2.Instance){
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_UART_TxCpltCallback+0x1c>)
 800355e:	6802      	ldr	r2, [r0, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d000      	beq.n	8003568 <HAL_UART_TxCpltCallback+0xc>
		// last sent buffer is complete, start another transfer.
		midi_uart_out_buffer_bytes_to_tx[last_transmitted_buffer] = 0;
		midi_serial_start_next_dma();
	}
}
 8003566:	4770      	bx	lr
		midi_uart_out_buffer_bytes_to_tx[last_transmitted_buffer] = 0;
 8003568:	2100      	movs	r1, #0
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <HAL_UART_TxCpltCallback+0x20>)
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <HAL_UART_TxCpltCallback+0x24>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	54d1      	strb	r1, [r2, r3]
		midi_serial_start_next_dma();
 8003572:	f7ff bfcb 	b.w	800350c <midi_serial_start_next_dma>
 8003576:	bf00      	nop
 8003578:	200001e0 	.word	0x200001e0
 800357c:	20000004 	.word	0x20000004
 8003580:	20000130 	.word	0x20000130

08003584 <midiCmd_send_byte_serial>:

/*
 * Send a single byte message just through to the serial midi port.
 * This is to transfer start/stop/sync messages through from the USB to the midi port
 */
void midiCmd_send_byte_serial(uint8_t byteMessage){
 8003584:	b430      	push	{r4, r5}
 8003586:	b672      	cpsid	i
		uint8_t n = (last_transmitted_buffer + i + 1) % NO_BUFFERS;
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <midiCmd_send_byte_serial+0x44>)
 800358a:	4d10      	ldr	r5, [pc, #64]	; (80035cc <midiCmd_send_byte_serial+0x48>)
 800358c:	7819      	ldrb	r1, [r3, #0]
 800358e:	1c4b      	adds	r3, r1, #1
 8003590:	3105      	adds	r1, #5
 8003592:	f003 0203 	and.w	r2, r3, #3
		if(midi_uart_out_buffer_bytes_to_tx[n] == 0){
 8003596:	5cac      	ldrb	r4, [r5, r2]
 8003598:	3301      	adds	r3, #1
 800359a:	b124      	cbz	r4, 80035a6 <midiCmd_send_byte_serial+0x22>
	for(int i=0; i<4; i++){
 800359c:	428b      	cmp	r3, r1
 800359e:	d1f8      	bne.n	8003592 <midiCmd_send_byte_serial+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 80035a0:	b662      	cpsie	i
	*serialBuf = byteMessage;
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
	__enable_irq();

	midi_serial_transmit();
}
 80035a2:	bc30      	pop	{r4, r5}
 80035a4:	4770      	bx	lr
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 80035a6:	2401      	movs	r4, #1
	*serialBuf = byteMessage;
 80035a8:	4909      	ldr	r1, [pc, #36]	; (80035d0 <midiCmd_send_byte_serial+0x4c>)
 80035aa:	0113      	lsls	r3, r2, #4
	midi_uart_out_buffer_bytes_to_tx[buffer_no] = 1;
 80035ac:	54ac      	strb	r4, [r5, r2]
	*serialBuf = byteMessage;
 80035ae:	54c8      	strb	r0, [r1, r3]
 80035b0:	b662      	cpsie	i
	if(huart2.gState == HAL_UART_STATE_READY){
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <midiCmd_send_byte_serial+0x50>)
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d001      	beq.n	80035c0 <midiCmd_send_byte_serial+0x3c>
}
 80035bc:	bc30      	pop	{r4, r5}
 80035be:	4770      	bx	lr
 80035c0:	bc30      	pop	{r4, r5}
		midi_serial_start_next_dma();
 80035c2:	f7ff bfa3 	b.w	800350c <midi_serial_start_next_dma>
 80035c6:	bf00      	nop
 80035c8:	20000004 	.word	0x20000004
 80035cc:	20000130 	.word	0x20000130
 80035d0:	20000224 	.word	0x20000224
 80035d4:	200001e0 	.word	0x200001e0

080035d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80035d8:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <HAL_MspInit+0x3c>)
{
 80035da:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80035dc:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035de:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	619a      	str	r2, [r3, #24]
 80035e6:	699a      	ldr	r2, [r3, #24]
 80035e8:	f002 0201 	and.w	r2, r2, #1
 80035ec:	9200      	str	r2, [sp, #0]
 80035ee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035f6:	61da      	str	r2, [r3, #28]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003602:	684b      	ldr	r3, [r1, #4]
 8003604:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800360c:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800360e:	b002      	add	sp, #8
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	40010000 	.word	0x40010000

0800361c <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	2300      	movs	r3, #0
{
 800361e:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 8003620:	6801      	ldr	r1, [r0, #0]
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <HAL_I2C_MspInit+0x58>)
{
 8003624:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 8003626:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800362c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8003630:	d001      	beq.n	8003636 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003632:	b007      	add	sp, #28
 8003634:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003636:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003638:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800363a:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363c:	4c0e      	ldr	r4, [pc, #56]	; (8003678 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003640:	69a3      	ldr	r3, [r4, #24]
 8003642:	f043 0308 	orr.w	r3, r3, #8
 8003646:	61a3      	str	r3, [r4, #24]
 8003648:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800364a:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003652:	480a      	ldr	r0, [pc, #40]	; (800367c <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003654:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003656:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003658:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365a:	f000 fdb1 	bl	80041c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800365e:	69e3      	ldr	r3, [r4, #28]
 8003660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003664:	61e3      	str	r3, [r4, #28]
 8003666:	69e3      	ldr	r3, [r4, #28]
 8003668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	9b01      	ldr	r3, [sp, #4]
}
 8003670:	b007      	add	sp, #28
 8003672:	bd30      	pop	{r4, r5, pc}
 8003674:	40005400 	.word	0x40005400
 8003678:	40021000 	.word	0x40021000
 800367c:	40010c00 	.word	0x40010c00

08003680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003680:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003682:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8003684:	6802      	ldr	r2, [r0, #0]
 8003686:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_UART_MspInit+0xa4>)
{
 8003688:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 800368a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003690:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART2)
 8003694:	d001      	beq.n	800369a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003696:	b006      	add	sp, #24
 8003698:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800369a:	2104      	movs	r1, #4
 800369c:	4605      	mov	r5, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036a0:	2603      	movs	r6, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 80036a2:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80036ac:	61da      	str	r2, [r3, #28]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80036b4:	9200      	str	r2, [sp, #0]
 80036b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	619a      	str	r2, [r3, #24]
 80036be:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036c0:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	400b      	ands	r3, r1
 80036c4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ca:	4817      	ldr	r0, [pc, #92]	; (8003728 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ce:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d0:	f000 fd76 	bl	80041c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036d4:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d6:	4814      	ldr	r0, [pc, #80]	; (8003728 <HAL_UART_MspInit+0xa8>)
 80036d8:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f000 fd6d 	bl	80041c0 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036e6:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036e8:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80036ea:	4e10      	ldr	r6, [pc, #64]	; (800372c <HAL_UART_MspInit+0xac>)
 80036ec:	4a10      	ldr	r2, [pc, #64]	; (8003730 <HAL_UART_MspInit+0xb0>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036ee:	4630      	mov	r0, r6
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036f0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036f4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036f8:	6071      	str	r1, [r6, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036fa:	60b4      	str	r4, [r6, #8]
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80036fc:	6032      	str	r2, [r6, #0]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036fe:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003700:	f000 f99a 	bl	8003a38 <HAL_DMA_Init>
 8003704:	b958      	cbnz	r0, 800371e <HAL_UART_MspInit+0x9e>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	2026      	movs	r0, #38	; 0x26
 800370a:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800370c:	636e      	str	r6, [r5, #52]	; 0x34
 800370e:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003710:	f000 f934 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003714:	2026      	movs	r0, #38	; 0x26
 8003716:	f000 f969 	bl	80039ec <HAL_NVIC_EnableIRQ>
}
 800371a:	b006      	add	sp, #24
 800371c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800371e:	f7ff fef3 	bl	8003508 <Error_Handler>
 8003722:	e7f0      	b.n	8003706 <HAL_UART_MspInit+0x86>
 8003724:	40004400 	.word	0x40004400
 8003728:	40010800 	.word	0x40010800
 800372c:	2000019c 	.word	0x2000019c
 8003730:	40020080 	.word	0x40020080

08003734 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003734:	e7fe      	b.n	8003734 <NMI_Handler>
 8003736:	bf00      	nop

08003738 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003738:	e7fe      	b.n	8003738 <HardFault_Handler>
 800373a:	bf00      	nop

0800373c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800373c:	e7fe      	b.n	800373c <MemManage_Handler>
 800373e:	bf00      	nop

08003740 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003740:	e7fe      	b.n	8003740 <BusFault_Handler>
 8003742:	bf00      	nop

08003744 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003744:	e7fe      	b.n	8003744 <UsageFault_Handler>
 8003746:	bf00      	nop

08003748 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop

0800374c <DebugMon_Handler>:
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <PendSV_Handler>:
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003754:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003756:	f000 f8db 	bl	8003910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  sw_scan();

  /* USER CODE END SysTick_IRQn 1 */
}
 800375a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sw_scan();
 800375e:	f000 b815 	b.w	800378c <sw_scan>
 8003762:	bf00      	nop

08003764 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003764:	4801      	ldr	r0, [pc, #4]	; (800376c <DMA1_Channel7_IRQHandler+0x8>)
 8003766:	f000 bab1 	b.w	8003ccc <HAL_DMA_IRQHandler>
 800376a:	bf00      	nop
 800376c:	2000019c 	.word	0x2000019c

08003770 <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003770:	4801      	ldr	r0, [pc, #4]	; (8003778 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 8003772:	f000 bfab 	b.w	80046cc <HAL_PCD_IRQHandler>
 8003776:	bf00      	nop
 8003778:	2000097c 	.word	0x2000097c

0800377c <USB_LP_CAN1_RX0_IRQHandler>:
 800377c:	f7ff bff8 	b.w	8003770 <USB_HP_CAN1_TX_IRQHandler>

08003780 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <USART2_IRQHandler+0x8>)
 8003782:	f002 bba3 	b.w	8005ecc <HAL_UART_IRQHandler>
 8003786:	bf00      	nop
 8003788:	200001e0 	.word	0x200001e0

0800378c <sw_scan>:
 *
 * Switch changes are then handled in the main loop.
 */
void sw_scan(void){

	if(!f_sys_config_complete){
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <sw_scan+0x90>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d041      	beq.n	8003818 <sw_scan+0x8c>
		return;
	}

	if(debounce_counter){
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <sw_scan+0x94>)
 8003796:	7813      	ldrb	r3, [r2, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d138      	bne.n	800380e <sw_scan+0x82>
		debounce_counter--;
		return;
	}

	/* PORTA input pins */
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 800379c:	4b21      	ldr	r3, [pc, #132]	; (8003824 <sw_scan+0x98>)
void sw_scan(void){
 800379e:	b4f0      	push	{r4, r5, r6, r7}
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 80037a0:	689b      	ldr	r3, [r3, #8]
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 80037a2:	4c21      	ldr	r4, [pc, #132]	; (8003828 <sw_scan+0x9c>)
 80037a4:	4821      	ldr	r0, [pc, #132]	; (800382c <sw_scan+0xa0>)
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 80037a6:	f423 43f7 	bic.w	r3, r3, #31616	; 0x7b80
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 80037aa:	8821      	ldrh	r1, [r4, #0]
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 80037ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 80037b0:	8805      	ldrh	r5, [r0, #0]
	uint16_t current_port_A = GPIOA->IDR & SW_PORTA_MASK;
 80037b2:	b29b      	uxth	r3, r3
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 80037b4:	4059      	eors	r1, r3
 80037b6:	4329      	orrs	r1, r5
 80037b8:	b289      	uxth	r1, r1
	port_A_previous_state = current_port_A;

	/* PORTB input pins */
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 80037ba:	4d1d      	ldr	r5, [pc, #116]	; (8003830 <sw_scan+0xa4>)
	port_A_switches_changed |= current_port_A  ^ port_A_previous_state;
 80037bc:	8001      	strh	r1, [r0, #0]
	port_A_previous_state = current_port_A;
 80037be:	8023      	strh	r3, [r4, #0]
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 80037c0:	68ab      	ldr	r3, [r5, #8]
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 80037c2:	4d1c      	ldr	r5, [pc, #112]	; (8003834 <sw_scan+0xa8>)
 80037c4:	4c1c      	ldr	r4, [pc, #112]	; (8003838 <sw_scan+0xac>)
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 80037c6:	f423 43b7 	bic.w	r3, r3, #23424	; 0x5b80
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 80037ca:	8829      	ldrh	r1, [r5, #0]
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 80037cc:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 80037d0:	8826      	ldrh	r6, [r4, #0]
	uint16_t current_port_B = GPIOB->IDR & SW_PORTB_MASK;
 80037d2:	b29b      	uxth	r3, r3
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 80037d4:	4059      	eors	r1, r3
 80037d6:	4331      	orrs	r1, r6
	port_B_previous_state = current_port_B;

	/* PORTC input pins */
	uint16_t current_port_C = GPIOC->IDR & SW_PORTC_MASK;
 80037d8:	4f18      	ldr	r7, [pc, #96]	; (800383c <sw_scan+0xb0>)
	port_B_switches_changed |= current_port_B  ^ port_B_previous_state;
 80037da:	b289      	uxth	r1, r1
 80037dc:	8021      	strh	r1, [r4, #0]
	port_C_switches_changed |= current_port_C  ^ port_C_previous_state;
 80037de:	4e18      	ldr	r6, [pc, #96]	; (8003840 <sw_scan+0xb4>)
	uint16_t current_port_C = GPIOC->IDR & SW_PORTC_MASK;
 80037e0:	68b9      	ldr	r1, [r7, #8]
	port_B_previous_state = current_port_B;
 80037e2:	802b      	strh	r3, [r5, #0]
	port_C_switches_changed |= current_port_C  ^ port_C_previous_state;
 80037e4:	4d17      	ldr	r5, [pc, #92]	; (8003844 <sw_scan+0xb8>)
 80037e6:	8833      	ldrh	r3, [r6, #0]
 80037e8:	882f      	ldrh	r7, [r5, #0]
	uint16_t current_port_C = GPIOC->IDR & SW_PORTC_MASK;
 80037ea:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
	port_C_switches_changed |= current_port_C  ^ port_C_previous_state;
 80037ee:	404b      	eors	r3, r1
 80037f0:	433b      	orrs	r3, r7
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	802b      	strh	r3, [r5, #0]
	port_C_previous_state = current_port_C;

	if(port_A_switches_changed | port_B_switches_changed | port_C_switches_changed){
 80037f6:	8800      	ldrh	r0, [r0, #0]
 80037f8:	8823      	ldrh	r3, [r4, #0]
	port_C_previous_state = current_port_C;
 80037fa:	8031      	strh	r1, [r6, #0]
	if(port_A_switches_changed | port_B_switches_changed | port_C_switches_changed){
 80037fc:	8829      	ldrh	r1, [r5, #0]
 80037fe:	4303      	orrs	r3, r0
 8003800:	430b      	orrs	r3, r1
 8003802:	b29b      	uxth	r3, r3
 8003804:	b10b      	cbz	r3, 800380a <sw_scan+0x7e>
		debounce_counter = 10; // 10ms debounce delay
 8003806:	230a      	movs	r3, #10
 8003808:	7013      	strb	r3, [r2, #0]
		return;
	}

}
 800380a:	bcf0      	pop	{r4, r5, r6, r7}
 800380c:	4770      	bx	lr
		debounce_counter--;
 800380e:	7813      	ldrb	r3, [r2, #0]
 8003810:	3b01      	subs	r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	7013      	strb	r3, [r2, #0]
		return;
 8003816:	4770      	bx	lr
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	2000012c 	.word	0x2000012c
 8003820:	20000134 	.word	0x20000134
 8003824:	40010800 	.word	0x40010800
 8003828:	20000006 	.word	0x20000006
 800382c:	20000136 	.word	0x20000136
 8003830:	40010c00 	.word	0x40010c00
 8003834:	20000008 	.word	0x20000008
 8003838:	20000138 	.word	0x20000138
 800383c:	40011000 	.word	0x40011000
 8003840:	2000000a 	.word	0x2000000a
 8003844:	2000013a 	.word	0x2000013a

08003848 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8003848:	4b01      	ldr	r3, [pc, #4]	; (8003850 <SystemInit+0x8>)
 800384a:	4a02      	ldr	r2, [pc, #8]	; (8003854 <SystemInit+0xc>)
 800384c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00
 8003854:	08003000 	.word	0x08003000

08003858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003858:	480c      	ldr	r0, [pc, #48]	; (800388c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800385a:	490d      	ldr	r1, [pc, #52]	; (8003890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800385c:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003860:	e002      	b.n	8003868 <LoopCopyDataInit>

08003862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003866:	3304      	adds	r3, #4

08003868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800386a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800386c:	d3f9      	bcc.n	8003862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003870:	4c0a      	ldr	r4, [pc, #40]	; (800389c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003874:	e001      	b.n	800387a <LoopFillZerobss>

08003876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003878:	3204      	adds	r2, #4

0800387a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800387a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800387c:	d3fb      	bcc.n	8003876 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800387e:	f7ff ffe3 	bl	8003848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003882:	f004 fc69 	bl	8008158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003886:	f7ff fd57 	bl	8003338 <main>
  bx lr
 800388a:	4770      	bx	lr
  ldr r0, =_sdata
 800388c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003890:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8003894:	08008248 	.word	0x08008248
  ldr r2, =_sbss
 8003898:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800389c:	20000c68 	.word	0x20000c68

080038a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038a0:	e7fe      	b.n	80038a0 <ADC1_2_IRQHandler>
	...

080038a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038aa:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <HAL_InitTick+0x3c>)
{
 80038ac:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038ae:	7811      	ldrb	r1, [r2, #0]
 80038b0:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <HAL_InitTick+0x40>)
 80038b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	fbb2 f0f3 	udiv	r0, r2, r3
 80038bc:	f000 f8a4 	bl	8003a08 <HAL_SYSTICK_Config>
 80038c0:	b908      	cbnz	r0, 80038c6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038c2:	2d0f      	cmp	r5, #15
 80038c4:	d901      	bls.n	80038ca <HAL_InitTick+0x26>
    return HAL_ERROR;
 80038c6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80038c8:	bd38      	pop	{r3, r4, r5, pc}
 80038ca:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038cc:	4602      	mov	r2, r0
 80038ce:	4629      	mov	r1, r5
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f000 f852 	bl	800397c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_InitTick+0x44>)
 80038da:	4620      	mov	r0, r4
 80038dc:	601d      	str	r5, [r3, #0]
}
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	20000010 	.word	0x20000010
 80038e4:	2000000c 	.word	0x2000000c
 80038e8:	20000014 	.word	0x20000014

080038ec <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <HAL_Init+0x20>)
{
 80038ee:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f4:	f043 0310 	orr.w	r3, r3, #16
 80038f8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038fa:	f000 f82d 	bl	8003958 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80038fe:	2000      	movs	r0, #0
 8003900:	f7ff ffd0 	bl	80038a4 <HAL_InitTick>
  HAL_MspInit();
 8003904:	f7ff fe68 	bl	80035d8 <HAL_MspInit>
}
 8003908:	2000      	movs	r0, #0
 800390a:	bd08      	pop	{r3, pc}
 800390c:	40022000 	.word	0x40022000

08003910 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003910:	4a03      	ldr	r2, [pc, #12]	; (8003920 <HAL_IncTick+0x10>)
 8003912:	4b04      	ldr	r3, [pc, #16]	; (8003924 <HAL_IncTick+0x14>)
 8003914:	6811      	ldr	r1, [r2, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	440b      	add	r3, r1
 800391a:	6013      	str	r3, [r2, #0]
}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000274 	.word	0x20000274
 8003924:	20000010 	.word	0x20000010

08003928 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003928:	4b01      	ldr	r3, [pc, #4]	; (8003930 <HAL_GetTick+0x8>)
 800392a:	6818      	ldr	r0, [r3, #0]
}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000274 	.word	0x20000274

08003934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003938:	f7ff fff6 	bl	8003928 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800393c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800393e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003940:	d002      	beq.n	8003948 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003942:	4b04      	ldr	r3, [pc, #16]	; (8003954 <HAL_Delay+0x20>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003948:	f7ff ffee 	bl	8003928 <HAL_GetTick>
 800394c:	1b40      	subs	r0, r0, r5
 800394e:	42a0      	cmp	r0, r4
 8003950:	d3fa      	bcc.n	8003948 <HAL_Delay+0x14>
  {
  }
}
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	20000010 	.word	0x20000010

08003958 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003958:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800395c:	4a06      	ldr	r2, [pc, #24]	; (8003978 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800395e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003960:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003962:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003966:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003968:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800396a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800396e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003972:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800397e:	b430      	push	{r4, r5}
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003986:	f1c3 0507 	rsb	r5, r3, #7
 800398a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003990:	bf28      	it	cs
 8003992:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003994:	2c06      	cmp	r4, #6
 8003996:	d919      	bls.n	80039cc <HAL_NVIC_SetPriority+0x50>
 8003998:	f04f 34ff 	mov.w	r4, #4294967295
 800399c:	3b03      	subs	r3, #3
 800399e:	409c      	lsls	r4, r3
 80039a0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	f04f 34ff 	mov.w	r4, #4294967295
 80039a8:	40ac      	lsls	r4, r5
 80039aa:	ea21 0104 	bic.w	r1, r1, r4
 80039ae:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80039b0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80039b6:	db0c      	blt.n	80039d2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	0109      	lsls	r1, r1, #4
 80039ba:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80039be:	b2c9      	uxtb	r1, r1
 80039c0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80039c4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80039c8:	bc30      	pop	{r4, r5}
 80039ca:	4770      	bx	lr
 80039cc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	4613      	mov	r3, r2
 80039d0:	e7e8      	b.n	80039a4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_NVIC_SetPriority+0x6c>)
 80039d4:	f000 000f 	and.w	r0, r0, #15
 80039d8:	0109      	lsls	r1, r1, #4
 80039da:	b2c9      	uxtb	r1, r1
 80039dc:	4403      	add	r3, r0
 80039de:	7619      	strb	r1, [r3, #24]
 80039e0:	bc30      	pop	{r4, r5}
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00
 80039e8:	e000ecfc 	.word	0xe000ecfc

080039ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80039ec:	2800      	cmp	r0, #0
 80039ee:	db07      	blt.n	8003a00 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f0:	2301      	movs	r3, #1
 80039f2:	f000 011f 	and.w	r1, r0, #31
 80039f6:	4a03      	ldr	r2, [pc, #12]	; (8003a04 <HAL_NVIC_EnableIRQ+0x18>)
 80039f8:	408b      	lsls	r3, r1
 80039fa:	0940      	lsrs	r0, r0, #5
 80039fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000e100 	.word	0xe000e100

08003a08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a08:	3801      	subs	r0, #1
 8003a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003a0e:	d20d      	bcs.n	8003a2c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a10:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a12:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a14:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a16:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1a:	4c06      	ldr	r4, [pc, #24]	; (8003a34 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a22:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8003a24:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a26:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a28:	6019      	str	r1, [r3, #0]
 8003a2a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	4770      	bx	lr
 8003a30:	e000e010 	.word	0xe000e010
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d036      	beq.n	8003aaa <HAL_DMA_Init+0x72>
 8003a3c:	4603      	mov	r3, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <HAL_DMA_Init+0x78>)
 8003a40:	6800      	ldr	r0, [r0, #0]
{
 8003a42:	b470      	push	{r4, r5, r6}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a44:	4290      	cmp	r0, r2
 8003a46:	d925      	bls.n	8003a94 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a48:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <HAL_DMA_Init+0x7c>)
 8003a4a:	491b      	ldr	r1, [pc, #108]	; (8003ab8 <HAL_DMA_Init+0x80>)
 8003a4c:	4402      	add	r2, r0
 8003a4e:	fba1 1202 	umull	r1, r2, r1, r2
    hdma->DmaBaseAddress = DMA2;
 8003a52:	491a      	ldr	r1, [pc, #104]	; (8003abc <HAL_DMA_Init+0x84>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a54:	0912      	lsrs	r2, r2, #4
 8003a56:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 8003a58:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a5c:	e9d3 2601 	ldrd	r2, r6, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a60:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a64:	2400      	movs	r4, #0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a66:	68d9      	ldr	r1, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a68:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6c:	e9d3 6104 	ldrd	r6, r1, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a70:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a72:	699e      	ldr	r6, [r3, #24]
 8003a74:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8003a76:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a78:	4332      	orrs	r2, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7a:	69de      	ldr	r6, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a7c:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a80:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a82:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8003a86:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8003a88:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8003a8a:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 8003a8c:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8e:	639c      	str	r4, [r3, #56]	; 0x38
}
 8003a90:	bc70      	pop	{r4, r5, r6}
 8003a92:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a94:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <HAL_DMA_Init+0x88>)
 8003a96:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <HAL_DMA_Init+0x80>)
 8003a98:	4402      	add	r2, r0
 8003a9a:	fba1 1202 	umull	r1, r2, r1, r2
    hdma->DmaBaseAddress = DMA1;
 8003a9e:	4909      	ldr	r1, [pc, #36]	; (8003ac4 <HAL_DMA_Init+0x8c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003aa0:	0912      	lsrs	r2, r2, #4
 8003aa2:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8003aa4:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
 8003aa8:	e7d8      	b.n	8003a5c <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 8003aaa:	2001      	movs	r0, #1
}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40020407 	.word	0x40020407
 8003ab4:	bffdfbf8 	.word	0xbffdfbf8
 8003ab8:	cccccccd 	.word	0xcccccccd
 8003abc:	40020400 	.word	0x40020400
 8003ac0:	bffdfff8 	.word	0xbffdfff8
 8003ac4:	40020000 	.word	0x40020000

08003ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac8:	b4f0      	push	{r4, r5, r6, r7}
 8003aca:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003acc:	f890 0020 	ldrb.w	r0, [r0, #32]
 8003ad0:	2801      	cmp	r0, #1
 8003ad2:	d038      	beq.n	8003b46 <HAL_DMA_Start_IT+0x7e>
 8003ad4:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003ada:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ade:	42a8      	cmp	r0, r5
 8003ae0:	d005      	beq.n	8003aee <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ae8:	2002      	movs	r0, #2
  }    
  return status;
}
 8003aea:	bcf0      	pop	{r4, r5, r6, r7}
 8003aec:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aee:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af0:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 8003af2:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003af4:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af8:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003afa:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8003afc:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003afe:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 8003b00:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b04:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003b06:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b08:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b0a:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003b0c:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8003b0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b10:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b12:	bf0b      	itete	eq
 8003b14:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003b16:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003b18:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003b1a:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003b1c:	b153      	cbz	r3, 8003b34 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	f043 030e 	orr.w	r3, r3, #14
 8003b24:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8003b26:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	602b      	str	r3, [r5, #0]
}
 8003b30:	bcf0      	pop	{r4, r5, r6, r7}
 8003b32:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	f023 0304 	bic.w	r3, r3, #4
 8003b3a:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	f043 030a 	orr.w	r3, r3, #10
 8003b42:	602b      	str	r3, [r5, #0]
 8003b44:	e7ef      	b.n	8003b26 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8003b46:	2002      	movs	r0, #2
}
 8003b48:	bcf0      	pop	{r4, r5, r6, r7}
 8003b4a:	4770      	bx	lr

08003b4c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b4c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8003b50:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b52:	2a02      	cmp	r2, #2
 8003b54:	d006      	beq.n	8003b64 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b56:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8003b58:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5a:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003b5c:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8003b60:	2001      	movs	r0, #1
}
 8003b62:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b64:	2101      	movs	r1, #1
{
 8003b66:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8003b68:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b6c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b6e:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b70:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b72:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b74:	f024 040e 	bic.w	r4, r4, #14
 8003b78:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003b7a:	6814      	ldr	r4, [r2, #0]
  return status; 
 8003b7c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8003b7e:	f024 0401 	bic.w	r4, r4, #1
 8003b82:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b86:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8003b88:	841d      	strh	r5, [r3, #32]
}
 8003b8a:	bc70      	pop	{r4, r5, r6}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop

08003b90 <HAL_DMA_Abort_IT>:
{  
 8003b90:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b92:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8003b96:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b98:	2a02      	cmp	r2, #2
 8003b9a:	d003      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b9c:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8003b9e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003ba2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba4:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ba6:	4845      	ldr	r0, [pc, #276]	; (8003cbc <HAL_DMA_Abort_IT+0x12c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba8:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003baa:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bac:	f021 010e 	bic.w	r1, r1, #14
 8003bb0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003bb2:	6811      	ldr	r1, [r2, #0]
 8003bb4:	f021 0101 	bic.w	r1, r1, #1
 8003bb8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003bba:	4941      	ldr	r1, [pc, #260]	; (8003cc0 <HAL_DMA_Abort_IT+0x130>)
 8003bbc:	d924      	bls.n	8003c08 <HAL_DMA_Abort_IT+0x78>
 8003bbe:	428a      	cmp	r2, r1
 8003bc0:	d055      	beq.n	8003c6e <HAL_DMA_Abort_IT+0xde>
 8003bc2:	3114      	adds	r1, #20
 8003bc4:	428a      	cmp	r2, r1
 8003bc6:	d05e      	beq.n	8003c86 <HAL_DMA_Abort_IT+0xf6>
 8003bc8:	3114      	adds	r1, #20
 8003bca:	428a      	cmp	r2, r1
 8003bcc:	d05d      	beq.n	8003c8a <HAL_DMA_Abort_IT+0xfa>
 8003bce:	3114      	adds	r1, #20
 8003bd0:	428a      	cmp	r2, r1
 8003bd2:	d053      	beq.n	8003c7c <HAL_DMA_Abort_IT+0xec>
 8003bd4:	3114      	adds	r1, #20
 8003bd6:	428a      	cmp	r2, r1
 8003bd8:	d060      	beq.n	8003c9c <HAL_DMA_Abort_IT+0x10c>
 8003bda:	3114      	adds	r1, #20
 8003bdc:	428a      	cmp	r2, r1
 8003bde:	d063      	beq.n	8003ca8 <HAL_DMA_Abort_IT+0x118>
 8003be0:	4282      	cmp	r2, r0
 8003be2:	d067      	beq.n	8003cb4 <HAL_DMA_Abort_IT+0x124>
 8003be4:	f501 7167 	add.w	r1, r1, #924	; 0x39c
 8003be8:	428a      	cmp	r2, r1
 8003bea:	d040      	beq.n	8003c6e <HAL_DMA_Abort_IT+0xde>
 8003bec:	3114      	adds	r1, #20
 8003bee:	428a      	cmp	r2, r1
 8003bf0:	d049      	beq.n	8003c86 <HAL_DMA_Abort_IT+0xf6>
 8003bf2:	3114      	adds	r1, #20
 8003bf4:	428a      	cmp	r2, r1
 8003bf6:	d048      	beq.n	8003c8a <HAL_DMA_Abort_IT+0xfa>
 8003bf8:	3114      	adds	r1, #20
 8003bfa:	428a      	cmp	r2, r1
 8003bfc:	bf14      	ite	ne
 8003bfe:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8003c02:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8003c06:	e033      	b.n	8003c70 <HAL_DMA_Abort_IT+0xe0>
 8003c08:	428a      	cmp	r2, r1
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_Abort_IT+0xc2>
 8003c0c:	3114      	adds	r1, #20
 8003c0e:	428a      	cmp	r2, r1
 8003c10:	d037      	beq.n	8003c82 <HAL_DMA_Abort_IT+0xf2>
 8003c12:	3114      	adds	r1, #20
 8003c14:	428a      	cmp	r2, r1
 8003c16:	d03b      	beq.n	8003c90 <HAL_DMA_Abort_IT+0x100>
 8003c18:	3114      	adds	r1, #20
 8003c1a:	428a      	cmp	r2, r1
 8003c1c:	d02b      	beq.n	8003c76 <HAL_DMA_Abort_IT+0xe6>
 8003c1e:	3114      	adds	r1, #20
 8003c20:	428a      	cmp	r2, r1
 8003c22:	d038      	beq.n	8003c96 <HAL_DMA_Abort_IT+0x106>
 8003c24:	3114      	adds	r1, #20
 8003c26:	428a      	cmp	r2, r1
 8003c28:	d03b      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x112>
 8003c2a:	4282      	cmp	r2, r0
 8003c2c:	d03f      	beq.n	8003cae <HAL_DMA_Abort_IT+0x11e>
 8003c2e:	f501 7167 	add.w	r1, r1, #924	; 0x39c
 8003c32:	428a      	cmp	r2, r1
 8003c34:	d00d      	beq.n	8003c52 <HAL_DMA_Abort_IT+0xc2>
 8003c36:	3114      	adds	r1, #20
 8003c38:	428a      	cmp	r2, r1
 8003c3a:	d022      	beq.n	8003c82 <HAL_DMA_Abort_IT+0xf2>
 8003c3c:	3114      	adds	r1, #20
 8003c3e:	428a      	cmp	r2, r1
 8003c40:	d026      	beq.n	8003c90 <HAL_DMA_Abort_IT+0x100>
 8003c42:	3114      	adds	r1, #20
 8003c44:	428a      	cmp	r2, r1
 8003c46:	bf14      	ite	ne
 8003c48:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8003c4c:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8003c50:	e000      	b.n	8003c54 <HAL_DMA_Abort_IT+0xc4>
 8003c52:	2201      	movs	r2, #1
 8003c54:	491b      	ldr	r1, [pc, #108]	; (8003cc4 <HAL_DMA_Abort_IT+0x134>)
 8003c56:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003c58:	f44f 7180 	mov.w	r1, #256	; 0x100
    if(hdma->XferAbortCallback != NULL)
 8003c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8003c5e:	8419      	strh	r1, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8003c60:	b11a      	cbz	r2, 8003c6a <HAL_DMA_Abort_IT+0xda>
      hdma->XferAbortCallback(hdma);
 8003c62:	4618      	mov	r0, r3
 8003c64:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003c66:	2000      	movs	r0, #0
}
 8003c68:	bd08      	pop	{r3, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	4610      	mov	r0, r2
}
 8003c6c:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c6e:	2201      	movs	r2, #1
 8003c70:	4915      	ldr	r1, [pc, #84]	; (8003cc8 <HAL_DMA_Abort_IT+0x138>)
 8003c72:	604a      	str	r2, [r1, #4]
 8003c74:	e7f0      	b.n	8003c58 <HAL_DMA_Abort_IT+0xc8>
 8003c76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c7a:	e7eb      	b.n	8003c54 <HAL_DMA_Abort_IT+0xc4>
 8003c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c80:	e7f6      	b.n	8003c70 <HAL_DMA_Abort_IT+0xe0>
 8003c82:	2210      	movs	r2, #16
 8003c84:	e7e6      	b.n	8003c54 <HAL_DMA_Abort_IT+0xc4>
 8003c86:	2210      	movs	r2, #16
 8003c88:	e7f2      	b.n	8003c70 <HAL_DMA_Abort_IT+0xe0>
 8003c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c8e:	e7ef      	b.n	8003c70 <HAL_DMA_Abort_IT+0xe0>
 8003c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c94:	e7de      	b.n	8003c54 <HAL_DMA_Abort_IT+0xc4>
 8003c96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c9a:	e7db      	b.n	8003c54 <HAL_DMA_Abort_IT+0xc4>
 8003c9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ca0:	e7e6      	b.n	8003c70 <HAL_DMA_Abort_IT+0xe0>
 8003ca2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ca6:	e7d5      	b.n	8003c54 <HAL_DMA_Abort_IT+0xc4>
 8003ca8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cac:	e7e0      	b.n	8003c70 <HAL_DMA_Abort_IT+0xe0>
 8003cae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cb2:	e7cf      	b.n	8003c54 <HAL_DMA_Abort_IT+0xc4>
 8003cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cb8:	e7da      	b.n	8003c70 <HAL_DMA_Abort_IT+0xe0>
 8003cba:	bf00      	nop
 8003cbc:	40020080 	.word	0x40020080
 8003cc0:	40020008 	.word	0x40020008
 8003cc4:	40020000 	.word	0x40020000
 8003cc8:	40020400 	.word	0x40020400

08003ccc <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ccc:	2204      	movs	r2, #4
{
 8003cce:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003cd0:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cd4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003cd6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003cd8:	408a      	lsls	r2, r1
 8003cda:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8003cdc:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003cde:	d042      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x9a>
 8003ce0:	076a      	lsls	r2, r5, #29
 8003ce2:	d540      	bpl.n	8003d66 <HAL_DMA_IRQHandler+0x9a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	0691      	lsls	r1, r2, #26
 8003ce8:	d403      	bmi.n	8003cf2 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	f022 0204 	bic.w	r2, r2, #4
 8003cf0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003cf2:	4a9b      	ldr	r2, [pc, #620]	; (8003f60 <HAL_DMA_IRQHandler+0x294>)
 8003cf4:	499b      	ldr	r1, [pc, #620]	; (8003f64 <HAL_DMA_IRQHandler+0x298>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	f240 8090 	bls.w	8003e1c <HAL_DMA_IRQHandler+0x150>
 8003cfc:	428b      	cmp	r3, r1
 8003cfe:	f000 80ee 	beq.w	8003ede <HAL_DMA_IRQHandler+0x212>
 8003d02:	3114      	adds	r1, #20
 8003d04:	428b      	cmp	r3, r1
 8003d06:	f000 80f2 	beq.w	8003eee <HAL_DMA_IRQHandler+0x222>
 8003d0a:	3114      	adds	r1, #20
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	f000 80e1 	beq.w	8003ed4 <HAL_DMA_IRQHandler+0x208>
 8003d12:	3114      	adds	r1, #20
 8003d14:	428b      	cmp	r3, r1
 8003d16:	f000 80f5 	beq.w	8003f04 <HAL_DMA_IRQHandler+0x238>
 8003d1a:	3114      	adds	r1, #20
 8003d1c:	428b      	cmp	r3, r1
 8003d1e:	f000 80fd 	beq.w	8003f1c <HAL_DMA_IRQHandler+0x250>
 8003d22:	3114      	adds	r1, #20
 8003d24:	428b      	cmp	r3, r1
 8003d26:	f000 8102 	beq.w	8003f2e <HAL_DMA_IRQHandler+0x262>
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	f000 810b 	beq.w	8003f46 <HAL_DMA_IRQHandler+0x27a>
 8003d30:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	f000 80d2 	beq.w	8003ede <HAL_DMA_IRQHandler+0x212>
 8003d3a:	3214      	adds	r2, #20
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	f000 80d6 	beq.w	8003eee <HAL_DMA_IRQHandler+0x222>
 8003d42:	3214      	adds	r2, #20
 8003d44:	4293      	cmp	r3, r2
 8003d46:	f000 80c5 	beq.w	8003ed4 <HAL_DMA_IRQHandler+0x208>
 8003d4a:	3214      	adds	r2, #20
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bf14      	ite	ne
 8003d50:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8003d54:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8003d58:	4a83      	ldr	r2, [pc, #524]	; (8003f68 <HAL_DMA_IRQHandler+0x29c>)
 8003d5a:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8003d5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d15a      	bne.n	8003e18 <HAL_DMA_IRQHandler+0x14c>
}
 8003d62:	bc70      	pop	{r4, r5, r6}
 8003d64:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d66:	2202      	movs	r2, #2
 8003d68:	408a      	lsls	r2, r1
 8003d6a:	4222      	tst	r2, r4
 8003d6c:	d03f      	beq.n	8003dee <HAL_DMA_IRQHandler+0x122>
 8003d6e:	07aa      	lsls	r2, r5, #30
 8003d70:	d53d      	bpl.n	8003dee <HAL_DMA_IRQHandler+0x122>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	0691      	lsls	r1, r2, #26
 8003d76:	d406      	bmi.n	8003d86 <HAL_DMA_IRQHandler+0xba>
      hdma->State = HAL_DMA_STATE_READY;
 8003d78:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	f022 020a 	bic.w	r2, r2, #10
 8003d80:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003d82:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d86:	4a76      	ldr	r2, [pc, #472]	; (8003f60 <HAL_DMA_IRQHandler+0x294>)
 8003d88:	4976      	ldr	r1, [pc, #472]	; (8003f64 <HAL_DMA_IRQHandler+0x298>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d96d      	bls.n	8003e6a <HAL_DMA_IRQHandler+0x19e>
 8003d8e:	428b      	cmp	r3, r1
 8003d90:	f000 80a7 	beq.w	8003ee2 <HAL_DMA_IRQHandler+0x216>
 8003d94:	3114      	adds	r1, #20
 8003d96:	428b      	cmp	r3, r1
 8003d98:	f000 8097 	beq.w	8003eca <HAL_DMA_IRQHandler+0x1fe>
 8003d9c:	3114      	adds	r1, #20
 8003d9e:	428b      	cmp	r3, r1
 8003da0:	f000 80a7 	beq.w	8003ef2 <HAL_DMA_IRQHandler+0x226>
 8003da4:	3114      	adds	r1, #20
 8003da6:	428b      	cmp	r3, r1
 8003da8:	f000 80af 	beq.w	8003f0a <HAL_DMA_IRQHandler+0x23e>
 8003dac:	3114      	adds	r1, #20
 8003dae:	428b      	cmp	r3, r1
 8003db0:	f000 80ba 	beq.w	8003f28 <HAL_DMA_IRQHandler+0x25c>
 8003db4:	3114      	adds	r1, #20
 8003db6:	428b      	cmp	r3, r1
 8003db8:	f000 80c2 	beq.w	8003f40 <HAL_DMA_IRQHandler+0x274>
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	f000 80cb 	beq.w	8003f58 <HAL_DMA_IRQHandler+0x28c>
 8003dc2:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	f000 808b 	beq.w	8003ee2 <HAL_DMA_IRQHandler+0x216>
 8003dcc:	3214      	adds	r2, #20
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d07b      	beq.n	8003eca <HAL_DMA_IRQHandler+0x1fe>
 8003dd2:	3214      	adds	r2, #20
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	f000 808c 	beq.w	8003ef2 <HAL_DMA_IRQHandler+0x226>
 8003dda:	3214      	adds	r2, #20
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bf14      	ite	ne
 8003de0:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 8003de4:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8003de8:	4b5f      	ldr	r3, [pc, #380]	; (8003f68 <HAL_DMA_IRQHandler+0x29c>)
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	e062      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x1e8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003dee:	2208      	movs	r2, #8
 8003df0:	408a      	lsls	r2, r1
 8003df2:	4222      	tst	r2, r4
 8003df4:	d0b5      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x96>
 8003df6:	072a      	lsls	r2, r5, #28
 8003df8:	d5b3      	bpl.n	8003d62 <HAL_DMA_IRQHandler+0x96>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dfa:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 8003dfc:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e00:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e02:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e06:	f022 020e 	bic.w	r2, r2, #14
 8003e0a:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8003e0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e0e:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e10:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003e12:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0a4      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x96>
}
 8003e18:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003e1a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003e1c:	428b      	cmp	r3, r1
 8003e1e:	d05c      	beq.n	8003eda <HAL_DMA_IRQHandler+0x20e>
 8003e20:	3114      	adds	r1, #20
 8003e22:	428b      	cmp	r3, r1
 8003e24:	d061      	beq.n	8003eea <HAL_DMA_IRQHandler+0x21e>
 8003e26:	3114      	adds	r1, #20
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	d050      	beq.n	8003ece <HAL_DMA_IRQHandler+0x202>
 8003e2c:	3114      	adds	r1, #20
 8003e2e:	428b      	cmp	r3, r1
 8003e30:	d065      	beq.n	8003efe <HAL_DMA_IRQHandler+0x232>
 8003e32:	3114      	adds	r1, #20
 8003e34:	428b      	cmp	r3, r1
 8003e36:	d06e      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x24a>
 8003e38:	3114      	adds	r1, #20
 8003e3a:	428b      	cmp	r3, r1
 8003e3c:	d07a      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x268>
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f000 8084 	beq.w	8003f4c <HAL_DMA_IRQHandler+0x280>
 8003e44:	4a49      	ldr	r2, [pc, #292]	; (8003f6c <HAL_DMA_IRQHandler+0x2a0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d047      	beq.n	8003eda <HAL_DMA_IRQHandler+0x20e>
 8003e4a:	3214      	adds	r2, #20
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d04c      	beq.n	8003eea <HAL_DMA_IRQHandler+0x21e>
 8003e50:	3214      	adds	r2, #20
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d03b      	beq.n	8003ece <HAL_DMA_IRQHandler+0x202>
 8003e56:	3214      	adds	r2, #20
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	bf14      	ite	ne
 8003e5c:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8003e60:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8003e64:	4a42      	ldr	r2, [pc, #264]	; (8003f70 <HAL_DMA_IRQHandler+0x2a4>)
 8003e66:	6053      	str	r3, [r2, #4]
 8003e68:	e778      	b.n	8003d5c <HAL_DMA_IRQHandler+0x90>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e6a:	428b      	cmp	r3, r1
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x21a>
 8003e6e:	3114      	adds	r1, #20
 8003e70:	428b      	cmp	r3, r1
 8003e72:	d028      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x1fa>
 8003e74:	3114      	adds	r1, #20
 8003e76:	428b      	cmp	r3, r1
 8003e78:	d03e      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x22c>
 8003e7a:	3114      	adds	r1, #20
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	d047      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x244>
 8003e80:	3114      	adds	r1, #20
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d04d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x256>
 8003e86:	3114      	adds	r1, #20
 8003e88:	428b      	cmp	r3, r1
 8003e8a:	d056      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x26e>
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d060      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x286>
 8003e90:	4a36      	ldr	r2, [pc, #216]	; (8003f6c <HAL_DMA_IRQHandler+0x2a0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d027      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x21a>
 8003e96:	3214      	adds	r2, #20
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d014      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x1fa>
 8003e9c:	3214      	adds	r2, #20
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d02a      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x22c>
 8003ea2:	3214      	adds	r2, #20
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	bf14      	ite	ne
 8003ea8:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 8003eac:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <HAL_DMA_IRQHandler+0x2a4>)
 8003eb2:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8003eb4:	2200      	movs	r2, #0
    if(hdma->XferCpltCallback != NULL)
 8003eb6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    __HAL_UNLOCK(hdma);
 8003eb8:	f880 2020 	strb.w	r2, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f43f af50 	beq.w	8003d62 <HAL_DMA_IRQHandler+0x96>
}
 8003ec2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003ec4:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	e7f2      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x1e4>
 8003eca:	2220      	movs	r2, #32
 8003ecc:	e78c      	b.n	8003de8 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed2:	e7c7      	b.n	8003e64 <HAL_DMA_IRQHandler+0x198>
 8003ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed8:	e73e      	b.n	8003d58 <HAL_DMA_IRQHandler+0x8c>
 8003eda:	2304      	movs	r3, #4
 8003edc:	e7c2      	b.n	8003e64 <HAL_DMA_IRQHandler+0x198>
 8003ede:	2304      	movs	r3, #4
 8003ee0:	e73a      	b.n	8003d58 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	e780      	b.n	8003de8 <HAL_DMA_IRQHandler+0x11c>
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	e7e2      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003eea:	2340      	movs	r3, #64	; 0x40
 8003eec:	e7ba      	b.n	8003e64 <HAL_DMA_IRQHandler+0x198>
 8003eee:	2340      	movs	r3, #64	; 0x40
 8003ef0:	e732      	b.n	8003d58 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef6:	e777      	b.n	8003de8 <HAL_DMA_IRQHandler+0x11c>
 8003ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003efc:	e7d8      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f02:	e7af      	b.n	8003e64 <HAL_DMA_IRQHandler+0x198>
 8003f04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f08:	e726      	b.n	8003d58 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f0e:	e76b      	b.n	8003de8 <HAL_DMA_IRQHandler+0x11c>
 8003f10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f14:	e7cc      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x1e4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f1a:	e7a3      	b.n	8003e64 <HAL_DMA_IRQHandler+0x198>
 8003f1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f20:	e71a      	b.n	8003d58 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f26:	e7c3      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x1e4>
 8003f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f2c:	e75c      	b.n	8003de8 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f32:	e711      	b.n	8003d58 <HAL_DMA_IRQHandler+0x8c>
 8003f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f38:	e794      	b.n	8003e64 <HAL_DMA_IRQHandler+0x198>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003f3e:	e7b7      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x1e4>
 8003f40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003f44:	e750      	b.n	8003de8 <HAL_DMA_IRQHandler+0x11c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f4a:	e705      	b.n	8003d58 <HAL_DMA_IRQHandler+0x8c>
 8003f4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f50:	e788      	b.n	8003e64 <HAL_DMA_IRQHandler+0x198>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f56:	e7ab      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x1e4>
 8003f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f5c:	e744      	b.n	8003de8 <HAL_DMA_IRQHandler+0x11c>
 8003f5e:	bf00      	nop
 8003f60:	40020080 	.word	0x40020080
 8003f64:	40020008 	.word	0x40020008
 8003f68:	40020400 	.word	0x40020400
 8003f6c:	40020408 	.word	0x40020408
 8003f70:	40020000 	.word	0x40020000

08003f74 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003f74:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <FLASH_SetErrorCode+0x4c>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f013 0310 	ands.w	r3, r3, #16
 8003f7c:	d005      	beq.n	8003f8a <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003f7e:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f80:	4910      	ldr	r1, [pc, #64]	; (8003fc4 <FLASH_SetErrorCode+0x50>)
 8003f82:	69ca      	ldr	r2, [r1, #28]
 8003f84:	f042 0202 	orr.w	r2, r2, #2
 8003f88:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f8a:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <FLASH_SetErrorCode+0x4c>)
 8003f8c:	68d2      	ldr	r2, [r2, #12]
 8003f8e:	0750      	lsls	r0, r2, #29
 8003f90:	d506      	bpl.n	8003fa0 <FLASH_SetErrorCode+0x2c>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003f92:	490c      	ldr	r1, [pc, #48]	; (8003fc4 <FLASH_SetErrorCode+0x50>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003f94:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003f98:	69ca      	ldr	r2, [r1, #28]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <FLASH_SetErrorCode+0x4c>)
 8003fa2:	69d1      	ldr	r1, [r2, #28]
 8003fa4:	07c9      	lsls	r1, r1, #31
 8003fa6:	d508      	bpl.n	8003fba <FLASH_SetErrorCode+0x46>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003fa8:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <FLASH_SetErrorCode+0x50>)
 8003faa:	69c1      	ldr	r1, [r0, #28]
 8003fac:	f041 0104 	orr.w	r1, r1, #4
 8003fb0:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003fb2:	69d1      	ldr	r1, [r2, #28]
 8003fb4:	f021 0101 	bic.w	r1, r1, #1
 8003fb8:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003fba:	4a01      	ldr	r2, [pc, #4]	; (8003fc0 <FLASH_SetErrorCode+0x4c>)
 8003fbc:	60d3      	str	r3, [r2, #12]
}  
 8003fbe:	4770      	bx	lr
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	20000278 	.word	0x20000278

08003fc8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_FLASH_Unlock+0x1c>)
 8003fca:	6918      	ldr	r0, [r3, #16]
 8003fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fd0:	d006      	beq.n	8003fe0 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fd2:	4905      	ldr	r1, [pc, #20]	; (8003fe8 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fd4:	4a05      	ldr	r2, [pc, #20]	; (8003fec <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fd6:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fd8:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003fda:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40022000 	.word	0x40022000
 8003fe8:	45670123 	.word	0x45670123
 8003fec:	cdef89ab 	.word	0xcdef89ab

08003ff0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ff0:	4a03      	ldr	r2, [pc, #12]	; (8004000 <HAL_FLASH_Lock+0x10>)
}
 8003ff2:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ff4:	6913      	ldr	r3, [r2, #16]
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffa:	6113      	str	r3, [r2, #16]
}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40022000 	.word	0x40022000

08004004 <FLASH_WaitForLastOperation>:
{
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004008:	f7ff fc8e 	bl	8003928 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800400c:	4d12      	ldr	r5, [pc, #72]	; (8004058 <FLASH_WaitForLastOperation+0x54>)
  uint32_t tickstart = HAL_GetTick();
 800400e:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004010:	e001      	b.n	8004016 <FLASH_WaitForLastOperation+0x12>
    if (Timeout != HAL_MAX_DELAY)
 8004012:	1c62      	adds	r2, r4, #1
 8004014:	d117      	bne.n	8004046 <FLASH_WaitForLastOperation+0x42>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004016:	68eb      	ldr	r3, [r5, #12]
 8004018:	07db      	lsls	r3, r3, #31
 800401a:	d4fa      	bmi.n	8004012 <FLASH_WaitForLastOperation+0xe>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800401c:	68eb      	ldr	r3, [r5, #12]
 800401e:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004020:	bf44      	itt	mi
 8004022:	2320      	movmi	r3, #32
 8004024:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <FLASH_WaitForLastOperation+0x54>)
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	06d1      	lsls	r1, r2, #27
 800402c:	d407      	bmi.n	800403e <FLASH_WaitForLastOperation+0x3a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800402e:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004030:	07d2      	lsls	r2, r2, #31
 8004032:	d404      	bmi.n	800403e <FLASH_WaitForLastOperation+0x3a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004034:	68d8      	ldr	r0, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004036:	f010 0004 	ands.w	r0, r0, #4
 800403a:	d100      	bne.n	800403e <FLASH_WaitForLastOperation+0x3a>
}
 800403c:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800403e:	f7ff ff99 	bl	8003f74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004042:	2001      	movs	r0, #1
}
 8004044:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004046:	b124      	cbz	r4, 8004052 <FLASH_WaitForLastOperation+0x4e>
 8004048:	f7ff fc6e 	bl	8003928 <HAL_GetTick>
 800404c:	1b80      	subs	r0, r0, r6
 800404e:	42a0      	cmp	r0, r4
 8004050:	d9e1      	bls.n	8004016 <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 8004052:	2003      	movs	r0, #3
}
 8004054:	bd70      	pop	{r4, r5, r6, pc}
 8004056:	bf00      	nop
 8004058:	40022000 	.word	0x40022000

0800405c <HAL_FLASH_Program>:
{
 800405c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8004060:	4f24      	ldr	r7, [pc, #144]	; (80040f4 <HAL_FLASH_Program+0x98>)
 8004062:	7e3c      	ldrb	r4, [r7, #24]
 8004064:	2c01      	cmp	r4, #1
 8004066:	d042      	beq.n	80040ee <HAL_FLASH_Program+0x92>
 8004068:	461d      	mov	r5, r3
 800406a:	2301      	movs	r3, #1
 800406c:	4606      	mov	r6, r0
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800406e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004072:	468b      	mov	fp, r1
 8004074:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8004076:	763b      	strb	r3, [r7, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004078:	f7ff ffc4 	bl	8004004 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800407c:	bb98      	cbnz	r0, 80040e6 <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800407e:	2e01      	cmp	r6, #1
 8004080:	d003      	beq.n	800408a <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8004082:	2e02      	cmp	r6, #2
 8004084:	bf0c      	ite	eq
 8004086:	2602      	moveq	r6, #2
 8004088:	2604      	movne	r6, #4
 800408a:	f04f 0a00 	mov.w	sl, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800408e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80040f8 <HAL_FLASH_Program+0x9c>
 8004092:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004096:	2300      	movs	r3, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004098:	f1ca 0220 	rsb	r2, sl, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800409c:	61fb      	str	r3, [r7, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800409e:	fa05 f202 	lsl.w	r2, r5, r2
 80040a2:	fa28 f00a 	lsr.w	r0, r8, sl
 80040a6:	f1aa 0120 	sub.w	r1, sl, #32
 80040aa:	4310      	orrs	r0, r2
 80040ac:	fa25 f101 	lsr.w	r1, r5, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80040b0:	f8d9 2010 	ldr.w	r2, [r9, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80040b4:	4308      	orrs	r0, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80040b6:	f042 0201 	orr.w	r2, r2, #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80040ba:	b284      	uxth	r4, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80040bc:	f8c9 2010 	str.w	r2, [r9, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040c0:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 80040c4:	f8ab 4000 	strh.w	r4, [fp]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040c8:	f7ff ff9c 	bl	8004004 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80040cc:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80040d0:	f10b 0b02 	add.w	fp, fp, #2
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	f10a 0a10 	add.w	sl, sl, #16
 80040dc:	f8c9 2010 	str.w	r2, [r9, #16]
      if (status != HAL_OK)
 80040e0:	b908      	cbnz	r0, 80040e6 <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 80040e2:	45b3      	cmp	fp, r6
 80040e4:	d1d7      	bne.n	8004096 <HAL_FLASH_Program+0x3a>
  __HAL_UNLOCK(&pFlash);
 80040e6:	2300      	movs	r3, #0
 80040e8:	763b      	strb	r3, [r7, #24]
}
 80040ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80040ee:	2002      	movs	r0, #2
}
 80040f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f4:	20000278 	.word	0x20000278
 80040f8:	40022000 	.word	0x40022000

080040fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80040fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004100:	4e2d      	ldr	r6, [pc, #180]	; (80041b8 <HAL_FLASHEx_Erase+0xbc>)
 8004102:	7e33      	ldrb	r3, [r6, #24]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d054      	beq.n	80041b2 <HAL_FLASHEx_Erase+0xb6>
 8004108:	2301      	movs	r3, #1
 800410a:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800410c:	6803      	ldr	r3, [r0, #0]
 800410e:	4681      	mov	r9, r0
 8004110:	2b02      	cmp	r3, #2
 8004112:	d031      	beq.n	8004178 <HAL_FLASHEx_Erase+0x7c>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004114:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004118:	4688      	mov	r8, r1
 800411a:	f7ff ff73 	bl	8004004 <FLASH_WaitForLastOperation>
 800411e:	bb80      	cbnz	r0, 8004182 <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004128:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 800412c:	eb05 23c3 	add.w	r3, r5, r3, lsl #11
        for(address = pEraseInit->PageAddress;
 8004130:	429d      	cmp	r5, r3
 8004132:	d226      	bcs.n	8004182 <HAL_FLASHEx_Erase+0x86>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004134:	4607      	mov	r7, r0
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004136:	4c21      	ldr	r4, [pc, #132]	; (80041bc <HAL_FLASHEx_Erase+0xc0>)
 8004138:	e007      	b.n	800414a <HAL_FLASHEx_Erase+0x4e>
            address += FLASH_PAGE_SIZE)
 800413a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800413e:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 8004142:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8004146:	42ab      	cmp	r3, r5
 8004148:	d91c      	bls.n	8004184 <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800414a:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800414c:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800414e:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004152:	f043 0302 	orr.w	r3, r3, #2
 8004156:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004158:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004160:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004162:	f7ff ff4f 	bl	8004004 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004166:	6923      	ldr	r3, [r4, #16]
 8004168:	f023 0302 	bic.w	r3, r3, #2
 800416c:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800416e:	2800      	cmp	r0, #0
 8004170:	d0e3      	beq.n	800413a <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8004172:	f8c8 5000 	str.w	r5, [r8]
            break;
 8004176:	e005      	b.n	8004184 <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004178:	f24c 3050 	movw	r0, #50000	; 0xc350
 800417c:	f7ff ff42 	bl	8004004 <FLASH_WaitForLastOperation>
 8004180:	b120      	cbz	r0, 800418c <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004182:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8004184:	2300      	movs	r3, #0
 8004186:	7633      	strb	r3, [r6, #24]
}
 8004188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800418c:	4c0b      	ldr	r4, [pc, #44]	; (80041bc <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800418e:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004190:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004192:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800419c:	6923      	ldr	r3, [r4, #16]
 800419e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a2:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041a4:	f7ff ff2e 	bl	8004004 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	f023 0304 	bic.w	r3, r3, #4
 80041ae:	6123      	str	r3, [r4, #16]
 80041b0:	e7e8      	b.n	8004184 <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 80041b2:	2002      	movs	r0, #2
}
 80041b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041b8:	20000278 	.word	0x20000278
 80041bc:	40022000 	.word	0x40022000

080041c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c4:	680c      	ldr	r4, [r1, #0]
{
 80041c6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c8:	2c00      	cmp	r4, #0
 80041ca:	f000 80a2 	beq.w	8004312 <HAL_GPIO_Init+0x152>
  uint32_t config = 0x00u;
 80041ce:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80041d0:	f8df c228 	ldr.w	ip, [pc, #552]	; 80043fc <HAL_GPIO_Init+0x23c>
  uint32_t position = 0x00u;
 80041d4:	4633      	mov	r3, r6
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80041d6:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8004400 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041da:	4f82      	ldr	r7, [pc, #520]	; (80043e4 <HAL_GPIO_Init+0x224>)
      switch (GPIO_Init->Mode)
 80041dc:	f8df e224 	ldr.w	lr, [pc, #548]	; 8004404 <HAL_GPIO_Init+0x244>
 80041e0:	e004      	b.n	80041ec <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80041e2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041e4:	fa34 f203 	lsrs.w	r2, r4, r3
 80041e8:	f000 8093 	beq.w	8004312 <HAL_GPIO_Init+0x152>
    ioposition = (0x01uL << position);
 80041ec:	2201      	movs	r2, #1
 80041ee:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80041f0:	ea32 0904 	bics.w	r9, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041f4:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 80041f8:	d1f3      	bne.n	80041e2 <HAL_GPIO_Init+0x22>
      switch (GPIO_Init->Mode)
 80041fa:	684c      	ldr	r4, [r1, #4]
 80041fc:	2c12      	cmp	r4, #18
 80041fe:	f200 808b 	bhi.w	8004318 <HAL_GPIO_Init+0x158>
 8004202:	2c12      	cmp	r4, #18
 8004204:	d80c      	bhi.n	8004220 <HAL_GPIO_Init+0x60>
 8004206:	e8df f004 	tbb	[pc, r4]
 800420a:	c693      	.short	0xc693
 800420c:	0b0b0ac3 	.word	0x0b0b0ac3
 8004210:	0b0b0b0b 	.word	0x0b0b0b0b
 8004214:	0b0b0b0b 	.word	0x0b0b0b0b
 8004218:	c00b0b0b 	.word	0xc00b0b0b
 800421c:	bd          	.byte	0xbd
 800421d:	00          	.byte	0x00
 800421e:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004220:	2dff      	cmp	r5, #255	; 0xff
 8004222:	f200 808c 	bhi.w	800433e <HAL_GPIO_Init+0x17e>
 8004226:	4681      	mov	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004228:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800422c:	240f      	movs	r4, #15
 800422e:	f8d9 2000 	ldr.w	r2, [r9]
 8004232:	fa04 fb0a 	lsl.w	fp, r4, sl
 8004236:	ea22 020b 	bic.w	r2, r2, fp
 800423a:	fa06 fa0a 	lsl.w	sl, r6, sl
 800423e:	ea42 020a 	orr.w	r2, r2, sl
 8004242:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004246:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800424a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800424e:	f000 8097 	beq.w	8004380 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004252:	f8dc a018 	ldr.w	sl, [ip, #24]
 8004256:	f023 0203 	bic.w	r2, r3, #3
 800425a:	f04a 0a01 	orr.w	sl, sl, #1
 800425e:	f8cc a018 	str.w	sl, [ip, #24]
 8004262:	f8dc a018 	ldr.w	sl, [ip, #24]
 8004266:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800426a:	f00a 0a01 	and.w	sl, sl, #1
 800426e:	f8cd a00c 	str.w	sl, [sp, #12]
 8004272:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004276:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800427a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800427e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004282:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004286:	fa04 f40a 	lsl.w	r4, r4, sl
 800428a:	ea2b 0404 	bic.w	r4, fp, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800428e:	4540      	cmp	r0, r8
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004290:	9401      	str	r4, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004292:	d01b      	beq.n	80042cc <HAL_GPIO_Init+0x10c>
 8004294:	4c54      	ldr	r4, [pc, #336]	; (80043e8 <HAL_GPIO_Init+0x228>)
 8004296:	42a0      	cmp	r0, r4
 8004298:	f000 8088 	beq.w	80043ac <HAL_GPIO_Init+0x1ec>
 800429c:	4c53      	ldr	r4, [pc, #332]	; (80043ec <HAL_GPIO_Init+0x22c>)
 800429e:	42a0      	cmp	r0, r4
 80042a0:	d07b      	beq.n	800439a <HAL_GPIO_Init+0x1da>
 80042a2:	4c53      	ldr	r4, [pc, #332]	; (80043f0 <HAL_GPIO_Init+0x230>)
 80042a4:	42a0      	cmp	r0, r4
 80042a6:	f000 808a 	beq.w	80043be <HAL_GPIO_Init+0x1fe>
 80042aa:	4c52      	ldr	r4, [pc, #328]	; (80043f4 <HAL_GPIO_Init+0x234>)
 80042ac:	42a0      	cmp	r0, r4
 80042ae:	f000 808f 	beq.w	80043d0 <HAL_GPIO_Init+0x210>
 80042b2:	4c51      	ldr	r4, [pc, #324]	; (80043f8 <HAL_GPIO_Init+0x238>)
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	bf0c      	ite	eq
 80042b8:	f04f 0b05 	moveq.w	fp, #5
 80042bc:	f04f 0b06 	movne.w	fp, #6
 80042c0:	9c01      	ldr	r4, [sp, #4]
 80042c2:	fa0b fa0a 	lsl.w	sl, fp, sl
 80042c6:	ea44 040a 	orr.w	r4, r4, sl
 80042ca:	9401      	str	r4, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80042cc:	9c01      	ldr	r4, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042ce:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 80042d2:	6094      	str	r4, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	bf14      	ite	ne
 80042d8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042da:	43aa      	biceq	r2, r5
 80042dc:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80042de:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042e0:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80042e4:	bf14      	ite	ne
 80042e6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042e8:	43aa      	biceq	r2, r5
 80042ea:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80042ec:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ee:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80042f2:	bf14      	ite	ne
 80042f4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042f6:	43aa      	biceq	r2, r5
 80042f8:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042fa:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80042fe:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004300:	d03b      	beq.n	800437a <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->FTSR, iocurrent);
 8004302:	4315      	orrs	r5, r2
 8004304:	60fd      	str	r5, [r7, #12]
 8004306:	680c      	ldr	r4, [r1, #0]
	position++;
 8004308:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800430a:	fa34 f203 	lsrs.w	r2, r4, r3
 800430e:	f47f af6d 	bne.w	80041ec <HAL_GPIO_Init+0x2c>
  }
}
 8004312:	b005      	add	sp, #20
 8004314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8004318:	4574      	cmp	r4, lr
 800431a:	d009      	beq.n	8004330 <HAL_GPIO_Init+0x170>
 800431c:	d916      	bls.n	800434c <HAL_GPIO_Init+0x18c>
 800431e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8004408 <HAL_GPIO_Init+0x248>
 8004322:	454c      	cmp	r4, r9
 8004324:	d004      	beq.n	8004330 <HAL_GPIO_Init+0x170>
 8004326:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800432a:	454c      	cmp	r4, r9
 800432c:	f47f af78 	bne.w	8004220 <HAL_GPIO_Init+0x60>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004330:	688c      	ldr	r4, [r1, #8]
 8004332:	b9dc      	cbnz	r4, 800436c <HAL_GPIO_Init+0x1ac>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004334:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004336:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800433a:	f67f af74 	bls.w	8004226 <HAL_GPIO_Init+0x66>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800433e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8004342:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004346:	f100 0904 	add.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800434a:	e76f      	b.n	800422c <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 800434c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800440c <HAL_GPIO_Init+0x24c>
 8004350:	454c      	cmp	r4, r9
 8004352:	d0ed      	beq.n	8004330 <HAL_GPIO_Init+0x170>
 8004354:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8004358:	454c      	cmp	r4, r9
 800435a:	d0e9      	beq.n	8004330 <HAL_GPIO_Init+0x170>
 800435c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8004360:	454c      	cmp	r4, r9
 8004362:	f47f af5d 	bne.w	8004220 <HAL_GPIO_Init+0x60>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004366:	688c      	ldr	r4, [r1, #8]
 8004368:	2c00      	cmp	r4, #0
 800436a:	d0e3      	beq.n	8004334 <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800436c:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800436e:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8004372:	bf0c      	ite	eq
 8004374:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8004376:	6142      	strne	r2, [r0, #20]
 8004378:	e752      	b.n	8004220 <HAL_GPIO_Init+0x60>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800437a:	ea22 0505 	bic.w	r5, r2, r5
 800437e:	60fd      	str	r5, [r7, #12]
 8004380:	680c      	ldr	r4, [r1, #0]
 8004382:	e72e      	b.n	80041e2 <HAL_GPIO_Init+0x22>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004384:	68ce      	ldr	r6, [r1, #12]
 8004386:	360c      	adds	r6, #12
          break;
 8004388:	e74a      	b.n	8004220 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800438a:	68ce      	ldr	r6, [r1, #12]
 800438c:	3604      	adds	r6, #4
          break;
 800438e:	e747      	b.n	8004220 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004390:	68ce      	ldr	r6, [r1, #12]
 8004392:	3608      	adds	r6, #8
          break;
 8004394:	e744      	b.n	8004220 <HAL_GPIO_Init+0x60>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004396:	68ce      	ldr	r6, [r1, #12]
          break;
 8004398:	e742      	b.n	8004220 <HAL_GPIO_Init+0x60>
 800439a:	f04f 0b02 	mov.w	fp, #2
 800439e:	9c01      	ldr	r4, [sp, #4]
 80043a0:	fa0b fa0a 	lsl.w	sl, fp, sl
 80043a4:	ea44 040a 	orr.w	r4, r4, sl
 80043a8:	9401      	str	r4, [sp, #4]
 80043aa:	e78f      	b.n	80042cc <HAL_GPIO_Init+0x10c>
 80043ac:	f04f 0b01 	mov.w	fp, #1
 80043b0:	9c01      	ldr	r4, [sp, #4]
 80043b2:	fa0b fa0a 	lsl.w	sl, fp, sl
 80043b6:	ea44 040a 	orr.w	r4, r4, sl
 80043ba:	9401      	str	r4, [sp, #4]
 80043bc:	e786      	b.n	80042cc <HAL_GPIO_Init+0x10c>
 80043be:	f04f 0b03 	mov.w	fp, #3
 80043c2:	9c01      	ldr	r4, [sp, #4]
 80043c4:	fa0b fa0a 	lsl.w	sl, fp, sl
 80043c8:	ea44 040a 	orr.w	r4, r4, sl
 80043cc:	9401      	str	r4, [sp, #4]
 80043ce:	e77d      	b.n	80042cc <HAL_GPIO_Init+0x10c>
 80043d0:	f04f 0b04 	mov.w	fp, #4
 80043d4:	9c01      	ldr	r4, [sp, #4]
 80043d6:	fa0b fa0a 	lsl.w	sl, fp, sl
 80043da:	ea44 040a 	orr.w	r4, r4, sl
 80043de:	9401      	str	r4, [sp, #4]
 80043e0:	e774      	b.n	80042cc <HAL_GPIO_Init+0x10c>
 80043e2:	bf00      	nop
 80043e4:	40010400 	.word	0x40010400
 80043e8:	40010c00 	.word	0x40010c00
 80043ec:	40011000 	.word	0x40011000
 80043f0:	40011400 	.word	0x40011400
 80043f4:	40011800 	.word	0x40011800
 80043f8:	40011c00 	.word	0x40011c00
 80043fc:	40021000 	.word	0x40021000
 8004400:	40010800 	.word	0x40010800
 8004404:	10220000 	.word	0x10220000
 8004408:	10310000 	.word	0x10310000
 800440c:	10120000 	.word	0x10120000

08004410 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004410:	b902      	cbnz	r2, 8004414 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004412:	0409      	lsls	r1, r1, #16
 8004414:	6101      	str	r1, [r0, #16]
  }
}
 8004416:	4770      	bx	lr

08004418 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004418:	2800      	cmp	r0, #0
 800441a:	f000 80b5 	beq.w	8004588 <HAL_I2C_Init+0x170>
{
 800441e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004420:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004424:	4604      	mov	r4, r0
 8004426:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8094 	beq.w	8004558 <HAL_I2C_Init+0x140>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004430:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004432:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004434:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800444e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004450:	f001 fb2a 	bl	8005aa8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004454:	6865      	ldr	r5, [r4, #4]
 8004456:	4b4d      	ldr	r3, [pc, #308]	; (800458c <HAL_I2C_Init+0x174>)
 8004458:	429d      	cmp	r5, r3
 800445a:	d84c      	bhi.n	80044f6 <HAL_I2C_Init+0xde>
 800445c:	4b4c      	ldr	r3, [pc, #304]	; (8004590 <HAL_I2C_Init+0x178>)
 800445e:	4298      	cmp	r0, r3
 8004460:	d978      	bls.n	8004554 <HAL_I2C_Init+0x13c>
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004462:	1e42      	subs	r2, r0, #1
 8004464:	006d      	lsls	r5, r5, #1
 8004466:	fbb2 f2f5 	udiv	r2, r2, r5
 800446a:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 800446e:	4949      	ldr	r1, [pc, #292]	; (8004594 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004470:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004472:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004476:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004478:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800447a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800447e:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 8004482:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004484:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8004486:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004488:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800448c:	3001      	adds	r0, #1
 800448e:	4308      	orrs	r0, r1
 8004490:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004492:	69d9      	ldr	r1, [r3, #28]
 8004494:	4232      	tst	r2, r6
 8004496:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800449a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800449e:	d160      	bne.n	8004562 <HAL_I2C_Init+0x14a>
 80044a0:	2204      	movs	r2, #4
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a2:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044a6:	430a      	orrs	r2, r1
 80044a8:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 80044b0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80044b4:	4302      	orrs	r2, r0
 80044b6:	430a      	orrs	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044ba:	6899      	ldr	r1, [r3, #8]
 80044bc:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 80044c0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80044c4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80044c8:	4302      	orrs	r2, r0
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044ce:	68d9      	ldr	r1, [r3, #12]
 80044d0:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80044d4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80044d8:	4302      	orrs	r2, r0
 80044da:	430a      	orrs	r2, r1
 80044dc:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 80044de:	681a      	ldr	r2, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80044e0:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e8:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ee:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 80044f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044f6:	4b28      	ldr	r3, [pc, #160]	; (8004598 <HAL_I2C_Init+0x180>)
 80044f8:	4298      	cmp	r0, r3
 80044fa:	d92b      	bls.n	8004554 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8004500:	4e24      	ldr	r6, [pc, #144]	; (8004594 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004502:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004504:	fba6 2600 	umull	r2, r6, r6, r0
 8004508:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800450a:	fb01 f102 	mul.w	r1, r1, r2
 800450e:	4f23      	ldr	r7, [pc, #140]	; (800459c <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004510:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004512:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004516:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800451a:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 800451e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	0989      	lsrs	r1, r1, #6
 8004524:	3101      	adds	r1, #1
 8004526:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800452a:	4311      	orrs	r1, r2
 800452c:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800452e:	69d9      	ldr	r1, [r3, #28]
 8004530:	68a6      	ldr	r6, [r4, #8]
 8004532:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004536:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800453a:	b9ae      	cbnz	r6, 8004568 <HAL_I2C_Init+0x150>
 800453c:	3801      	subs	r0, #1
 800453e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8004542:	fbb0 f2f2 	udiv	r2, r0, r2
 8004546:	3201      	adds	r2, #1
 8004548:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800454c:	b1d2      	cbz	r2, 8004584 <HAL_I2C_Init+0x16c>
 800454e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004552:	e7a6      	b.n	80044a2 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8004554:	2001      	movs	r0, #1
}
 8004556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004558:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800455c:	f7ff f85e 	bl	800361c <HAL_I2C_MspInit>
 8004560:	e766      	b.n	8004430 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004562:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004566:	e79c      	b.n	80044a2 <HAL_I2C_Init+0x8a>
 8004568:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800456c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8004570:	1e42      	subs	r2, r0, #1
 8004572:	fbb2 f2f5 	udiv	r2, r2, r5
 8004576:	3201      	adds	r2, #1
 8004578:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800457c:	b112      	cbz	r2, 8004584 <HAL_I2C_Init+0x16c>
 800457e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004582:	e78e      	b.n	80044a2 <HAL_I2C_Init+0x8a>
 8004584:	2201      	movs	r2, #1
 8004586:	e78c      	b.n	80044a2 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8004588:	2001      	movs	r0, #1
}
 800458a:	4770      	bx	lr
 800458c:	000186a0 	.word	0x000186a0
 8004590:	001e847f 	.word	0x001e847f
 8004594:	431bde83 	.word	0x431bde83
 8004598:	003d08ff 	.word	0x003d08ff
 800459c:	10624dd3 	.word	0x10624dd3

080045a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a2:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d072      	beq.n	800468e <HAL_PCD_Init+0xee>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045a8:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80045ac:	4605      	mov	r5, r0
 80045ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d066      	beq.n	8004684 <HAL_PCD_Init+0xe4>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045b6:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045b8:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 80045ba:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80045be:	6828      	ldr	r0, [r5, #0]
 80045c0:	f001 fdc4 	bl	800614c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045c4:	f856 cb10 	ldr.w	ip, [r6], #16
 80045c8:	466c      	mov	r4, sp
 80045ca:	4637      	mov	r7, r6
 80045cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80045ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	1d2f      	adds	r7, r5, #4
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	4660      	mov	r0, ip
 80045d8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80045dc:	f001 fda4 	bl	8006128 <USB_CoreInit>
 80045e0:	4604      	mov	r4, r0
 80045e2:	b130      	cbz	r0, 80045f2 <HAL_PCD_Init+0x52>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 80045e4:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045e6:	2302      	movs	r3, #2
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80045e8:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045ea:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
}
 80045ee:	b007      	add	sp, #28
 80045f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045f2:	4601      	mov	r1, r0
 80045f4:	6828      	ldr	r0, [r5, #0]
 80045f6:	f001 fdb3 	bl	8006160 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045fa:	6868      	ldr	r0, [r5, #4]
 80045fc:	b350      	cbz	r0, 8004654 <HAL_PCD_Init+0xb4>
 80045fe:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8004600:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004604:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8004606:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800460a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800460e:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8004612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004616:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004618:	fa5f f28c 	uxtb.w	r2, ip
 800461c:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 800461e:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8004622:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004626:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 800462a:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462c:	d3eb      	bcc.n	8004606 <HAL_PCD_Init+0x66>
    hpcd->OUT_ep[i].is_in = 0U;
 800462e:	2200      	movs	r2, #0
 8004630:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004634:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004638:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 800463a:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800463e:	b2cc      	uxtb	r4, r1
 8004640:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004642:	e9c3 225e 	strd	r2, r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8004646:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800464a:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800464e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004652:	d3ed      	bcc.n	8004630 <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004654:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004656:	466c      	mov	r4, sp
 8004658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800465a:	6836      	ldr	r6, [r6, #0]
 800465c:	6828      	ldr	r0, [r5, #0]
 800465e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004662:	6026      	str	r6, [r4, #0]
 8004664:	f001 fd7e 	bl	8006164 <USB_DevInit>
 8004668:	4604      	mov	r4, r0
 800466a:	2800      	cmp	r0, #0
 800466c:	d1ba      	bne.n	80045e4 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 800466e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8004670:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8004674:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8004676:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800467a:	f002 fd8b 	bl	8007194 <USB_DevDisconnect>
}
 800467e:	4620      	mov	r0, r4
 8004680:	b007      	add	sp, #28
 8004682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8004684:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8004688:	f003 fc38 	bl	8007efc <HAL_PCD_MspInit>
 800468c:	e793      	b.n	80045b6 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 800468e:	2401      	movs	r4, #1
}
 8004690:	4620      	mov	r0, r4
 8004692:	b007      	add	sp, #28
 8004694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004696:	bf00      	nop

08004698 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004698:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800469a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d011      	beq.n	80046c6 <HAL_PCD_Start+0x2e>
 80046a2:	4604      	mov	r4, r0
 80046a4:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 80046a6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80046a8:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80046ac:	f001 fd44 	bl	8006138 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80046b0:	4629      	mov	r1, r5
 80046b2:	4620      	mov	r0, r4
 80046b4:	f003 fd4e 	bl	8008154 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	f002 fd69 	bl	8007190 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046be:	2000      	movs	r0, #0
 80046c0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80046c4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80046c6:	2002      	movs	r0, #2
}
 80046c8:	bd38      	pop	{r3, r4, r5, pc}
 80046ca:	bf00      	nop

080046cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d0:	4605      	mov	r5, r0
 80046d2:	b085      	sub	sp, #20
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80046d4:	6800      	ldr	r0, [r0, #0]
 80046d6:	f002 fd5f 	bl	8007198 <USB_ReadInterrupts>
 80046da:	0400      	lsls	r0, r0, #16
 80046dc:	f100 80e1 	bmi.w	80048a2 <HAL_PCD_IRQHandler+0x1d6>
 80046e0:	6828      	ldr	r0, [r5, #0]
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80046e2:	f002 fd59 	bl	8007198 <USB_ReadInterrupts>
 80046e6:	0542      	lsls	r2, r0, #21
 80046e8:	f100 80bd 	bmi.w	8004866 <HAL_PCD_IRQHandler+0x19a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80046ec:	6828      	ldr	r0, [r5, #0]
 80046ee:	f002 fd53 	bl	8007198 <USB_ReadInterrupts>
 80046f2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046f6:	6828      	ldr	r0, [r5, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80046f8:	d007      	beq.n	800470a <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046fa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80046fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800470a:	f002 fd45 	bl	8007198 <USB_ReadInterrupts>
 800470e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004712:	6828      	ldr	r0, [r5, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004714:	d11f      	bne.n	8004756 <HAL_PCD_IRQHandler+0x8a>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004716:	f002 fd3f 	bl	8007198 <USB_ReadInterrupts>
 800471a:	04c3      	lsls	r3, r0, #19
 800471c:	d427      	bmi.n	800476e <HAL_PCD_IRQHandler+0xa2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800471e:	6828      	ldr	r0, [r5, #0]
 8004720:	f002 fd3a 	bl	8007198 <USB_ReadInterrupts>
 8004724:	0507      	lsls	r7, r0, #20
 8004726:	d443      	bmi.n	80047b0 <HAL_PCD_IRQHandler+0xe4>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004728:	6828      	ldr	r0, [r5, #0]
 800472a:	f002 fd35 	bl	8007198 <USB_ReadInterrupts>
 800472e:	0582      	lsls	r2, r0, #22
 8004730:	f100 808c 	bmi.w	800484c <HAL_PCD_IRQHandler+0x180>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004734:	6828      	ldr	r0, [r5, #0]
 8004736:	f002 fd2f 	bl	8007198 <USB_ReadInterrupts>
 800473a:	05c3      	lsls	r3, r0, #23
 800473c:	d508      	bpl.n	8004750 <HAL_PCD_IRQHandler+0x84>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800473e:	682a      	ldr	r2, [r5, #0]
 8004740:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8004750:	b005      	add	sp, #20
 8004752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004756:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800475a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004766:	f002 fd17 	bl	8007198 <USB_ReadInterrupts>
 800476a:	04c3      	lsls	r3, r0, #19
 800476c:	d5d7      	bpl.n	800471e <HAL_PCD_IRQHandler+0x52>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800476e:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8004770:	4628      	mov	r0, r5
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004772:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004776:	f023 0304 	bic.w	r3, r3, #4
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004782:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004786:	f023 0308 	bic.w	r3, r3, #8
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8004792:	f003 fc1b 	bl	8007fcc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004796:	6828      	ldr	r0, [r5, #0]
 8004798:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800479c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80047a8:	f002 fcf6 	bl	8007198 <USB_ReadInterrupts>
 80047ac:	0507      	lsls	r7, r0, #20
 80047ae:	d5bb      	bpl.n	8004728 <HAL_PCD_IRQHandler+0x5c>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80047b0:	6829      	ldr	r1, [r5, #0]
 80047b2:	f1ad 0302 	sub.w	r3, sp, #2
 80047b6:	460c      	mov	r4, r1
 80047b8:	460e      	mov	r6, r1
 80047ba:	461a      	mov	r2, r3
 80047bc:	f10d 000e 	add.w	r0, sp, #14
 80047c0:	f836 7b04 	ldrh.w	r7, [r6], #4
 80047c4:	f822 7f02 	strh.w	r7, [r2, #2]!
    for (i = 0U; i < 8U; i++)
 80047c8:	4290      	cmp	r0, r2
 80047ca:	d1f9      	bne.n	80047c0 <HAL_PCD_IRQHandler+0xf4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80047cc:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 80047d0:	b292      	uxth	r2, r2
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80047da:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	0412      	lsls	r2, r2, #16
 80047e4:	0c12      	lsrs	r2, r2, #16
 80047e6:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80047ea:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 80047ee:	0556      	lsls	r6, r2, #21
 80047f0:	d5fb      	bpl.n	80047ea <HAL_PCD_IRQHandler+0x11e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047f2:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 80047f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047fa:	0412      	lsls	r2, r2, #16
 80047fc:	0c12      	lsrs	r2, r2, #16
 80047fe:	f8a1 2044 	strh.w	r2, [r1, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004802:	f833 2f02 	ldrh.w	r2, [r3, #2]!
    for (i = 0U; i < 8U; i++)
 8004806:	4298      	cmp	r0, r3
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004808:	f824 2b04 	strh.w	r2, [r4], #4
    for (i = 0U; i < 8U; i++)
 800480c:	d1f9      	bne.n	8004802 <HAL_PCD_IRQHandler+0x136>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800480e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004812:	4628      	mov	r0, r5
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004814:	b29b      	uxth	r3, r3
 8004816:	f043 0308 	orr.w	r3, r3, #8
 800481a:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800481e:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8004822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800482e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8004832:	b29b      	uxth	r3, r3
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800483c:	f003 fbb6 	bl	8007fac <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004840:	6828      	ldr	r0, [r5, #0]
 8004842:	f002 fca9 	bl	8007198 <USB_ReadInterrupts>
 8004846:	0582      	lsls	r2, r0, #22
 8004848:	f57f af74 	bpl.w	8004734 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800484c:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_SOFCallback(hpcd);
 800484e:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004850:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004860:	f003 fb8e 	bl	8007f80 <HAL_PCD_SOFCallback>
 8004864:	e766      	b.n	8004734 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004866:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResetCallback(hpcd);
 8004868:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800486a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800486e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800487a:	f003 fb85 	bl	8007f88 <HAL_PCD_ResetCallback>
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800487e:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8004882:	2b01      	cmp	r3, #1
 8004884:	f43f af32 	beq.w	80046ec <HAL_PCD_IRQHandler+0x20>
  hpcd->USB_Address = address;
 8004888:	2400      	movs	r4, #0
  __HAL_LOCK(hpcd);
 800488a:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800488c:	4621      	mov	r1, r4
 800488e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8004890:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004894:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004898:	f002 fc74 	bl	8007184 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800489c:	f885 42a8 	strb.w	r4, [r5, #680]	; 0x2a8

  return HAL_OK;
 80048a0:	e724      	b.n	80046ec <HAL_PCD_IRQHandler+0x20>
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048a2:	682c      	ldr	r4, [r5, #0]
 80048a4:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80048a8:	4620      	mov	r0, r4
 80048aa:	0419      	lsls	r1, r3, #16
 80048ac:	f57f af19 	bpl.w	80046e2 <HAL_PCD_IRQHandler+0x16>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048b0:	f8df a9a8 	ldr.w	sl, [pc, #2472]	; 800525c <HAL_PCD_IRQHandler+0xb90>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80048b4:	f8df b9a8 	ldr.w	fp, [pc, #2472]	; 8005260 <HAL_PCD_IRQHandler+0xb94>
    wIstr = hpcd->Instance->ISTR;
 80048b8:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 80048bc:	b2a1      	uxth	r1, r4
    if (epindex == 0U)
 80048be:	f014 040f 	ands.w	r4, r4, #15
 80048c2:	d164      	bne.n	800498e <HAL_PCD_IRQHandler+0x2c2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80048c4:	f011 0110 	ands.w	r1, r1, #16
 80048c8:	f000 8174 	beq.w	8004bb4 <HAL_PCD_IRQHandler+0x4e8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048cc:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80048ce:	f411 6400 	ands.w	r4, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048d2:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80048d4:	f040 819b 	bne.w	8004c0e <HAL_PCD_IRQHandler+0x542>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048d8:	041a      	lsls	r2, r3, #16
 80048da:	d406      	bmi.n	80048ea <HAL_PCD_IRQHandler+0x21e>
 80048dc:	4602      	mov	r2, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048de:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80048e2:	0419      	lsls	r1, r3, #16
 80048e4:	d4e8      	bmi.n	80048b8 <HAL_PCD_IRQHandler+0x1ec>
 80048e6:	4610      	mov	r0, r2
 80048e8:	e6fb      	b.n	80046e2 <HAL_PCD_IRQHandler+0x16>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048ee:	8802      	ldrh	r2, [r0, #0]
 80048f0:	4013      	ands	r3, r2
 80048f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048f8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80048fc:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8004900:	b29b      	uxth	r3, r3
 8004902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004906:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800490a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800490e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004912:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004916:	b193      	cbz	r3, 800493e <HAL_PCD_IRQHandler+0x272>
 8004918:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 800491c:	b179      	cbz	r1, 800493e <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800491e:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8004922:	f002 fc4f 	bl	80071c4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004926:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 800492a:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800492e:	4628      	mov	r0, r5
            ep->xfer_buff += ep->xfer_count;
 8004930:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004932:	4621      	mov	r1, r4
            ep->xfer_buff += ep->xfer_count;
 8004934:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004938:	f003 fb0e 	bl	8007f58 <HAL_PCD_DataOutStageCallback>
 800493c:	6828      	ldr	r0, [r5, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800493e:	8803      	ldrh	r3, [r0, #0]
 8004940:	4602      	mov	r2, r0
 8004942:	051b      	lsls	r3, r3, #20
 8004944:	d4cb      	bmi.n	80048de <HAL_PCD_IRQHandler+0x212>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004946:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800494a:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 800494e:	b29b      	uxth	r3, r3
 8004950:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8004954:	2900      	cmp	r1, #0
 8004956:	f040 8253 	bne.w	8004e00 <HAL_PCD_IRQHandler+0x734>
 800495a:	5ae1      	ldrh	r1, [r4, r3]
 800495c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8004960:	0409      	lsls	r1, r1, #16
 8004962:	0c09      	lsrs	r1, r1, #16
 8004964:	52e1      	strh	r1, [r4, r3]
 8004966:	5ae1      	ldrh	r1, [r4, r3]
 8004968:	b289      	uxth	r1, r1
 800496a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800496e:	52e1      	strh	r1, [r4, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004970:	8803      	ldrh	r3, [r0, #0]
 8004972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498a:	8003      	strh	r3, [r0, #0]
 800498c:	e7a7      	b.n	80048de <HAL_PCD_IRQHandler+0x212>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800498e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004992:	00a6      	lsls	r6, r4, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004994:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004996:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800499a:	f100 809f 	bmi.w	8004adc <HAL_PCD_IRQHandler+0x410>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800499e:	f018 0f80 	tst.w	r8, #128	; 0x80
 80049a2:	d09b      	beq.n	80048dc <HAL_PCD_IRQHandler+0x210>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80049a4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80049a8:	1937      	adds	r7, r6, r4
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	ea03 030a 	and.w	r3, r3, sl
 80049b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80049b8:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 80049bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80049c0:	4602      	mov	r2, r0
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	f000 80cd 	beq.w	8004b62 <HAL_PCD_IRQHandler+0x496>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80ca 	beq.w	8004b62 <HAL_PCD_IRQHandler+0x496>
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d103      	bne.n	80049da <HAL_PCD_IRQHandler+0x30e>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80049d2:	f418 7f80 	tst.w	r8, #256	; 0x100
 80049d6:	f000 80c4 	beq.w	8004b62 <HAL_PCD_IRQHandler+0x496>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049da:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049de:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049e2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80049e6:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049e8:	f000 8193 	beq.w	8004d12 <HAL_PCD_IRQHandler+0x646>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049ec:	3302      	adds	r3, #2
 80049ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80049f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (ep->xfer_len > TxByteNbre)
 80049f6:	eb06 0c04 	add.w	ip, r6, r4
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049fa:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 80049fe:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8004a02:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8004a0a:	459e      	cmp	lr, r3
 8004a0c:	f240 82a3 	bls.w	8004f56 <HAL_PCD_IRQHandler+0x88a>
      ep->xfer_len -= TxByteNbre;
 8004a10:	ebae 0e03 	sub.w	lr, lr, r3
 8004a14:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8004a18:	f1be 0f00 	cmp.w	lr, #0
 8004a1c:	f000 829e 	beq.w	8004f5c <HAL_PCD_IRQHandler+0x890>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a20:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8004a24:	d00f      	beq.n	8004a46 <HAL_PCD_IRQHandler+0x37a>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a26:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8004a2a:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8004a2e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8004a32:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004a36:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004a3a:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8004a3e:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8004a42:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004a46:	eb06 0c04 	add.w	ip, r6, r4
 8004a4a:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8004a4e:	f89c 104c 	ldrb.w	r1, [ip, #76]	; 0x4c
 8004a52:	2901      	cmp	r1, #1
 8004a54:	f040 826f 	bne.w	8004f36 <HAL_PCD_IRQHandler+0x86a>
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a58:	e9dc 2811 	ldrd	r2, r8, [ip, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8004a5c:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a60:	f8dc e038 	ldr.w	lr, [ip, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8004a64:	4419      	add	r1, r3
        ep->xfer_count += TxByteNbre;
 8004a66:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a68:	45f0      	cmp	r8, lr
        ep->xfer_buff += TxByteNbre;
 8004a6a:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8004a6e:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a72:	f0c0 8345 	bcc.w	8005100 <HAL_PCD_IRQHandler+0xa34>
          ep->xfer_len_db -= len;
 8004a76:	eba8 030e 	sub.w	r3, r8, lr
 8004a7a:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 8004a7e:	fa1f f38e 	uxth.w	r3, lr
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a82:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004a86:	2a00      	cmp	r2, #0
 8004a88:	f040 8329 	bne.w	80050de <HAL_PCD_IRQHandler+0xa12>
 8004a8c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004a90:	f897 8028 	ldrb.w	r8, [r7, #40]	; 0x28
 8004a94:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 8004a98:	b292      	uxth	r2, r2
 8004a9a:	4494      	add	ip, r2
 8004a9c:	eb0c 1908 	add.w	r9, ip, r8, lsl #4
 8004aa0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004aa4:	f1be 0f00 	cmp.w	lr, #0
 8004aa8:	f040 83a7 	bne.w	80051fa <HAL_PCD_IRQHandler+0xb2e>
 8004aac:	f83c 2008 	ldrh.w	r2, [ip, r8]
 8004ab0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004ab4:	0412      	lsls	r2, r2, #16
 8004ab6:	0c12      	lsrs	r2, r2, #16
 8004ab8:	f82c 2008 	strh.w	r2, [ip, r8]
 8004abc:	f83c 2008 	ldrh.w	r2, [ip, r8]
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ac6:	f82c 2008 	strh.w	r2, [ip, r8]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004aca:	1932      	adds	r2, r6, r4
 8004acc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004ad0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8004ad2:	f002 fb67 	bl	80071a4 <USB_WritePMA>
 8004ad6:	6828      	ldr	r0, [r5, #0]
 8004ad8:	4602      	mov	r2, r0
 8004ada:	e22c      	b.n	8004f36 <HAL_PCD_IRQHandler+0x86a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004adc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ae0:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8004ae4:	1931      	adds	r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8004af0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004af4:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f040 80ab 	bne.w	8004c54 <HAL_PCD_IRQHandler+0x588>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004afe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004b02:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3306      	adds	r3, #6
 8004b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004b12:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8004b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (count != 0U)
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 80e9 	bne.w	8004cf2 <HAL_PCD_IRQHandler+0x626>
 8004b20:	461f      	mov	r7, r3
        ep->xfer_count += count;
 8004b22:	1931      	adds	r1, r6, r4
 8004b24:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 8004b28:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8004b2c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
        ep->xfer_count += count;
 8004b30:	4438      	add	r0, r7
 8004b32:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b36:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
        ep->xfer_buff += count;
 8004b3a:	443a      	add	r2, r7
        ep->xfer_count += count;
 8004b3c:	00c9      	lsls	r1, r1, #3
        ep->xfer_buff += count;
 8004b3e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b42:	b120      	cbz	r0, 8004b4e <HAL_PCD_IRQHandler+0x482>
 8004b44:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8004b48:	42bb      	cmp	r3, r7
 8004b4a:	f240 80da 	bls.w	8004d02 <HAL_PCD_IRQHandler+0x636>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004b4e:	1933      	adds	r3, r6, r4
 8004b50:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004b54:	4628      	mov	r0, r5
 8004b56:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8004b5a:	f003 f9fd 	bl	8007f58 <HAL_PCD_DataOutStageCallback>
 8004b5e:	6828      	ldr	r0, [r5, #0]
 8004b60:	e71d      	b.n	800499e <HAL_PCD_IRQHandler+0x2d2>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b62:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004b66:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8004b72:	4426      	add	r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004b78:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8004b7c:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8004b80:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8004b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b86:	429a      	cmp	r2, r3
 8004b88:	f240 8097 	bls.w	8004cba <HAL_PCD_IRQHandler+0x5ee>
            ep->xfer_len -= TxByteNbre;
 8004b8c:	1ad2      	subs	r2, r2, r3
 8004b8e:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8004b90:	2a00      	cmp	r2, #0
 8004b92:	f000 8094 	beq.w	8004cbe <HAL_PCD_IRQHandler+0x5f2>
            ep->xfer_buff += TxByteNbre;
 8004b96:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8004b98:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8004b9a:	3401      	adds	r4, #1
            ep->xfer_buff += TxByteNbre;
 8004b9c:	441f      	add	r7, r3
        ep = &hpcd->IN_ep[epindex];
 8004b9e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
            ep->xfer_count += TxByteNbre;
 8004ba2:	4413      	add	r3, r2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ba4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
            ep->xfer_buff += TxByteNbre;
 8004ba8:	63f7      	str	r7, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8004baa:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bac:	f001 fd66 	bl	800667c <USB_EPStartXfer>
 8004bb0:	6828      	ldr	r0, [r5, #0]
 8004bb2:	e693      	b.n	80048dc <HAL_PCD_IRQHandler+0x210>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004bb4:	8803      	ldrh	r3, [r0, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	ea03 030a 	and.w	r3, r3, sl
 8004bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bc2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004bc6:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bd0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8004bd4:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8004bd8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8004bde:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004be0:	646b      	str	r3, [r5, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004be2:	4628      	mov	r0, r5
        ep->xfer_buff += ep->xfer_count;
 8004be4:	63ea      	str	r2, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004be6:	f003 f9c1 	bl	8007f6c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004bea:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0de      	beq.n	8004bb0 <HAL_PCD_IRQHandler+0x4e4>
 8004bf2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1db      	bne.n	8004bb0 <HAL_PCD_IRQHandler+0x4e4>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004bf8:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8004bfc:	6828      	ldr	r0, [r5, #0]
 8004bfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c02:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8004c06:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8004c08:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8004c0c:	e667      	b.n	80048de <HAL_PCD_IRQHandler+0x212>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c0e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004c12:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c1c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004c20:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c24:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8004c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c2c:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c30:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8004c34:	f002 fac6 	bl	80071c4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c3c:	682a      	ldr	r2, [r5, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004c3e:	4628      	mov	r0, r5
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c40:	8811      	ldrh	r1, [r2, #0]
 8004c42:	400b      	ands	r3, r1
 8004c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c48:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004c4a:	f003 f97f 	bl	8007f4c <HAL_PCD_SetupStageCallback>
 8004c4e:	6828      	ldr	r0, [r5, #0]
 8004c50:	4602      	mov	r2, r0
 8004c52:	e644      	b.n	80048de <HAL_PCD_IRQHandler+0x212>
          if (ep->type == EP_TYPE_BULK)
 8004c54:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	f000 80dc 	beq.w	8004e16 <HAL_PCD_IRQHandler+0x74a>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c5e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8004c62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	041b      	lsls	r3, r3, #16
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004c7e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8004c82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c86:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c8a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004c90:	d01b      	beq.n	8004cca <HAL_PCD_IRQHandler+0x5fe>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c92:	3302      	adds	r3, #2
 8004c94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004c9c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8004ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f43f af3b 	beq.w	8004b20 <HAL_PCD_IRQHandler+0x454>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004caa:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8004cae:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004cb2:	461f      	mov	r7, r3
 8004cb4:	f002 fa86 	bl	80071c4 <USB_ReadPMA>
 8004cb8:	e733      	b.n	8004b22 <HAL_PCD_IRQHandler+0x456>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004cc4:	f003 f952 	bl	8007f6c <HAL_PCD_DataInStageCallback>
 8004cc8:	e772      	b.n	8004bb0 <HAL_PCD_IRQHandler+0x4e4>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cca:	3306      	adds	r3, #6
 8004ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004cd4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8004cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f43f af1f 	beq.w	8004b20 <HAL_PCD_IRQHandler+0x454>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ce2:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8004ce6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004cea:	461f      	mov	r7, r3
 8004cec:	f002 fa6a 	bl	80071c4 <USB_ReadPMA>
 8004cf0:	e717      	b.n	8004b22 <HAL_PCD_IRQHandler+0x456>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004cf2:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8004cf6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004cfa:	461f      	mov	r7, r3
 8004cfc:	f002 fa62 	bl	80071c4 <USB_ReadPMA>
 8004d00:	e70f      	b.n	8004b22 <HAL_PCD_IRQHandler+0x456>
        ep = &hpcd->OUT_ep[epindex];
 8004d02:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004d06:	6828      	ldr	r0, [r5, #0]
 8004d08:	4429      	add	r1, r5
 8004d0a:	f001 fcb7 	bl	800667c <USB_EPStartXfer>
 8004d0e:	6828      	ldr	r0, [r5, #0]
 8004d10:	e645      	b.n	800499e <HAL_PCD_IRQHandler+0x2d2>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d12:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004d16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (ep->xfer_len >= TxByteNbre)
 8004d1a:	eb06 0e04 	add.w	lr, r6, r4
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d1e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8004d22:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8004d26:	f8de 9040 	ldr.w	r9, [lr, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8004d2e:	4599      	cmp	r9, r3
 8004d30:	f0c0 80b4 	bcc.w	8004e9c <HAL_PCD_IRQHandler+0x7d0>
      ep->xfer_len -= TxByteNbre;
 8004d34:	eba9 0903 	sub.w	r9, r9, r3
 8004d38:	f8ce 9040 	str.w	r9, [lr, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8004d3c:	f1b9 0f00 	cmp.w	r9, #0
 8004d40:	f000 80ae 	beq.w	8004ea0 <HAL_PCD_IRQHandler+0x7d4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d44:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8004d48:	d10f      	bne.n	8004d6a <HAL_PCD_IRQHandler+0x69e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d4a:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8004d4e:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8004d52:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8004d56:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004d5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004d5e:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8004d62:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8004d66:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004d6a:	eb06 0c04 	add.w	ip, r6, r4
 8004d6e:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8004d72:	f89c 104c 	ldrb.w	r1, [ip, #76]	; 0x4c
 8004d76:	2901      	cmp	r1, #1
 8004d78:	f040 80dd 	bne.w	8004f36 <HAL_PCD_IRQHandler+0x86a>
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d7c:	e9dc 2811 	ldrd	r2, r8, [ip, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8004d80:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d84:	f8dc e038 	ldr.w	lr, [ip, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8004d88:	4419      	add	r1, r3
        ep->xfer_count += TxByteNbre;
 8004d8a:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d8c:	45f0      	cmp	r8, lr
        ep->xfer_buff += TxByteNbre;
 8004d8e:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8004d92:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d96:	f0c0 81dc 	bcc.w	8005152 <HAL_PCD_IRQHandler+0xa86>
          ep->xfer_len_db -= len;
 8004d9a:	eba8 030e 	sub.w	r3, r8, lr
 8004d9e:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 8004da2:	fa1f f38e 	uxth.w	r3, lr
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004da6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	f040 81c0 	bne.w	8005130 <HAL_PCD_IRQHandler+0xa64>
 8004db0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004db4:	f897 8028 	ldrb.w	r8, [r7, #40]	; 0x28
 8004db8:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8004dbc:	b292      	uxth	r2, r2
 8004dbe:	4494      	add	ip, r2
 8004dc0:	eb0c 1908 	add.w	r9, ip, r8, lsl #4
 8004dc4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004dc8:	f1be 0f00 	cmp.w	lr, #0
 8004dcc:	f040 81ed 	bne.w	80051aa <HAL_PCD_IRQHandler+0xade>
 8004dd0:	f83c 2008 	ldrh.w	r2, [ip, r8]
 8004dd4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004dd8:	0412      	lsls	r2, r2, #16
 8004dda:	0c12      	lsrs	r2, r2, #16
 8004ddc:	f82c 2008 	strh.w	r2, [ip, r8]
 8004de0:	f83c 2008 	ldrh.w	r2, [ip, r8]
 8004de4:	b292      	uxth	r2, r2
 8004de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dea:	f82c 2008 	strh.w	r2, [ip, r8]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004dee:	1932      	adds	r2, r6, r4
 8004df0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004df4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004df6:	f002 f9d5 	bl	80071a4 <USB_WritePMA>
 8004dfa:	6828      	ldr	r0, [r5, #0]
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	e09a      	b.n	8004f36 <HAL_PCD_IRQHandler+0x86a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e00:	293e      	cmp	r1, #62	; 0x3e
 8004e02:	f200 80e6 	bhi.w	8004fd2 <HAL_PCD_IRQHandler+0x906>
 8004e06:	084e      	lsrs	r6, r1, #1
 8004e08:	07cf      	lsls	r7, r1, #31
 8004e0a:	bf48      	it	mi
 8004e0c:	3601      	addmi	r6, #1
 8004e0e:	02b1      	lsls	r1, r6, #10
 8004e10:	b289      	uxth	r1, r1
 8004e12:	52e1      	strh	r1, [r4, r3]
 8004e14:	e5ac      	b.n	8004970 <HAL_PCD_IRQHandler+0x2a4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e16:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e1a:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e1e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8004e22:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e24:	f000 80e0 	beq.w	8004fe8 <HAL_PCD_IRQHandler+0x91c>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e28:	3302      	adds	r3, #2
 8004e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004e32:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8004e36:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8004e3e:	459c      	cmp	ip, r3
 8004e40:	461f      	mov	r7, r3
 8004e42:	f0c0 8122 	bcc.w	800508a <HAL_PCD_IRQHandler+0x9be>
      ep->xfer_len -= count;
 8004e46:	ebac 0c03 	sub.w	ip, ip, r3
 8004e4a:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8004e4e:	f1bc 0f00 	cmp.w	ip, #0
 8004e52:	f000 811e 	beq.w	8005092 <HAL_PCD_IRQHandler+0x9c6>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e56:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004e5a:	d012      	beq.n	8004e82 <HAL_PCD_IRQHandler+0x7b6>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e5c:	1932      	adds	r2, r6, r4
 8004e5e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004e62:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 8004e66:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8004e6a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004e6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e72:	0412      	lsls	r2, r2, #16
 8004e74:	0c12      	lsrs	r2, r2, #16
 8004e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e7a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004e7e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f43f ae4c 	beq.w	8004b20 <HAL_PCD_IRQHandler+0x454>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e88:	1931      	adds	r1, r6, r4
 8004e8a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8004e8e:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8004e92:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004e96:	f002 f995 	bl	80071c4 <USB_ReadPMA>
 8004e9a:	e642      	b.n	8004b22 <HAL_PCD_IRQHandler+0x456>
 8004e9c:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ea0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f040 80d7 	bne.w	8005058 <HAL_PCD_IRQHandler+0x98c>
 8004eaa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004eae:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8004eb2:	b292      	uxth	r2, r2
 8004eb4:	0109      	lsls	r1, r1, #4
 8004eb6:	4413      	add	r3, r2
 8004eb8:	5a5a      	ldrh	r2, [r3, r1]
 8004eba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004ebe:	0412      	lsls	r2, r2, #16
 8004ec0:	0c12      	lsrs	r2, r2, #16
 8004ec2:	525a      	strh	r2, [r3, r1]
 8004ec4:	5a5a      	ldrh	r2, [r3, r1]
 8004ec6:	b292      	uxth	r2, r2
 8004ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ecc:	525a      	strh	r2, [r3, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ece:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 811b 	bne.w	800510e <HAL_PCD_IRQHandler+0xa42>
 8004ed8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004edc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8004ee6:	4419      	add	r1, r3
 8004ee8:	0112      	lsls	r2, r2, #4
 8004eea:	5a8b      	ldrh	r3, [r1, r2]
 8004eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	528b      	strh	r3, [r1, r2]
 8004ef6:	5a8b      	ldrh	r3, [r1, r2]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efe:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f00:	4628      	mov	r0, r5
 8004f02:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004f06:	f003 f831 	bl	8007f6c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f0a:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f0e:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f10:	f47f af74 	bne.w	8004dfc <HAL_PCD_IRQHandler+0x730>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f14:	4602      	mov	r2, r0
 8004f16:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004f1a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	041b      	lsls	r3, r3, #16
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f32:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004f36:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004f3a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	ea03 030b 	and.w	r3, r3, fp
 8004f44:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f50:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8004f54:	e4c3      	b.n	80048de <HAL_PCD_IRQHandler+0x212>
 8004f56:	2300      	movs	r3, #0
 8004f58:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f5c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 8086 	bne.w	8005072 <HAL_PCD_IRQHandler+0x9a6>
 8004f66:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004f6a:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	0109      	lsls	r1, r1, #4
 8004f72:	4413      	add	r3, r2
 8004f74:	5a5a      	ldrh	r2, [r3, r1]
 8004f76:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004f7a:	0412      	lsls	r2, r2, #16
 8004f7c:	0c12      	lsrs	r2, r2, #16
 8004f7e:	525a      	strh	r2, [r3, r1]
 8004f80:	5a5a      	ldrh	r2, [r3, r1]
 8004f82:	b292      	uxth	r2, r2
 8004f84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f88:	525a      	strh	r2, [r3, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f8a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 80e6 	bne.w	8005160 <HAL_PCD_IRQHandler+0xa94>
 8004f94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004f98:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8004fa2:	441a      	add	r2, r3
 8004fa4:	0109      	lsls	r1, r1, #4
 8004fa6:	5a8b      	ldrh	r3, [r1, r2]
 8004fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	0c1b      	lsrs	r3, r3, #16
 8004fb0:	528b      	strh	r3, [r1, r2]
 8004fb2:	5a8b      	ldrh	r3, [r1, r2]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fba:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004fc2:	f002 ffd3 	bl	8007f6c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fc6:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fca:	6828      	ldr	r0, [r5, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fcc:	d1a2      	bne.n	8004f14 <HAL_PCD_IRQHandler+0x848>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	e7b1      	b.n	8004f36 <HAL_PCD_IRQHandler+0x86a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004fd2:	094e      	lsrs	r6, r1, #5
 8004fd4:	06c9      	lsls	r1, r1, #27
 8004fd6:	49a0      	ldr	r1, [pc, #640]	; (8005258 <HAL_PCD_IRQHandler+0xb8c>)
 8004fd8:	bf08      	it	eq
 8004fda:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004fde:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004fe2:	b289      	uxth	r1, r1
 8004fe4:	52e1      	strh	r1, [r4, r3]
 8004fe6:	e4c3      	b.n	8004970 <HAL_PCD_IRQHandler+0x2a4>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fe8:	3306      	adds	r3, #6
 8004fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004ff2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8004ff6:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8004ffe:	459e      	cmp	lr, r3
 8005000:	461f      	mov	r7, r3
 8005002:	d357      	bcc.n	80050b4 <HAL_PCD_IRQHandler+0x9e8>
      ep->xfer_len -= count;
 8005004:	ebae 0e03 	sub.w	lr, lr, r3
 8005008:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800500c:	f1be 0f00 	cmp.w	lr, #0
 8005010:	d052      	beq.n	80050b8 <HAL_PCD_IRQHandler+0x9ec>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005012:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005016:	d112      	bne.n	800503e <HAL_PCD_IRQHandler+0x972>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005018:	1932      	adds	r2, r6, r4
 800501a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800501e:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 8005022:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8005026:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800502a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800502e:	0412      	lsls	r2, r2, #16
 8005030:	0c12      	lsrs	r2, r2, #16
 8005032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005036:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800503a:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 800503e:	2b00      	cmp	r3, #0
 8005040:	f43f ad6e 	beq.w	8004b20 <HAL_PCD_IRQHandler+0x454>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005044:	1931      	adds	r1, r6, r4
 8005046:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800504a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800504e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005052:	f002 f8b7 	bl	80071c4 <USB_ReadPMA>
 8005056:	e564      	b.n	8004b22 <HAL_PCD_IRQHandler+0x456>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005058:	2b01      	cmp	r3, #1
 800505a:	f47f af51 	bne.w	8004f00 <HAL_PCD_IRQHandler+0x834>
 800505e:	2400      	movs	r4, #0
 8005060:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005064:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005068:	b292      	uxth	r2, r2
 800506a:	0109      	lsls	r1, r1, #4
 800506c:	4413      	add	r3, r2
 800506e:	525c      	strh	r4, [r3, r1]
 8005070:	e72d      	b.n	8004ece <HAL_PCD_IRQHandler+0x802>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005072:	2b01      	cmp	r3, #1
 8005074:	d1a2      	bne.n	8004fbc <HAL_PCD_IRQHandler+0x8f0>
 8005076:	2400      	movs	r4, #0
 8005078:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800507c:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005080:	b292      	uxth	r2, r2
 8005082:	0109      	lsls	r1, r1, #4
 8005084:	4413      	add	r3, r2
 8005086:	525c      	strh	r4, [r3, r1]
 8005088:	e77f      	b.n	8004f8a <HAL_PCD_IRQHandler+0x8be>
 800508a:	f04f 0c00 	mov.w	ip, #0
 800508e:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005092:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8005096:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800509a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800509e:	0409      	lsls	r1, r1, #16
 80050a0:	0c09      	lsrs	r1, r1, #16
 80050a2:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80050a6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80050aa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80050ae:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80050b2:	e6d0      	b.n	8004e56 <HAL_PCD_IRQHandler+0x78a>
 80050b4:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050b8:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80050bc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80050c0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80050c4:	0409      	lsls	r1, r1, #16
 80050c6:	0c09      	lsrs	r1, r1, #16
 80050c8:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80050cc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80050d0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80050d4:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80050d8:	e79b      	b.n	8005012 <HAL_PCD_IRQHandler+0x946>
 80050da:	fa1f f388 	uxth.w	r3, r8
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050de:	2a01      	cmp	r2, #1
 80050e0:	f47f acf3 	bne.w	8004aca <HAL_PCD_IRQHandler+0x3fe>
 80050e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80050e8:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 80050ec:	fa1f fe82 	uxth.w	lr, r2
 80050f0:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80050f4:	4472      	add	r2, lr
 80050f6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80050fa:	f82c 3002 	strh.w	r3, [ip, r2]
 80050fe:	e4e4      	b.n	8004aca <HAL_PCD_IRQHandler+0x3fe>
        else if (ep->xfer_len_db == 0U)
 8005100:	f1b8 0f00 	cmp.w	r8, #0
 8005104:	d162      	bne.n	80051cc <HAL_PCD_IRQHandler+0xb00>
          ep->xfer_fill_db = 0U;
 8005106:	469e      	mov	lr, r3
 8005108:	f88c 804c 	strb.w	r8, [ip, #76]	; 0x4c
 800510c:	e4b9      	b.n	8004a82 <HAL_PCD_IRQHandler+0x3b6>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800510e:	2b01      	cmp	r3, #1
 8005110:	f47f aef6 	bne.w	8004f00 <HAL_PCD_IRQHandler+0x834>
 8005114:	2400      	movs	r4, #0
 8005116:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800511a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800511e:	b299      	uxth	r1, r3
 8005120:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8005124:	440b      	add	r3, r1
 8005126:	0112      	lsls	r2, r2, #4
 8005128:	52d4      	strh	r4, [r2, r3]
 800512a:	e6e9      	b.n	8004f00 <HAL_PCD_IRQHandler+0x834>
 800512c:	fa1f f388 	uxth.w	r3, r8
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005130:	2a01      	cmp	r2, #1
 8005132:	f47f ae5c 	bne.w	8004dee <HAL_PCD_IRQHandler+0x722>
 8005136:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800513a:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 800513e:	fa1f fe82 	uxth.w	lr, r2
 8005142:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8005146:	4472      	add	r2, lr
 8005148:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800514c:	f82c 3002 	strh.w	r3, [ip, r2]
 8005150:	e64d      	b.n	8004dee <HAL_PCD_IRQHandler+0x722>
        else if (ep->xfer_len_db == 0U)
 8005152:	f1b8 0f00 	cmp.w	r8, #0
 8005156:	d112      	bne.n	800517e <HAL_PCD_IRQHandler+0xab2>
          ep->xfer_fill_db = 0U;
 8005158:	469e      	mov	lr, r3
 800515a:	f88c 804c 	strb.w	r8, [ip, #76]	; 0x4c
 800515e:	e622      	b.n	8004da6 <HAL_PCD_IRQHandler+0x6da>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005160:	2b01      	cmp	r3, #1
 8005162:	f47f af2b 	bne.w	8004fbc <HAL_PCD_IRQHandler+0x8f0>
 8005166:	2400      	movs	r4, #0
 8005168:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800516c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005170:	b291      	uxth	r1, r2
 8005172:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8005176:	440a      	add	r2, r1
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	52d4      	strh	r4, [r2, r3]
 800517c:	e71e      	b.n	8004fbc <HAL_PCD_IRQHandler+0x8f0>
          ep->xfer_len_db = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8005184:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005188:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800518c:	2a00      	cmp	r2, #0
 800518e:	d1cd      	bne.n	800512c <HAL_PCD_IRQHandler+0xa60>
 8005190:	46c6      	mov	lr, r8
 8005192:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005196:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 800519a:	b29b      	uxth	r3, r3
 800519c:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80051a0:	441a      	add	r2, r3
 80051a2:	eb02 190c 	add.w	r9, r2, ip, lsl #4
 80051a6:	fa1f f388 	uxth.w	r3, r8
 80051aa:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 80051ae:	d835      	bhi.n	800521c <HAL_PCD_IRQHandler+0xb50>
 80051b0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80051b4:	f01e 0f01 	tst.w	lr, #1
 80051b8:	bf18      	it	ne
 80051ba:	f10c 0c01 	addne.w	ip, ip, #1
 80051be:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80051c2:	fa1f fc8c 	uxth.w	ip, ip
 80051c6:	f8a9 c000 	strh.w	ip, [r9]
 80051ca:	e610      	b.n	8004dee <HAL_PCD_IRQHandler+0x722>
          ep->xfer_fill_db = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80051d2:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051d6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80051da:	2a00      	cmp	r2, #0
 80051dc:	f47f af7d 	bne.w	80050da <HAL_PCD_IRQHandler+0xa0e>
 80051e0:	46c6      	mov	lr, r8
 80051e2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80051e6:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80051f0:	441a      	add	r2, r3
 80051f2:	eb02 190c 	add.w	r9, r2, ip, lsl #4
 80051f6:	fa1f f388 	uxth.w	r3, r8
 80051fa:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 80051fe:	d81c      	bhi.n	800523a <HAL_PCD_IRQHandler+0xb6e>
 8005200:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005204:	f01e 0f01 	tst.w	lr, #1
 8005208:	bf18      	it	ne
 800520a:	f10c 0c01 	addne.w	ip, ip, #1
 800520e:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8005212:	fa1f fc8c 	uxth.w	ip, ip
 8005216:	f8a9 c000 	strh.w	ip, [r9]
 800521a:	e456      	b.n	8004aca <HAL_PCD_IRQHandler+0x3fe>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800521c:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
 8005220:	4a0d      	ldr	r2, [pc, #52]	; (8005258 <HAL_PCD_IRQHandler+0xb8c>)
 8005222:	f01e 0f1f 	tst.w	lr, #31
 8005226:	bf08      	it	eq
 8005228:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800522c:	ea42 2c8c 	orr.w	ip, r2, ip, lsl #10
 8005230:	fa1f fc8c 	uxth.w	ip, ip
 8005234:	f8a9 c000 	strh.w	ip, [r9]
 8005238:	e5d9      	b.n	8004dee <HAL_PCD_IRQHandler+0x722>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800523a:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
 800523e:	4a06      	ldr	r2, [pc, #24]	; (8005258 <HAL_PCD_IRQHandler+0xb8c>)
 8005240:	f01e 0f1f 	tst.w	lr, #31
 8005244:	bf08      	it	eq
 8005246:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800524a:	ea42 2c8c 	orr.w	ip, r2, ip, lsl #10
 800524e:	fa1f fc8c 	uxth.w	ip, ip
 8005252:	f8a9 c000 	strh.w	ip, [r9]
 8005256:	e438      	b.n	8004aca <HAL_PCD_IRQHandler+0x3fe>
 8005258:	ffff8000 	.word	0xffff8000
 800525c:	ffff8f0f 	.word	0xffff8f0f
 8005260:	ffff8fbf 	.word	0xffff8fbf

08005264 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005264:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8005268:	2a01      	cmp	r2, #1
 800526a:	d00d      	beq.n	8005288 <HAL_PCD_SetAddress+0x24>
 800526c:	2201      	movs	r2, #1
{
 800526e:	b510      	push	{r4, lr}
 8005270:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8005272:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8005276:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800527a:	6800      	ldr	r0, [r0, #0]
 800527c:	f001 ff82 	bl	8007184 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005280:	2000      	movs	r0, #0
 8005282:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005286:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005288:	2002      	movs	r0, #2
}
 800528a:	4770      	bx	lr

0800528c <HAL_PCD_EP_Open>:
{
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4606      	mov	r6, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8005290:	0608      	lsls	r0, r1, #24
 8005292:	d423      	bmi.n	80052dc <HAL_PCD_EP_Open+0x50>
    ep->is_in = 0U;
 8005294:	2400      	movs	r4, #0
 8005296:	f001 0507 	and.w	r5, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800529a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800529e:	00c0      	lsls	r0, r0, #3
 80052a0:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 80052a4:	4430      	add	r0, r6
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052a6:	4431      	add	r1, r6
    ep->is_in = 0U;
 80052a8:	f880 4169 	strb.w	r4, [r0, #361]	; 0x169
  if (ep->is_in != 0U)
 80052ac:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052ae:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 80052b0:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80052b2:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80052b4:	b100      	cbz	r0, 80052b8 <HAL_PCD_EP_Open+0x2c>
    ep->tx_fifo_num = ep->num;
 80052b6:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80052b8:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80052ba:	bf04      	itt	eq
 80052bc:	2300      	moveq	r3, #0
 80052be:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80052c0:	f896 32a8 	ldrb.w	r3, [r6, #680]	; 0x2a8
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d013      	beq.n	80052f0 <HAL_PCD_EP_Open+0x64>
 80052c8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052ca:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 80052cc:	f886 32a8 	strb.w	r3, [r6, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052d0:	f000 ff5c 	bl	800618c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052d4:	2000      	movs	r0, #0
 80052d6:	f886 02a8 	strb.w	r0, [r6, #680]	; 0x2a8
}
 80052da:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 1U;
 80052dc:	2001      	movs	r0, #1
 80052de:	f001 0507 	and.w	r5, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e2:	182c      	adds	r4, r5, r0
 80052e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80052e8:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
    ep->is_in = 1U;
 80052ec:	7048      	strb	r0, [r1, #1]
 80052ee:	e7dd      	b.n	80052ac <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 80052f0:	2002      	movs	r0, #2
}
 80052f2:	bd70      	pop	{r4, r5, r6, pc}

080052f4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80052f4:	060b      	lsls	r3, r1, #24
{
 80052f6:	b510      	push	{r4, lr}
 80052f8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80052fa:	d41a      	bmi.n	8005332 <HAL_PCD_EP_Close+0x3e>
    ep->is_in = 0U;
 80052fc:	2000      	movs	r0, #0
 80052fe:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005302:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005306:	00d2      	lsls	r2, r2, #3
 8005308:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800530c:	4421      	add	r1, r4
    ep->is_in = 0U;
 800530e:	4422      	add	r2, r4
 8005310:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005314:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005316:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800531a:	2b01      	cmp	r3, #1
 800531c:	d017      	beq.n	800534e <HAL_PCD_EP_Close+0x5a>
 800531e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005320:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005322:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005326:	f001 f8b3 	bl	8006490 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800532a:	2000      	movs	r0, #0
 800532c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005330:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8005332:	2201      	movs	r2, #1
 8005334:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005338:	1899      	adds	r1, r3, r2
 800533a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800533e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005342:	704a      	strb	r2, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005344:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005346:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800534a:	2b01      	cmp	r3, #1
 800534c:	d1e7      	bne.n	800531e <HAL_PCD_EP_Close+0x2a>
 800534e:	2002      	movs	r0, #2
}
 8005350:	bd10      	pop	{r4, pc}
 8005352:	bf00      	nop

08005354 <HAL_PCD_EP_Receive>:
{
 8005354:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 8005356:	2600      	movs	r6, #0
 8005358:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800535c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8005360:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  ep->xfer_len = len;
 8005364:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005368:	6800      	ldr	r0, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800536a:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800536e:	f504 71b4 	add.w	r1, r4, #360	; 0x168
  ep->xfer_count = 0U;
 8005372:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8005376:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800537a:	f001 f97f 	bl	800667c <USB_EPStartXfer>
}
 800537e:	4630      	mov	r0, r6
 8005380:	bd70      	pop	{r4, r5, r6, pc}
 8005382:	bf00      	nop

08005384 <HAL_PCD_EP_Transmit>:
{
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep->xfer_fill_db = 1U;
 8005386:	2701      	movs	r7, #1
  ep->xfer_count = 0U;
 8005388:	2600      	movs	r6, #0
 800538a:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800538e:	eb05 0485 	add.w	r4, r5, r5, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005392:	19e9      	adds	r1, r5, r7
  ep->xfer_buff = pBuf;
 8005394:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005398:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800539c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80053a0:	63e2      	str	r2, [r4, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053a2:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 80053a4:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_len_db = len;
 80053a6:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->num = ep_addr & EP_ADDR_MSK;
 80053a8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 80053ac:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
  ep->is_in = 1U;
 80053b0:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 80053b4:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053b6:	f001 f961 	bl	800667c <USB_EPStartXfer>
}
 80053ba:	4630      	mov	r0, r6
 80053bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053be:	bf00      	nop

080053c0 <HAL_PCD_EP_SetStall>:
{
 80053c0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053c2:	6843      	ldr	r3, [r0, #4]
 80053c4:	f001 0507 	and.w	r5, r1, #7
 80053c8:	429d      	cmp	r5, r3
 80053ca:	d82d      	bhi.n	8005428 <HAL_PCD_EP_SetStall+0x68>
  if ((0x80U & ep_addr) == 0x80U)
 80053cc:	060b      	lsls	r3, r1, #24
 80053ce:	4604      	mov	r4, r0
 80053d0:	d41a      	bmi.n	8005408 <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 0U;
 80053d2:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80053d4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80053d8:	00c9      	lsls	r1, r1, #3
    ep->is_in = 0U;
 80053da:	1863      	adds	r3, r4, r1
 80053dc:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80053e0:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 80053e2:	f501 72b4 	add.w	r2, r1, #360	; 0x168
 80053e6:	18a1      	adds	r1, r4, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e8:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80053ea:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80053ec:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d017      	beq.n	8005424 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053f4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80053f6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053fa:	f001 fe43 	bl	8007084 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053fe:	b1ad      	cbz	r5, 800542c <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8005400:	2000      	movs	r0, #0
 8005402:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005406:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8005408:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800540a:	18e9      	adds	r1, r5, r3
 800540c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005410:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005414:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8005416:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8005418:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800541a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800541c:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8005420:	429a      	cmp	r2, r3
 8005422:	d1e7      	bne.n	80053f4 <HAL_PCD_EP_SetStall+0x34>
 8005424:	2002      	movs	r0, #2
}
 8005426:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005428:	2001      	movs	r0, #1
}
 800542a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800542c:	6820      	ldr	r0, [r4, #0]
 800542e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8005432:	f001 feb5 	bl	80071a0 <USB_EP0_OutStart>
 8005436:	e7e3      	b.n	8005400 <HAL_PCD_EP_SetStall+0x40>

08005438 <HAL_PCD_EP_ClrStall>:
{
 8005438:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800543a:	6843      	ldr	r3, [r0, #4]
 800543c:	f001 020f 	and.w	r2, r1, #15
 8005440:	429a      	cmp	r2, r3
 8005442:	d831      	bhi.n	80054a8 <HAL_PCD_EP_ClrStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 8005444:	060b      	lsls	r3, r1, #24
 8005446:	4604      	mov	r4, r0
 8005448:	d41c      	bmi.n	8005484 <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 0U;
 800544a:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 800544c:	2500      	movs	r5, #0
 800544e:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005452:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005456:	00d2      	lsls	r2, r2, #3
 8005458:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800545c:	4421      	add	r1, r4
    ep->is_in = 0U;
 800545e:	4422      	add	r2, r4
 8005460:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005464:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8005466:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8005468:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800546c:	2b01      	cmp	r3, #1
 800546e:	d019      	beq.n	80054a4 <HAL_PCD_EP_ClrStall+0x6c>
 8005470:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005472:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005474:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005478:	f001 fe2c 	bl	80070d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800547c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8005480:	4628      	mov	r0, r5
}
 8005482:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8005484:	2201      	movs	r2, #1
  ep->is_stall = 0U;
 8005486:	2500      	movs	r5, #0
 8005488:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800548c:	1899      	adds	r1, r3, r2
 800548e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005492:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005496:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005498:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800549a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800549c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d1e5      	bne.n	8005470 <HAL_PCD_EP_ClrStall+0x38>
 80054a4:	2002      	movs	r0, #2
}
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80054a8:	2001      	movs	r0, #1
}
 80054aa:	bd38      	pop	{r3, r4, r5, pc}

080054ac <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80054ac:	f011 0f80 	tst.w	r1, #128	; 0x80
 80054b0:	d00b      	beq.n	80054ca <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054b2:	f001 0107 	and.w	r1, r1, #7
 80054b6:	3101      	adds	r1, #1
 80054b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80054bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80054c0:	b95a      	cbnz	r2, 80054da <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80054c2:	2000      	movs	r0, #0
    ep->doublebuffer = 0U;
 80054c4:	730a      	strb	r2, [r1, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80054c6:	80cb      	strh	r3, [r1, #6]
}
 80054c8:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80054ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80054ce:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80054d2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	d0f3      	beq.n	80054c2 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80054da:	2201      	movs	r2, #1
}
 80054dc:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80054de:	608b      	str	r3, [r1, #8]
    ep->doublebuffer = 1U;
 80054e0:	730a      	strb	r2, [r1, #12]
}
 80054e2:	4770      	bx	lr

080054e4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054e4:	2800      	cmp	r0, #0
 80054e6:	f000 81c3 	beq.w	8005870 <HAL_RCC_OscConfig+0x38c>
{
 80054ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ee:	6803      	ldr	r3, [r0, #0]
 80054f0:	4604      	mov	r4, r0
 80054f2:	07dd      	lsls	r5, r3, #31
{
 80054f4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054f6:	d535      	bpl.n	8005564 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054f8:	49a6      	ldr	r1, [pc, #664]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 80054fa:	684a      	ldr	r2, [r1, #4]
 80054fc:	f002 020c 	and.w	r2, r2, #12
 8005500:	2a04      	cmp	r2, #4
 8005502:	f000 80ef 	beq.w	80056e4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005506:	684a      	ldr	r2, [r1, #4]
 8005508:	f002 020c 	and.w	r2, r2, #12
 800550c:	2a08      	cmp	r2, #8
 800550e:	f000 80e5 	beq.w	80056dc <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005518:	d010      	beq.n	800553c <HAL_RCC_OscConfig+0x58>
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 810d 	beq.w	800573a <HAL_RCC_OscConfig+0x256>
 8005520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005524:	f000 818f 	beq.w	8005846 <HAL_RCC_OscConfig+0x362>
 8005528:	4b9a      	ldr	r3, [pc, #616]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e004      	b.n	8005546 <HAL_RCC_OscConfig+0x62>
 800553c:	4a95      	ldr	r2, [pc, #596]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 800553e:	6813      	ldr	r3, [r2, #0]
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fe f9ef 	bl	8003928 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	4e92      	ldr	r6, [pc, #584]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800554c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	e005      	b.n	800555c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005550:	f7fe f9ea 	bl	8003928 <HAL_GetTick>
 8005554:	1b40      	subs	r0, r0, r5
 8005556:	2864      	cmp	r0, #100	; 0x64
 8005558:	f200 80eb 	bhi.w	8005732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555c:	6833      	ldr	r3, [r6, #0]
 800555e:	039a      	lsls	r2, r3, #14
 8005560:	d5f6      	bpl.n	8005550 <HAL_RCC_OscConfig+0x6c>
 8005562:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005564:	079f      	lsls	r7, r3, #30
 8005566:	d528      	bpl.n	80055ba <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005568:	4a8a      	ldr	r2, [pc, #552]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 800556a:	6851      	ldr	r1, [r2, #4]
 800556c:	f011 0f0c 	tst.w	r1, #12
 8005570:	f000 808e 	beq.w	8005690 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005574:	6851      	ldr	r1, [r2, #4]
 8005576:	f001 010c 	and.w	r1, r1, #12
 800557a:	2908      	cmp	r1, #8
 800557c:	f000 8084 	beq.w	8005688 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 8125 	beq.w	80057d2 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005588:	2201      	movs	r2, #1
 800558a:	4b83      	ldr	r3, [pc, #524]	; (8005798 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558c:	4e81      	ldr	r6, [pc, #516]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 800558e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005590:	f7fe f9ca 	bl	8003928 <HAL_GetTick>
 8005594:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005596:	e005      	b.n	80055a4 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005598:	f7fe f9c6 	bl	8003928 <HAL_GetTick>
 800559c:	1b40      	subs	r0, r0, r5
 800559e:	2802      	cmp	r0, #2
 80055a0:	f200 80c7 	bhi.w	8005732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a4:	6833      	ldr	r3, [r6, #0]
 80055a6:	0798      	lsls	r0, r3, #30
 80055a8:	d5f6      	bpl.n	8005598 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055aa:	6833      	ldr	r3, [r6, #0]
 80055ac:	6962      	ldr	r2, [r4, #20]
 80055ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80055b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80055b6:	6033      	str	r3, [r6, #0]
 80055b8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ba:	071a      	lsls	r2, r3, #28
 80055bc:	d41f      	bmi.n	80055fe <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055be:	075d      	lsls	r5, r3, #29
 80055c0:	d541      	bpl.n	8005646 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c2:	4b74      	ldr	r3, [pc, #464]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	00d0      	lsls	r0, r2, #3
 80055c8:	d57d      	bpl.n	80056c6 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80055ca:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055cc:	4b73      	ldr	r3, [pc, #460]	; (800579c <HAL_RCC_OscConfig+0x2b8>)
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	05d1      	lsls	r1, r2, #23
 80055d2:	f140 809d 	bpl.w	8005710 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d6:	68e3      	ldr	r3, [r4, #12]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	f000 810b 	beq.w	80057f4 <HAL_RCC_OscConfig+0x310>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 80c5 	beq.w	800576e <HAL_RCC_OscConfig+0x28a>
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	4b6b      	ldr	r3, [pc, #428]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	f000 8139 	beq.w	8005860 <HAL_RCC_OscConfig+0x37c>
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	621a      	str	r2, [r3, #32]
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	f022 0204 	bic.w	r2, r2, #4
 80055fa:	621a      	str	r2, [r3, #32]
 80055fc:	e0ff      	b.n	80057fe <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055fe:	69a3      	ldr	r3, [r4, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d050      	beq.n	80056a6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8005604:	2201      	movs	r2, #1
 8005606:	4b66      	ldr	r3, [pc, #408]	; (80057a0 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005608:	4e62      	ldr	r6, [pc, #392]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 800560a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800560c:	f7fe f98c 	bl	8003928 <HAL_GetTick>
 8005610:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005612:	e005      	b.n	8005620 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005614:	f7fe f988 	bl	8003928 <HAL_GetTick>
 8005618:	1b40      	subs	r0, r0, r5
 800561a:	2802      	cmp	r0, #2
 800561c:	f200 8089 	bhi.w	8005732 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005620:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005622:	079b      	lsls	r3, r3, #30
 8005624:	d5f6      	bpl.n	8005614 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005626:	4b5f      	ldr	r3, [pc, #380]	; (80057a4 <HAL_RCC_OscConfig+0x2c0>)
 8005628:	4a5f      	ldr	r2, [pc, #380]	; (80057a8 <HAL_RCC_OscConfig+0x2c4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	0a5b      	lsrs	r3, r3, #9
 8005632:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005634:	bf00      	nop
  }
  while (Delay --);
 8005636:	9b01      	ldr	r3, [sp, #4]
 8005638:	1e5a      	subs	r2, r3, #1
 800563a:	9201      	str	r2, [sp, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f9      	bne.n	8005634 <HAL_RCC_OscConfig+0x150>
 8005640:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005642:	075d      	lsls	r5, r3, #29
 8005644:	d4bd      	bmi.n	80055c2 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005646:	69e0      	ldr	r0, [r4, #28]
 8005648:	b1d0      	cbz	r0, 8005680 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800564a:	4d52      	ldr	r5, [pc, #328]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 800564c:	686a      	ldr	r2, [r5, #4]
 800564e:	f002 020c 	and.w	r2, r2, #12
 8005652:	2a08      	cmp	r2, #8
 8005654:	f000 80e6 	beq.w	8005824 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005658:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800565a:	f04f 0100 	mov.w	r1, #0
 800565e:	4a53      	ldr	r2, [pc, #332]	; (80057ac <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005660:	f000 8108 	beq.w	8005874 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8005664:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8005666:	f7fe f95f 	bl	8003928 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800566a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800566c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800566e:	e004      	b.n	800567a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005670:	f7fe f95a 	bl	8003928 <HAL_GetTick>
 8005674:	1b40      	subs	r0, r0, r5
 8005676:	2802      	cmp	r0, #2
 8005678:	d85b      	bhi.n	8005732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	d4f7      	bmi.n	8005670 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8005680:	2000      	movs	r0, #0
}
 8005682:	b002      	add	sp, #8
 8005684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005688:	6852      	ldr	r2, [r2, #4]
 800568a:	03d6      	lsls	r6, r2, #15
 800568c:	f53f af78 	bmi.w	8005580 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005690:	4a40      	ldr	r2, [pc, #256]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	0795      	lsls	r5, r2, #30
 8005696:	d52f      	bpl.n	80056f8 <HAL_RCC_OscConfig+0x214>
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	2a01      	cmp	r2, #1
 800569c:	d02c      	beq.n	80056f8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800569e:	2001      	movs	r0, #1
}
 80056a0:	b002      	add	sp, #8
 80056a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80056a6:	4a3e      	ldr	r2, [pc, #248]	; (80057a0 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a8:	4e3a      	ldr	r6, [pc, #232]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 80056aa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80056ac:	f7fe f93c 	bl	8003928 <HAL_GetTick>
 80056b0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b2:	e004      	b.n	80056be <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b4:	f7fe f938 	bl	8003928 <HAL_GetTick>
 80056b8:	1b40      	subs	r0, r0, r5
 80056ba:	2802      	cmp	r0, #2
 80056bc:	d839      	bhi.n	8005732 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80056c0:	079f      	lsls	r7, r3, #30
 80056c2:	d4f7      	bmi.n	80056b4 <HAL_RCC_OscConfig+0x1d0>
 80056c4:	e7bc      	b.n	8005640 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80056c8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056ce:	61da      	str	r2, [r3, #28]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80056da:	e777      	b.n	80055cc <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056dc:	684a      	ldr	r2, [r1, #4]
 80056de:	03d0      	lsls	r0, r2, #15
 80056e0:	f57f af17 	bpl.w	8005512 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e4:	4a2b      	ldr	r2, [pc, #172]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	0391      	lsls	r1, r2, #14
 80056ea:	f57f af3b 	bpl.w	8005564 <HAL_RCC_OscConfig+0x80>
 80056ee:	6862      	ldr	r2, [r4, #4]
 80056f0:	2a00      	cmp	r2, #0
 80056f2:	f47f af37 	bne.w	8005564 <HAL_RCC_OscConfig+0x80>
 80056f6:	e7d2      	b.n	800569e <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f8:	4926      	ldr	r1, [pc, #152]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 80056fa:	6960      	ldr	r0, [r4, #20]
 80056fc:	680a      	ldr	r2, [r1, #0]
 80056fe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005702:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005706:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005708:	071a      	lsls	r2, r3, #28
 800570a:	f57f af58 	bpl.w	80055be <HAL_RCC_OscConfig+0xda>
 800570e:	e776      	b.n	80055fe <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005710:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005718:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800571a:	f7fe f905 	bl	8003928 <HAL_GetTick>
 800571e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	05da      	lsls	r2, r3, #23
 8005724:	f53f af57 	bmi.w	80055d6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005728:	f7fe f8fe 	bl	8003928 <HAL_GetTick>
 800572c:	1b80      	subs	r0, r0, r6
 800572e:	2864      	cmp	r0, #100	; 0x64
 8005730:	d9f6      	bls.n	8005720 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 8005732:	2003      	movs	r0, #3
}
 8005734:	b002      	add	sp, #8
 8005736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800573a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800573e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005742:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005744:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005746:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005752:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005754:	f7fe f8e8 	bl	8003928 <HAL_GetTick>
 8005758:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800575a:	e004      	b.n	8005766 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800575c:	f7fe f8e4 	bl	8003928 <HAL_GetTick>
 8005760:	1b40      	subs	r0, r0, r5
 8005762:	2864      	cmp	r0, #100	; 0x64
 8005764:	d8e5      	bhi.n	8005732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005766:	6833      	ldr	r3, [r6, #0]
 8005768:	039b      	lsls	r3, r3, #14
 800576a:	d4f7      	bmi.n	800575c <HAL_RCC_OscConfig+0x278>
 800576c:	e6f9      	b.n	8005562 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800576e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005772:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005776:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005778:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	621a      	str	r2, [r3, #32]
 8005780:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005786:	f022 0204 	bic.w	r2, r2, #4
 800578a:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 800578c:	f7fe f8cc 	bl	8003928 <HAL_GetTick>
 8005790:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005792:	e012      	b.n	80057ba <HAL_RCC_OscConfig+0x2d6>
 8005794:	40021000 	.word	0x40021000
 8005798:	42420000 	.word	0x42420000
 800579c:	40007000 	.word	0x40007000
 80057a0:	42420480 	.word	0x42420480
 80057a4:	2000000c 	.word	0x2000000c
 80057a8:	10624dd3 	.word	0x10624dd3
 80057ac:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fe f8ba 	bl	8003928 <HAL_GetTick>
 80057b4:	1b80      	subs	r0, r0, r6
 80057b6:	4540      	cmp	r0, r8
 80057b8:	d8bb      	bhi.n	8005732 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	0798      	lsls	r0, r3, #30
 80057be:	d4f7      	bmi.n	80057b0 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	f43f af40 	beq.w	8005646 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c6:	4a44      	ldr	r2, [pc, #272]	; (80058d8 <HAL_RCC_OscConfig+0x3f4>)
 80057c8:	69d3      	ldr	r3, [r2, #28]
 80057ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ce:	61d3      	str	r3, [r2, #28]
 80057d0:	e739      	b.n	8005646 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80057d2:	4a42      	ldr	r2, [pc, #264]	; (80058dc <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d4:	4e40      	ldr	r6, [pc, #256]	; (80058d8 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 80057d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80057d8:	f7fe f8a6 	bl	8003928 <HAL_GetTick>
 80057dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057de:	e004      	b.n	80057ea <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e0:	f7fe f8a2 	bl	8003928 <HAL_GetTick>
 80057e4:	1b40      	subs	r0, r0, r5
 80057e6:	2802      	cmp	r0, #2
 80057e8:	d8a3      	bhi.n	8005732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ea:	6833      	ldr	r3, [r6, #0]
 80057ec:	0799      	lsls	r1, r3, #30
 80057ee:	d4f7      	bmi.n	80057e0 <HAL_RCC_OscConfig+0x2fc>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	e6e2      	b.n	80055ba <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f4:	4a38      	ldr	r2, [pc, #224]	; (80058d8 <HAL_RCC_OscConfig+0x3f4>)
 80057f6:	6a13      	ldr	r3, [r2, #32]
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80057fe:	f7fe f893 	bl	8003928 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005806:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005808:	4f33      	ldr	r7, [pc, #204]	; (80058d8 <HAL_RCC_OscConfig+0x3f4>)
 800580a:	e004      	b.n	8005816 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580c:	f7fe f88c 	bl	8003928 <HAL_GetTick>
 8005810:	1b80      	subs	r0, r0, r6
 8005812:	4540      	cmp	r0, r8
 8005814:	d88d      	bhi.n	8005732 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	079b      	lsls	r3, r3, #30
 800581a:	d5f7      	bpl.n	800580c <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 800581c:	2d00      	cmp	r5, #0
 800581e:	f43f af12 	beq.w	8005646 <HAL_RCC_OscConfig+0x162>
 8005822:	e7d0      	b.n	80057c6 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005824:	2801      	cmp	r0, #1
 8005826:	f43f af2c 	beq.w	8005682 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 800582a:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582c:	6a22      	ldr	r2, [r4, #32]
 800582e:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005832:	4291      	cmp	r1, r2
 8005834:	f47f af33 	bne.w	800569e <HAL_RCC_OscConfig+0x1ba>
 8005838:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800583a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800583e:	1a18      	subs	r0, r3, r0
 8005840:	bf18      	it	ne
 8005842:	2001      	movne	r0, #1
 8005844:	e71d      	b.n	8005682 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005846:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800584a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e672      	b.n	8005546 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005860:	f042 0204 	orr.w	r2, r2, #4
 8005864:	621a      	str	r2, [r3, #32]
 8005866:	6a1a      	ldr	r2, [r3, #32]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	621a      	str	r2, [r3, #32]
 800586e:	e7c6      	b.n	80057fe <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8005870:	2001      	movs	r0, #1
}
 8005872:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8005874:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8005876:	f7fe f857 	bl	8003928 <HAL_GetTick>
 800587a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587c:	e005      	b.n	800588a <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800587e:	f7fe f853 	bl	8003928 <HAL_GetTick>
 8005882:	1b80      	subs	r0, r0, r6
 8005884:	2802      	cmp	r0, #2
 8005886:	f63f af54 	bhi.w	8005732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	0199      	lsls	r1, r3, #6
 800588e:	d4f6      	bmi.n	800587e <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005890:	6a23      	ldr	r3, [r4, #32]
 8005892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005896:	d105      	bne.n	80058a4 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005898:	686a      	ldr	r2, [r5, #4]
 800589a:	68a1      	ldr	r1, [r4, #8]
 800589c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80058a0:	430a      	orrs	r2, r1
 80058a2:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80058a4:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058a6:	4d0c      	ldr	r5, [pc, #48]	; (80058d8 <HAL_RCC_OscConfig+0x3f4>)
 80058a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058aa:	686a      	ldr	r2, [r5, #4]
 80058ac:	430b      	orrs	r3, r1
 80058ae:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80058b2:	490b      	ldr	r1, [pc, #44]	; (80058e0 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b4:	4313      	orrs	r3, r2
 80058b6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80058b8:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 80058ba:	f7fe f835 	bl	8003928 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058be:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80058c0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058c2:	e005      	b.n	80058d0 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c4:	f7fe f830 	bl	8003928 <HAL_GetTick>
 80058c8:	1b40      	subs	r0, r0, r5
 80058ca:	2802      	cmp	r0, #2
 80058cc:	f63f af31 	bhi.w	8005732 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	019a      	lsls	r2, r3, #6
 80058d4:	d5f6      	bpl.n	80058c4 <HAL_RCC_OscConfig+0x3e0>
 80058d6:	e6d3      	b.n	8005680 <HAL_RCC_OscConfig+0x19c>
 80058d8:	40021000 	.word	0x40021000
 80058dc:	42420000 	.word	0x42420000
 80058e0:	42420060 	.word	0x42420060

080058e4 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80058e4:	f240 2201 	movw	r2, #513	; 0x201
{
 80058e8:	b410      	push	{r4}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80058ea:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <HAL_RCC_GetSysClockFreq+0x70>)
{
 80058ec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80058ee:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80058f0:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80058f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058f6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80058fa:	4917      	ldr	r1, [pc, #92]	; (8005958 <HAL_RCC_GetSysClockFreq+0x74>)
 80058fc:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80058fe:	f002 030c 	and.w	r3, r2, #12
 8005902:	2b04      	cmp	r3, #4
 8005904:	d01b      	beq.n	800593e <HAL_RCC_GetSysClockFreq+0x5a>
 8005906:	2b08      	cmp	r3, #8
 8005908:	d115      	bne.n	8005936 <HAL_RCC_GetSysClockFreq+0x52>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800590a:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800590e:	4423      	add	r3, r4
 8005910:	f813 4c10 	ldrb.w	r4, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005914:	03d3      	lsls	r3, r2, #15
 8005916:	d516      	bpl.n	8005946 <HAL_RCC_GetSysClockFreq+0x62>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005918:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800591a:	4810      	ldr	r0, [pc, #64]	; (800595c <HAL_RCC_GetSysClockFreq+0x78>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800591c:	aa06      	add	r2, sp, #24
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800591e:	fb00 f004 	mul.w	r0, r0, r4
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005922:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8005926:	4413      	add	r3, r2
 8005928:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800592c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005930:	b007      	add	sp, #28
 8005932:	bc10      	pop	{r4}
 8005934:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 8005936:	480a      	ldr	r0, [pc, #40]	; (8005960 <HAL_RCC_GetSysClockFreq+0x7c>)
}
 8005938:	b007      	add	sp, #28
 800593a:	bc10      	pop	{r4}
 800593c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800593e:	4807      	ldr	r0, [pc, #28]	; (800595c <HAL_RCC_GetSysClockFreq+0x78>)
}
 8005940:	b007      	add	sp, #28
 8005942:	bc10      	pop	{r4}
 8005944:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005946:	4807      	ldr	r0, [pc, #28]	; (8005964 <HAL_RCC_GetSysClockFreq+0x80>)
 8005948:	fb00 f004 	mul.w	r0, r0, r4
}
 800594c:	b007      	add	sp, #28
 800594e:	bc10      	pop	{r4}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	080081e0 	.word	0x080081e0
 8005958:	40021000 	.word	0x40021000
 800595c:	00b71b00 	.word	0x00b71b00
 8005960:	007a1200 	.word	0x007a1200
 8005964:	003d0900 	.word	0x003d0900

08005968 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005968:	2800      	cmp	r0, #0
 800596a:	f000 808c 	beq.w	8005a86 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800596e:	4a49      	ldr	r2, [pc, #292]	; (8005a94 <HAL_RCC_ClockConfig+0x12c>)
{
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005974:	6813      	ldr	r3, [r2, #0]
 8005976:	4604      	mov	r4, r0
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	428b      	cmp	r3, r1
 800597e:	460d      	mov	r5, r1
 8005980:	d20c      	bcs.n	800599c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	f023 0307 	bic.w	r3, r3, #7
 8005988:	430b      	orrs	r3, r1
 800598a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598c:	6813      	ldr	r3, [r2, #0]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	428b      	cmp	r3, r1
 8005994:	d002      	beq.n	800599c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005996:	2001      	movs	r0, #1
}
 8005998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	0798      	lsls	r0, r3, #30
 80059a0:	d514      	bpl.n	80059cc <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a2:	0759      	lsls	r1, r3, #29
 80059a4:	d504      	bpl.n	80059b0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a6:	493c      	ldr	r1, [pc, #240]	; (8005a98 <HAL_RCC_ClockConfig+0x130>)
 80059a8:	684a      	ldr	r2, [r1, #4]
 80059aa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80059ae:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b0:	071a      	lsls	r2, r3, #28
 80059b2:	d504      	bpl.n	80059be <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b4:	4938      	ldr	r1, [pc, #224]	; (8005a98 <HAL_RCC_ClockConfig+0x130>)
 80059b6:	684a      	ldr	r2, [r1, #4]
 80059b8:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80059bc:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059be:	4936      	ldr	r1, [pc, #216]	; (8005a98 <HAL_RCC_ClockConfig+0x130>)
 80059c0:	68a0      	ldr	r0, [r4, #8]
 80059c2:	684a      	ldr	r2, [r1, #4]
 80059c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80059c8:	4302      	orrs	r2, r0
 80059ca:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059cc:	07df      	lsls	r7, r3, #31
 80059ce:	d520      	bpl.n	8005a12 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d0:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d8:	d057      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059da:	2a02      	cmp	r2, #2
 80059dc:	d050      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059de:	0799      	lsls	r1, r3, #30
 80059e0:	d5d9      	bpl.n	8005996 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e2:	4e2d      	ldr	r6, [pc, #180]	; (8005a98 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e8:	6873      	ldr	r3, [r6, #4]
 80059ea:	f023 0303 	bic.w	r3, r3, #3
 80059ee:	4313      	orrs	r3, r2
 80059f0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80059f2:	f7fd ff99 	bl	8003928 <HAL_GetTick>
 80059f6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f8:	e004      	b.n	8005a04 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fa:	f7fd ff95 	bl	8003928 <HAL_GetTick>
 80059fe:	1bc0      	subs	r0, r0, r7
 8005a00:	4540      	cmp	r0, r8
 8005a02:	d845      	bhi.n	8005a90 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a04:	6873      	ldr	r3, [r6, #4]
 8005a06:	6862      	ldr	r2, [r4, #4]
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005a10:	d1f3      	bne.n	80059fa <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a12:	4a20      	ldr	r2, [pc, #128]	; (8005a94 <HAL_RCC_ClockConfig+0x12c>)
 8005a14:	6813      	ldr	r3, [r2, #0]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	42ab      	cmp	r3, r5
 8005a1c:	d909      	bls.n	8005a32 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	6813      	ldr	r3, [r2, #0]
 8005a20:	f023 0307 	bic.w	r3, r3, #7
 8005a24:	432b      	orrs	r3, r5
 8005a26:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a28:	6813      	ldr	r3, [r2, #0]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	42ab      	cmp	r3, r5
 8005a30:	d1b1      	bne.n	8005996 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	075a      	lsls	r2, r3, #29
 8005a36:	d506      	bpl.n	8005a46 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a38:	4917      	ldr	r1, [pc, #92]	; (8005a98 <HAL_RCC_ClockConfig+0x130>)
 8005a3a:	68e0      	ldr	r0, [r4, #12]
 8005a3c:	684a      	ldr	r2, [r1, #4]
 8005a3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a42:	4302      	orrs	r2, r0
 8005a44:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a46:	071b      	lsls	r3, r3, #28
 8005a48:	d507      	bpl.n	8005a5a <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a4a:	4a13      	ldr	r2, [pc, #76]	; (8005a98 <HAL_RCC_ClockConfig+0x130>)
 8005a4c:	6921      	ldr	r1, [r4, #16]
 8005a4e:	6853      	ldr	r3, [r2, #4]
 8005a50:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005a54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005a58:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a5a:	f7ff ff43 	bl	80058e4 <HAL_RCC_GetSysClockFreq>
 8005a5e:	4b0e      	ldr	r3, [pc, #56]	; (8005a98 <HAL_RCC_ClockConfig+0x130>)
 8005a60:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <HAL_RCC_ClockConfig+0x134>)
 8005a62:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 8005a64:	490e      	ldr	r1, [pc, #56]	; (8005aa0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a6a:	5cd3      	ldrb	r3, [r2, r3]
 8005a6c:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <HAL_RCC_ClockConfig+0x13c>)
 8005a6e:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 8005a72:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a74:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8005a76:	f7fd ff15 	bl	80038a4 <HAL_InitTick>
  return HAL_OK;
 8005a7a:	2000      	movs	r0, #0
}
 8005a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a80:	0198      	lsls	r0, r3, #6
 8005a82:	d4ae      	bmi.n	80059e2 <HAL_RCC_ClockConfig+0x7a>
 8005a84:	e787      	b.n	8005996 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005a86:	2001      	movs	r0, #1
}
 8005a88:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8a:	039e      	lsls	r6, r3, #14
 8005a8c:	d4a9      	bmi.n	80059e2 <HAL_RCC_ClockConfig+0x7a>
 8005a8e:	e782      	b.n	8005996 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005a90:	2003      	movs	r0, #3
 8005a92:	e781      	b.n	8005998 <HAL_RCC_ClockConfig+0x30>
 8005a94:	40022000 	.word	0x40022000
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	080081c8 	.word	0x080081c8
 8005aa0:	20000014 	.word	0x20000014
 8005aa4:	2000000c 	.word	0x2000000c

08005aa8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005aa8:	4b04      	ldr	r3, [pc, #16]	; (8005abc <HAL_RCC_GetPCLK1Freq+0x14>)
 8005aaa:	4905      	ldr	r1, [pc, #20]	; (8005ac0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005aac:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8005aae:	4a05      	ldr	r2, [pc, #20]	; (8005ac4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ab0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005ab4:	5ccb      	ldrb	r3, [r1, r3]
 8005ab6:	6810      	ldr	r0, [r2, #0]
}
 8005ab8:	40d8      	lsrs	r0, r3
 8005aba:	4770      	bx	lr
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	080081d8 	.word	0x080081d8
 8005ac4:	2000000c 	.word	0x2000000c

08005ac8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ac8:	4b04      	ldr	r3, [pc, #16]	; (8005adc <HAL_RCC_GetPCLK2Freq+0x14>)
 8005aca:	4905      	ldr	r1, [pc, #20]	; (8005ae0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005acc:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8005ace:	4a05      	ldr	r2, [pc, #20]	; (8005ae4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ad0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005ad4:	5ccb      	ldrb	r3, [r1, r3]
 8005ad6:	6810      	ldr	r0, [r2, #0]
}
 8005ad8:	40d8      	lsrs	r0, r3
 8005ada:	4770      	bx	lr
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	080081d8 	.word	0x080081d8
 8005ae4:	2000000c 	.word	0x2000000c

08005ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aec:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005aee:	6800      	ldr	r0, [r0, #0]
{
 8005af0:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005af2:	07c3      	lsls	r3, r0, #31
 8005af4:	d52a      	bpl.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x64>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005af6:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	00d7      	lsls	r7, r2, #3
 8005afc:	d53d      	bpl.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afe:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 8005b00:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	05d6      	lsls	r6, r2, #23
 8005b06:	d546      	bpl.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b08:	4e34      	ldr	r6, [pc, #208]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8005b0a:	6a33      	ldr	r3, [r6, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b0c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005b10:	d00f      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005b12:	6861      	ldr	r1, [r4, #4]
 8005b14:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d00b      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b1c:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b1e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b20:	6a33      	ldr	r3, [r6, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b22:	4a30      	ldr	r2, [pc, #192]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b28:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b2a:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b2c:	6231      	str	r1, [r6, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b2e:	07d9      	lsls	r1, r3, #31
 8005b30:	d445      	bmi.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8005b32:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b34:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8005b36:	6a13      	ldr	r3, [r2, #32]
 8005b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b40:	b11d      	cbz	r5, 8005b4a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b42:	69d3      	ldr	r3, [r2, #28]
 8005b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b48:	61d3      	str	r3, [r2, #28]
 8005b4a:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b4c:	0783      	lsls	r3, r0, #30
 8005b4e:	d506      	bpl.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b50:	4922      	ldr	r1, [pc, #136]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8005b52:	68a3      	ldr	r3, [r4, #8]
 8005b54:	684a      	ldr	r2, [r1, #4]
 8005b56:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b5e:	f010 0010 	ands.w	r0, r0, #16
 8005b62:	d007      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b64:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b66:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8005b68:	6961      	ldr	r1, [r4, #20]
 8005b6a:	6853      	ldr	r3, [r2, #4]
 8005b6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005b70:	430b      	orrs	r3, r1
 8005b72:	6053      	str	r3, [r2, #4]
}
 8005b74:	b002      	add	sp, #8
 8005b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7a:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8005b7c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b82:	61da      	str	r2, [r3, #28]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b8e:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	05d6      	lsls	r6, r2, #23
 8005b94:	d4b8      	bmi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b96:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b98:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005ba0:	f7fd fec2 	bl	8003928 <HAL_GetTick>
 8005ba4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	05d8      	lsls	r0, r3, #23
 8005baa:	d4ad      	bmi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bac:	f7fd febc 	bl	8003928 <HAL_GetTick>
 8005bb0:	1b83      	subs	r3, r0, r6
 8005bb2:	2b64      	cmp	r3, #100	; 0x64
 8005bb4:	d9f7      	bls.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8005bb6:	2003      	movs	r0, #3
}
 8005bb8:	b002      	add	sp, #8
 8005bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8005bbe:	f7fd feb3 	bl	8003928 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005bc6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc8:	e004      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bca:	f7fd fead 	bl	8003928 <HAL_GetTick>
 8005bce:	1bc0      	subs	r0, r0, r7
 8005bd0:	4540      	cmp	r0, r8
 8005bd2:	d8f0      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd4:	6a33      	ldr	r3, [r6, #32]
 8005bd6:	079a      	lsls	r2, r3, #30
 8005bd8:	d5f7      	bpl.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005bda:	e7aa      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40007000 	.word	0x40007000
 8005be4:	42420440 	.word	0x42420440

08005be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bec:	6803      	ldr	r3, [r0, #0]
 8005bee:	68c0      	ldr	r0, [r0, #12]
 8005bf0:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bf2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005bf8:	4301      	orrs	r1, r0
 8005bfa:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005bfc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bfe:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005c02:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c06:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8005c08:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c0c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8005c16:	4913      	ldr	r1, [pc, #76]	; (8005c64 <UART_SetConfig+0x7c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c1c:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8005c1e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c20:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8005c22:	d01b      	beq.n	8005c5c <UART_SetConfig+0x74>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7ff ff40 	bl	8005aa8 <HAL_RCC_GetPCLK1Freq>
 8005c28:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c2a:	6862      	ldr	r2, [r4, #4]
 8005c2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c30:	0092      	lsls	r2, r2, #2
 8005c32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c3a:	2264      	movs	r2, #100	; 0x64
 8005c3c:	480a      	ldr	r0, [pc, #40]	; (8005c68 <UART_SetConfig+0x80>)
 8005c3e:	6824      	ldr	r4, [r4, #0]
 8005c40:	fba0 5103 	umull	r5, r1, r0, r3
 8005c44:	0949      	lsrs	r1, r1, #5
 8005c46:	fb02 3311 	mls	r3, r2, r1, r3
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	3332      	adds	r3, #50	; 0x32
 8005c4e:	fba0 2303 	umull	r2, r3, r0, r3
 8005c52:	0109      	lsls	r1, r1, #4
 8005c54:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8005c58:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c5c:	f7ff ff34 	bl	8005ac8 <HAL_RCC_GetPCLK2Freq>
 8005c60:	4603      	mov	r3, r0
 8005c62:	e7e2      	b.n	8005c2a <UART_SetConfig+0x42>
 8005c64:	40013800 	.word	0x40013800
 8005c68:	51eb851f 	.word	0x51eb851f

08005c6c <HAL_UART_Init>:
  if (huart == NULL)
 8005c6c:	b360      	cbz	r0, 8005cc8 <HAL_UART_Init+0x5c>
{
 8005c6e:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005c70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c74:	4604      	mov	r4, r0
 8005c76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c7a:	b303      	cbz	r3, 8005cbe <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8005c7c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005c7e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005c84:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005c86:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c8c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005c8e:	f7ff ffab 	bl	8005be8 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c92:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8005c94:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c96:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8005c98:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb0:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb2:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cb4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8005cbc:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8005cbe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005cc2:	f7fd fcdd 	bl	8003680 <HAL_UART_MspInit>
 8005cc6:	e7d9      	b.n	8005c7c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8005cc8:	2001      	movs	r0, #1
}
 8005cca:	4770      	bx	lr

08005ccc <HAL_UART_Transmit_DMA>:
{
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005cd0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8005cd4:	2820      	cmp	r0, #32
 8005cd6:	d12b      	bne.n	8005d30 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8005cd8:	b341      	cbz	r1, 8005d2c <HAL_UART_Transmit_DMA+0x60>
 8005cda:	b33a      	cbz	r2, 8005d2c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8005cdc:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8005ce0:	2801      	cmp	r0, #1
 8005ce2:	d025      	beq.n	8005d30 <HAL_UART_Transmit_DMA+0x64>
 8005ce4:	2601      	movs	r6, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce6:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce8:	2721      	movs	r7, #33	; 0x21
    huart->TxXferCount = Size;
 8005cea:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 8005cec:	84a2      	strh	r2, [r4, #36]	; 0x24
    __HAL_LOCK(huart);
 8005cee:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cf2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005cf4:	4613      	mov	r3, r2
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cf6:	4e0f      	ldr	r6, [pc, #60]	; (8005d34 <HAL_UART_Transmit_DMA+0x68>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cf8:	4a0f      	ldr	r2, [pc, #60]	; (8005d38 <HAL_UART_Transmit_DMA+0x6c>)
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfa:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 8005cfc:	6221      	str	r1, [r4, #32]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cfe:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d02:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d04:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d06:	4e0d      	ldr	r6, [pc, #52]	; (8005d3c <HAL_UART_Transmit_DMA+0x70>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005d08:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8005d0a:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d0c:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005d0e:	3204      	adds	r2, #4
 8005d10:	f7fd feda 	bl	8003ac8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d18:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8005d1a:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d1c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8005d1e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d22:	695a      	ldr	r2, [r3, #20]
 8005d24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d28:	615a      	str	r2, [r3, #20]
}
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8005d2c:	2001      	movs	r0, #1
}
 8005d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005d30:	2002      	movs	r0, #2
}
 8005d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d34:	08005d41 	.word	0x08005d41
 8005d38:	08005d71 	.word	0x08005d71
 8005d3c:	08005d85 	.word	0x08005d85

08005d40 <UART_DMATransmitCplt>:
{
 8005d40:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d42:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d44:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f013 0320 	ands.w	r3, r3, #32
 8005d4c:	d10a      	bne.n	8005d64 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d4e:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8005d50:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d52:	6953      	ldr	r3, [r2, #20]
 8005d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d58:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d5a:	68d3      	ldr	r3, [r2, #12]
 8005d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d60:	60d3      	str	r3, [r2, #12]
}
 8005d62:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005d64:	f7fd fbfa 	bl	800355c <HAL_UART_TxCpltCallback>
}
 8005d68:	bd08      	pop	{r3, pc}
 8005d6a:	bf00      	nop

08005d6c <HAL_UART_TxHalfCpltCallback>:
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop

08005d70 <UART_DMATxHalfCplt>:
{
 8005d70:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005d72:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005d74:	f7ff fffa 	bl	8005d6c <HAL_UART_TxHalfCpltCallback>
}
 8005d78:	bd08      	pop	{r3, pc}
 8005d7a:	bf00      	nop

08005d7c <HAL_UART_RxCpltCallback>:
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop

08005d80 <HAL_UART_ErrorCallback>:
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop

08005d84 <UART_DMAError>:
{
 8005d84:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d86:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d88:	6803      	ldr	r3, [r0, #0]
 8005d8a:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d8c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8005d90:	2a21      	cmp	r2, #33	; 0x21
 8005d92:	d00b      	beq.n	8005dac <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d94:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d96:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8005d9a:	2a22      	cmp	r2, #34	; 0x22
 8005d9c:	d016      	beq.n	8005dcc <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005da0:	f043 0310 	orr.w	r3, r3, #16
 8005da4:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8005da6:	f7ff ffeb 	bl	8005d80 <HAL_UART_ErrorCallback>
}
 8005daa:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005dac:	0609      	lsls	r1, r1, #24
 8005dae:	d5f1      	bpl.n	8005d94 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8005db0:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8005db2:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8005db4:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005dbc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005dbe:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc2:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005dc4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8005dc8:	2a22      	cmp	r2, #34	; 0x22
 8005dca:	d1e8      	bne.n	8005d9e <UART_DMAError+0x1a>
 8005dcc:	064a      	lsls	r2, r1, #25
 8005dce:	d5e6      	bpl.n	8005d9e <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005de6:	2a01      	cmp	r2, #1
 8005de8:	d103      	bne.n	8005df2 <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	f022 0210 	bic.w	r2, r2, #16
 8005df0:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8005df2:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005df6:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	6303      	str	r3, [r0, #48]	; 0x30
}
 8005dfc:	e7cf      	b.n	8005d9e <UART_DMAError+0x1a>
 8005dfe:	bf00      	nop

08005e00 <UART_DMAAbortOnError>:
{
 8005e00:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8005e02:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e04:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8005e06:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e08:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005e0a:	f7ff ffb9 	bl	8005d80 <HAL_UART_ErrorCallback>
}
 8005e0e:	bd08      	pop	{r3, pc}

08005e10 <HAL_UARTEx_RxEventCallback>:
}
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop

08005e14 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e14:	6883      	ldr	r3, [r0, #8]
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	d03b      	beq.n	8005e94 <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e1c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d02f      	beq.n	8005e82 <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e22:	6803      	ldr	r3, [r0, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005e2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e2e:	3301      	adds	r3, #1
 8005e30:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005e32:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005e3a:	bb4b      	cbnz	r3, 8005e90 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005e3c:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e40:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005e42:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e44:	68d1      	ldr	r1, [r2, #12]
 8005e46:	f021 0120 	bic.w	r1, r1, #32
 8005e4a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e4c:	68d1      	ldr	r1, [r2, #12]
 8005e4e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005e52:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e54:	6951      	ldr	r1, [r2, #20]
 8005e56:	f021 0101 	bic.w	r1, r1, #1
 8005e5a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e60:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005e62:	2901      	cmp	r1, #1
 8005e64:	d121      	bne.n	8005eaa <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e66:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e68:	68d1      	ldr	r1, [r2, #12]
 8005e6a:	f021 0110 	bic.w	r1, r1, #16
 8005e6e:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e70:	6811      	ldr	r1, [r2, #0]
 8005e72:	06c9      	lsls	r1, r1, #27
 8005e74:	d423      	bmi.n	8005ebe <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e76:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8005e78:	f7ff ffca 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
}
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	b002      	add	sp, #8
 8005e80:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e82:	6903      	ldr	r3, [r0, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1cc      	bne.n	8005e22 <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e88:	6803      	ldr	r3, [r0, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	7013      	strb	r3, [r2, #0]
 8005e8e:	e7cd      	b.n	8005e2c <UART_Receive_IT.part.0+0x18>
}
 8005e90:	2000      	movs	r0, #0
 8005e92:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e94:	6903      	ldr	r3, [r0, #16]
 8005e96:	b96b      	cbnz	r3, 8005eb4 <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e98:	6802      	ldr	r2, [r0, #0]
 8005e9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e9c:	6852      	ldr	r2, [r2, #4]
 8005e9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea2:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8005ea6:	6283      	str	r3, [r0, #40]	; 0x28
 8005ea8:	e7c3      	b.n	8005e32 <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8005eaa:	f7ff ff67 	bl	8005d7c <HAL_UART_RxCpltCallback>
}
 8005eae:	2000      	movs	r0, #0
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eb4:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eb6:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	7013      	strb	r3, [r2, #0]
 8005ebc:	e7b6      	b.n	8005e2c <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	6813      	ldr	r3, [r2, #0]
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	6853      	ldr	r3, [r2, #4]
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	e7d4      	b.n	8005e76 <UART_Receive_IT.part.0+0x62>

08005ecc <HAL_UART_IRQHandler>:
{
 8005ecc:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ece:	6803      	ldr	r3, [r0, #0]
{
 8005ed0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ed2:	681a      	ldr	r2, [r3, #0]
{
 8005ed4:	b082      	sub	sp, #8
  if (errorflags == RESET)
 8005ed6:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ed8:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eda:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8005edc:	d14e      	bne.n	8005f7c <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ede:	0696      	lsls	r6, r2, #26
 8005ee0:	d502      	bpl.n	8005ee8 <HAL_UART_IRQHandler+0x1c>
 8005ee2:	068d      	lsls	r5, r1, #26
 8005ee4:	f100 8090 	bmi.w	8006008 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005eea:	2801      	cmp	r0, #1
 8005eec:	d00b      	beq.n	8005f06 <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005eee:	0616      	lsls	r6, r2, #24
 8005ef0:	d502      	bpl.n	8005ef8 <HAL_UART_IRQHandler+0x2c>
 8005ef2:	060d      	lsls	r5, r1, #24
 8005ef4:	f100 8092 	bmi.w	800601c <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ef8:	0650      	lsls	r0, r2, #25
 8005efa:	d502      	bpl.n	8005f02 <HAL_UART_IRQHandler+0x36>
 8005efc:	064a      	lsls	r2, r1, #25
 8005efe:	f100 80ab 	bmi.w	8006058 <HAL_UART_IRQHandler+0x18c>
}
 8005f02:	b002      	add	sp, #8
 8005f04:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f06:	06d5      	lsls	r5, r2, #27
 8005f08:	d5f1      	bpl.n	8005eee <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f0a:	06c8      	lsls	r0, r1, #27
 8005f0c:	d5ef      	bpl.n	8005eee <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f0e:	2100      	movs	r1, #0
 8005f10:	9101      	str	r1, [sp, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	9201      	str	r2, [sp, #4]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	9201      	str	r2, [sp, #4]
 8005f1a:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	695a      	ldr	r2, [r3, #20]
 8005f1e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8005f22:	f000 80d2 	beq.w	80060ca <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005f28:	6802      	ldr	r2, [r0, #0]
 8005f2a:	6852      	ldr	r2, [r2, #4]
 8005f2c:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	d0e7      	beq.n	8005f02 <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005f32:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8005f34:	4295      	cmp	r5, r2
 8005f36:	d9e4      	bls.n	8005f02 <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f38:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 8005f3a:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f3c:	2e20      	cmp	r6, #32
 8005f3e:	d016      	beq.n	8005f6e <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 8005f40:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f48:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f52:	695a      	ldr	r2, [r3, #20]
 8005f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f58:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5e:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	f022 0210 	bic.w	r2, r2, #16
 8005f66:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f68:	f7fd fdf0 	bl	8003b4c <HAL_DMA_Abort>
 8005f6c:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f6e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8005f70:	4620      	mov	r0, r4
 8005f72:	1a69      	subs	r1, r5, r1
 8005f74:	b289      	uxth	r1, r1
 8005f76:	f7ff ff4b 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
 8005f7a:	e7c2      	b.n	8005f02 <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f7c:	f005 0501 	and.w	r5, r5, #1
 8005f80:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8005f84:	4328      	orrs	r0, r5
 8005f86:	d0af      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f88:	07d0      	lsls	r0, r2, #31
 8005f8a:	d505      	bpl.n	8005f98 <HAL_UART_IRQHandler+0xcc>
 8005f8c:	05ce      	lsls	r6, r1, #23
 8005f8e:	d503      	bpl.n	8005f98 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f90:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005f92:	f040 0001 	orr.w	r0, r0, #1
 8005f96:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f98:	0750      	lsls	r0, r2, #29
 8005f9a:	d52c      	bpl.n	8005ff6 <HAL_UART_IRQHandler+0x12a>
 8005f9c:	b12d      	cbz	r5, 8005faa <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f9e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa0:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fa2:	f040 0002 	orr.w	r0, r0, #2
 8005fa6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa8:	d429      	bmi.n	8005ffe <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005faa:	0716      	lsls	r6, r2, #28
 8005fac:	d507      	bpl.n	8005fbe <HAL_UART_IRQHandler+0xf2>
 8005fae:	f001 0020 	and.w	r0, r1, #32
 8005fb2:	4328      	orrs	r0, r5
 8005fb4:	d003      	beq.n	8005fbe <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005fb8:	f040 0008 	orr.w	r0, r0, #8
 8005fbc:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fbe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d09e      	beq.n	8005f02 <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fc4:	0690      	lsls	r0, r2, #26
 8005fc6:	d509      	bpl.n	8005fdc <HAL_UART_IRQHandler+0x110>
 8005fc8:	068a      	lsls	r2, r1, #26
 8005fca:	d507      	bpl.n	8005fdc <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fcc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005fd0:	2a22      	cmp	r2, #34	; 0x22
 8005fd2:	d103      	bne.n	8005fdc <HAL_UART_IRQHandler+0x110>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f7ff ff1d 	bl	8005e14 <UART_Receive_IT.part.0>
 8005fda:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fdc:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fde:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe0:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fe4:	f005 0508 	and.w	r5, r5, #8
 8005fe8:	4315      	orrs	r5, r2
 8005fea:	d140      	bne.n	800606e <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 8005fec:	4620      	mov	r0, r4
 8005fee:	f7ff fec7 	bl	8005d80 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff2:	6425      	str	r5, [r4, #64]	; 0x40
 8005ff4:	e785      	b.n	8005f02 <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ff6:	0790      	lsls	r0, r2, #30
 8005ff8:	d5d7      	bpl.n	8005faa <HAL_UART_IRQHandler+0xde>
 8005ffa:	2d00      	cmp	r5, #0
 8005ffc:	d0d5      	beq.n	8005faa <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ffe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006000:	f040 0004 	orr.w	r0, r0, #4
 8006004:	6420      	str	r0, [r4, #64]	; 0x40
 8006006:	e7d0      	b.n	8005faa <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006008:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800600c:	2b22      	cmp	r3, #34	; 0x22
 800600e:	f47f af78 	bne.w	8005f02 <HAL_UART_IRQHandler+0x36>
}
 8006012:	b002      	add	sp, #8
 8006014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006018:	f7ff befc 	b.w	8005e14 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800601c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8006020:	2a21      	cmp	r2, #33	; 0x21
 8006022:	f47f af6e 	bne.w	8005f02 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006026:	68a2      	ldr	r2, [r4, #8]
 8006028:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800602c:	d06e      	beq.n	800610c <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800602e:	6a22      	ldr	r2, [r4, #32]
 8006030:	1c51      	adds	r1, r2, #1
 8006032:	6221      	str	r1, [r4, #32]
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8006038:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800603a:	3a01      	subs	r2, #1
 800603c:	b292      	uxth	r2, r2
 800603e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8006040:	2a00      	cmp	r2, #0
 8006042:	f47f af5e 	bne.w	8005f02 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006046:	68da      	ldr	r2, [r3, #12]
 8006048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800604c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	e754      	b.n	8005f02 <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8006058:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800605a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800605c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800605e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006062:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006064:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8006068:	f7fd fa78 	bl	800355c <HAL_UART_TxCpltCallback>
    return;
 800606c:	e749      	b.n	8005f02 <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006074:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	f022 0201 	bic.w	r2, r2, #1
 800607c:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006080:	2a01      	cmp	r2, #1
 8006082:	d103      	bne.n	800608c <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	f022 0210 	bic.w	r2, r2, #16
 800608a:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800608e:	2120      	movs	r1, #32
 8006090:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006094:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	0656      	lsls	r6, r2, #25
 800609a:	d512      	bpl.n	80060c2 <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800609c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800609e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a4:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80060a6:	b160      	cbz	r0, 80060c2 <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <HAL_UART_IRQHandler+0x258>)
 80060aa:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ac:	f7fd fd70 	bl	8003b90 <HAL_DMA_Abort_IT>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	f43f af26 	beq.w	8005f02 <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80060b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80060ba:	b002      	add	sp, #8
 80060bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80060c2:	4620      	mov	r0, r4
 80060c4:	f7ff fe5c 	bl	8005d80 <HAL_UART_ErrorCallback>
 80060c8:	e71b      	b.n	8005f02 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060ca:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 80060cc:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060ce:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80060d0:	b289      	uxth	r1, r1
 80060d2:	2900      	cmp	r1, #0
 80060d4:	f43f af15 	beq.w	8005f02 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060d8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80060da:	1a08      	subs	r0, r1, r0
 80060dc:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 80060de:	2900      	cmp	r1, #0
 80060e0:	f43f af0f 	beq.w	8005f02 <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 80060e4:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e6:	68d8      	ldr	r0, [r3, #12]
 80060e8:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 80060ec:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ee:	6958      	ldr	r0, [r3, #20]
 80060f0:	f020 0001 	bic.w	r0, r0, #1
 80060f4:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80060f6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fa:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fc:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060fe:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006100:	f022 0210 	bic.w	r2, r2, #16
 8006104:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006106:	f7ff fe83 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
 800610a:	e6fa      	b.n	8005f02 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610c:	6922      	ldr	r2, [r4, #16]
 800610e:	2a00      	cmp	r2, #0
 8006110:	d18d      	bne.n	800602e <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006112:	6a22      	ldr	r2, [r4, #32]
 8006114:	f832 1b02 	ldrh.w	r1, [r2], #2
 8006118:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800611c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800611e:	6222      	str	r2, [r4, #32]
 8006120:	e78a      	b.n	8006038 <HAL_UART_IRQHandler+0x16c>
 8006122:	bf00      	nop
 8006124:	08005e01 	.word	0x08005e01

08006128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006128:	b084      	sub	sp, #16
 800612a:	a801      	add	r0, sp, #4
 800612c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006130:	b004      	add	sp, #16
 8006132:	2000      	movs	r0, #0
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop

08006138 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006138:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800613a:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800613e:	2000      	movs	r0, #0
 8006140:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8006144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop

0800614c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800614c:	f244 02ff 	movw	r2, #16639	; 0x40ff
{
 8006150:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006152:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 8006156:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006158:	400a      	ands	r2, r1
 800615a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800615e:	4770      	bx	lr

08006160 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006160:	2000      	movs	r0, #0
 8006162:	4770      	bx	lr

08006164 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006164:	b084      	sub	sp, #16
 8006166:	b430      	push	{r4, r5}
 8006168:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800616a:	2501      	movs	r5, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800616c:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800616e:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
{
 8006172:	ad03      	add	r5, sp, #12
  USBx->CNTR = 0U;
 8006174:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
{
 8006178:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800617c:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006180:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8006184:	bc30      	pop	{r4, r5}
 8006186:	b004      	add	sp, #16
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop

0800618c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800618c:	4603      	mov	r3, r0
 800618e:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006190:	780d      	ldrb	r5, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006192:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006194:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8006198:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800619c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80061a0:	0412      	lsls	r2, r2, #16
 80061a2:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80061a4:	2803      	cmp	r0, #3
 80061a6:	f200 816c 	bhi.w	8006482 <USB_ActivateEndpoint+0x2f6>
 80061aa:	e8df f000 	tbb	[pc, r0]
 80061ae:	5054      	.short	0x5054
 80061b0:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80061b2:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80061b6:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80061b8:	f248 0480 	movw	r4, #32896	; 0x8080
 80061bc:	4322      	orrs	r2, r4
 80061be:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80061c2:	780e      	ldrb	r6, [r1, #0]
 80061c4:	4db0      	ldr	r5, [pc, #704]	; (8006488 <USB_ActivateEndpoint+0x2fc>)
 80061c6:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80061ca:	b292      	uxth	r2, r2
 80061cc:	402a      	ands	r2, r5
 80061ce:	4332      	orrs	r2, r6
 80061d0:	4322      	orrs	r2, r4
 80061d2:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 80061d6:	7b0a      	ldrb	r2, [r1, #12]
 80061d8:	2a00      	cmp	r2, #0
 80061da:	f040 8089 	bne.w	80062f0 <USB_ActivateEndpoint+0x164>
  {
    if (ep->is_in != 0U)
 80061de:	784a      	ldrb	r2, [r1, #1]
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d03b      	beq.n	800625c <USB_ActivateEndpoint+0xd0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061e4:	780a      	ldrb	r2, [r1, #0]
 80061e6:	88cc      	ldrh	r4, [r1, #6]
 80061e8:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80061ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80061f0:	0864      	lsrs	r4, r4, #1
 80061f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061f6:	0064      	lsls	r4, r4, #1
 80061f8:	b2b6      	uxth	r6, r6
 80061fa:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061fc:	780c      	ldrb	r4, [r1, #0]
 80061fe:	f833 6024 	ldrh.w	r6, [r3, r4, lsl #2]
 8006202:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8006206:	0676      	lsls	r6, r6, #25
 8006208:	d50c      	bpl.n	8006224 <USB_ActivateEndpoint+0x98>
 800620a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800620e:	b292      	uxth	r2, r2
 8006210:	4015      	ands	r5, r2
 8006212:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8006216:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 800621a:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
 800621e:	780a      	ldrb	r2, [r1, #0]
 8006220:	eb03 0282 	add.w	r2, r3, r2, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 8006224:	78cb      	ldrb	r3, [r1, #3]
 8006226:	2b01      	cmp	r3, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006228:	8813      	ldrh	r3, [r2, #0]
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006232:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8006236:	ea4f 4313 	mov.w	r3, r3, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800623a:	d052      	beq.n	80062e2 <USB_ActivateEndpoint+0x156>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800623c:	bc70      	pop	{r4, r5, r6}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800623e:	f083 0320 	eor.w	r3, r3, #32
 8006242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624a:	8013      	strh	r3, [r2, #0]
}
 800624c:	4770      	bx	lr
  HAL_StatusTypeDef ret = HAL_OK;
 800624e:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8006254:	e7b0      	b.n	80061b8 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_CONTROL;
 8006256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 800625a:	e7ad      	b.n	80061b8 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800625c:	780a      	ldrb	r2, [r1, #0]
 800625e:	88cc      	ldrh	r4, [r1, #6]
 8006260:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8006264:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006268:	0864      	lsrs	r4, r4, #1
 800626a:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800626e:	0064      	lsls	r4, r4, #1
 8006270:	b2ad      	uxth	r5, r5
 8006272:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006274:	780a      	ldrb	r2, [r1, #0]
 8006276:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800627a:	690d      	ldr	r5, [r1, #16]
 800627c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006280:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8006284:	b2a4      	uxth	r4, r4
 8006286:	2d00      	cmp	r5, #0
 8006288:	f000 80e2 	beq.w	8006450 <USB_ActivateEndpoint+0x2c4>
 800628c:	2d3e      	cmp	r5, #62	; 0x3e
 800628e:	f200 80ed 	bhi.w	800646c <USB_ActivateEndpoint+0x2e0>
 8006292:	086e      	lsrs	r6, r5, #1
 8006294:	07ed      	lsls	r5, r5, #31
 8006296:	bf48      	it	mi
 8006298:	3601      	addmi	r6, #1
 800629a:	02b6      	lsls	r6, r6, #10
 800629c:	b2b6      	uxth	r6, r6
 800629e:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062a0:	780c      	ldrb	r4, [r1, #0]
 80062a2:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80062a6:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 80062aa:	046d      	lsls	r5, r5, #17
 80062ac:	d510      	bpl.n	80062d0 <USB_ActivateEndpoint+0x144>
 80062ae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80062b2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80062b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062ba:	0412      	lsls	r2, r2, #16
 80062bc:	0c12      	lsrs	r2, r2, #16
 80062be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80062c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062c6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80062ca:	780a      	ldrb	r2, [r1, #0]
 80062cc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062d0:	8813      	ldrh	r3, [r2, #0]
 80062d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	041b      	lsls	r3, r3, #16
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80062e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ea:	8013      	strh	r3, [r2, #0]
}
 80062ec:	bc70      	pop	{r4, r5, r6}
 80062ee:	4770      	bx	lr
    PCD_SET_EP_DBUF(USBx, ep->num);
 80062f0:	780c      	ldrb	r4, [r1, #0]
 80062f2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80062f6:	b292      	uxth	r2, r2
 80062f8:	402a      	ands	r2, r5
 80062fa:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80062fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006302:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006306:	780a      	ldrb	r2, [r1, #0]
 8006308:	890c      	ldrh	r4, [r1, #8]
 800630a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800630e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006312:	0864      	lsrs	r4, r4, #1
 8006314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006318:	0064      	lsls	r4, r4, #1
 800631a:	b2b6      	uxth	r6, r6
 800631c:	5394      	strh	r4, [r2, r6]
 800631e:	780a      	ldrb	r2, [r1, #0]
 8006320:	894c      	ldrh	r4, [r1, #10]
 8006322:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8006326:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800632a:	0864      	lsrs	r4, r4, #1
 800632c:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8006330:	b2b6      	uxth	r6, r6
 8006332:	0064      	lsls	r4, r4, #1
 8006334:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8006336:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006338:	780e      	ldrb	r6, [r1, #0]
    if (ep->is_in == 0U)
 800633a:	2a00      	cmp	r2, #0
 800633c:	d13f      	bne.n	80063be <USB_ActivateEndpoint+0x232>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800633e:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8006342:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8006346:	0452      	lsls	r2, r2, #17
 8006348:	d50c      	bpl.n	8006364 <USB_ActivateEndpoint+0x1d8>
 800634a:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800634e:	b292      	uxth	r2, r2
 8006350:	4015      	ands	r5, r2
 8006352:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8006356:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800635a:	f823 5026 	strh.w	r5, [r3, r6, lsl #2]
 800635e:	780c      	ldrb	r4, [r1, #0]
 8006360:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006364:	8822      	ldrh	r2, [r4, #0]
 8006366:	0655      	lsls	r5, r2, #25
 8006368:	d50e      	bpl.n	8006388 <USB_ActivateEndpoint+0x1fc>
 800636a:	8822      	ldrh	r2, [r4, #0]
 800636c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006370:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006374:	0412      	lsls	r2, r2, #16
 8006376:	0c12      	lsrs	r2, r2, #16
 8006378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800637c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006380:	8022      	strh	r2, [r4, #0]
 8006382:	780c      	ldrb	r4, [r1, #0]
 8006384:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006388:	f248 0580 	movw	r5, #32896	; 0x8080
 800638c:	8822      	ldrh	r2, [r4, #0]
 800638e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006392:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006396:	0412      	lsls	r2, r2, #16
 8006398:	0c12      	lsrs	r2, r2, #16
 800639a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800639e:	432a      	orrs	r2, r5
 80063a0:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063a2:	7809      	ldrb	r1, [r1, #0]
 80063a4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80063a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80063ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b0:	0412      	lsls	r2, r2, #16
 80063b2:	0c12      	lsrs	r2, r2, #16
 80063b4:	432a      	orrs	r2, r5
 80063b6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 80063ba:	bc70      	pop	{r4, r5, r6}
 80063bc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063be:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80063c2:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 80063c6:	0452      	lsls	r2, r2, #17
 80063c8:	d50c      	bpl.n	80063e4 <USB_ActivateEndpoint+0x258>
 80063ca:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80063ce:	b292      	uxth	r2, r2
 80063d0:	4015      	ands	r5, r2
 80063d2:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 80063d6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80063da:	f823 5026 	strh.w	r5, [r3, r6, lsl #2]
 80063de:	780c      	ldrb	r4, [r1, #0]
 80063e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063e4:	8822      	ldrh	r2, [r4, #0]
 80063e6:	0652      	lsls	r2, r2, #25
 80063e8:	d50e      	bpl.n	8006408 <USB_ActivateEndpoint+0x27c>
 80063ea:	8822      	ldrh	r2, [r4, #0]
 80063ec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80063f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063f4:	0412      	lsls	r2, r2, #16
 80063f6:	0c12      	lsrs	r2, r2, #16
 80063f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063fc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006400:	8022      	strh	r2, [r4, #0]
 8006402:	780c      	ldrb	r4, [r1, #0]
 8006404:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      if (ep->type != EP_TYPE_ISOC)
 8006408:	78ca      	ldrb	r2, [r1, #3]
 800640a:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800640c:	8822      	ldrh	r2, [r4, #0]
 800640e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006416:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800641a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800641e:	bf18      	it	ne
 8006420:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800642c:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800642e:	7809      	ldrb	r1, [r1, #0]
}
 8006430:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006432:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800643a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800643e:	0412      	lsls	r2, r2, #16
 8006440:	0c12      	lsrs	r2, r2, #16
 8006442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006446:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800644a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 800644e:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006450:	5b15      	ldrh	r5, [r2, r4]
 8006452:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8006456:	042d      	lsls	r5, r5, #16
 8006458:	0c2d      	lsrs	r5, r5, #16
 800645a:	5315      	strh	r5, [r2, r4]
 800645c:	5b15      	ldrh	r5, [r2, r4]
 800645e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8006462:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8006466:	b2ad      	uxth	r5, r5
 8006468:	5315      	strh	r5, [r2, r4]
 800646a:	e719      	b.n	80062a0 <USB_ActivateEndpoint+0x114>
 800646c:	096e      	lsrs	r6, r5, #5
 800646e:	06ed      	lsls	r5, r5, #27
 8006470:	4d06      	ldr	r5, [pc, #24]	; (800648c <USB_ActivateEndpoint+0x300>)
 8006472:	bf08      	it	eq
 8006474:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006478:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 800647c:	b2ad      	uxth	r5, r5
 800647e:	5315      	strh	r5, [r2, r4]
 8006480:	e70e      	b.n	80062a0 <USB_ActivateEndpoint+0x114>
      ret = HAL_ERROR;
 8006482:	2001      	movs	r0, #1
 8006484:	e698      	b.n	80061b8 <USB_ActivateEndpoint+0x2c>
 8006486:	bf00      	nop
 8006488:	ffff8f8f 	.word	0xffff8f8f
 800648c:	ffff8000 	.word	0xffff8000

08006490 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006490:	7b0b      	ldrb	r3, [r1, #12]
{
 8006492:	b410      	push	{r4}
  if (ep->doublebuffer == 0U)
 8006494:	b9d3      	cbnz	r3, 80064cc <USB_DeactivateEndpoint+0x3c>
  {
    if (ep->is_in != 0U)
 8006496:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006498:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in != 0U)
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 80be 	beq.w	800661c <USB_DeactivateEndpoint+0x18c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064a0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80064a4:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80064a8:	065b      	lsls	r3, r3, #25
 80064aa:	f100 80d4 	bmi.w	8006656 <USB_DeactivateEndpoint+0x1c6>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064ae:	8813      	ldrh	r3, [r2, #0]
 80064b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064b8:	041b      	lsls	r3, r3, #16
 80064ba:	0c1b      	lsrs	r3, r3, #16
 80064bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80064c4:	2000      	movs	r0, #0
 80064c6:	bc10      	pop	{r4}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064c8:	8013      	strh	r3, [r2, #0]
}
 80064ca:	4770      	bx	lr
    if (ep->is_in == 0U)
 80064cc:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ce:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in == 0U)
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d151      	bne.n	8006578 <USB_DeactivateEndpoint+0xe8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064d4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80064d8:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80064dc:	045b      	lsls	r3, r3, #17
 80064de:	d510      	bpl.n	8006502 <USB_DeactivateEndpoint+0x72>
 80064e0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80064e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	0c1b      	lsrs	r3, r3, #16
 80064f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80064fc:	780a      	ldrb	r2, [r1, #0]
 80064fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006502:	8813      	ldrh	r3, [r2, #0]
 8006504:	065c      	lsls	r4, r3, #25
 8006506:	d50e      	bpl.n	8006526 <USB_DeactivateEndpoint+0x96>
 8006508:	8813      	ldrh	r3, [r2, #0]
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800651e:	8013      	strh	r3, [r2, #0]
 8006520:	780a      	ldrb	r2, [r1, #0]
 8006522:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006526:	f248 0480 	movw	r4, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800652a:	8813      	ldrh	r3, [r2, #0]
 800652c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	0c1b      	lsrs	r3, r3, #16
 8006538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006540:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006542:	780a      	ldrb	r2, [r1, #0]
 8006544:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006550:	041b      	lsls	r3, r3, #16
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	4323      	orrs	r3, r4
 8006556:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800655a:	780a      	ldrb	r2, [r1, #0]
 800655c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	4323      	orrs	r3, r4
 800656e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8006572:	bc10      	pop	{r4}
 8006574:	2000      	movs	r0, #0
 8006576:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006578:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800657c:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8006580:	045b      	lsls	r3, r3, #17
 8006582:	d510      	bpl.n	80065a6 <USB_DeactivateEndpoint+0x116>
 8006584:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	0c1b      	lsrs	r3, r3, #16
 8006594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80065a0:	780a      	ldrb	r2, [r1, #0]
 80065a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065a6:	8813      	ldrh	r3, [r2, #0]
 80065a8:	065b      	lsls	r3, r3, #25
 80065aa:	d50e      	bpl.n	80065ca <USB_DeactivateEndpoint+0x13a>
 80065ac:	8813      	ldrh	r3, [r2, #0]
 80065ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065c2:	8013      	strh	r3, [r2, #0]
 80065c4:	780a      	ldrb	r2, [r1, #0]
 80065c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065ca:	f248 0480 	movw	r4, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 80065ce:	8813      	ldrh	r3, [r2, #0]
 80065d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	0c1b      	lsrs	r3, r3, #16
 80065dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065e6:	780a      	ldrb	r2, [r1, #0]
 80065e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	4323      	orrs	r3, r4
 80065fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065fe:	780a      	ldrb	r2, [r1, #0]
 8006600:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660c:	041b      	lsls	r3, r3, #16
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	4323      	orrs	r3, r4
 8006612:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8006616:	bc10      	pop	{r4}
 8006618:	2000      	movs	r0, #0
 800661a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800661c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006620:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8006624:	045b      	lsls	r3, r3, #17
 8006626:	d510      	bpl.n	800664a <USB_DeactivateEndpoint+0x1ba>
 8006628:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800662c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006634:	041b      	lsls	r3, r3, #16
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800663c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006640:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8006644:	780a      	ldrb	r2, [r1, #0]
 8006646:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800664a:	8813      	ldrh	r3, [r2, #0]
 800664c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006654:	e730      	b.n	80064b8 <USB_DeactivateEndpoint+0x28>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006656:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	041b      	lsls	r3, r3, #16
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800666e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8006672:	780a      	ldrb	r2, [r1, #0]
 8006674:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006678:	e719      	b.n	80064ae <USB_DeactivateEndpoint+0x1e>
 800667a:	bf00      	nop

0800667c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800667c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800667e:	784a      	ldrb	r2, [r1, #1]
{
 8006680:	4603      	mov	r3, r0
  if (ep->is_in == 1U)
 8006682:	2a01      	cmp	r2, #1
 8006684:	d06d      	beq.n	8006762 <USB_EPStartXfer+0xe6>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006686:	7b08      	ldrb	r0, [r1, #12]
 8006688:	2800      	cmp	r0, #0
 800668a:	d03b      	beq.n	8006704 <USB_EPStartXfer+0x88>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800668c:	78c8      	ldrb	r0, [r1, #3]
 800668e:	2802      	cmp	r0, #2
 8006690:	f000 8124 	beq.w	80068dc <USB_EPStartXfer+0x260>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006694:	2801      	cmp	r0, #1
 8006696:	f040 811f 	bne.w	80068d8 <USB_EPStartXfer+0x25c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800669a:	6988      	ldr	r0, [r1, #24]
 800669c:	690c      	ldr	r4, [r1, #16]
 800669e:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 80066a0:	bf94      	ite	ls
 80066a2:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 80066a4:	1b05      	subhi	r5, r0, r4
 80066a6:	618d      	str	r5, [r1, #24]
 80066a8:	bf88      	it	hi
 80066aa:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066ac:	bb32      	cbnz	r2, 80066fc <USB_EPStartXfer+0x80>
 80066ae:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80066b2:	780c      	ldrb	r4, [r1, #0]
 80066b4:	b292      	uxth	r2, r2
 80066b6:	f203 4504 	addw	r5, r3, #1028	; 0x404
 80066ba:	442a      	add	r2, r5
 80066bc:	0124      	lsls	r4, r4, #4
 80066be:	2800      	cmp	r0, #0
 80066c0:	f000 829d 	beq.w	8006bfe <USB_EPStartXfer+0x582>
 80066c4:	283e      	cmp	r0, #62	; 0x3e
 80066c6:	f200 838f 	bhi.w	8006de8 <USB_EPStartXfer+0x76c>
 80066ca:	0845      	lsrs	r5, r0, #1
 80066cc:	462e      	mov	r6, r5
 80066ce:	f010 0701 	ands.w	r7, r0, #1
 80066d2:	bf18      	it	ne
 80066d4:	1c6e      	addne	r6, r5, #1
 80066d6:	02b6      	lsls	r6, r6, #10
 80066d8:	b2b6      	uxth	r6, r6
 80066da:	52a6      	strh	r6, [r4, r2]
 80066dc:	784c      	ldrb	r4, [r1, #1]
 80066de:	2c00      	cmp	r4, #0
 80066e0:	f000 8370 	beq.w	8006dc4 <USB_EPStartXfer+0x748>
 80066e4:	2c01      	cmp	r4, #1
 80066e6:	d109      	bne.n	80066fc <USB_EPStartXfer+0x80>
 80066e8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80066ec:	780c      	ldrb	r4, [r1, #0]
 80066ee:	b292      	uxth	r2, r2
 80066f0:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80066f4:	b280      	uxth	r0, r0
 80066f6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80066fa:	5298      	strh	r0, [r3, r2]
 80066fc:	780a      	ldrb	r2, [r1, #0]
 80066fe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006702:	e01e      	b.n	8006742 <USB_EPStartXfer+0xc6>
      if (ep->xfer_len > ep->maxpacket)
 8006704:	698c      	ldr	r4, [r1, #24]
 8006706:	690a      	ldr	r2, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006708:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 800670a:	4294      	cmp	r4, r2
        ep->xfer_len -= len;
 800670c:	bf84      	itt	hi
 800670e:	1aa0      	subhi	r0, r4, r2
 8006710:	4614      	movhi	r4, r2
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006712:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006716:	6188      	str	r0, [r1, #24]
 8006718:	b292      	uxth	r2, r2
 800671a:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 800671e:	4402      	add	r2, r0
 8006720:	0128      	lsls	r0, r5, #4
 8006722:	2c00      	cmp	r4, #0
 8006724:	f000 80c7 	beq.w	80068b6 <USB_EPStartXfer+0x23a>
 8006728:	2c3e      	cmp	r4, #62	; 0x3e
 800672a:	f200 811f 	bhi.w	800696c <USB_EPStartXfer+0x2f0>
 800672e:	0865      	lsrs	r5, r4, #1
 8006730:	07e4      	lsls	r4, r4, #31
 8006732:	bf48      	it	mi
 8006734:	3501      	addmi	r5, #1
 8006736:	02ad      	lsls	r5, r5, #10
 8006738:	b2ad      	uxth	r5, r5
 800673a:	5285      	strh	r5, [r0, r2]
 800673c:	780a      	ldrb	r2, [r1, #0]
 800673e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006742:	8813      	ldrh	r3, [r2, #0]
  }

  return HAL_OK;
 8006744:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	0c1b      	lsrs	r3, r3, #16
 8006752:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800675a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675e:	8013      	strh	r3, [r2, #0]
}
 8006760:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8006762:	690e      	ldr	r6, [r1, #16]
 8006764:	698a      	ldr	r2, [r1, #24]
    if (ep->doublebuffer == 0U)
 8006766:	7b08      	ldrb	r0, [r1, #12]
 8006768:	42b2      	cmp	r2, r6
 800676a:	bf28      	it	cs
 800676c:	4632      	movcs	r2, r6
 800676e:	2800      	cmp	r0, #0
 8006770:	d071      	beq.n	8006856 <USB_EPStartXfer+0x1da>
      if (ep->type == EP_TYPE_BULK)
 8006772:	78c8      	ldrb	r0, [r1, #3]
 8006774:	2802      	cmp	r0, #2
 8006776:	f000 8107 	beq.w	8006988 <USB_EPStartXfer+0x30c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800677a:	780d      	ldrb	r5, [r1, #0]
        ep->xfer_len_db -= len;
 800677c:	6a08      	ldr	r0, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 800677e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
        ep->xfer_len_db -= len;
 8006782:	1a80      	subs	r0, r0, r2
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006784:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 8006788:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800678c:	0424      	lsls	r4, r4, #16
 800678e:	0c24      	lsrs	r4, r4, #16
 8006790:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8006794:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8006798:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800679c:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 800679e:	6208      	str	r0, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067a0:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80067a4:	f015 0f40 	tst.w	r5, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067a8:	784d      	ldrb	r5, [r1, #1]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067aa:	f000 814d 	beq.w	8006a48 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	f000 81cc 	beq.w	8006b4c <USB_EPStartXfer+0x4d0>
 80067b4:	2d01      	cmp	r5, #1
 80067b6:	d108      	bne.n	80067ca <USB_EPStartXfer+0x14e>
 80067b8:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 80067bc:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 80067c0:	b2bf      	uxth	r7, r7
 80067c2:	443d      	add	r5, r7
 80067c4:	0124      	lsls	r4, r4, #4
 80067c6:	b297      	uxth	r7, r2
 80067c8:	532f      	strh	r7, [r5, r4]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067ca:	b297      	uxth	r7, r2
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067cc:	894d      	ldrh	r5, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067ce:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067d0:	f503 6480 	add.w	r4, r3, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80067d4:	087f      	lsrs	r7, r7, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067d6:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067da:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  for (i = n; i != 0U; i--)
 80067de:	d008      	beq.n	80067f2 <USB_EPStartXfer+0x176>
              ep->xfer_len_db = 0U;
 80067e0:	4675      	mov	r5, lr
 80067e2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  {
    temp1 = *pBuf;
 80067e6:	f835 cb02 	ldrh.w	ip, [r5], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 80067ea:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 80067ee:	42bc      	cmp	r4, r7
 80067f0:	d1f9      	bne.n	80067e6 <USB_EPStartXfer+0x16a>
          if (ep->xfer_len_db > ep->maxpacket)
 80067f2:	4286      	cmp	r6, r0
            ep->xfer_len_db -= len;
 80067f4:	bf36      	itet	cc
 80067f6:	1a85      	subcc	r5, r0, r2
            ep->xfer_len_db = 0U;
 80067f8:	2500      	movcs	r5, #0
 80067fa:	4610      	movcc	r0, r2
          ep->xfer_buff += len;
 80067fc:	eb0e 0402 	add.w	r4, lr, r2
 8006800:	614c      	str	r4, [r1, #20]
            ep->xfer_len_db -= len;
 8006802:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 8006804:	2800      	cmp	r0, #0
 8006806:	d043      	beq.n	8006890 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006808:	784a      	ldrb	r2, [r1, #1]
 800680a:	2a00      	cmp	r2, #0
 800680c:	f040 8297 	bne.w	8006d3e <USB_EPStartXfer+0x6c2>
 8006810:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006814:	780e      	ldrb	r6, [r1, #0]
 8006816:	b292      	uxth	r2, r2
 8006818:	f203 4504 	addw	r5, r3, #1028	; 0x404
 800681c:	283e      	cmp	r0, #62	; 0x3e
 800681e:	442a      	add	r2, r5
 8006820:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006824:	f200 8392 	bhi.w	8006f4c <USB_EPStartXfer+0x8d0>
 8006828:	0845      	lsrs	r5, r0, #1
 800682a:	07c7      	lsls	r7, r0, #31
 800682c:	bf48      	it	mi
 800682e:	3501      	addmi	r5, #1
 8006830:	02ad      	lsls	r5, r5, #10
 8006832:	b2ad      	uxth	r5, r5
 8006834:	52b5      	strh	r5, [r6, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006836:	890e      	ldrh	r6, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006838:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800683a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800683e:	0845      	lsrs	r5, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006840:	eb02 0246 	add.w	r2, r2, r6, lsl #1
  for (i = n; i != 0U; i--)
 8006844:	eb04 0545 	add.w	r5, r4, r5, lsl #1
    temp1 = *pBuf;
 8006848:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 800684c:	42a5      	cmp	r5, r4
    *pdwVal = (uint16_t)temp2;
 800684e:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8006852:	d1f9      	bne.n	8006848 <USB_EPStartXfer+0x1cc>
 8006854:	e01c      	b.n	8006890 <USB_EPStartXfer+0x214>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006856:	b295      	uxth	r5, r2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006858:	88cc      	ldrh	r4, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800685a:	3501      	adds	r5, #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800685c:	b296      	uxth	r6, r2
 800685e:	694a      	ldr	r2, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006860:	f503 6080 	add.w	r0, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8006864:	086d      	lsrs	r5, r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006866:	eb00 0044 	add.w	r0, r0, r4, lsl #1
  for (i = n; i != 0U; i--)
 800686a:	bf18      	it	ne
 800686c:	eb02 0545 	addne.w	r5, r2, r5, lsl #1
 8006870:	d005      	beq.n	800687e <USB_EPStartXfer+0x202>
    temp1 = *pBuf;
 8006872:	f832 4b02 	ldrh.w	r4, [r2], #2
  for (i = n; i != 0U; i--)
 8006876:	42aa      	cmp	r2, r5
    *pdwVal = (uint16_t)temp2;
 8006878:	f820 4b04 	strh.w	r4, [r0], #4
  for (i = n; i != 0U; i--)
 800687c:	d1f9      	bne.n	8006872 <USB_EPStartXfer+0x1f6>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800687e:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 8006882:	780c      	ldrb	r4, [r1, #0]
 8006884:	b282      	uxth	r2, r0
 8006886:	f203 4004 	addw	r0, r3, #1028	; 0x404
 800688a:	4410      	add	r0, r2
 800688c:	0124      	lsls	r4, r4, #4
 800688e:	5226      	strh	r6, [r4, r0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006890:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 8006892:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006894:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006898:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800689c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a0:	0412      	lsls	r2, r2, #16
 80068a2:	0c12      	lsrs	r2, r2, #16
 80068a4:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 80068a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068b0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 80068b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80068b6:	5a84      	ldrh	r4, [r0, r2]
 80068b8:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80068bc:	0424      	lsls	r4, r4, #16
 80068be:	0c24      	lsrs	r4, r4, #16
 80068c0:	5284      	strh	r4, [r0, r2]
 80068c2:	5a84      	ldrh	r4, [r0, r2]
 80068c4:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80068c8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80068cc:	b2a4      	uxth	r4, r4
 80068ce:	5284      	strh	r4, [r0, r2]
 80068d0:	780a      	ldrb	r2, [r1, #0]
 80068d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80068d6:	e734      	b.n	8006742 <USB_EPStartXfer+0xc6>
        return HAL_ERROR;
 80068d8:	2001      	movs	r0, #1
}
 80068da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80068dc:	bb12      	cbnz	r2, 8006924 <USB_EPStartXfer+0x2a8>
 80068de:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80068e2:	7808      	ldrb	r0, [r1, #0]
 80068e4:	690c      	ldr	r4, [r1, #16]
 80068e6:	b292      	uxth	r2, r2
 80068e8:	f203 4504 	addw	r5, r3, #1028	; 0x404
 80068ec:	442a      	add	r2, r5
 80068ee:	0100      	lsls	r0, r0, #4
 80068f0:	2c00      	cmp	r4, #0
 80068f2:	f000 8146 	beq.w	8006b82 <USB_EPStartXfer+0x506>
 80068f6:	2c3e      	cmp	r4, #62	; 0x3e
 80068f8:	f200 81ac 	bhi.w	8006c54 <USB_EPStartXfer+0x5d8>
 80068fc:	0865      	lsrs	r5, r4, #1
 80068fe:	07e6      	lsls	r6, r4, #31
 8006900:	bf48      	it	mi
 8006902:	3501      	addmi	r5, #1
 8006904:	02ad      	lsls	r5, r5, #10
 8006906:	b2ad      	uxth	r5, r5
 8006908:	5285      	strh	r5, [r0, r2]
 800690a:	784a      	ldrb	r2, [r1, #1]
 800690c:	2a00      	cmp	r2, #0
 800690e:	f040 81af 	bne.w	8006c70 <USB_EPStartXfer+0x5f4>
 8006912:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006916:	7808      	ldrb	r0, [r1, #0]
 8006918:	b294      	uxth	r4, r2
 800691a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800691e:	4422      	add	r2, r4
 8006920:	0100      	lsls	r0, r0, #4
 8006922:	5285      	strh	r5, [r0, r2]
        if (ep->xfer_count != 0U)
 8006924:	69ca      	ldr	r2, [r1, #28]
 8006926:	2a00      	cmp	r2, #0
 8006928:	f43f aee8 	beq.w	80066fc <USB_EPStartXfer+0x80>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800692c:	f244 0440 	movw	r4, #16448	; 0x4040
 8006930:	7808      	ldrb	r0, [r1, #0]
 8006932:	f833 5020 	ldrh.w	r5, [r3, r0, lsl #2]
 8006936:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800693a:	ea04 0605 	and.w	r6, r4, r5
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800693e:	43ac      	bics	r4, r5
 8006940:	d002      	beq.n	8006948 <USB_EPStartXfer+0x2cc>
 8006942:	2e00      	cmp	r6, #0
 8006944:	f47f aefd 	bne.w	8006742 <USB_EPStartXfer+0xc6>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006948:	f833 2020 	ldrh.w	r2, [r3, r0, lsl #2]
 800694c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006950:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006954:	0412      	lsls	r2, r2, #16
 8006956:	0c12      	lsrs	r2, r2, #16
 8006958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800695c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006960:	f823 2020 	strh.w	r2, [r3, r0, lsl #2]
 8006964:	780a      	ldrb	r2, [r1, #0]
 8006966:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800696a:	e6ea      	b.n	8006742 <USB_EPStartXfer+0xc6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800696c:	0965      	lsrs	r5, r4, #5
 800696e:	06e7      	lsls	r7, r4, #27
 8006970:	4cb7      	ldr	r4, [pc, #732]	; (8006c50 <USB_EPStartXfer+0x5d4>)
 8006972:	bf08      	it	eq
 8006974:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8006978:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800697c:	b2a4      	uxth	r4, r4
 800697e:	5284      	strh	r4, [r0, r2]
 8006980:	780a      	ldrb	r2, [r1, #0]
 8006982:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006986:	e6dc      	b.n	8006742 <USB_EPStartXfer+0xc6>
        if (ep->xfer_len_db > ep->maxpacket)
 8006988:	6a08      	ldr	r0, [r1, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 800698a:	780d      	ldrb	r5, [r1, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 800698c:	4286      	cmp	r6, r0
 800698e:	f080 80b0 	bcs.w	8006af2 <USB_EPStartXfer+0x476>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006992:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
          ep->xfer_len_db -= len;
 8006996:	1a80      	subs	r0, r0, r2
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006998:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800699c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80069a0:	0424      	lsls	r4, r4, #16
 80069a2:	0c24      	lsrs	r4, r4, #16
 80069a4:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80069a8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80069ac:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069b0:	780c      	ldrb	r4, [r1, #0]
          ep->xfer_len_db -= len;
 80069b2:	6208      	str	r0, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069b4:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80069b8:	f015 0f40 	tst.w	r5, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069bc:	784d      	ldrb	r5, [r1, #1]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069be:	f000 8165 	beq.w	8006c8c <USB_EPStartXfer+0x610>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	f040 8253 	bne.w	8006e6e <USB_EPStartXfer+0x7f2>
 80069c8:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 80069cc:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 80069d0:	b2bf      	uxth	r7, r7
 80069d2:	0124      	lsls	r4, r4, #4
 80069d4:	443d      	add	r5, r7
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	f040 82ff 	bne.w	8006fda <USB_EPStartXfer+0x95e>
 80069dc:	5b2f      	ldrh	r7, [r5, r4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069de:	f8d1 e014 	ldr.w	lr, [r1, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069e2:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80069e6:	043f      	lsls	r7, r7, #16
 80069e8:	0c3f      	lsrs	r7, r7, #16
 80069ea:	532f      	strh	r7, [r5, r4]
 80069ec:	5b2f      	ldrh	r7, [r5, r4]
 80069ee:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80069f2:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 80069f6:	b2bf      	uxth	r7, r7
 80069f8:	532f      	strh	r7, [r5, r4]
            if (ep->xfer_len_db > ep->maxpacket)
 80069fa:	4286      	cmp	r6, r0
              ep->xfer_len_db = 0U;
 80069fc:	bf2c      	ite	cs
 80069fe:	2500      	movcs	r5, #0
              ep->xfer_len_db -= len;
 8006a00:	1a85      	subcc	r5, r0, r2
            ep->xfer_buff += len;
 8006a02:	eb0e 0402 	add.w	r4, lr, r2
 8006a06:	bf38      	it	cc
 8006a08:	4610      	movcc	r0, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a0a:	784a      	ldrb	r2, [r1, #1]
            ep->xfer_buff += len;
 8006a0c:	614c      	str	r4, [r1, #20]
              ep->xfer_len_db -= len;
 8006a0e:	620d      	str	r5, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a10:	2a00      	cmp	r2, #0
 8006a12:	f040 820d 	bne.w	8006e30 <USB_EPStartXfer+0x7b4>
 8006a16:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8006a1a:	780a      	ldrb	r2, [r1, #0]
 8006a1c:	b2ad      	uxth	r5, r5
 8006a1e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8006a22:	4435      	add	r5, r6
 8006a24:	0112      	lsls	r2, r2, #4
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f040 82eb 	bne.w	8007002 <USB_EPStartXfer+0x986>
 8006a2c:	5b50      	ldrh	r0, [r2, r5]
 8006a2e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8006a32:	0400      	lsls	r0, r0, #16
 8006a34:	0c00      	lsrs	r0, r0, #16
 8006a36:	5350      	strh	r0, [r2, r5]
 8006a38:	5b50      	ldrh	r0, [r2, r5]
 8006a3a:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8006a3e:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8006a42:	b280      	uxth	r0, r0
 8006a44:	5350      	strh	r0, [r2, r5]
  for (i = n; i != 0U; i--)
 8006a46:	e723      	b.n	8006890 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	f000 80be 	beq.w	8006bca <USB_EPStartXfer+0x54e>
 8006a4e:	2d01      	cmp	r5, #1
 8006a50:	d108      	bne.n	8006a64 <USB_EPStartXfer+0x3e8>
 8006a52:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8006a56:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8006a5a:	b2bf      	uxth	r7, r7
 8006a5c:	443d      	add	r5, r7
 8006a5e:	0124      	lsls	r4, r4, #4
 8006a60:	b297      	uxth	r7, r2
 8006a62:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a64:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a66:	b297      	uxth	r7, r2
 8006a68:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a6a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 8006a6e:	087f      	lsrs	r7, r7, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a70:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8006a78:	d008      	beq.n	8006a8c <USB_EPStartXfer+0x410>
            ep->xfer_len_db = 0U;
 8006a7a:	4674      	mov	r4, lr
 8006a7c:	eb0e 0747 	add.w	r7, lr, r7, lsl #1
    temp1 = *pBuf;
 8006a80:	f834 cb02 	ldrh.w	ip, [r4], #2
  for (i = n; i != 0U; i--)
 8006a84:	42bc      	cmp	r4, r7
    *pdwVal = (uint16_t)temp2;
 8006a86:	f825 cb04 	strh.w	ip, [r5], #4
  for (i = n; i != 0U; i--)
 8006a8a:	d1f9      	bne.n	8006a80 <USB_EPStartXfer+0x404>
          if (ep->xfer_len_db > ep->maxpacket)
 8006a8c:	4286      	cmp	r6, r0
            ep->xfer_len_db -= len;
 8006a8e:	bf36      	itet	cc
 8006a90:	1a84      	subcc	r4, r0, r2
            ep->xfer_len_db = 0U;
 8006a92:	2400      	movcs	r4, #0
 8006a94:	4610      	movcc	r0, r2
          ep->xfer_buff += len;
 8006a96:	eb0e 0502 	add.w	r5, lr, r2
 8006a9a:	614d      	str	r5, [r1, #20]
            ep->xfer_len_db -= len;
 8006a9c:	620c      	str	r4, [r1, #32]
          if (len > 0U)
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f43f aef6 	beq.w	8006890 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006aa4:	784a      	ldrb	r2, [r1, #1]
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	f040 8175 	bne.w	8006d96 <USB_EPStartXfer+0x71a>
 8006aac:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006ab0:	780c      	ldrb	r4, [r1, #0]
 8006ab2:	b292      	uxth	r2, r2
 8006ab4:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8006ab8:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8006abc:	283e      	cmp	r0, #62	; 0x3e
 8006abe:	441a      	add	r2, r3
 8006ac0:	f200 824f 	bhi.w	8006f62 <USB_EPStartXfer+0x8e6>
 8006ac4:	0844      	lsrs	r4, r0, #1
 8006ac6:	07c6      	lsls	r6, r0, #31
 8006ac8:	bf48      	it	mi
 8006aca:	3401      	addmi	r4, #1
 8006acc:	02a4      	lsls	r4, r4, #10
 8006ace:	b2a4      	uxth	r4, r4
 8006ad0:	8014      	strh	r4, [r2, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ad2:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ad4:	1c42      	adds	r2, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ad6:	eb03 0044 	add.w	r0, r3, r4, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ada:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006adc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8006ae0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    temp1 = *pBuf;
 8006ae4:	f835 4b02 	ldrh.w	r4, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8006ae8:	f820 4b04 	strh.w	r4, [r0], #4
  for (i = n; i != 0U; i--)
 8006aec:	4282      	cmp	r2, r0
 8006aee:	d1f9      	bne.n	8006ae4 <USB_EPStartXfer+0x468>
 8006af0:	e6ce      	b.n	8006890 <USB_EPStartXfer+0x214>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006af2:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006af6:	f203 4404 	addw	r4, r3, #1028	; 0x404
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006afa:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8006afe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b02:	0412      	lsls	r2, r2, #16
 8006b04:	0c12      	lsrs	r2, r2, #16
 8006b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b0e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b12:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006b16:	b287      	uxth	r7, r0
 8006b18:	b296      	uxth	r6, r2
 8006b1a:	4622      	mov	r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b1c:	4638      	mov	r0, r7
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b1e:	780d      	ldrb	r5, [r1, #0]
 8006b20:	4432      	add	r2, r6
 8006b22:	012c      	lsls	r4, r5, #4
 8006b24:	52a7      	strh	r7, [r4, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b26:	890c      	ldrh	r4, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b28:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b2a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8006b2e:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b30:	eb02 0244 	add.w	r2, r2, r4, lsl #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b34:	694c      	ldr	r4, [r1, #20]
  for (i = n; i != 0U; i--)
 8006b36:	f43f aeab 	beq.w	8006890 <USB_EPStartXfer+0x214>
 8006b3a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    temp1 = *pBuf;
 8006b3e:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8006b42:	f822 5b04 	strh.w	r5, [r2], #4
  for (i = n; i != 0U; i--)
 8006b46:	4290      	cmp	r0, r2
 8006b48:	d1f9      	bne.n	8006b3e <USB_EPStartXfer+0x4c2>
 8006b4a:	e6a1      	b.n	8006890 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b4c:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 8006b50:	f203 470c 	addw	r7, r3, #1036	; 0x40c
 8006b54:	fa1f fc8c 	uxth.w	ip, ip
 8006b58:	0125      	lsls	r5, r4, #4
 8006b5a:	4467      	add	r7, ip
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	f040 8105 	bne.w	8006d6c <USB_EPStartXfer+0x6f0>
 8006b62:	5b7c      	ldrh	r4, [r7, r5]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b64:	f8d1 e014 	ldr.w	lr, [r1, #20]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b68:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8006b6c:	0424      	lsls	r4, r4, #16
 8006b6e:	0c24      	lsrs	r4, r4, #16
 8006b70:	537c      	strh	r4, [r7, r5]
 8006b72:	5b7c      	ldrh	r4, [r7, r5]
 8006b74:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8006b78:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006b7c:	b2a4      	uxth	r4, r4
 8006b7e:	537c      	strh	r4, [r7, r5]
  for (i = n; i != 0U; i--)
 8006b80:	e637      	b.n	80067f2 <USB_EPStartXfer+0x176>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006b82:	5a85      	ldrh	r5, [r0, r2]
 8006b84:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8006b88:	042d      	lsls	r5, r5, #16
 8006b8a:	0c2d      	lsrs	r5, r5, #16
 8006b8c:	5285      	strh	r5, [r0, r2]
 8006b8e:	5a85      	ldrh	r5, [r0, r2]
 8006b90:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8006b94:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8006b98:	b2ad      	uxth	r5, r5
 8006b9a:	5285      	strh	r5, [r0, r2]
 8006b9c:	784a      	ldrb	r2, [r1, #1]
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	d166      	bne.n	8006c70 <USB_EPStartXfer+0x5f4>
 8006ba2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8006ba6:	7808      	ldrb	r0, [r1, #0]
 8006ba8:	b2a2      	uxth	r2, r4
 8006baa:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8006bae:	4414      	add	r4, r2
 8006bb0:	0100      	lsls	r0, r0, #4
 8006bb2:	5a22      	ldrh	r2, [r4, r0]
 8006bb4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006bb8:	0412      	lsls	r2, r2, #16
 8006bba:	0c12      	lsrs	r2, r2, #16
 8006bbc:	5222      	strh	r2, [r4, r0]
 8006bbe:	5a22      	ldrh	r2, [r4, r0]
 8006bc0:	b292      	uxth	r2, r2
 8006bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bc6:	5222      	strh	r2, [r4, r0]
 8006bc8:	e6ac      	b.n	8006924 <USB_EPStartXfer+0x2a8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bca:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8006bce:	f203 4704 	addw	r7, r3, #1028	; 0x404
 8006bd2:	b2ad      	uxth	r5, r5
 8006bd4:	0124      	lsls	r4, r4, #4
 8006bd6:	442f      	add	r7, r5
 8006bd8:	2a00      	cmp	r2, #0
 8006bda:	f040 809b 	bne.w	8006d14 <USB_EPStartXfer+0x698>
 8006bde:	5b3d      	ldrh	r5, [r7, r4]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006be0:	f8d1 e014 	ldr.w	lr, [r1, #20]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006be4:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8006be8:	042d      	lsls	r5, r5, #16
 8006bea:	0c2d      	lsrs	r5, r5, #16
 8006bec:	533d      	strh	r5, [r7, r4]
 8006bee:	5b3d      	ldrh	r5, [r7, r4]
 8006bf0:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8006bf4:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8006bf8:	b2ad      	uxth	r5, r5
 8006bfa:	533d      	strh	r5, [r7, r4]
  for (i = n; i != 0U; i--)
 8006bfc:	e746      	b.n	8006a8c <USB_EPStartXfer+0x410>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006bfe:	5aa5      	ldrh	r5, [r4, r2]
 8006c00:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8006c04:	042d      	lsls	r5, r5, #16
 8006c06:	0c2d      	lsrs	r5, r5, #16
 8006c08:	52a5      	strh	r5, [r4, r2]
 8006c0a:	5aa5      	ldrh	r5, [r4, r2]
 8006c0c:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8006c10:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8006c14:	b2ad      	uxth	r5, r5
 8006c16:	52a5      	strh	r5, [r4, r2]
 8006c18:	784c      	ldrb	r4, [r1, #1]
 8006c1a:	2c00      	cmp	r4, #0
 8006c1c:	f47f ad62 	bne.w	80066e4 <USB_EPStartXfer+0x68>
 8006c20:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8006c24:	7808      	ldrb	r0, [r1, #0]
 8006c26:	b2a2      	uxth	r2, r4
 8006c28:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8006c2c:	4414      	add	r4, r2
 8006c2e:	0100      	lsls	r0, r0, #4
 8006c30:	5a22      	ldrh	r2, [r4, r0]
 8006c32:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006c36:	0412      	lsls	r2, r2, #16
 8006c38:	0c12      	lsrs	r2, r2, #16
 8006c3a:	5222      	strh	r2, [r4, r0]
 8006c3c:	5a22      	ldrh	r2, [r4, r0]
 8006c3e:	b292      	uxth	r2, r2
 8006c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c44:	5222      	strh	r2, [r4, r0]
 8006c46:	780a      	ldrb	r2, [r1, #0]
 8006c48:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006c4c:	e579      	b.n	8006742 <USB_EPStartXfer+0xc6>
 8006c4e:	bf00      	nop
 8006c50:	ffff8000 	.word	0xffff8000
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c54:	0966      	lsrs	r6, r4, #5
 8006c56:	06e5      	lsls	r5, r4, #27
 8006c58:	4dbb      	ldr	r5, [pc, #748]	; (8006f48 <USB_EPStartXfer+0x8cc>)
 8006c5a:	bf08      	it	eq
 8006c5c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006c60:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8006c64:	b2ad      	uxth	r5, r5
 8006c66:	5285      	strh	r5, [r0, r2]
 8006c68:	784a      	ldrb	r2, [r1, #1]
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	f43f ae51 	beq.w	8006912 <USB_EPStartXfer+0x296>
 8006c70:	2a01      	cmp	r2, #1
 8006c72:	f47f ae57 	bne.w	8006924 <USB_EPStartXfer+0x2a8>
 8006c76:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006c7a:	7808      	ldrb	r0, [r1, #0]
 8006c7c:	b295      	uxth	r5, r2
 8006c7e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c82:	b2a4      	uxth	r4, r4
 8006c84:	442a      	add	r2, r5
 8006c86:	0100      	lsls	r0, r0, #4
 8006c88:	5284      	strh	r4, [r0, r2]
 8006c8a:	e64b      	b.n	8006924 <USB_EPStartXfer+0x2a8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	f040 812e 	bne.w	8006eee <USB_EPStartXfer+0x872>
 8006c92:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8006c96:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8006c9a:	b2bf      	uxth	r7, r7
 8006c9c:	0124      	lsls	r4, r4, #4
 8006c9e:	443d      	add	r5, r7
 8006ca0:	2a00      	cmp	r2, #0
 8006ca2:	f040 8186 	bne.w	8006fb2 <USB_EPStartXfer+0x936>
 8006ca6:	5b2f      	ldrh	r7, [r5, r4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca8:	f8d1 e014 	ldr.w	lr, [r1, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cac:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8006cb0:	043f      	lsls	r7, r7, #16
 8006cb2:	0c3f      	lsrs	r7, r7, #16
 8006cb4:	532f      	strh	r7, [r5, r4]
 8006cb6:	5b2f      	ldrh	r7, [r5, r4]
 8006cb8:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8006cbc:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8006cc0:	b2bf      	uxth	r7, r7
 8006cc2:	532f      	strh	r7, [r5, r4]
            if (ep->xfer_len_db > ep->maxpacket)
 8006cc4:	4286      	cmp	r6, r0
              ep->xfer_len_db = 0U;
 8006cc6:	bf2c      	ite	cs
 8006cc8:	2500      	movcs	r5, #0
              ep->xfer_len_db -= len;
 8006cca:	1a85      	subcc	r5, r0, r2
            ep->xfer_buff += len;
 8006ccc:	eb0e 0402 	add.w	r4, lr, r2
 8006cd0:	bf38      	it	cc
 8006cd2:	4610      	movcc	r0, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cd4:	784a      	ldrb	r2, [r1, #1]
            ep->xfer_buff += len;
 8006cd6:	614c      	str	r4, [r1, #20]
              ep->xfer_len_db -= len;
 8006cd8:	620d      	str	r5, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	f040 80e8 	bne.w	8006eb0 <USB_EPStartXfer+0x834>
 8006ce0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006ce4:	780d      	ldrb	r5, [r1, #0]
 8006ce6:	b292      	uxth	r2, r2
 8006ce8:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8006cec:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8006cf0:	189d      	adds	r5, r3, r2
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	f040 814c 	bne.w	8006f90 <USB_EPStartXfer+0x914>
 8006cf8:	5a98      	ldrh	r0, [r3, r2]
 8006cfa:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8006cfe:	0400      	lsls	r0, r0, #16
 8006d00:	0c00      	lsrs	r0, r0, #16
 8006d02:	5298      	strh	r0, [r3, r2]
 8006d04:	5a98      	ldrh	r0, [r3, r2]
 8006d06:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8006d0a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8006d0e:	b280      	uxth	r0, r0
 8006d10:	5298      	strh	r0, [r3, r2]
  for (i = n; i != 0U; i--)
 8006d12:	e5bd      	b.n	8006890 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d14:	2a3e      	cmp	r2, #62	; 0x3e
 8006d16:	f200 810b 	bhi.w	8006f30 <USB_EPStartXfer+0x8b4>
 8006d1a:	0855      	lsrs	r5, r2, #1
 8006d1c:	f012 0f01 	tst.w	r2, #1
 8006d20:	bf18      	it	ne
 8006d22:	3501      	addne	r5, #1
 8006d24:	02ad      	lsls	r5, r5, #10
 8006d26:	b2ad      	uxth	r5, r5
 8006d28:	533d      	strh	r5, [r7, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d2a:	890c      	ldrh	r4, [r1, #8]
 8006d2c:	f503 6580 	add.w	r5, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d30:	1c57      	adds	r7, r2, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d32:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d36:	eb05 0544 	add.w	r5, r5, r4, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d3a:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8006d3c:	e69d      	b.n	8006a7a <USB_EPStartXfer+0x3fe>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d3e:	2a01      	cmp	r2, #1
 8006d40:	d109      	bne.n	8006d56 <USB_EPStartXfer+0x6da>
 8006d42:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006d46:	780d      	ldrb	r5, [r1, #0]
 8006d48:	b296      	uxth	r6, r2
 8006d4a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006d4e:	4432      	add	r2, r6
 8006d50:	012d      	lsls	r5, r5, #4
 8006d52:	b286      	uxth	r6, r0
 8006d54:	52ae      	strh	r6, [r5, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d56:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d58:	b280      	uxth	r0, r0
 8006d5a:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d5c:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8006d60:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8006d64:	0845      	lsrs	r5, r0, #1
 8006d66:	f47f ad6d 	bne.w	8006844 <USB_EPStartXfer+0x1c8>
 8006d6a:	e591      	b.n	8006890 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d6c:	2a3e      	cmp	r2, #62	; 0x3e
 8006d6e:	f200 8103 	bhi.w	8006f78 <USB_EPStartXfer+0x8fc>
 8006d72:	0854      	lsrs	r4, r2, #1
 8006d74:	f012 0f01 	tst.w	r2, #1
 8006d78:	bf18      	it	ne
 8006d7a:	3401      	addne	r4, #1
 8006d7c:	02a4      	lsls	r4, r4, #10
 8006d7e:	b2a4      	uxth	r4, r4
 8006d80:	537c      	strh	r4, [r7, r5]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d82:	894d      	ldrh	r5, [r1, #10]
 8006d84:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d88:	1c57      	adds	r7, r2, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d8a:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d8e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d92:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8006d94:	e524      	b.n	80067e0 <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d96:	2a01      	cmp	r2, #1
 8006d98:	d109      	bne.n	8006dae <USB_EPStartXfer+0x732>
 8006d9a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006d9e:	780c      	ldrb	r4, [r1, #0]
 8006da0:	b292      	uxth	r2, r2
 8006da2:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8006da6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8006daa:	b284      	uxth	r4, r0
 8006dac:	529c      	strh	r4, [r3, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006dae:	b282      	uxth	r2, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006db0:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006db2:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006db4:	eb03 0044 	add.w	r0, r3, r4, lsl #1
  for (i = n; i != 0U; i--)
 8006db8:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dba:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8006dbe:	f47f ae8f 	bne.w	8006ae0 <USB_EPStartXfer+0x464>
 8006dc2:	e565      	b.n	8006890 <USB_EPStartXfer+0x214>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006dc4:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 8006dc8:	780c      	ldrb	r4, [r1, #0]
 8006dca:	b286      	uxth	r6, r0
 8006dcc:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4430      	add	r0, r6
 8006dd4:	0124      	lsls	r4, r4, #4
 8006dd6:	b107      	cbz	r7, 8006dda <USB_EPStartXfer+0x75e>
 8006dd8:	3201      	adds	r2, #1
 8006dda:	0292      	lsls	r2, r2, #10
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	5222      	strh	r2, [r4, r0]
 8006de0:	780a      	ldrb	r2, [r1, #0]
 8006de2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006de6:	e4ac      	b.n	8006742 <USB_EPStartXfer+0xc6>
 8006de8:	0947      	lsrs	r7, r0, #5
 8006dea:	46bc      	mov	ip, r7
 8006dec:	4d56      	ldr	r5, [pc, #344]	; (8006f48 <USB_EPStartXfer+0x8cc>)
 8006dee:	f010 061f 	ands.w	r6, r0, #31
 8006df2:	bf08      	it	eq
 8006df4:	f107 3cff 	addeq.w	ip, r7, #4294967295
 8006df8:	ea45 258c 	orr.w	r5, r5, ip, lsl #10
 8006dfc:	b2ad      	uxth	r5, r5
 8006dfe:	52a5      	strh	r5, [r4, r2]
 8006e00:	784c      	ldrb	r4, [r1, #1]
 8006e02:	2c00      	cmp	r4, #0
 8006e04:	f47f ac6e 	bne.w	80066e4 <USB_EPStartXfer+0x68>
 8006e08:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 8006e0c:	780d      	ldrb	r5, [r1, #0]
 8006e0e:	b284      	uxth	r4, r0
 8006e10:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8006e14:	463a      	mov	r2, r7
 8006e16:	4420      	add	r0, r4
 8006e18:	012d      	lsls	r5, r5, #4
 8006e1a:	b906      	cbnz	r6, 8006e1e <USB_EPStartXfer+0x7a2>
 8006e1c:	3a01      	subs	r2, #1
 8006e1e:	4c4a      	ldr	r4, [pc, #296]	; (8006f48 <USB_EPStartXfer+0x8cc>)
 8006e20:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
 8006e24:	b292      	uxth	r2, r2
 8006e26:	522a      	strh	r2, [r5, r0]
 8006e28:	780a      	ldrb	r2, [r1, #0]
 8006e2a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006e2e:	e488      	b.n	8006742 <USB_EPStartXfer+0xc6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e30:	2a01      	cmp	r2, #1
 8006e32:	d109      	bne.n	8006e48 <USB_EPStartXfer+0x7cc>
 8006e34:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006e38:	780d      	ldrb	r5, [r1, #0]
 8006e3a:	b296      	uxth	r6, r2
 8006e3c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006e40:	4432      	add	r2, r6
 8006e42:	012d      	lsls	r5, r5, #4
 8006e44:	b286      	uxth	r6, r0
 8006e46:	52ae      	strh	r6, [r5, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e48:	b280      	uxth	r0, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e4a:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e4c:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e4e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8006e52:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e54:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8006e58:	f43f ad1a 	beq.w	8006890 <USB_EPStartXfer+0x214>
 8006e5c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    temp1 = *pBuf;
 8006e60:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 8006e64:	42a5      	cmp	r5, r4
    *pdwVal = (uint16_t)temp2;
 8006e66:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8006e6a:	d1f9      	bne.n	8006e60 <USB_EPStartXfer+0x7e4>
 8006e6c:	e510      	b.n	8006890 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e6e:	2d01      	cmp	r5, #1
 8006e70:	d108      	bne.n	8006e84 <USB_EPStartXfer+0x808>
 8006e72:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8006e76:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 8006e7a:	b2bf      	uxth	r7, r7
 8006e7c:	443d      	add	r5, r7
 8006e7e:	0124      	lsls	r4, r4, #4
 8006e80:	b297      	uxth	r7, r2
 8006e82:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e84:	894f      	ldrh	r7, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e86:	b295      	uxth	r5, r2
 8006e88:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e8a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8006e8e:	eb04 0447 	add.w	r4, r4, r7, lsl #1
  for (i = n; i != 0U; i--)
 8006e92:	086f      	lsrs	r7, r5, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e94:	f8d1 e014 	ldr.w	lr, [r1, #20]
  for (i = n; i != 0U; i--)
 8006e98:	f43f adaf 	beq.w	80069fa <USB_EPStartXfer+0x37e>
{
 8006e9c:	4675      	mov	r5, lr
 8006e9e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    temp1 = *pBuf;
 8006ea2:	f835 cb02 	ldrh.w	ip, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8006ea6:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 8006eaa:	42bc      	cmp	r4, r7
 8006eac:	d1f9      	bne.n	8006ea2 <USB_EPStartXfer+0x826>
 8006eae:	e5a4      	b.n	80069fa <USB_EPStartXfer+0x37e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006eb0:	2a01      	cmp	r2, #1
 8006eb2:	d109      	bne.n	8006ec8 <USB_EPStartXfer+0x84c>
 8006eb4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006eb8:	780d      	ldrb	r5, [r1, #0]
 8006eba:	b292      	uxth	r2, r2
 8006ebc:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8006ec0:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8006ec4:	b285      	uxth	r5, r0
 8006ec6:	529d      	strh	r5, [r3, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ec8:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006eca:	b280      	uxth	r0, r0
 8006ecc:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ece:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  for (i = n; i != 0U; i--)
 8006ed2:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8006ed8:	f43f acda 	beq.w	8006890 <USB_EPStartXfer+0x214>
 8006edc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    temp1 = *pBuf;
 8006ee0:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 8006ee4:	f822 5b04 	strh.w	r5, [r2], #4
  for (i = n; i != 0U; i--)
 8006ee8:	4290      	cmp	r0, r2
 8006eea:	d1f9      	bne.n	8006ee0 <USB_EPStartXfer+0x864>
 8006eec:	e4d0      	b.n	8006890 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006eee:	2d01      	cmp	r5, #1
 8006ef0:	d108      	bne.n	8006f04 <USB_EPStartXfer+0x888>
 8006ef2:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8006ef6:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8006efa:	b2bf      	uxth	r7, r7
 8006efc:	443d      	add	r5, r7
 8006efe:	0124      	lsls	r4, r4, #4
 8006f00:	b297      	uxth	r7, r2
 8006f02:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f04:	890c      	ldrh	r4, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f06:	b295      	uxth	r5, r2
 8006f08:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f0a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
  for (i = n; i != 0U; i--)
 8006f0e:	086f      	lsrs	r7, r5, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f10:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8006f18:	f43f aed4 	beq.w	8006cc4 <USB_EPStartXfer+0x648>
              ep->xfer_len_db = 0U;
 8006f1c:	4675      	mov	r5, lr
 8006f1e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    temp1 = *pBuf;
 8006f22:	f835 cb02 	ldrh.w	ip, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8006f26:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 8006f2a:	42a7      	cmp	r7, r4
 8006f2c:	d1f9      	bne.n	8006f22 <USB_EPStartXfer+0x8a6>
 8006f2e:	e6c9      	b.n	8006cc4 <USB_EPStartXfer+0x648>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f30:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8006f34:	06d5      	lsls	r5, r2, #27
 8006f36:	4d04      	ldr	r5, [pc, #16]	; (8006f48 <USB_EPStartXfer+0x8cc>)
 8006f38:	bf08      	it	eq
 8006f3a:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006f3e:	ea45 258c 	orr.w	r5, r5, ip, lsl #10
 8006f42:	b2ad      	uxth	r5, r5
 8006f44:	533d      	strh	r5, [r7, r4]
 8006f46:	e58d      	b.n	8006a64 <USB_EPStartXfer+0x3e8>
 8006f48:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f4c:	0947      	lsrs	r7, r0, #5
 8006f4e:	06c5      	lsls	r5, r0, #27
 8006f50:	4d4b      	ldr	r5, [pc, #300]	; (8007080 <USB_EPStartXfer+0xa04>)
 8006f52:	bf08      	it	eq
 8006f54:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8006f58:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8006f5c:	b2ad      	uxth	r5, r5
 8006f5e:	52b5      	strh	r5, [r6, r2]
 8006f60:	e6f9      	b.n	8006d56 <USB_EPStartXfer+0x6da>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f62:	0946      	lsrs	r6, r0, #5
 8006f64:	4c46      	ldr	r4, [pc, #280]	; (8007080 <USB_EPStartXfer+0xa04>)
 8006f66:	06c7      	lsls	r7, r0, #27
 8006f68:	bf08      	it	eq
 8006f6a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006f6e:	ea44 2486 	orr.w	r4, r4, r6, lsl #10
 8006f72:	b2a4      	uxth	r4, r4
 8006f74:	8014      	strh	r4, [r2, #0]
 8006f76:	e71a      	b.n	8006dae <USB_EPStartXfer+0x732>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f78:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8006f7c:	06d4      	lsls	r4, r2, #27
 8006f7e:	4c40      	ldr	r4, [pc, #256]	; (8007080 <USB_EPStartXfer+0xa04>)
 8006f80:	bf08      	it	eq
 8006f82:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006f86:	ea44 248c 	orr.w	r4, r4, ip, lsl #10
 8006f8a:	b2a4      	uxth	r4, r4
 8006f8c:	537c      	strh	r4, [r7, r5]
 8006f8e:	e41c      	b.n	80067ca <USB_EPStartXfer+0x14e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f90:	283e      	cmp	r0, #62	; 0x3e
 8006f92:	d847      	bhi.n	8007024 <USB_EPStartXfer+0x9a8>
 8006f94:	0842      	lsrs	r2, r0, #1
 8006f96:	07c6      	lsls	r6, r0, #31
 8006f98:	bf48      	it	mi
 8006f9a:	3201      	addmi	r2, #1
 8006f9c:	0292      	lsls	r2, r2, #10
 8006f9e:	b292      	uxth	r2, r2
 8006fa0:	802a      	strh	r2, [r5, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fa2:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006fa4:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fa6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006faa:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8006fb0:	e794      	b.n	8006edc <USB_EPStartXfer+0x860>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fb2:	2a3e      	cmp	r2, #62	; 0x3e
 8006fb4:	d84c      	bhi.n	8007050 <USB_EPStartXfer+0x9d4>
 8006fb6:	0857      	lsrs	r7, r2, #1
 8006fb8:	f012 0f01 	tst.w	r2, #1
 8006fbc:	bf18      	it	ne
 8006fbe:	3701      	addne	r7, #1
 8006fc0:	02bf      	lsls	r7, r7, #10
 8006fc2:	b2bf      	uxth	r7, r7
 8006fc4:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fc6:	890d      	ldrh	r5, [r1, #8]
 8006fc8:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006fcc:	1c57      	adds	r7, r2, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fce:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fd2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006fd6:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8006fd8:	e7a0      	b.n	8006f1c <USB_EPStartXfer+0x8a0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fda:	2a3e      	cmp	r2, #62	; 0x3e
 8006fdc:	d844      	bhi.n	8007068 <USB_EPStartXfer+0x9ec>
 8006fde:	0857      	lsrs	r7, r2, #1
 8006fe0:	f012 0f01 	tst.w	r2, #1
 8006fe4:	bf18      	it	ne
 8006fe6:	3701      	addne	r7, #1
 8006fe8:	02bf      	lsls	r7, r7, #10
 8006fea:	b2bf      	uxth	r7, r7
 8006fec:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fee:	894d      	ldrh	r5, [r1, #10]
 8006ff0:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ff4:	1c57      	adds	r7, r2, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff6:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ffa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ffe:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8007000:	e74c      	b.n	8006e9c <USB_EPStartXfer+0x820>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007002:	283e      	cmp	r0, #62	; 0x3e
 8007004:	d819      	bhi.n	800703a <USB_EPStartXfer+0x9be>
 8007006:	0846      	lsrs	r6, r0, #1
 8007008:	07c7      	lsls	r7, r0, #31
 800700a:	bf48      	it	mi
 800700c:	3601      	addmi	r6, #1
 800700e:	02b6      	lsls	r6, r6, #10
 8007010:	b2b6      	uxth	r6, r6
 8007012:	5356      	strh	r6, [r2, r5]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007014:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007016:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007018:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800701c:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800701e:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8007022:	e71b      	b.n	8006e5c <USB_EPStartXfer+0x7e0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007024:	0946      	lsrs	r6, r0, #5
 8007026:	06c2      	lsls	r2, r0, #27
 8007028:	4a15      	ldr	r2, [pc, #84]	; (8007080 <USB_EPStartXfer+0xa04>)
 800702a:	bf08      	it	eq
 800702c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007030:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8007034:	b292      	uxth	r2, r2
 8007036:	802a      	strh	r2, [r5, #0]
 8007038:	e746      	b.n	8006ec8 <USB_EPStartXfer+0x84c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800703a:	0947      	lsrs	r7, r0, #5
 800703c:	06c6      	lsls	r6, r0, #27
 800703e:	4e10      	ldr	r6, [pc, #64]	; (8007080 <USB_EPStartXfer+0xa04>)
 8007040:	bf08      	it	eq
 8007042:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007046:	ea46 2687 	orr.w	r6, r6, r7, lsl #10
 800704a:	b2b6      	uxth	r6, r6
 800704c:	5356      	strh	r6, [r2, r5]
 800704e:	e6fb      	b.n	8006e48 <USB_EPStartXfer+0x7cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007050:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8007054:	06d7      	lsls	r7, r2, #27
 8007056:	4f0a      	ldr	r7, [pc, #40]	; (8007080 <USB_EPStartXfer+0xa04>)
 8007058:	bf08      	it	eq
 800705a:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800705e:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8007062:	b2bf      	uxth	r7, r7
 8007064:	532f      	strh	r7, [r5, r4]
 8007066:	e74d      	b.n	8006f04 <USB_EPStartXfer+0x888>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007068:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 800706c:	06d7      	lsls	r7, r2, #27
 800706e:	4f04      	ldr	r7, [pc, #16]	; (8007080 <USB_EPStartXfer+0xa04>)
 8007070:	bf08      	it	eq
 8007072:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007076:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800707a:	b2bf      	uxth	r7, r7
 800707c:	532f      	strh	r7, [r5, r4]
 800707e:	e701      	b.n	8006e84 <USB_EPStartXfer+0x808>
 8007080:	ffff8000 	.word	0xffff8000

08007084 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8007084:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007086:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8007088:	b18b      	cbz	r3, 80070ae <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800708a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	f083 0310 	eor.w	r3, r3, #16
 800709e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80070aa:	2000      	movs	r0, #0
 80070ac:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80070ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80070b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	0c1b      	lsrs	r3, r3, #16
 80070be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80070ce:	2000      	movs	r0, #0
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop

080070d4 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 80070d4:	7b0b      	ldrb	r3, [r1, #12]
 80070d6:	bb43      	cbnz	r3, 800712a <USB_EPClearStall+0x56>
    if (ep->is_in != 0U)
 80070d8:	784b      	ldrb	r3, [r1, #1]
 80070da:	b343      	cbz	r3, 800712e <USB_EPClearStall+0x5a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070dc:	780a      	ldrb	r2, [r1, #0]
 80070de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80070e2:	065b      	lsls	r3, r3, #25
 80070e4:	d50d      	bpl.n	8007102 <USB_EPClearStall+0x2e>
 80070e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80070ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f2:	041b      	lsls	r3, r3, #16
 80070f4:	0c1b      	lsrs	r3, r3, #16
 80070f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8007102:	78cb      	ldrb	r3, [r1, #3]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d010      	beq.n	800712a <USB_EPClearStall+0x56>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007108:	780a      	ldrb	r2, [r1, #0]
 800710a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800710e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	f083 0320 	eor.w	r3, r3, #32
 800711e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007126:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800712a:	2000      	movs	r0, #0
 800712c:	4770      	bx	lr
{
 800712e:	b410      	push	{r4}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007130:	780c      	ldrb	r4, [r1, #0]
 8007132:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007136:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 800713a:	045b      	lsls	r3, r3, #17
 800713c:	d510      	bpl.n	8007160 <USB_EPClearStall+0x8c>
 800713e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8007142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714a:	041b      	lsls	r3, r3, #16
 800714c:	0c1b      	lsrs	r3, r3, #16
 800714e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007156:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800715a:	780a      	ldrb	r2, [r1, #0]
 800715c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007160:	8813      	ldrh	r3, [r2, #0]
}
 8007162:	2000      	movs	r0, #0
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716c:	041b      	lsls	r3, r3, #16
 800716e:	0c1b      	lsrs	r3, r3, #16
 8007170:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 800717c:	bc10      	pop	{r4}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800717e:	8013      	strh	r3, [r2, #0]
}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop

08007184 <USB_SetDevAddress>:
  if (address == 0U)
 8007184:	b911      	cbnz	r1, 800718c <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007186:	2380      	movs	r3, #128	; 0x80
 8007188:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800718c:	2000      	movs	r0, #0
 800718e:	4770      	bx	lr

08007190 <USB_DevConnect>:
 8007190:	2000      	movs	r0, #0
 8007192:	4770      	bx	lr

08007194 <USB_DevDisconnect>:
 8007194:	2000      	movs	r0, #0
 8007196:	4770      	bx	lr

08007198 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8007198:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800719c:	b280      	uxth	r0, r0
 800719e:	4770      	bx	lr

080071a0 <USB_EP0_OutStart>:
}
 80071a0:	2000      	movs	r0, #0
 80071a2:	4770      	bx	lr

080071a4 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071a4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071a6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 80071aa:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80071b0:	d007      	beq.n	80071c2 <USB_WritePMA+0x1e>
 80071b2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80071b6:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80071ba:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 80071be:	4282      	cmp	r2, r0
 80071c0:	d1f9      	bne.n	80071b6 <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80071c2:	4770      	bx	lr

080071c4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071c4:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 80071c8:	ea5f 0c53 	movs.w	ip, r3, lsr #1
{
 80071cc:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071ce:	f500 6780 	add.w	r7, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80071d2:	d013      	beq.n	80071fc <USB_ReadPMA+0x38>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071d4:	463d      	mov	r5, r7
  for (i = n; i != 0U; i--)
 80071d6:	4664      	mov	r4, ip
 80071d8:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 80071da:	f835 2b04 	ldrh.w	r2, [r5], #4
  for (i = n; i != 0U; i--)
 80071de:	3c01      	subs	r4, #1
    temp = *(__IO uint16_t *)pdwVal;
 80071e0:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80071e2:	ea4f 2612 	mov.w	r6, r2, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071e6:	f800 2c02 	strb.w	r2, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80071ea:	f800 6c01 	strb.w	r6, [r0, #-1]
  for (i = n; i != 0U; i--)
 80071ee:	f100 0002 	add.w	r0, r0, #2
 80071f2:	d1f2      	bne.n	80071da <USB_ReadPMA+0x16>
 80071f4:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 80071f8:	eb07 078c 	add.w	r7, r7, ip, lsl #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80071fc:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80071fe:	bf48      	it	mi
 8007200:	883b      	ldrhmi	r3, [r7, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 8007202:	bcf0      	pop	{r4, r5, r6, r7}
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007204:	bf48      	it	mi
 8007206:	700b      	strbmi	r3, [r1, #0]
}
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop

0800720c <USBD_MIDI_DataIn>:
  return 0;
}

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){

  if (USB_Tx_State == 1){
 800720c:	4b03      	ldr	r3, [pc, #12]	; (800721c <USBD_MIDI_DataIn+0x10>)
    USB_Tx_State = 0;
  }
  return USBD_OK;
}
 800720e:	2000      	movs	r0, #0
  if (USB_Tx_State == 1){
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	2a01      	cmp	r2, #1
    USB_Tx_State = 0;
 8007214:	bf04      	itt	eq
 8007216:	2200      	moveq	r2, #0
 8007218:	701a      	strbeq	r2, [r3, #0]
}
 800721a:	4770      	bx	lr
 800721c:	2000013c 	.word	0x2000013c

08007220 <USBD_MIDI_GetCfgDesc>:
    while(USBD_LL_Transmit(pInstance, MIDI_IN_EP,buffer,len) != USBD_OK)
    	;

}

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 8007220:	4603      	mov	r3, r0
  *length = sizeof (USBD_MIDI_CfgDesc);
 8007222:	2265      	movs	r2, #101	; 0x65
  return USBD_MIDI_CfgDesc;
}
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <USBD_MIDI_GetCfgDesc+0xc>)
  *length = sizeof (USBD_MIDI_CfgDesc);
 8007226:	801a      	strh	r2, [r3, #0]
}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20000050 	.word	0x20000050

08007230 <USBD_MIDI_DataOut>:
{      
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4604      	mov	r4, r0
  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8007234:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  pmidi->pIf_MidiRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8007238:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800723c:	4d08      	ldr	r5, [pc, #32]	; (8007260 <USBD_MIDI_DataOut+0x30>)
  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 800723e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007242:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  pmidi->pIf_MidiRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8007246:	4628      	mov	r0, r5
 8007248:	6813      	ldr	r3, [r2, #0]
 800724a:	f8b1 1184 	ldrh.w	r1, [r1, #388]	; 0x184
 800724e:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,USB_Rx_Buffer,MIDI_DATA_OUT_PACKET_SIZE);
 8007250:	4620      	mov	r0, r4
 8007252:	462a      	mov	r2, r5
 8007254:	2340      	movs	r3, #64	; 0x40
 8007256:	2101      	movs	r1, #1
 8007258:	f000 ff6e 	bl	8008138 <USBD_LL_PrepareReceive>
}
 800725c:	2000      	movs	r0, #0
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20000298 	.word	0x20000298

08007264 <USBD_MIDI_DeInit>:
static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8007264:	b538      	push	{r3, r4, r5, lr}
  pInstance = NULL;
 8007266:	2500      	movs	r5, #0
static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8007268:	4604      	mov	r4, r0
  pInstance = NULL;
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <USBD_MIDI_DeInit+0x1c>)
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 800726c:	2181      	movs	r1, #129	; 0x81
  pInstance = NULL;
 800726e:	601d      	str	r5, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 8007270:	f000 ff08 	bl	8008084 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 8007274:	4620      	mov	r0, r4
 8007276:	2101      	movs	r1, #1
 8007278:	f000 ff04 	bl	8008084 <USBD_LL_CloseEP>
}
 800727c:	4628      	mov	r0, r5
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	20000140 	.word	0x20000140

08007284 <USBD_MIDI_Init>:
static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4604      	mov	r4, r0
  pInstance = pdev;
 8007288:	4d0b      	ldr	r5, [pc, #44]	; (80072b8 <USBD_MIDI_Init+0x34>)
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800728a:	2340      	movs	r3, #64	; 0x40
 800728c:	2202      	movs	r2, #2
 800728e:	2181      	movs	r1, #129	; 0x81
  pInstance = pdev;
 8007290:	6028      	str	r0, [r5, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 8007292:	f000 fee7 	bl	8008064 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 8007296:	4620      	mov	r0, r4
 8007298:	2340      	movs	r3, #64	; 0x40
 800729a:	2202      	movs	r2, #2
 800729c:	2101      	movs	r1, #1
 800729e:	f000 fee1 	bl	8008064 <USBD_LL_OpenEP>
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 80072a2:	2101      	movs	r1, #1
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80072a4:	4620      	mov	r0, r4
 80072a6:	2340      	movs	r3, #64	; 0x40
 80072a8:	4a04      	ldr	r2, [pc, #16]	; (80072bc <USBD_MIDI_Init+0x38>)
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 80072aa:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 1U;
 80072ae:	62e1      	str	r1, [r4, #44]	; 0x2c
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 80072b0:	f000 ff42 	bl	8008138 <USBD_LL_PrepareReceive>
}
 80072b4:	2000      	movs	r0, #0
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	20000140 	.word	0x20000140
 80072bc:	20000298 	.word	0x20000298

080072c0 <USBD_MIDI_SendPacket>:
void USBD_MIDI_SendPacket (uint8_t* buffer, uint8_t len){
 80072c0:	b570      	push	{r4, r5, r6, lr}
	if(pInstance->dev_state != USBD_STATE_CONFIGURED)
 80072c2:	4e0c      	ldr	r6, [pc, #48]	; (80072f4 <USBD_MIDI_SendPacket+0x34>)
void USBD_MIDI_SendPacket (uint8_t* buffer, uint8_t len){
 80072c4:	4605      	mov	r5, r0
	if(pInstance->dev_state != USBD_STATE_CONFIGURED)
 80072c6:	6830      	ldr	r0, [r6, #0]
 80072c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d10f      	bne.n	80072f0 <USBD_MIDI_SendPacket+0x30>
 80072d0:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <USBD_MIDI_SendPacket+0x38>)
	while(USB_Tx_State)
 80072d2:	781c      	ldrb	r4, [r3, #0]
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	d1fc      	bne.n	80072d2 <USBD_MIDI_SendPacket+0x12>
    USB_Tx_State = 1;
 80072d8:	2201      	movs	r2, #1
 80072da:	b28c      	uxth	r4, r1
 80072dc:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance, MIDI_IN_EP,buffer,len) != USBD_OK)
 80072de:	e000      	b.n	80072e2 <USBD_MIDI_SendPacket+0x22>
 80072e0:	6830      	ldr	r0, [r6, #0]
 80072e2:	4623      	mov	r3, r4
 80072e4:	462a      	mov	r2, r5
 80072e6:	2181      	movs	r1, #129	; 0x81
 80072e8:	f000 ff18 	bl	800811c <USBD_LL_Transmit>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d1f7      	bne.n	80072e0 <USBD_MIDI_SendPacket+0x20>
}
 80072f0:	bd70      	pop	{r4, r5, r6, pc}
 80072f2:	bf00      	nop
 80072f4:	20000140 	.word	0x20000140
 80072f8:	2000013c 	.word	0x2000013c

080072fc <USBD_MIDI_RegisterInterface>:

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
  uint8_t ret = USBD_FAIL;
  
  if(fops != NULL){
 80072fc:	b119      	cbz	r1, 8007306 <USBD_MIDI_RegisterInterface+0xa>
    pdev->pUserData= fops;
 80072fe:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;    
 8007302:	2000      	movs	r0, #0
 8007304:	4770      	bx	lr
  uint8_t ret = USBD_FAIL;
 8007306:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop

0800730c <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800730c:	b188      	cbz	r0, 8007332 <USBD_Init+0x26>
{
 800730e:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007310:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007314:	b113      	cbz	r3, 800731c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800731c:	b109      	cbz	r1, 8007322 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800731e:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007322:	2301      	movs	r3, #1
  pdev->id = id;
 8007324:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007326:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800732a:	f000 fe53 	bl	8007fd4 <USBD_LL_Init>

  return USBD_OK;
 800732e:	2000      	movs	r0, #0
}
 8007330:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007332:	2002      	movs	r0, #2
}
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop

08007338 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8007338:	b119      	cbz	r1, 8007342 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800733a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800733e:	2000      	movs	r0, #0
 8007340:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007342:	2002      	movs	r0, #2
  }

  return status;
}
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop

08007348 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007348:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800734a:	f000 fe7d 	bl	8008048 <USBD_LL_Start>

  return USBD_OK;
}
 800734e:	2000      	movs	r0, #0
 8007350:	bd08      	pop	{r3, pc}
 8007352:	bf00      	nop

08007354 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007354:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8007356:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800735a:	b11b      	cbz	r3, 8007364 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4798      	blx	r3
 8007360:	b900      	cbnz	r0, 8007364 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007362:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007364:	2002      	movs	r0, #2
}
 8007366:	bd08      	pop	{r3, pc}

08007368 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007368:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800736a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4798      	blx	r3

  return USBD_OK;
}
 8007372:	2000      	movs	r0, #0
 8007374:	bd08      	pop	{r3, pc}
 8007376:	bf00      	nop

08007378 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800737c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8007380:	4628      	mov	r0, r5
 8007382:	f000 fb59 	bl	8007a38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007386:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007388:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 800738c:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
 8007390:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8007394:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 8007396:	e9c4 02a5 	strd	r0, r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800739a:	d009      	beq.n	80073b0 <USBD_LL_SetupStage+0x38>
 800739c:	2b02      	cmp	r3, #2
 800739e:	d013      	beq.n	80073c8 <USBD_LL_SetupStage+0x50>
 80073a0:	b163      	cbz	r3, 80073bc <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073a2:	4620      	mov	r0, r4
 80073a4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80073a8:	f000 fe7a 	bl	80080a0 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 80073ac:	2000      	movs	r0, #0
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80073b0:	4629      	mov	r1, r5
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 fa74 	bl	80078a0 <USBD_StdItfReq>
}
 80073b8:	2000      	movs	r0, #0
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 80073bc:	4629      	mov	r1, r5
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 f8f4 	bl	80075ac <USBD_StdDevReq>
}
 80073c4:	2000      	movs	r0, #0
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 80073c8:	4629      	mov	r1, r5
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fa9c 	bl	8007908 <USBD_StdEPReq>
}
 80073d0:	2000      	movs	r0, #0
 80073d2:	bd38      	pop	{r3, r4, r5, pc}

080073d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073d8:	b969      	cbnz	r1, 80073f6 <USBD_LL_DataOutStage+0x22>
 80073da:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073dc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80073e0:	2a03      	cmp	r2, #3
 80073e2:	d015      	beq.n	8007410 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073e4:	2a05      	cmp	r2, #5
 80073e6:	460c      	mov	r4, r1
 80073e8:	d10e      	bne.n	8007408 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80073ea:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80073ee:	f000 fe57 	bl	80080a0 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80073f2:	4620      	mov	r0, r4
}
 80073f4:	bd38      	pop	{r3, r4, r5, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 80073f6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	b133      	cbz	r3, 800740c <USBD_LL_DataOutStage+0x38>
 80073fe:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007402:	2a03      	cmp	r2, #3
 8007404:	d102      	bne.n	800740c <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8007406:	4798      	blx	r3
  return USBD_OK;
 8007408:	2000      	movs	r0, #0
}
 800740a:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800740c:	2002      	movs	r0, #2
}
 800740e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007410:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 8007414:	4291      	cmp	r1, r2
 8007416:	d90c      	bls.n	8007432 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 8007418:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx(pdev, pdata,
 800741a:	428a      	cmp	r2, r1
 800741c:	bf88      	it	hi
 800741e:	b28a      	uxthhi	r2, r1
        pep->rem_length -= pep->maxpacket;
 8007420:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8007424:	bf98      	it	ls
 8007426:	b292      	uxthls	r2, r2
 8007428:	4619      	mov	r1, r3
 800742a:	f000 fb57 	bl	8007adc <USBD_CtlContinueRx>
  return USBD_OK;
 800742e:	2000      	movs	r0, #0
}
 8007430:	bd38      	pop	{r3, r4, r5, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007432:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	b11b      	cbz	r3, 8007442 <USBD_LL_DataOutStage+0x6e>
 800743a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800743e:	2a03      	cmp	r2, #3
 8007440:	d004      	beq.n	800744c <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 8007442:	4628      	mov	r0, r5
 8007444:	f000 fb54 	bl	8007af0 <USBD_CtlSendStatus>
  return USBD_OK;
 8007448:	2000      	movs	r0, #0
}
 800744a:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 800744c:	4798      	blx	r3
 800744e:	e7f8      	b.n	8007442 <USBD_LL_DataOutStage+0x6e>

08007450 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007454:	b981      	cbnz	r1, 8007478 <USBD_LL_DataInStage+0x28>
 8007456:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007458:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800745c:	2a02      	cmp	r2, #2
 800745e:	d01b      	beq.n	8007498 <USBD_LL_DataInStage+0x48>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007460:	f032 0304 	bics.w	r3, r2, #4
 8007464:	d102      	bne.n	800746c <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	f000 fe1a 	bl	80080a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800746c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8007470:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8007472:	2b01      	cmp	r3, #1
 8007474:	d00d      	beq.n	8007492 <USBD_LL_DataInStage+0x42>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8007476:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8007478:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	b133      	cbz	r3, 800748e <USBD_LL_DataInStage+0x3e>
 8007480:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007484:	2a03      	cmp	r2, #3
 8007486:	d102      	bne.n	800748e <USBD_LL_DataInStage+0x3e>
    pdev->pClass->DataIn(pdev, epnum);
 8007488:	4798      	blx	r3
  return USBD_OK;
 800748a:	2000      	movs	r0, #0
}
 800748c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800748e:	2002      	movs	r0, #2
}
 8007490:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8007492:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 8007496:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8007498:	e9d0 2608 	ldrd	r2, r6, [r0, #32]
 800749c:	42b2      	cmp	r2, r6
 800749e:	d826      	bhi.n	80074ee <USBD_LL_DataInStage+0x9e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074a0:	69c3      	ldr	r3, [r0, #28]
 80074a2:	fbb3 f5f6 	udiv	r5, r3, r6
 80074a6:	fb06 3515 	mls	r5, r6, r5, r3
 80074aa:	b95d      	cbnz	r5, 80074c4 <USBD_LL_DataInStage+0x74>
 80074ac:	429e      	cmp	r6, r3
 80074ae:	d809      	bhi.n	80074c4 <USBD_LL_DataInStage+0x74>
            (pep->total_length >= pep->maxpacket) &&
 80074b0:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d205      	bcs.n	80074c4 <USBD_LL_DataInStage+0x74>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074b8:	462a      	mov	r2, r5
 80074ba:	f000 fb05 	bl	8007ac8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074be:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80074c2:	e01b      	b.n	80074fc <USBD_LL_DataInStage+0xac>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074c4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	b11b      	cbz	r3, 80074d4 <USBD_LL_DataInStage+0x84>
 80074cc:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80074d0:	2a03      	cmp	r2, #3
 80074d2:	d01a      	beq.n	800750a <USBD_LL_DataInStage+0xba>
          USBD_LL_StallEP(pdev, 0x80U);
 80074d4:	2180      	movs	r1, #128	; 0x80
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 fde2 	bl	80080a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 fb13 	bl	8007b08 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 80074e2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 80074e6:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d1c4      	bne.n	8007476 <USBD_LL_DataInStage+0x26>
 80074ec:	e7d1      	b.n	8007492 <USBD_LL_DataInStage+0x42>
        pep->rem_length -= pep->maxpacket;
 80074ee:	1b92      	subs	r2, r2, r6
 80074f0:	460d      	mov	r5, r1
 80074f2:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074f4:	4619      	mov	r1, r3
 80074f6:	b292      	uxth	r2, r2
 80074f8:	f000 fae6 	bl	8007ac8 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074fc:	462b      	mov	r3, r5
 80074fe:	462a      	mov	r2, r5
 8007500:	4629      	mov	r1, r5
 8007502:	4620      	mov	r0, r4
 8007504:	f000 fe18 	bl	8008138 <USBD_LL_PrepareReceive>
 8007508:	e7b0      	b.n	800746c <USBD_LL_DataInStage+0x1c>
            pdev->pClass->EP0_TxSent(pdev);
 800750a:	4620      	mov	r0, r4
 800750c:	4798      	blx	r3
 800750e:	e7e1      	b.n	80074d4 <USBD_LL_DataInStage+0x84>

08007510 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007510:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007512:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007514:	2640      	movs	r6, #64	; 0x40
{
 8007516:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007518:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800751a:	4611      	mov	r1, r2
 800751c:	4633      	mov	r3, r6
 800751e:	f000 fda1 	bl	8008064 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007522:	4633      	mov	r3, r6
 8007524:	2180      	movs	r1, #128	; 0x80
 8007526:	4620      	mov	r0, r4
 8007528:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800752a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800752e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007532:	f000 fd97 	bl	8008064 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8007536:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8007538:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800753c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800753e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007540:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007544:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8007548:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800754a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800754e:	b123      	cbz	r3, 800755a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007550:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007554:	4620      	mov	r0, r4
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	4798      	blx	r3
  }

  return USBD_OK;
}
 800755a:	2000      	movs	r0, #0
 800755c:	bd70      	pop	{r4, r5, r6, pc}
 800755e:	bf00      	nop

08007560 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007560:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8007562:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8007564:	7419      	strb	r1, [r3, #16]
}
 8007566:	4770      	bx	lr

08007568 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007568:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800756a:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 800756c:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007570:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 8007572:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 800757a:	4770      	bx	lr

0800757c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800757c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007580:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8007582:	bf04      	itt	eq
 8007584:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8007588:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800758c:	2000      	movs	r0, #0
 800758e:	4770      	bx	lr

08007590 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007590:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007594:	2a03      	cmp	r2, #3
 8007596:	d001      	beq.n	800759c <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8007598:	2000      	movs	r0, #0
 800759a:	4770      	bx	lr
{
 800759c:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 800759e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	b103      	cbz	r3, 80075a8 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80075a6:	4798      	blx	r3
}
 80075a8:	2000      	movs	r0, #0
 80075aa:	bd08      	pop	{r3, pc}

080075ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80075ac:	b530      	push	{r4, r5, lr}
 80075ae:	780b      	ldrb	r3, [r1, #0]
 80075b0:	460d      	mov	r5, r1
 80075b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075b6:	2b20      	cmp	r3, #32
{
 80075b8:	4604      	mov	r4, r0
 80075ba:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075bc:	d00d      	beq.n	80075da <USBD_StdDevReq+0x2e>
 80075be:	2b40      	cmp	r3, #64	; 0x40
 80075c0:	d00b      	beq.n	80075da <USBD_StdDevReq+0x2e>
 80075c2:	b19b      	cbz	r3, 80075ec <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 fd6a 	bl	80080a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80075cc:	4620      	mov	r0, r4
 80075ce:	2100      	movs	r1, #0
 80075d0:	f000 fd66 	bl	80080a0 <USBD_LL_StallEP>
}
 80075d4:	2000      	movs	r0, #0
 80075d6:	b003      	add	sp, #12
 80075d8:	bd30      	pop	{r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 80075da:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80075de:	4629      	mov	r1, r5
 80075e0:	4620      	mov	r0, r4
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	4798      	blx	r3
}
 80075e6:	2000      	movs	r0, #0
 80075e8:	b003      	add	sp, #12
 80075ea:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 80075ec:	784b      	ldrb	r3, [r1, #1]
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	d8e8      	bhi.n	80075c4 <USBD_StdDevReq+0x18>
 80075f2:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <USBD_StdDevReq+0x4c>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007653 	.word	0x08007653
 80075fc:	0800767f 	.word	0x0800767f
 8007600:	080075c5 	.word	0x080075c5
 8007604:	0800769b 	.word	0x0800769b
 8007608:	080075c5 	.word	0x080075c5
 800760c:	080076ad 	.word	0x080076ad
 8007610:	080076e7 	.word	0x080076e7
 8007614:	080075c5 	.word	0x080075c5
 8007618:	0800771d 	.word	0x0800771d
 800761c:	08007621 	.word	0x08007621
  cfgidx = (uint8_t)(req->wValue);
 8007620:	7889      	ldrb	r1, [r1, #2]
 8007622:	4d9e      	ldr	r5, [pc, #632]	; (800789c <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007624:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8007626:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007628:	d8cc      	bhi.n	80075c4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800762a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800762e:	2b02      	cmp	r3, #2
 8007630:	f000 810f 	beq.w	8007852 <USBD_StdDevReq+0x2a6>
 8007634:	2b03      	cmp	r3, #3
 8007636:	f000 80fb 	beq.w	8007830 <USBD_StdDevReq+0x284>
  USBD_LL_StallEP(pdev, 0x80U);
 800763a:	2180      	movs	r1, #128	; 0x80
 800763c:	f000 fd30 	bl	80080a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007640:	2100      	movs	r1, #0
 8007642:	4620      	mov	r0, r4
 8007644:	f000 fd2c 	bl	80080a0 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007648:	4620      	mov	r0, r4
 800764a:	7829      	ldrb	r1, [r5, #0]
 800764c:	f7ff fe8c 	bl	8007368 <USBD_ClrClassConfig>
        break;
 8007650:	e7c0      	b.n	80075d4 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8007652:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007656:	3b01      	subs	r3, #1
 8007658:	2b02      	cmp	r3, #2
 800765a:	d8b3      	bhi.n	80075c4 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 800765c:	88cb      	ldrh	r3, [r1, #6]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d1b0      	bne.n	80075c4 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007662:	2201      	movs	r2, #1
      if (pdev->dev_remote_wakeup)
 8007664:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007668:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800766a:	b10b      	cbz	r3, 8007670 <USBD_StdDevReq+0xc4>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800766c:	2303      	movs	r3, #3
 800766e:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007670:	2202      	movs	r2, #2
 8007672:	4620      	mov	r0, r4
 8007674:	f104 010c 	add.w	r1, r4, #12
 8007678:	f000 fa18 	bl	8007aac <USBD_CtlSendData>
      break;
 800767c:	e7aa      	b.n	80075d4 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800767e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007682:	3b01      	subs	r3, #1
 8007684:	2b02      	cmp	r3, #2
 8007686:	d89d      	bhi.n	80075c4 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007688:	884b      	ldrh	r3, [r1, #2]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d1a2      	bne.n	80075d4 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007694:	f000 fa2c 	bl	8007af0 <USBD_CtlSendStatus>
 8007698:	e79c      	b.n	80075d4 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800769a:	884b      	ldrh	r3, [r1, #2]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d199      	bne.n	80075d4 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 80076a0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 fa23 	bl	8007af0 <USBD_CtlSendStatus>
 80076aa:	e793      	b.n	80075d4 <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076ac:	888b      	ldrh	r3, [r1, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d188      	bne.n	80075c4 <USBD_StdDevReq+0x18>
 80076b2:	88cb      	ldrh	r3, [r1, #6]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d185      	bne.n	80075c4 <USBD_StdDevReq+0x18>
 80076b8:	884d      	ldrh	r5, [r1, #2]
 80076ba:	2d7f      	cmp	r5, #127	; 0x7f
 80076bc:	d882      	bhi.n	80075c4 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	f43f af7e 	beq.w	80075c4 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076c8:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80076ca:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076ce:	f000 fd17 	bl	8008100 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80076d2:	4620      	mov	r0, r4
 80076d4:	f000 fa0c 	bl	8007af0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80076d8:	2d00      	cmp	r5, #0
 80076da:	f000 80db 	beq.w	8007894 <USBD_StdDevReq+0x2e8>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076de:	2302      	movs	r3, #2
 80076e0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80076e4:	e776      	b.n	80075d4 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 80076e6:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 80076e8:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80076ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80076ee:	0a13      	lsrs	r3, r2, #8
 80076f0:	3b01      	subs	r3, #1
 80076f2:	2b06      	cmp	r3, #6
 80076f4:	f63f af66 	bhi.w	80075c4 <USBD_StdDevReq+0x18>
 80076f8:	a101      	add	r1, pc, #4	; (adr r1, 8007700 <USBD_StdDevReq+0x154>)
 80076fa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	080077c1 	.word	0x080077c1
 8007704:	080077a9 	.word	0x080077a9
 8007708:	08007797 	.word	0x08007797
 800770c:	080075c5 	.word	0x080075c5
 8007710:	080075c5 	.word	0x080075c5
 8007714:	08007781 	.word	0x08007781
 8007718:	08007741 	.word	0x08007741
  if (req->wLength != 1U)
 800771c:	88ca      	ldrh	r2, [r1, #6]
 800771e:	2a01      	cmp	r2, #1
 8007720:	f47f af50 	bne.w	80075c4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8007724:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007728:	2b02      	cmp	r3, #2
 800772a:	d87a      	bhi.n	8007822 <USBD_StdDevReq+0x276>
 800772c:	2b00      	cmp	r3, #0
 800772e:	f43f af49 	beq.w	80075c4 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	4601      	mov	r1, r0
 8007736:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800773a:	f000 f9b7 	bl	8007aac <USBD_CtlSendData>
        break;
 800773e:	e749      	b.n	80075d4 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007740:	7c03      	ldrb	r3, [r0, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f47f af3e 	bne.w	80075c4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007748:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800774c:	f10d 0006 	add.w	r0, sp, #6
 8007750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007752:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007754:	2307      	movs	r3, #7
 8007756:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 8007758:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800775c:	b15a      	cbz	r2, 8007776 <USBD_StdDevReq+0x1ca>
 800775e:	88eb      	ldrh	r3, [r5, #6]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d09f      	beq.n	80076a4 <USBD_StdDevReq+0xf8>
      len = MIN(len, req->wLength);
 8007764:	429a      	cmp	r2, r3
 8007766:	bf28      	it	cs
 8007768:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800776a:	4601      	mov	r1, r0
 800776c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800776e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007772:	f000 f99b 	bl	8007aac <USBD_CtlSendData>
    if (req->wLength == 0U)
 8007776:	88eb      	ldrh	r3, [r5, #6]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f47f af2b 	bne.w	80075d4 <USBD_StdDevReq+0x28>
 800777e:	e791      	b.n	80076a4 <USBD_StdDevReq+0xf8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007780:	7c03      	ldrb	r3, [r0, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	f47f af1e 	bne.w	80075c4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007788:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800778c:	f10d 0006 	add.w	r0, sp, #6
 8007790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007792:	4798      	blx	r3
  if (err != 0U)
 8007794:	e7e0      	b.n	8007758 <USBD_StdDevReq+0x1ac>
      switch ((uint8_t)(req->wValue))
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	2a05      	cmp	r2, #5
 800779a:	f63f af13 	bhi.w	80075c4 <USBD_StdDevReq+0x18>
 800779e:	e8df f002 	tbb	[pc, r2]
 80077a2:	343a      	.short	0x343a
 80077a4:	1722282e 	.word	0x1722282e
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077a8:	7c03      	ldrb	r3, [r0, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d15f      	bne.n	800786e <USBD_StdDevReq+0x2c2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80077b2:	f10d 0006 	add.w	r0, sp, #6
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ba:	2302      	movs	r3, #2
 80077bc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80077be:	e7cb      	b.n	8007758 <USBD_StdDevReq+0x1ac>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077c0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80077c4:	f10d 0106 	add.w	r1, sp, #6
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	7c00      	ldrb	r0, [r0, #16]
 80077cc:	4798      	blx	r3
  if (err != 0U)
 80077ce:	e7c3      	b.n	8007758 <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077d0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f43f aef4 	beq.w	80075c4 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077dc:	7c20      	ldrb	r0, [r4, #16]
 80077de:	f10d 0106 	add.w	r1, sp, #6
 80077e2:	4798      	blx	r3
  if (err != 0U)
 80077e4:	e7b8      	b.n	8007758 <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077e6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f5      	bne.n	80077dc <USBD_StdDevReq+0x230>
 80077f0:	e6e8      	b.n	80075c4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077f2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1ef      	bne.n	80077dc <USBD_StdDevReq+0x230>
 80077fc:	e6e2      	b.n	80075c4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077fe:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e9      	bne.n	80077dc <USBD_StdDevReq+0x230>
 8007808:	e6dc      	b.n	80075c4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800780a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e3      	bne.n	80077dc <USBD_StdDevReq+0x230>
 8007814:	e6d6      	b.n	80075c4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007816:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1dd      	bne.n	80077dc <USBD_StdDevReq+0x230>
 8007820:	e6d0      	b.n	80075c4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8007822:	2b03      	cmp	r3, #3
 8007824:	f47f aece 	bne.w	80075c4 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007828:	1d01      	adds	r1, r0, #4
 800782a:	f000 f93f 	bl	8007aac <USBD_CtlSendData>
        break;
 800782e:	e6d1      	b.n	80075d4 <USBD_StdDevReq+0x28>
        if (cfgidx == 0U)
 8007830:	b331      	cbz	r1, 8007880 <USBD_StdDevReq+0x2d4>
        else if (cfgidx != pdev->dev_config)
 8007832:	6841      	ldr	r1, [r0, #4]
 8007834:	2901      	cmp	r1, #1
 8007836:	f43f af35 	beq.w	80076a4 <USBD_StdDevReq+0xf8>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800783a:	b2c9      	uxtb	r1, r1
 800783c:	f7ff fd94 	bl	8007368 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007840:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007842:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8007844:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007846:	f7ff fd85 	bl	8007354 <USBD_SetClassConfig>
 800784a:	2802      	cmp	r0, #2
 800784c:	f47f af2a 	bne.w	80076a4 <USBD_StdDevReq+0xf8>
 8007850:	e6b8      	b.n	80075c4 <USBD_StdDevReq+0x18>
        if (cfgidx)
 8007852:	2900      	cmp	r1, #0
 8007854:	f43f af26 	beq.w	80076a4 <USBD_StdDevReq+0xf8>
          pdev->dev_config = cfgidx;
 8007858:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800785a:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800785c:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800785e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007862:	f7ff fd77 	bl	8007354 <USBD_SetClassConfig>
 8007866:	2802      	cmp	r0, #2
 8007868:	f47f af1c 	bne.w	80076a4 <USBD_StdDevReq+0xf8>
 800786c:	e6aa      	b.n	80075c4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800786e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007872:	f10d 0006 	add.w	r0, sp, #6
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800787a:	2302      	movs	r3, #2
 800787c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800787e:	e76b      	b.n	8007758 <USBD_StdDevReq+0x1ac>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007880:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8007882:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007884:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8007888:	f7ff fd6e 	bl	8007368 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800788c:	4620      	mov	r0, r4
 800788e:	f000 f92f 	bl	8007af0 <USBD_CtlSendStatus>
 8007892:	e69f      	b.n	80075d4 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007894:	2301      	movs	r3, #1
 8007896:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800789a:	e69b      	b.n	80075d4 <USBD_StdDevReq+0x28>
 800789c:	20000144 	.word	0x20000144

080078a0 <USBD_StdItfReq>:
{
 80078a0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a2:	780b      	ldrb	r3, [r1, #0]
{
 80078a4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80078aa:	2a40      	cmp	r2, #64	; 0x40
{
 80078ac:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ae:	d00a      	beq.n	80078c6 <USBD_StdItfReq+0x26>
 80078b0:	065b      	lsls	r3, r3, #25
 80078b2:	d508      	bpl.n	80078c6 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev, 0x80U);
 80078b4:	2180      	movs	r1, #128	; 0x80
 80078b6:	f000 fbf3 	bl	80080a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80078ba:	4620      	mov	r0, r4
 80078bc:	2100      	movs	r1, #0
 80078be:	f000 fbef 	bl	80080a0 <USBD_LL_StallEP>
}
 80078c2:	2000      	movs	r0, #0
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80078c6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80078ca:	3b01      	subs	r3, #1
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d811      	bhi.n	80078f4 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078d0:	792b      	ldrb	r3, [r5, #4]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d80e      	bhi.n	80078f4 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078d6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80078da:	4629      	mov	r1, r5
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	4620      	mov	r0, r4
 80078e0:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078e2:	88eb      	ldrh	r3, [r5, #6]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1ec      	bne.n	80078c2 <USBD_StdItfReq+0x22>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d1ea      	bne.n	80078c2 <USBD_StdItfReq+0x22>
              USBD_CtlSendStatus(pdev);
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 f8ff 	bl	8007af0 <USBD_CtlSendStatus>
 80078f2:	e7e6      	b.n	80078c2 <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev, 0x80U);
 80078f4:	2180      	movs	r1, #128	; 0x80
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 fbd2 	bl	80080a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80078fc:	4620      	mov	r0, r4
 80078fe:	2100      	movs	r1, #0
 8007900:	f000 fbce 	bl	80080a0 <USBD_LL_StallEP>
}
 8007904:	2000      	movs	r0, #0
 8007906:	bd38      	pop	{r3, r4, r5, pc}

08007908 <USBD_StdEPReq>:
{
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	780b      	ldrb	r3, [r1, #0]
 800790c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800790e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007912:	2b20      	cmp	r3, #32
 8007914:	d00c      	beq.n	8007930 <USBD_StdEPReq+0x28>
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d00a      	beq.n	8007930 <USBD_StdEPReq+0x28>
 800791a:	b183      	cbz	r3, 800793e <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 800791c:	2180      	movs	r1, #128	; 0x80
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fbbe 	bl	80080a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007924:	4620      	mov	r0, r4
 8007926:	2100      	movs	r1, #0
 8007928:	f000 fbba 	bl	80080a0 <USBD_LL_StallEP>
}
 800792c:	2000      	movs	r0, #0
 800792e:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8007930:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007934:	4620      	mov	r0, r4
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	4798      	blx	r3
}
 800793a:	2000      	movs	r0, #0
 800793c:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800793e:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007940:	888a      	ldrh	r2, [r1, #4]
 8007942:	2b01      	cmp	r3, #1
 8007944:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 8007946:	d03d      	beq.n	80079c4 <USBD_StdEPReq+0xbc>
 8007948:	2b03      	cmp	r3, #3
 800794a:	d02a      	beq.n	80079a2 <USBD_StdEPReq+0x9a>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e5      	bne.n	800791c <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 8007950:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007954:	2b02      	cmp	r3, #2
 8007956:	d04e      	beq.n	80079f6 <USBD_StdEPReq+0xee>
 8007958:	2b03      	cmp	r3, #3
 800795a:	d1df      	bne.n	800791c <USBD_StdEPReq+0x14>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800795c:	f005 030f 	and.w	r3, r5, #15
 8007960:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8007964:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007966:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800796a:	d453      	bmi.n	8007a14 <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800796c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0d3      	beq.n	800791c <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007974:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8007978:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 800797c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007980:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007984:	b133      	cbz	r3, 8007994 <USBD_StdEPReq+0x8c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007986:	4629      	mov	r1, r5
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fba5 	bl	80080d8 <USBD_LL_IsStallEP>
 800798e:	2800      	cmp	r0, #0
 8007990:	d04b      	beq.n	8007a2a <USBD_StdEPReq+0x122>
                pep->status = 0x0001U;
 8007992:	2301      	movs	r3, #1
 8007994:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007996:	4631      	mov	r1, r6
 8007998:	4620      	mov	r0, r4
 800799a:	2202      	movs	r2, #2
 800799c:	f000 f886 	bl	8007aac <USBD_CtlSendData>
              break;
 80079a0:	e7c4      	b.n	800792c <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80079a2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d01b      	beq.n	80079e2 <USBD_StdEPReq+0xda>
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d1b6      	bne.n	800791c <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079ae:	884b      	ldrh	r3, [r1, #2]
 80079b0:	b923      	cbnz	r3, 80079bc <USBD_StdEPReq+0xb4>
                if ((ep_addr != 0x00U) &&
 80079b2:	066a      	lsls	r2, r5, #25
 80079b4:	d002      	beq.n	80079bc <USBD_StdEPReq+0xb4>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079b6:	88cb      	ldrh	r3, [r1, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d038      	beq.n	8007a2e <USBD_StdEPReq+0x126>
              USBD_CtlSendStatus(pdev);
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 f897 	bl	8007af0 <USBD_CtlSendStatus>
              break;
 80079c2:	e7b3      	b.n	800792c <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80079c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d00a      	beq.n	80079e2 <USBD_StdEPReq+0xda>
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d1a5      	bne.n	800791c <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079d0:	884b      	ldrh	r3, [r1, #2]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1aa      	bne.n	800792c <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 80079d6:	066e      	lsls	r6, r5, #25
 80079d8:	d0f0      	beq.n	80079bc <USBD_StdEPReq+0xb4>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80079da:	4629      	mov	r1, r5
 80079dc:	f000 fb6e 	bl	80080bc <USBD_LL_ClearStallEP>
 80079e0:	e7ec      	b.n	80079bc <USBD_StdEPReq+0xb4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079e2:	066b      	lsls	r3, r5, #25
 80079e4:	d09a      	beq.n	800791c <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 80079e6:	4629      	mov	r1, r5
 80079e8:	f000 fb5a 	bl	80080a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079ec:	4620      	mov	r0, r4
 80079ee:	2180      	movs	r1, #128	; 0x80
 80079f0:	f000 fb56 	bl	80080a0 <USBD_LL_StallEP>
 80079f4:	e79a      	b.n	800792c <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079f6:	0668      	lsls	r0, r5, #25
 80079f8:	d190      	bne.n	800791c <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 80079fa:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079fc:	0611      	lsls	r1, r2, #24
 80079fe:	bf4c      	ite	mi
 8007a00:	f104 0114 	addmi.w	r1, r4, #20
 8007a04:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a08:	4620      	mov	r0, r4
 8007a0a:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8007a0c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a0e:	f000 f84d 	bl	8007aac <USBD_CtlSendData>
              break;
 8007a12:	e78b      	b.n	800792c <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d080      	beq.n	800791c <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a1a:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8007a1e:	1c5e      	adds	r6, r3, #1
 8007a20:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8007a24:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007a28:	e7ac      	b.n	8007984 <USBD_StdEPReq+0x7c>
                pep->status = 0x0000U;
 8007a2a:	6030      	str	r0, [r6, #0]
 8007a2c:	e7b3      	b.n	8007996 <USBD_StdEPReq+0x8e>
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f000 fb36 	bl	80080a0 <USBD_LL_StallEP>
 8007a34:	e7c2      	b.n	80079bc <USBD_StdEPReq+0xb4>
 8007a36:	bf00      	nop

08007a38 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8007a38:	780b      	ldrb	r3, [r1, #0]
 8007a3a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a3c:	784b      	ldrb	r3, [r1, #1]
 8007a3e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a40:	78ca      	ldrb	r2, [r1, #3]
 8007a42:	788b      	ldrb	r3, [r1, #2]
 8007a44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007a48:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a4a:	794a      	ldrb	r2, [r1, #5]
 8007a4c:	790b      	ldrb	r3, [r1, #4]
 8007a4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007a52:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a54:	79ca      	ldrb	r2, [r1, #7]
 8007a56:	798b      	ldrb	r3, [r1, #6]
 8007a58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007a5c:	80c3      	strh	r3, [r0, #6]
}
 8007a5e:	4770      	bx	lr

08007a60 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8007a60:	b308      	cbz	r0, 8007aa6 <USBD_GetString+0x46>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8007a62:	7803      	ldrb	r3, [r0, #0]
{
 8007a64:	b470      	push	{r4, r5, r6}
  while (*buf != '\0')
 8007a66:	b1fb      	cbz	r3, 8007aa8 <USBD_GetString+0x48>
 8007a68:	4604      	mov	r4, r0
 8007a6a:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 8007a6e:	19a3      	adds	r3, r4, r6
  while (*buf != '\0')
 8007a70:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	d1f9      	bne.n	8007a6e <USBD_GetString+0xe>
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	005b      	lsls	r3, r3, #1
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a7e:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007a80:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007a82:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a84:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8007a86:	7804      	ldrb	r4, [r0, #0]
 8007a88:	b15c      	cbz	r4, 8007aa2 <USBD_GetString+0x42>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a8a:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8007a8c:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	b2d2      	uxtb	r2, r2
 8007a92:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8007a94:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8007a96:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8007a9a:	3302      	adds	r3, #2
 8007a9c:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	d1f5      	bne.n	8007a8e <USBD_GetString+0x2e>
}
 8007aa2:	bc70      	pop	{r4, r5, r6}
 8007aa4:	4770      	bx	lr
 8007aa6:	4770      	bx	lr
  while (*buf != '\0')
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e7e8      	b.n	8007a7e <USBD_GetString+0x1e>

08007aac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ab0:	2502      	movs	r5, #2
{
 8007ab2:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8007ab4:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ab8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007aba:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007abe:	f000 fb2d 	bl	800811c <USBD_LL_Transmit>

  return USBD_OK;
}
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	bd38      	pop	{r3, r4, r5, pc}
 8007ac6:	bf00      	nop

08007ac8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	460c      	mov	r4, r1
 8007acc:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	f000 fb23 	bl	800811c <USBD_LL_Transmit>

  return USBD_OK;
}
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	bf00      	nop

08007adc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007adc:	b510      	push	{r4, lr}
 8007ade:	460c      	mov	r4, r1
 8007ae0:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4622      	mov	r2, r4
 8007ae6:	f000 fb27 	bl	8008138 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007aea:	2000      	movs	r0, #0
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	bf00      	nop

08007af0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007af0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007af2:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007af4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007af6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007afa:	4619      	mov	r1, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	f000 fb0d 	bl	800811c <USBD_LL_Transmit>

  return USBD_OK;
}
 8007b02:	2000      	movs	r0, #0
 8007b04:	bd08      	pop	{r3, pc}
 8007b06:	bf00      	nop

08007b08 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b08:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b0a:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b0c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b0e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b12:	4619      	mov	r1, r3
 8007b14:	461a      	mov	r2, r3
 8007b16:	f000 fb0f 	bl	8008138 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	bd08      	pop	{r3, pc}
 8007b1e:	bf00      	nop

08007b20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

	// This is a bit hackey, but we don't want to register the USB sound device, just the MIDI device.
	// So we register that class then return.

  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b22:	2200      	movs	r2, #0
 8007b24:	490a      	ldr	r1, [pc, #40]	; (8007b50 <MX_USB_DEVICE_Init+0x30>)
 8007b26:	480b      	ldr	r0, [pc, #44]	; (8007b54 <MX_USB_DEVICE_Init+0x34>)
 8007b28:	f7ff fbf0 	bl	800730c <USBD_Init>
 8007b2c:	b960      	cbnz	r0, 8007b48 <MX_USB_DEVICE_Init+0x28>
  {
	Error_Handler();
  }

	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8007b2e:	490a      	ldr	r1, [pc, #40]	; (8007b58 <MX_USB_DEVICE_Init+0x38>)
 8007b30:	4808      	ldr	r0, [pc, #32]	; (8007b54 <MX_USB_DEVICE_Init+0x34>)
 8007b32:	f7ff fc01 	bl	8007338 <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8007b36:	4909      	ldr	r1, [pc, #36]	; (8007b5c <MX_USB_DEVICE_Init+0x3c>)
 8007b38:	4806      	ldr	r0, [pc, #24]	; (8007b54 <MX_USB_DEVICE_Init+0x34>)
 8007b3a:	f7ff fbdf 	bl	80072fc <USBD_MIDI_RegisterInterface>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */


  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	USBD_Start(&hUsbDeviceFS);
 8007b42:	4804      	ldr	r0, [pc, #16]	; (8007b54 <MX_USB_DEVICE_Init+0x34>)
 8007b44:	f7ff bc00 	b.w	8007348 <USBD_Start>
	Error_Handler();
 8007b48:	f7fb fcde 	bl	8003508 <Error_Handler>
 8007b4c:	e7ef      	b.n	8007b2e <MX_USB_DEVICE_Init+0xe>
 8007b4e:	bf00      	nop
 8007b50:	200000b8 	.word	0x200000b8
 8007b54:	200003d8 	.word	0x200003d8
 8007b58:	20000018 	.word	0x20000018
 8007b5c:	20000108 	.word	0x20000108

08007b60 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b60:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8007b62:	4801      	ldr	r0, [pc, #4]	; (8007b68 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b64:	800b      	strh	r3, [r1, #0]
}
 8007b66:	4770      	bx	lr
 8007b68:	200000d4 	.word	0x200000d4

08007b6c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b6c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8007b6e:	4801      	ldr	r0, [pc, #4]	; (8007b74 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8007b70:	800b      	strh	r3, [r1, #0]
}
 8007b72:	4770      	bx	lr
 8007b74:	200000e8 	.word	0x200000e8

08007b78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b78:	2300      	movs	r3, #0
 8007b7a:	b4f0      	push	{r4, r5, r6, r7}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007b7c:	461f      	mov	r7, r3
 8007b7e:	0052      	lsls	r2, r2, #1
 8007b80:	1c4e      	adds	r6, r1, #1
    if (((value >> 28)) < 0xA)
 8007b82:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8007b86:	ea4f 7410 	mov.w	r4, r0, lsr #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b8a:	f104 0530 	add.w	r5, r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b8e:	bf2a      	itet	cs
 8007b90:	3437      	addcs	r4, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b92:	54cd      	strbcc	r5, [r1, r3]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b94:	54cc      	strbcs	r4, [r1, r3]
    pbuf[2 * idx + 1] = 0;
 8007b96:	54f7      	strb	r7, [r6, r3]
 8007b98:	3302      	adds	r3, #2
  for (idx = 0; idx < len; idx++)
 8007b9a:	429a      	cmp	r2, r3
    value = value << 4;
 8007b9c:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8007ba0:	d1ef      	bne.n	8007b82 <IntToUnicode+0xa>
  }
}
 8007ba2:	bcf0      	pop	{r4, r5, r6, r7}
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop

08007ba8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8007ba8:	221a      	movs	r2, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007baa:	480b      	ldr	r0, [pc, #44]	; (8007bd8 <USBD_FS_SerialStrDescriptor+0x30>)
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bac:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bae:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 8007bb0:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8007bb2:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 8007bb4:	18c0      	adds	r0, r0, r3
 8007bb6:	d101      	bne.n	8007bbc <USBD_FS_SerialStrDescriptor+0x14>
}
 8007bb8:	4809      	ldr	r0, [pc, #36]	; (8007be0 <USBD_FS_SerialStrDescriptor+0x38>)
 8007bba:	4770      	bx	lr
{
 8007bbc:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bc0:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bc2:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bc4:	4908      	ldr	r1, [pc, #32]	; (8007be8 <USBD_FS_SerialStrDescriptor+0x40>)
 8007bc6:	f7ff ffd7 	bl	8007b78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bca:	4620      	mov	r0, r4
 8007bcc:	2204      	movs	r2, #4
 8007bce:	4907      	ldr	r1, [pc, #28]	; (8007bec <USBD_FS_SerialStrDescriptor+0x44>)
 8007bd0:	f7ff ffd2 	bl	8007b78 <IntToUnicode>
}
 8007bd4:	4802      	ldr	r0, [pc, #8]	; (8007be0 <USBD_FS_SerialStrDescriptor+0x38>)
 8007bd6:	bd10      	pop	{r4, pc}
 8007bd8:	1ffff7e8 	.word	0x1ffff7e8
 8007bdc:	1ffff7f0 	.word	0x1ffff7f0
 8007be0:	200000ec 	.word	0x200000ec
 8007be4:	1ffff7ec 	.word	0x1ffff7ec
 8007be8:	200000ee 	.word	0x200000ee
 8007bec:	200000fe 	.word	0x200000fe

08007bf0 <USBD_FS_ManufacturerStrDescriptor>:
{
 8007bf0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bf2:	4c04      	ldr	r4, [pc, #16]	; (8007c04 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8007bf4:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bf6:	4804      	ldr	r0, [pc, #16]	; (8007c08 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	f7ff ff31 	bl	8007a60 <USBD_GetString>
}
 8007bfe:	4620      	mov	r0, r4
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	bf00      	nop
 8007c04:	2000069c 	.word	0x2000069c
 8007c08:	080081f4 	.word	0x080081f4

08007c0c <USBD_FS_ProductStrDescriptor>:
{
 8007c0c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c0e:	4c04      	ldr	r4, [pc, #16]	; (8007c20 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8007c10:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c12:	4804      	ldr	r0, [pc, #16]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x18>)
 8007c14:	4621      	mov	r1, r4
 8007c16:	f7ff ff23 	bl	8007a60 <USBD_GetString>
}
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	2000069c 	.word	0x2000069c
 8007c24:	08008208 	.word	0x08008208

08007c28 <USBD_FS_ConfigStrDescriptor>:
{
 8007c28:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c2a:	4c04      	ldr	r4, [pc, #16]	; (8007c3c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8007c2c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c2e:	4804      	ldr	r0, [pc, #16]	; (8007c40 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007c30:	4621      	mov	r1, r4
 8007c32:	f7ff ff15 	bl	8007a60 <USBD_GetString>
}
 8007c36:	4620      	mov	r0, r4
 8007c38:	bd10      	pop	{r4, pc}
 8007c3a:	bf00      	nop
 8007c3c:	2000069c 	.word	0x2000069c
 8007c40:	0800821c 	.word	0x0800821c

08007c44 <USBD_FS_InterfaceStrDescriptor>:
{
 8007c44:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c46:	4c04      	ldr	r4, [pc, #16]	; (8007c58 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8007c48:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c4a:	4804      	ldr	r0, [pc, #16]	; (8007c5c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	f7ff ff07 	bl	8007a60 <USBD_GetString>
}
 8007c52:	4620      	mov	r0, r4
 8007c54:	bd10      	pop	{r4, pc}
 8007c56:	bf00      	nop
 8007c58:	2000069c 	.word	0x2000069c
 8007c5c:	0800822c 	.word	0x0800822c

08007c60 <MIDI_DataTx>:

	return 0;
}

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 8007c60:	b508      	push	{r3, lr}
  USBD_MIDI_SendPacket(msg, length);
 8007c62:	b2c9      	uxtb	r1, r1
 8007c64:	f7ff fb2c 	bl	80072c0 <USBD_MIDI_SendPacket>
  return USBD_OK;
}
 8007c68:	2000      	movs	r0, #0
 8007c6a:	bd08      	pop	{r3, pc}

08007c6c <sysex_send_message>:
void sysex_send_message(uint8_t* buffer, uint8_t length){
 8007c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while(buff_ptr < length + buffer){
 8007c70:	1844      	adds	r4, r0, r1
 8007c72:	42a0      	cmp	r0, r4
 8007c74:	d243      	bcs.n	8007cfe <sysex_send_message+0x92>
	uint8_t *assembly_ptr = sysex_tx_assembly_buffer;
 8007c76:	4925      	ldr	r1, [pc, #148]	; (8007d0c <sysex_send_message+0xa0>)
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_SINGLE_BYTE;
 8007c78:	f04f 0905 	mov.w	r9, #5
	uint8_t *assembly_ptr = sysex_tx_assembly_buffer;
 8007c7c:	460a      	mov	r2, r1
			*assembly_ptr++ = 0xFF;
 8007c7e:	27ff      	movs	r7, #255	; 0xff
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_TWO_BYTES;
 8007c80:	f04f 0e06 	mov.w	lr, #6
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_THREE_BYTES;
 8007c84:	f04f 0807 	mov.w	r8, #7
			assembly_ptr[0] = CIN_SYSEX_STARTS_OR_CONTINUES;
 8007c88:	f04f 0c04 	mov.w	ip, #4
 8007c8c:	e011      	b.n	8007cb2 <sysex_send_message+0x46>
		} else if (data_to_go == 3) {
 8007c8e:	d032      	beq.n	8007cf6 <sysex_send_message+0x8a>
		} else if (data_to_go == 2) {
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d026      	beq.n	8007ce2 <sysex_send_message+0x76>
		} else if (data_to_go == 1) {
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10a      	bne.n	8007cae <sysex_send_message+0x42>
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_SINGLE_BYTE;
 8007c98:	f882 9000 	strb.w	r9, [r2]
			memcpy(assembly_ptr+1, buff_ptr, 1);
 8007c9c:	f810 3b01 	ldrb.w	r3, [r0], #1
			*assembly_ptr++ = 0xFF;
 8007ca0:	3204      	adds	r2, #4
			*assembly_ptr++ = 0xFF;
 8007ca2:	f802 7c02 	strb.w	r7, [r2, #-2]
			memcpy(assembly_ptr+1, buff_ptr, 1);
 8007ca6:	f802 3c03 	strb.w	r3, [r2, #-3]
			*assembly_ptr++ = 0xFF;
 8007caa:	f802 7c01 	strb.w	r7, [r2, #-1]
	while(buff_ptr < length + buffer){
 8007cae:	42a0      	cmp	r0, r4
 8007cb0:	d210      	bcs.n	8007cd4 <sysex_send_message+0x68>
		uint8_t data_to_go = length + buffer - buff_ptr;
 8007cb2:	1a23      	subs	r3, r4, r0
 8007cb4:	b2db      	uxtb	r3, r3
		if(data_to_go > 3){
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d9e9      	bls.n	8007c8e <sysex_send_message+0x22>
			assembly_ptr[0] = CIN_SYSEX_STARTS_OR_CONTINUES;
 8007cba:	4613      	mov	r3, r2
 8007cbc:	f803 cb01 	strb.w	ip, [r3], #1
			memcpy(assembly_ptr+1, buff_ptr, 3);
 8007cc0:	8806      	ldrh	r6, [r0, #0]
 8007cc2:	7885      	ldrb	r5, [r0, #2]
			buff_ptr += 3;
 8007cc4:	3003      	adds	r0, #3
	while(buff_ptr < length + buffer){
 8007cc6:	42a0      	cmp	r0, r4
			memcpy(assembly_ptr+1, buff_ptr, 3);
 8007cc8:	f8a2 6001 	strh.w	r6, [r2, #1]
 8007ccc:	709d      	strb	r5, [r3, #2]
			assembly_ptr += 4;
 8007cce:	f102 0204 	add.w	r2, r2, #4
	while(buff_ptr < length + buffer){
 8007cd2:	d3ee      	bcc.n	8007cb2 <sysex_send_message+0x46>
}
 8007cd4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cd8:	1a51      	subs	r1, r2, r1
  USBD_MIDI_SendPacket(msg, length);
 8007cda:	480c      	ldr	r0, [pc, #48]	; (8007d0c <sysex_send_message+0xa0>)
 8007cdc:	b2c9      	uxtb	r1, r1
 8007cde:	f7ff baef 	b.w	80072c0 <USBD_MIDI_SendPacket>
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_TWO_BYTES;
 8007ce2:	f882 e000 	strb.w	lr, [r2]
			memcpy(assembly_ptr+1, buff_ptr, 2);
 8007ce6:	f830 3b02 	ldrh.w	r3, [r0], #2
			*assembly_ptr++ = 0xFF;
 8007cea:	3204      	adds	r2, #4
 8007cec:	f802 7c01 	strb.w	r7, [r2, #-1]
			memcpy(assembly_ptr+1, buff_ptr, 2);
 8007cf0:	f822 3c03 	strh.w	r3, [r2, #-3]
			*assembly_ptr++ = 0xFF;
 8007cf4:	e7db      	b.n	8007cae <sysex_send_message+0x42>
			assembly_ptr[0] = CIN_SYSEX_ENDS_WITH_FOLLOWING_THREE_BYTES;
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	f803 8b01 	strb.w	r8, [r3], #1
 8007cfc:	e7e0      	b.n	8007cc0 <sysex_send_message+0x54>
	while(buff_ptr < length + buffer){
 8007cfe:	2100      	movs	r1, #0
}
 8007d00:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USBD_MIDI_SendPacket(msg, length);
 8007d04:	4801      	ldr	r0, [pc, #4]	; (8007d0c <sysex_send_message+0xa0>)
 8007d06:	f7ff badb 	b.w	80072c0 <USBD_MIDI_SendPacket>
 8007d0a:	bf00      	nop
 8007d0c:	200008dc 	.word	0x200008dc

08007d10 <sysex_erase_settings.part.0>:
void sysex_erase_settings(uint8_t* data_packet_start){
 8007d10:	b538      	push	{r3, r4, r5, lr}
	flash_settings_erase();
 8007d12:	f7fb fa87 	bl	8003224 <flash_settings_erase>
	midi_msg_tx_buffer[0] = SYSEX_START;
 8007d16:	25f0      	movs	r5, #240	; 0xf0
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 8007d18:	247d      	movs	r4, #125	; 0x7d
	midi_msg_tx_buffer[3] = SYSEX_END;
 8007d1a:	23f7      	movs	r3, #247	; 0xf7
	midi_msg_tx_buffer[2] = SYSEX_RSP_ERASE_FLASH;
 8007d1c:	2235      	movs	r2, #53	; 0x35
	midi_msg_tx_buffer[0] = SYSEX_START;
 8007d1e:	4805      	ldr	r0, [pc, #20]	; (8007d34 <sysex_erase_settings.part.0+0x24>)
	sysex_send_message(midi_msg_tx_buffer, 4);
 8007d20:	2104      	movs	r1, #4
	midi_msg_tx_buffer[0] = SYSEX_START;
 8007d22:	7005      	strb	r5, [r0, #0]
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 8007d24:	7044      	strb	r4, [r0, #1]
	midi_msg_tx_buffer[2] = SYSEX_RSP_ERASE_FLASH;
 8007d26:	7082      	strb	r2, [r0, #2]
	midi_msg_tx_buffer[3] = SYSEX_END;
 8007d28:	70c3      	strb	r3, [r0, #3]
}
 8007d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sysex_send_message(midi_msg_tx_buffer, 4);
 8007d2e:	f7ff bf9d 	b.w	8007c6c <sysex_send_message>
 8007d32:	bf00      	nop
 8007d34:	2000089c 	.word	0x2000089c

08007d38 <sysex_write_flash>:
void sysex_write_flash(uint8_t* data_packet_start){
 8007d38:	b530      	push	{r4, r5, lr}
	uint32_t flash_byte_offset = ( (data_packet_start[0] << 7) | data_packet_start[1]) * 16;
 8007d3a:	7802      	ldrb	r2, [r0, #0]
 8007d3c:	7841      	ldrb	r1, [r0, #1]
void sysex_write_flash(uint8_t* data_packet_start){
 8007d3e:	b085      	sub	sp, #20
	uint32_t flash_byte_offset = ( (data_packet_start[0] << 7) | data_packet_start[1]) * 16;
 8007d40:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 8007d44:	4603      	mov	r3, r0
 8007d46:	0109      	lsls	r1, r1, #4
	for (int i=0; i<16; i++){
 8007d48:	f10d 30ff 	add.w	r0, sp, #4294967295
 8007d4c:	f10d 050f 	add.w	r5, sp, #15
		reassembled_array[i] = data_packet_start[2*i] << 4 | data_packet_start[2*i + 1];
 8007d50:	789c      	ldrb	r4, [r3, #2]
 8007d52:	78da      	ldrb	r2, [r3, #3]
 8007d54:	3302      	adds	r3, #2
 8007d56:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8007d5a:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (int i=0; i<16; i++){
 8007d5e:	4285      	cmp	r5, r0
 8007d60:	d1f6      	bne.n	8007d50 <sysex_write_flash+0x18>
	flash_settings_write(reassembled_array, flash_byte_offset);
 8007d62:	4668      	mov	r0, sp
 8007d64:	f7fb fa78 	bl	8003258 <flash_settings_write>
	midi_msg_tx_buffer[0] = SYSEX_START;
 8007d68:	25f0      	movs	r5, #240	; 0xf0
	midi_msg_tx_buffer[2] = SYSEX_RSP_WRITE_FLASH;
 8007d6a:	2237      	movs	r2, #55	; 0x37
	midi_msg_tx_buffer[3] = SYSEX_END;
 8007d6c:	23f7      	movs	r3, #247	; 0xf7
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 8007d6e:	247d      	movs	r4, #125	; 0x7d
	midi_msg_tx_buffer[0] = SYSEX_START;
 8007d70:	4804      	ldr	r0, [pc, #16]	; (8007d84 <sysex_write_flash+0x4c>)
	sysex_send_message(midi_msg_tx_buffer, 4);
 8007d72:	2104      	movs	r1, #4
	midi_msg_tx_buffer[0] = SYSEX_START;
 8007d74:	7005      	strb	r5, [r0, #0]
	midi_msg_tx_buffer[1] = MIDI_MANUF_ID;
 8007d76:	7044      	strb	r4, [r0, #1]
	midi_msg_tx_buffer[2] = SYSEX_RSP_WRITE_FLASH;
 8007d78:	7082      	strb	r2, [r0, #2]
	midi_msg_tx_buffer[3] = SYSEX_END;
 8007d7a:	70c3      	strb	r3, [r0, #3]
	sysex_send_message(midi_msg_tx_buffer, 4);
 8007d7c:	f7ff ff76 	bl	8007c6c <sysex_send_message>
}
 8007d80:	b005      	add	sp, #20
 8007d82:	bd30      	pop	{r4, r5, pc}
 8007d84:	2000089c 	.word	0x2000089c

08007d88 <process_sysex_message>:
void process_sysex_message(void){
 8007d88:	b510      	push	{r4, lr}
	if(sysex_rx_buffer[0] != SYSEX_START ||
 8007d8a:	4819      	ldr	r0, [pc, #100]	; (8007df0 <process_sysex_message+0x68>)
 8007d8c:	4c19      	ldr	r4, [pc, #100]	; (8007df4 <process_sysex_message+0x6c>)
 8007d8e:	7803      	ldrb	r3, [r0, #0]
 8007d90:	2bf0      	cmp	r3, #240	; 0xf0
 8007d92:	d105      	bne.n	8007da0 <process_sysex_message+0x18>
			sysex_rx_buffer[sysex_rx_counter -1] != SYSEX_END){
 8007d94:	7823      	ldrb	r3, [r4, #0]
 8007d96:	4403      	add	r3, r0
	if(sysex_rx_buffer[0] != SYSEX_START ||
 8007d98:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d9c:	2bf7      	cmp	r3, #247	; 0xf7
 8007d9e:	d002      	beq.n	8007da6 <process_sysex_message+0x1e>
	sysex_rx_counter = 0;
 8007da0:	2300      	movs	r3, #0
 8007da2:	7023      	strb	r3, [r4, #0]
}
 8007da4:	bd10      	pop	{r4, pc}
	if(pSysexHead->manuf_id != MIDI_MANUF_ID){
 8007da6:	7843      	ldrb	r3, [r0, #1]
 8007da8:	2b7d      	cmp	r3, #125	; 0x7d
 8007daa:	d1f9      	bne.n	8007da0 <process_sysex_message+0x18>
	switch(pSysexHead->msg_cmd){
 8007dac:	7883      	ldrb	r3, [r0, #2]
 8007dae:	2b36      	cmp	r3, #54	; 0x36
 8007db0:	d00c      	beq.n	8007dcc <process_sysex_message+0x44>
 8007db2:	2b3c      	cmp	r3, #60	; 0x3c
 8007db4:	d00e      	beq.n	8007dd4 <process_sysex_message+0x4c>
 8007db6:	2b34      	cmp	r3, #52	; 0x34
 8007db8:	d1f2      	bne.n	8007da0 <process_sysex_message+0x18>
	if(data_packet_start[0] != 0x42 || data_packet_start[1] != 0x24){
 8007dba:	78c3      	ldrb	r3, [r0, #3]
 8007dbc:	2b42      	cmp	r3, #66	; 0x42
 8007dbe:	d1ef      	bne.n	8007da0 <process_sysex_message+0x18>
 8007dc0:	7903      	ldrb	r3, [r0, #4]
 8007dc2:	2b24      	cmp	r3, #36	; 0x24
 8007dc4:	d1ec      	bne.n	8007da0 <process_sysex_message+0x18>
 8007dc6:	f7ff ffa3 	bl	8007d10 <sysex_erase_settings.part.0>
 8007dca:	e7e9      	b.n	8007da0 <process_sysex_message+0x18>
		sysex_write_flash(&(pSysexHead->start_parameters));
 8007dcc:	3003      	adds	r0, #3
 8007dce:	f7ff ffb3 	bl	8007d38 <sysex_write_flash>
		break;
 8007dd2:	e7e5      	b.n	8007da0 <process_sysex_message+0x18>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007dd4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007dd8:	4907      	ldr	r1, [pc, #28]	; (8007df8 <process_sysex_message+0x70>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007dda:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <process_sysex_message+0x74>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007ddc:	68ca      	ldr	r2, [r1, #12]
 8007dde:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60cb      	str	r3, [r1, #12]
 8007de6:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007dea:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007dec:	e7fd      	b.n	8007dea <process_sysex_message+0x62>
 8007dee:	bf00      	nop
 8007df0:	2000093c 	.word	0x2000093c
 8007df4:	20000145 	.word	0x20000145
 8007df8:	e000ed00 	.word	0xe000ed00
 8007dfc:	05fa0004 	.word	0x05fa0004

08007e00 <MIDI_DataRx>:
	while(processed_data_cnt < length){
 8007e00:	2900      	cmp	r1, #0
 8007e02:	d072      	beq.n	8007eea <MIDI_DataRx+0xea>
{
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t processed_data_cnt = 0;
 8007e08:	2400      	movs	r4, #0
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	4689      	mov	r9, r1
	sysex_rx_counter = 0;
 8007e0e:	4627      	mov	r7, r4
 8007e10:	4d37      	ldr	r5, [pc, #220]	; (8007ef0 <MIDI_DataRx+0xf0>)
			if(pGlobalSettings[GLOBAL_SETTINGS_REALTIME_PASS]){
 8007e12:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8007ef4 <MIDI_DataRx+0xf4>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8007e16:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8007ef8 <MIDI_DataRx+0xf8>
		uint8_t usb_msg_cin = msg[processed_data_cnt] & 0xF;
 8007e1a:	5d33      	ldrb	r3, [r6, r4]
		if(sysex_rx_counter != 0){
 8007e1c:	782a      	ldrb	r2, [r5, #0]
		uint8_t usb_msg_cin = msg[processed_data_cnt] & 0xF;
 8007e1e:	f003 030f 	and.w	r3, r3, #15
					usb_msg_cin != CIN_SYSEX_ENDS_WITH_FOLLOWING_TWO_BYTES &&
 8007e22:	3b04      	subs	r3, #4
		if(sysex_rx_counter != 0){
 8007e24:	b11a      	cbz	r2, 8007e2e <MIDI_DataRx+0x2e>
			if(usb_msg_cin != CIN_SYSEX_STARTS_OR_CONTINUES &&
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	2a03      	cmp	r2, #3
	sysex_rx_counter = 0;
 8007e2a:	bf88      	it	hi
 8007e2c:	702f      	strbhi	r7, [r5, #0]
		switch(usb_msg_cin){
 8007e2e:	2b0b      	cmp	r3, #11
 8007e30:	d807      	bhi.n	8007e42 <MIDI_DataRx+0x42>
 8007e32:	e8df f003 	tbb	[pc, r3]
 8007e36:	2d39      	.short	0x2d39
 8007e38:	06061c48 	.word	0x06061c48
 8007e3c:	06060606 	.word	0x06060606
 8007e40:	0d06      	.short	0x0d06
			processed_data_cnt = length;
 8007e42:	fa5f f489 	uxtb.w	r4, r9
	while(processed_data_cnt < length){
 8007e46:	454c      	cmp	r4, r9
 8007e48:	d3e7      	bcc.n	8007e1a <MIDI_DataRx+0x1a>
}
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if(pGlobalSettings[GLOBAL_SETTINGS_REALTIME_PASS]){
 8007e50:	f8d8 3000 	ldr.w	r3, [r8]
 8007e54:	785b      	ldrb	r3, [r3, #1]
 8007e56:	b13b      	cbz	r3, 8007e68 <MIDI_DataRx+0x68>
				if(msg[processed_data_cnt+1] == 0xF8 || msg[processed_data_cnt+1] == 0xFA ||msg[processed_data_cnt+1] == 0xFC){
 8007e58:	1933      	adds	r3, r6, r4
 8007e5a:	7858      	ldrb	r0, [r3, #1]
 8007e5c:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 8007e60:	2bf8      	cmp	r3, #248	; 0xf8
 8007e62:	d03d      	beq.n	8007ee0 <MIDI_DataRx+0xe0>
 8007e64:	28fc      	cmp	r0, #252	; 0xfc
 8007e66:	d03b      	beq.n	8007ee0 <MIDI_DataRx+0xe0>
			processed_data_cnt += 2;
 8007e68:	3402      	adds	r4, #2
 8007e6a:	b2e4      	uxtb	r4, r4
			break;
 8007e6c:	e7eb      	b.n	8007e46 <MIDI_DataRx+0x46>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8007e6e:	1c62      	adds	r2, r4, #1
 8007e70:	782b      	ldrb	r3, [r5, #0]
 8007e72:	18b1      	adds	r1, r6, r2
 8007e74:	5ab0      	ldrh	r0, [r6, r2]
 8007e76:	7889      	ldrb	r1, [r1, #2]
 8007e78:	eb03 020a 	add.w	r2, r3, sl
 8007e7c:	f823 000a 	strh.w	r0, [r3, sl]
			processed_data_cnt += 4;
 8007e80:	3404      	adds	r4, #4
			sysex_rx_counter += 3;
 8007e82:	3303      	adds	r3, #3
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8007e84:	7091      	strb	r1, [r2, #2]
			processed_data_cnt += 4;
 8007e86:	b2e4      	uxtb	r4, r4
			sysex_rx_counter += 3;
 8007e88:	702b      	strb	r3, [r5, #0]
			process_sysex_message();
 8007e8a:	f7ff ff7d 	bl	8007d88 <process_sysex_message>
			break;
 8007e8e:	e7da      	b.n	8007e46 <MIDI_DataRx+0x46>
			sysex_rx_buffer[sysex_rx_counter] = msg[processed_data_cnt + 1];
 8007e90:	782b      	ldrb	r3, [r5, #0]
 8007e92:	1932      	adds	r2, r6, r4
 8007e94:	7851      	ldrb	r1, [r2, #1]
			processed_data_cnt += 2;
 8007e96:	3402      	adds	r4, #2
			sysex_rx_counter++;
 8007e98:	1c5a      	adds	r2, r3, #1
			sysex_rx_buffer[sysex_rx_counter] = msg[processed_data_cnt + 1];
 8007e9a:	f80a 1003 	strb.w	r1, [sl, r3]
			sysex_rx_counter++;
 8007e9e:	702a      	strb	r2, [r5, #0]
			processed_data_cnt += 2;
 8007ea0:	b2e4      	uxtb	r4, r4
			process_sysex_message();
 8007ea2:	f7ff ff71 	bl	8007d88 <process_sysex_message>
			break;
 8007ea6:	e7ce      	b.n	8007e46 <MIDI_DataRx+0x46>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8007ea8:	1c62      	adds	r2, r4, #1
 8007eaa:	782b      	ldrb	r3, [r5, #0]
 8007eac:	5ab0      	ldrh	r0, [r6, r2]
 8007eae:	18b1      	adds	r1, r6, r2
 8007eb0:	7889      	ldrb	r1, [r1, #2]
 8007eb2:	eb03 020a 	add.w	r2, r3, sl
 8007eb6:	f823 000a 	strh.w	r0, [r3, sl]
			processed_data_cnt += 4;
 8007eba:	3404      	adds	r4, #4
			sysex_rx_counter += 3;
 8007ebc:	3303      	adds	r3, #3
			processed_data_cnt += 4;
 8007ebe:	b2e4      	uxtb	r4, r4
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 3);
 8007ec0:	7091      	strb	r1, [r2, #2]
			sysex_rx_counter += 3;
 8007ec2:	702b      	strb	r3, [r5, #0]
			break;
 8007ec4:	e7bf      	b.n	8007e46 <MIDI_DataRx+0x46>
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 2);
 8007ec6:	782b      	ldrb	r3, [r5, #0]
 8007ec8:	1932      	adds	r2, r6, r4
 8007eca:	f8b2 1001 	ldrh.w	r1, [r2, #1]
			processed_data_cnt += 3;
 8007ece:	3403      	adds	r4, #3
			sysex_rx_counter += 2;
 8007ed0:	1c9a      	adds	r2, r3, #2
			memcpy(sysex_rx_buffer + sysex_rx_counter, msg + processed_data_cnt + 1, 2);
 8007ed2:	f823 100a 	strh.w	r1, [r3, sl]
			sysex_rx_counter += 2;
 8007ed6:	702a      	strb	r2, [r5, #0]
			processed_data_cnt += 3;
 8007ed8:	b2e4      	uxtb	r4, r4
			process_sysex_message();
 8007eda:	f7ff ff55 	bl	8007d88 <process_sysex_message>
			break;
 8007ede:	e7b2      	b.n	8007e46 <MIDI_DataRx+0x46>
			processed_data_cnt += 2;
 8007ee0:	3402      	adds	r4, #2
					midiCmd_send_byte_serial(msg[processed_data_cnt+1]);
 8007ee2:	f7fb fb4f 	bl	8003584 <midiCmd_send_byte_serial>
			processed_data_cnt += 2;
 8007ee6:	b2e4      	uxtb	r4, r4
			break;
 8007ee8:	e7ad      	b.n	8007e46 <MIDI_DataRx+0x46>
}
 8007eea:	2000      	movs	r0, #0
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	20000145 	.word	0x20000145
 8007ef4:	20000000 	.word	0x20000000
 8007ef8:	2000093c 	.word	0x2000093c

08007efc <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8007efc:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <HAL_PCD_MspInit+0x4c>)
 8007efe:	6802      	ldr	r2, [r0, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d000      	beq.n	8007f06 <HAL_PCD_MspInit+0xa>
 8007f04:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007f06:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8007f0a:	69d8      	ldr	r0, [r3, #28]
{
 8007f0c:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 8007f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007f12:	61d8      	str	r0, [r3, #28]
 8007f14:	69db      	ldr	r3, [r3, #28]
{
 8007f16:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8007f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2102      	movs	r1, #2
    __HAL_RCC_USB_CLK_ENABLE();
 8007f20:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8007f22:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 8007f24:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 2, 0);
 8007f26:	f7fb fd29 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8007f2a:	2013      	movs	r0, #19
 8007f2c:	f7fb fd5e 	bl	80039ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8007f30:	2200      	movs	r2, #0
 8007f32:	2101      	movs	r1, #1
 8007f34:	2014      	movs	r0, #20
 8007f36:	f7fb fd21 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007f3a:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007f3c:	b003      	add	sp, #12
 8007f3e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007f42:	f7fb bd53 	b.w	80039ec <HAL_NVIC_EnableIRQ>
 8007f46:	bf00      	nop
 8007f48:	40005c00 	.word	0x40005c00

08007f4c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f4c:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8007f50:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8007f54:	f7ff ba10 	b.w	8007378 <USBD_LL_SetupStage>

08007f58 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f58:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007f5c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007f60:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8007f64:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8007f68:	f7ff ba34 	b.w	80073d4 <USBD_LL_DataOutStage>

08007f6c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f6c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8007f70:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f76:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8007f7a:	f7ff ba69 	b.w	8007450 <USBD_LL_DataInStage>
 8007f7e:	bf00      	nop

08007f80 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f80:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8007f84:	f7ff bb04 	b.w	8007590 <USBD_LL_SOF>

08007f88 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f88:	6883      	ldr	r3, [r0, #8]
{
 8007f8a:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f8c:	2b02      	cmp	r3, #2
{
 8007f8e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f90:	d001      	beq.n	8007f96 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007f92:	f7fb fab9 	bl	8003508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f96:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	f7ff fae0 	bl	8007560 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fa0:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8007fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fa8:	f7ff bab2 	b.w	8007510 <USBD_LL_Reset>

08007fac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fb0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8007fb4:	f7ff fad8 	bl	8007568 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fb8:	69a3      	ldr	r3, [r4, #24]
 8007fba:	b123      	cbz	r3, 8007fc6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fbc:	4a02      	ldr	r2, [pc, #8]	; (8007fc8 <HAL_PCD_SuspendCallback+0x1c>)
 8007fbe:	6913      	ldr	r3, [r2, #16]
 8007fc0:	f043 0306 	orr.w	r3, r3, #6
 8007fc4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fc6:	bd10      	pop	{r4, pc}
 8007fc8:	e000ed00 	.word	0xe000ed00

08007fcc <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fcc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8007fd0:	f7ff bad4 	b.w	800757c <USBD_LL_Resume>

08007fd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007fd8:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fda:	2108      	movs	r1, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007fdc:	2202      	movs	r2, #2
  hpcd_USB_FS.pData = pdev;
 8007fde:	4818      	ldr	r0, [pc, #96]	; (8008040 <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Instance = USB;
 8007fe0:	4d18      	ldr	r5, [pc, #96]	; (8008044 <USBD_LL_Init+0x70>)
  hpcd_USB_FS.pData = pdev;
 8007fe2:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007fe6:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fea:	e9c0 5100 	strd	r5, r1, [r0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007fee:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ff2:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ff4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007ff6:	f7fc fad3 	bl	80045a0 <HAL_PCD_Init>
 8007ffa:	b9e8      	cbnz	r0, 8008038 <USBD_LL_Init+0x64>
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */

  // Setup the PMA address areas for both control endpoints and the MIDI bulk endpoints
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2318      	movs	r3, #24
 8008000:	4611      	mov	r1, r2
 8008002:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008006:	f7fd fa51 	bl	80054ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800800a:	2358      	movs	r3, #88	; 0x58
 800800c:	2200      	movs	r2, #0
 800800e:	2180      	movs	r1, #128	; 0x80
 8008010:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008014:	f7fd fa4a 	bl	80054ac <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, (0x58 + 0x40));
 8008018:	2398      	movs	r3, #152	; 0x98
 800801a:	2200      	movs	r2, #0
 800801c:	2101      	movs	r1, #1
 800801e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008022:	f7fd fa43 	bl	80054ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, (0x58 + 0x40 + 0x40));
 8008026:	23d8      	movs	r3, #216	; 0xd8
 8008028:	2200      	movs	r2, #0
 800802a:	2181      	movs	r1, #129	; 0x81
 800802c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008030:	f7fd fa3c 	bl	80054ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
}
 8008034:	2000      	movs	r0, #0
 8008036:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8008038:	f7fb fa66 	bl	8003508 <Error_Handler>
 800803c:	e7de      	b.n	8007ffc <USBD_LL_Init+0x28>
 800803e:	bf00      	nop
 8008040:	2000097c 	.word	0x2000097c
 8008044:	40005c00 	.word	0x40005c00

08008048 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008048:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800804a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800804e:	f7fc fb23 	bl	8004698 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8008052:	2803      	cmp	r0, #3
 8008054:	bf96      	itet	ls
 8008056:	4b02      	ldrls	r3, [pc, #8]	; (8008060 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8008058:	2002      	movhi	r0, #2
 800805a:	5c18      	ldrbls	r0, [r3, r0]
}
 800805c:	bd08      	pop	{r3, pc}
 800805e:	bf00      	nop
 8008060:	0800823c 	.word	0x0800823c

08008064 <USBD_LL_OpenEP>:
{
 8008064:	b510      	push	{r4, lr}
 8008066:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008068:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 800806c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800806e:	4623      	mov	r3, r4
 8008070:	f7fd f90c 	bl	800528c <HAL_PCD_EP_Open>
  switch (hal_status)
 8008074:	2803      	cmp	r0, #3
 8008076:	bf96      	itet	ls
 8008078:	4b01      	ldrls	r3, [pc, #4]	; (8008080 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800807a:	2002      	movhi	r0, #2
 800807c:	5c18      	ldrbls	r0, [r3, r0]
}
 800807e:	bd10      	pop	{r4, pc}
 8008080:	0800823c 	.word	0x0800823c

08008084 <USBD_LL_CloseEP>:
{
 8008084:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008086:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800808a:	f7fd f933 	bl	80052f4 <HAL_PCD_EP_Close>
  switch (hal_status)
 800808e:	2803      	cmp	r0, #3
 8008090:	bf96      	itet	ls
 8008092:	4b02      	ldrls	r3, [pc, #8]	; (800809c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008094:	2002      	movhi	r0, #2
 8008096:	5c18      	ldrbls	r0, [r3, r0]
}
 8008098:	bd08      	pop	{r3, pc}
 800809a:	bf00      	nop
 800809c:	0800823c 	.word	0x0800823c

080080a0 <USBD_LL_StallEP>:
{
 80080a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80080a6:	f7fd f98b 	bl	80053c0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80080aa:	2803      	cmp	r0, #3
 80080ac:	bf96      	itet	ls
 80080ae:	4b02      	ldrls	r3, [pc, #8]	; (80080b8 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080b0:	2002      	movhi	r0, #2
 80080b2:	5c18      	ldrbls	r0, [r3, r0]
}
 80080b4:	bd08      	pop	{r3, pc}
 80080b6:	bf00      	nop
 80080b8:	0800823c 	.word	0x0800823c

080080bc <USBD_LL_ClearStallEP>:
{
 80080bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80080c2:	f7fd f9b9 	bl	8005438 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80080c6:	2803      	cmp	r0, #3
 80080c8:	bf96      	itet	ls
 80080ca:	4b02      	ldrls	r3, [pc, #8]	; (80080d4 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080cc:	2002      	movhi	r0, #2
 80080ce:	5c18      	ldrbls	r0, [r3, r0]
}
 80080d0:	bd08      	pop	{r3, pc}
 80080d2:	bf00      	nop
 80080d4:	0800823c 	.word	0x0800823c

080080d8 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80080d8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080da:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 80080de:	d406      	bmi.n	80080ee <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80080e4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80080e8:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 80080ec:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080ee:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80080f2:	3101      	adds	r1, #1
 80080f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80080f8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80080fc:	7888      	ldrb	r0, [r1, #2]
 80080fe:	4770      	bx	lr

08008100 <USBD_LL_SetUSBAddress>:
{
 8008100:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008102:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008106:	f7fd f8ad 	bl	8005264 <HAL_PCD_SetAddress>
  switch (hal_status)
 800810a:	2803      	cmp	r0, #3
 800810c:	bf96      	itet	ls
 800810e:	4b02      	ldrls	r3, [pc, #8]	; (8008118 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008110:	2002      	movhi	r0, #2
 8008112:	5c18      	ldrbls	r0, [r3, r0]
}
 8008114:	bd08      	pop	{r3, pc}
 8008116:	bf00      	nop
 8008118:	0800823c 	.word	0x0800823c

0800811c <USBD_LL_Transmit>:
{
 800811c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800811e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008122:	f7fd f92f 	bl	8005384 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8008126:	2803      	cmp	r0, #3
 8008128:	bf96      	itet	ls
 800812a:	4b02      	ldrls	r3, [pc, #8]	; (8008134 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800812c:	2002      	movhi	r0, #2
 800812e:	5c18      	ldrbls	r0, [r3, r0]
}
 8008130:	bd08      	pop	{r3, pc}
 8008132:	bf00      	nop
 8008134:	0800823c 	.word	0x0800823c

08008138 <USBD_LL_PrepareReceive>:
{
 8008138:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800813a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800813e:	f7fd f909 	bl	8005354 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8008142:	2803      	cmp	r0, #3
 8008144:	bf96      	itet	ls
 8008146:	4b02      	ldrls	r3, [pc, #8]	; (8008150 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008148:	2002      	movhi	r0, #2
 800814a:	5c18      	ldrbls	r0, [r3, r0]
}
 800814c:	bd08      	pop	{r3, pc}
 800814e:	bf00      	nop
 8008150:	0800823c 	.word	0x0800823c

08008154 <HAL_PCDEx_SetConnectionState>:
}
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop

08008158 <__libc_init_array>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	2600      	movs	r6, #0
 800815c:	4d0c      	ldr	r5, [pc, #48]	; (8008190 <__libc_init_array+0x38>)
 800815e:	4c0d      	ldr	r4, [pc, #52]	; (8008194 <__libc_init_array+0x3c>)
 8008160:	1b64      	subs	r4, r4, r5
 8008162:	10a4      	asrs	r4, r4, #2
 8008164:	42a6      	cmp	r6, r4
 8008166:	d109      	bne.n	800817c <__libc_init_array+0x24>
 8008168:	f000 f81a 	bl	80081a0 <_init>
 800816c:	2600      	movs	r6, #0
 800816e:	4d0a      	ldr	r5, [pc, #40]	; (8008198 <__libc_init_array+0x40>)
 8008170:	4c0a      	ldr	r4, [pc, #40]	; (800819c <__libc_init_array+0x44>)
 8008172:	1b64      	subs	r4, r4, r5
 8008174:	10a4      	asrs	r4, r4, #2
 8008176:	42a6      	cmp	r6, r4
 8008178:	d105      	bne.n	8008186 <__libc_init_array+0x2e>
 800817a:	bd70      	pop	{r4, r5, r6, pc}
 800817c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008180:	4798      	blx	r3
 8008182:	3601      	adds	r6, #1
 8008184:	e7ee      	b.n	8008164 <__libc_init_array+0xc>
 8008186:	f855 3b04 	ldr.w	r3, [r5], #4
 800818a:	4798      	blx	r3
 800818c:	3601      	adds	r6, #1
 800818e:	e7f2      	b.n	8008176 <__libc_init_array+0x1e>
 8008190:	08008240 	.word	0x08008240
 8008194:	08008240 	.word	0x08008240
 8008198:	08008240 	.word	0x08008240
 800819c:	08008244 	.word	0x08008244

080081a0 <_init>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	bf00      	nop
 80081a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a6:	bc08      	pop	{r3}
 80081a8:	469e      	mov	lr, r3
 80081aa:	4770      	bx	lr

080081ac <_fini>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr
